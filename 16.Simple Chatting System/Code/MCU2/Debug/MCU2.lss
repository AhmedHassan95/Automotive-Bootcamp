
MCU2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002ede  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00002ede  00002f72  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  00800070  00800070  00002f82  2**0
                  ALLOC
  3 .stab         00002ad8  00000000  00000000  00002f84  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001918  00000000  00000000  00005a5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007374  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000074b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007624  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000926d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a158  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000af08  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b068  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b2f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000bac3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ed       	ldi	r30, 0xDE	; 222
      68:	fe e2       	ldi	r31, 0x2E	; 46
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 37       	cpi	r26, 0x70	; 112
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 e7       	ldi	r26, 0x70	; 112
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 38       	cpi	r26, 0x84	; 132
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <main>
      8a:	0c 94 6d 17 	jmp	0x2eda	; 0x2eda <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 f1 16 	jmp	0x2de2	; 0x2de2 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 0d 17 	jmp	0x2e1a	; 0x2e1a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 fd 16 	jmp	0x2dfa	; 0x2dfa <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 19 17 	jmp	0x2e32	; 0x2e32 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 fd 16 	jmp	0x2dfa	; 0x2dfa <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 19 17 	jmp	0x2e32	; 0x2e32 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 f1 16 	jmp	0x2de2	; 0x2de2 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 0d 17 	jmp	0x2e1a	; 0x2e1a <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 fd 16 	jmp	0x2dfa	; 0x2dfa <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 19 17 	jmp	0x2e32	; 0x2e32 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 fd 16 	jmp	0x2dfa	; 0x2dfa <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 19 17 	jmp	0x2e32	; 0x2e32 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 fd 16 	jmp	0x2dfa	; 0x2dfa <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 19 17 	jmp	0x2e32	; 0x2e32 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 01 17 	jmp	0x2e02	; 0x2e02 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 1d 17 	jmp	0x2e3a	; 0x2e3a <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <UART_init>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 ******************************************************************************************/
void UART_init(const UART_ConfigType * Config_Ptr)
{
     b46:	0f 93       	push	r16
     b48:	1f 93       	push	r17
     b4a:	df 93       	push	r29
     b4c:	cf 93       	push	r28
     b4e:	00 d0       	rcall	.+0      	; 0xb50 <UART_init+0xa>
     b50:	00 d0       	rcall	.+0      	; 0xb52 <UART_init+0xc>
     b52:	cd b7       	in	r28, 0x3d	; 61
     b54:	de b7       	in	r29, 0x3e	; 62
     b56:	9a 83       	std	Y+2, r25	; 0x02
     b58:	89 83       	std	Y+1, r24	; 0x01
	/* Insert the required Mode in U2X bit in UCSRA Register */
	UCSRA = (UCSRA & 0xFD) | ( (Config_Ptr -> uart_Mode) << 1);
     b5a:	ab e2       	ldi	r26, 0x2B	; 43
     b5c:	b0 e0       	ldi	r27, 0x00	; 0
     b5e:	eb e2       	ldi	r30, 0x2B	; 43
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	80 81       	ld	r24, Z
     b64:	28 2f       	mov	r18, r24
     b66:	2d 7f       	andi	r18, 0xFD	; 253
     b68:	e9 81       	ldd	r30, Y+1	; 0x01
     b6a:	fa 81       	ldd	r31, Y+2	; 0x02
     b6c:	84 81       	ldd	r24, Z+4	; 0x04
     b6e:	88 2f       	mov	r24, r24
     b70:	90 e0       	ldi	r25, 0x00	; 0
     b72:	88 0f       	add	r24, r24
     b74:	99 1f       	adc	r25, r25
     b76:	82 2b       	or	r24, r18
     b78:	8c 93       	st	X, r24

	/* In Case of Nine Bit Data */
	if(Config_Ptr -> uart_DataBits == NINE_BITS)
     b7a:	e9 81       	ldd	r30, Y+1	; 0x01
     b7c:	fa 81       	ldd	r31, Y+2	; 0x02
     b7e:	85 81       	ldd	r24, Z+5	; 0x05
     b80:	87 30       	cpi	r24, 0x07	; 7
     b82:	a1 f4       	brne	.+40     	; 0xbac <UART_init+0x66>
	{
		/* Insert the last bit of required data bits in bit UCSZ2 in UCSRB Register */
		UCSRB = (UCSRB & 0xFB) | ( (Config_Ptr -> uart_DataBits) & 0x04);
     b84:	aa e2       	ldi	r26, 0x2A	; 42
     b86:	b0 e0       	ldi	r27, 0x00	; 0
     b88:	ea e2       	ldi	r30, 0x2A	; 42
     b8a:	f0 e0       	ldi	r31, 0x00	; 0
     b8c:	80 81       	ld	r24, Z
     b8e:	98 2f       	mov	r25, r24
     b90:	9b 7f       	andi	r25, 0xFB	; 251
     b92:	e9 81       	ldd	r30, Y+1	; 0x01
     b94:	fa 81       	ldd	r31, Y+2	; 0x02
     b96:	85 81       	ldd	r24, Z+5	; 0x05
     b98:	84 70       	andi	r24, 0x04	; 4
     b9a:	89 2b       	or	r24, r25
     b9c:	8c 93       	st	X, r24

		/* Two bits RXB8 & TXB8 must be Enabled in UCSRB Register */
		UCSRB |= (1 << RXB8) | (1 << TXB8);
     b9e:	aa e2       	ldi	r26, 0x2A	; 42
     ba0:	b0 e0       	ldi	r27, 0x00	; 0
     ba2:	ea e2       	ldi	r30, 0x2A	; 42
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	80 81       	ld	r24, Z
     ba8:	83 60       	ori	r24, 0x03	; 3
     baa:	8c 93       	st	X, r24

	/*
	 * Enable Transmitter & Receiver to be able to transmit and receive thought
	 * the UART driver
	 */
	UCSRB |= (1 << RXEN) | (1 << TXEN);
     bac:	aa e2       	ldi	r26, 0x2A	; 42
     bae:	b0 e0       	ldi	r27, 0x00	; 0
     bb0:	ea e2       	ldi	r30, 0x2A	; 42
     bb2:	f0 e0       	ldi	r31, 0x00	; 0
     bb4:	80 81       	ld	r24, Z
     bb6:	88 61       	ori	r24, 0x18	; 24
     bb8:	8c 93       	st	X, r24

	/* URSEL must be one when writing the UCSRC */
	UCSRC |= (1 << URSEL);
     bba:	a0 e4       	ldi	r26, 0x40	; 64
     bbc:	b0 e0       	ldi	r27, 0x00	; 0
     bbe:	e0 e4       	ldi	r30, 0x40	; 64
     bc0:	f0 e0       	ldi	r31, 0x00	; 0
     bc2:	80 81       	ld	r24, Z
     bc4:	80 68       	ori	r24, 0x80	; 128
     bc6:	8c 93       	st	X, r24

	/*
	 * Insert the First two bits of required data bits in bits (UCSZ0, UCSZ1)
	 * in UCSRC Register in case of (5,6,7 or 8) Data bits
	 */
	UCSRC = (UCSRC & 0xF9) | ( (Config_Ptr -> uart_DataBits & 0x03) << 1);
     bc8:	a0 e4       	ldi	r26, 0x40	; 64
     bca:	b0 e0       	ldi	r27, 0x00	; 0
     bcc:	e0 e4       	ldi	r30, 0x40	; 64
     bce:	f0 e0       	ldi	r31, 0x00	; 0
     bd0:	80 81       	ld	r24, Z
     bd2:	28 2f       	mov	r18, r24
     bd4:	29 7f       	andi	r18, 0xF9	; 249
     bd6:	e9 81       	ldd	r30, Y+1	; 0x01
     bd8:	fa 81       	ldd	r31, Y+2	; 0x02
     bda:	85 81       	ldd	r24, Z+5	; 0x05
     bdc:	88 2f       	mov	r24, r24
     bde:	90 e0       	ldi	r25, 0x00	; 0
     be0:	83 70       	andi	r24, 0x03	; 3
     be2:	90 70       	andi	r25, 0x00	; 0
     be4:	88 0f       	add	r24, r24
     be6:	99 1f       	adc	r25, r25
     be8:	82 2b       	or	r24, r18
     bea:	8c 93       	st	X, r24

	/* Insert the required parity type in bits (UPM0, UPM1) in UCSRC Register */
	UCSRC = (UCSRC & 0xCF) | ( (Config_Ptr -> uart_Parity) << 4);
     bec:	a0 e4       	ldi	r26, 0x40	; 64
     bee:	b0 e0       	ldi	r27, 0x00	; 0
     bf0:	e0 e4       	ldi	r30, 0x40	; 64
     bf2:	f0 e0       	ldi	r31, 0x00	; 0
     bf4:	80 81       	ld	r24, Z
     bf6:	28 2f       	mov	r18, r24
     bf8:	2f 7c       	andi	r18, 0xCF	; 207
     bfa:	e9 81       	ldd	r30, Y+1	; 0x01
     bfc:	fa 81       	ldd	r31, Y+2	; 0x02
     bfe:	86 81       	ldd	r24, Z+6	; 0x06
     c00:	88 2f       	mov	r24, r24
     c02:	90 e0       	ldi	r25, 0x00	; 0
     c04:	82 95       	swap	r24
     c06:	92 95       	swap	r25
     c08:	90 7f       	andi	r25, 0xF0	; 240
     c0a:	98 27       	eor	r25, r24
     c0c:	80 7f       	andi	r24, 0xF0	; 240
     c0e:	98 27       	eor	r25, r24
     c10:	82 2b       	or	r24, r18
     c12:	8c 93       	st	X, r24

	/* Insert the required number of stop bit(s) in bit USBS in UCSRC Register */
	UCSRC = (UCSRC & 0xF7) | ( (Config_Ptr -> uart_StopBit) << 3);
     c14:	a0 e4       	ldi	r26, 0x40	; 64
     c16:	b0 e0       	ldi	r27, 0x00	; 0
     c18:	e0 e4       	ldi	r30, 0x40	; 64
     c1a:	f0 e0       	ldi	r31, 0x00	; 0
     c1c:	80 81       	ld	r24, Z
     c1e:	28 2f       	mov	r18, r24
     c20:	27 7f       	andi	r18, 0xF7	; 247
     c22:	e9 81       	ldd	r30, Y+1	; 0x01
     c24:	fa 81       	ldd	r31, Y+2	; 0x02
     c26:	87 81       	ldd	r24, Z+7	; 0x07
     c28:	88 2f       	mov	r24, r24
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	88 0f       	add	r24, r24
     c2e:	99 1f       	adc	r25, r25
     c30:	88 0f       	add	r24, r24
     c32:	99 1f       	adc	r25, r25
     c34:	88 0f       	add	r24, r24
     c36:	99 1f       	adc	r25, r25
     c38:	82 2b       	or	r24, r18
     c3a:	8c 93       	st	X, r24
	/*
	 * This switch case is to choose between two Modes (Normal, Double Speed),
	 * then calculate and insert the required Baud rate in First 8 bits from the
	 * BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH
	 */
	switch(Config_Ptr -> uart_Mode)
     c3c:	e9 81       	ldd	r30, Y+1	; 0x01
     c3e:	fa 81       	ldd	r31, Y+2	; 0x02
     c40:	84 81       	ldd	r24, Z+4	; 0x04
     c42:	28 2f       	mov	r18, r24
     c44:	30 e0       	ldi	r19, 0x00	; 0
     c46:	3c 83       	std	Y+4, r19	; 0x04
     c48:	2b 83       	std	Y+3, r18	; 0x03
     c4a:	8b 81       	ldd	r24, Y+3	; 0x03
     c4c:	9c 81       	ldd	r25, Y+4	; 0x04
     c4e:	00 97       	sbiw	r24, 0x00	; 0
     c50:	39 f0       	breq	.+14     	; 0xc60 <UART_init+0x11a>
     c52:	eb 81       	ldd	r30, Y+3	; 0x03
     c54:	fc 81       	ldd	r31, Y+4	; 0x04
     c56:	e1 30       	cpi	r30, 0x01	; 1
     c58:	f1 05       	cpc	r31, r1
     c5a:	09 f4       	brne	.+2      	; 0xc5e <UART_init+0x118>
     c5c:	56 c0       	rjmp	.+172    	; 0xd0a <UART_init+0x1c4>
     c5e:	a1 c0       	rjmp	.+322    	; 0xda2 <UART_init+0x25c>
	{
	case NORMAL_SPEED:	UBRRH = ( (((F_CPU / (Config_Ptr -> uart_BaudRate * 16UL))) - 1) >> 8 );
     c60:	00 e4       	ldi	r16, 0x40	; 64
     c62:	10 e0       	ldi	r17, 0x00	; 0
     c64:	e9 81       	ldd	r30, Y+1	; 0x01
     c66:	fa 81       	ldd	r31, Y+2	; 0x02
     c68:	80 81       	ld	r24, Z
     c6a:	91 81       	ldd	r25, Z+1	; 0x01
     c6c:	a2 81       	ldd	r26, Z+2	; 0x02
     c6e:	b3 81       	ldd	r27, Z+3	; 0x03
     c70:	88 0f       	add	r24, r24
     c72:	99 1f       	adc	r25, r25
     c74:	aa 1f       	adc	r26, r26
     c76:	bb 1f       	adc	r27, r27
     c78:	88 0f       	add	r24, r24
     c7a:	99 1f       	adc	r25, r25
     c7c:	aa 1f       	adc	r26, r26
     c7e:	bb 1f       	adc	r27, r27
     c80:	88 0f       	add	r24, r24
     c82:	99 1f       	adc	r25, r25
     c84:	aa 1f       	adc	r26, r26
     c86:	bb 1f       	adc	r27, r27
     c88:	88 0f       	add	r24, r24
     c8a:	99 1f       	adc	r25, r25
     c8c:	aa 1f       	adc	r26, r26
     c8e:	bb 1f       	adc	r27, r27
     c90:	9c 01       	movw	r18, r24
     c92:	ad 01       	movw	r20, r26
     c94:	80 e0       	ldi	r24, 0x00	; 0
     c96:	92 e1       	ldi	r25, 0x12	; 18
     c98:	aa e7       	ldi	r26, 0x7A	; 122
     c9a:	b0 e0       	ldi	r27, 0x00	; 0
     c9c:	bc 01       	movw	r22, r24
     c9e:	cd 01       	movw	r24, r26
     ca0:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <__udivmodsi4>
     ca4:	da 01       	movw	r26, r20
     ca6:	c9 01       	movw	r24, r18
     ca8:	01 97       	sbiw	r24, 0x01	; 1
     caa:	a1 09       	sbc	r26, r1
     cac:	b1 09       	sbc	r27, r1
     cae:	89 2f       	mov	r24, r25
     cb0:	9a 2f       	mov	r25, r26
     cb2:	ab 2f       	mov	r26, r27
     cb4:	bb 27       	eor	r27, r27
     cb6:	f8 01       	movw	r30, r16
     cb8:	80 83       	st	Z, r24
						UBRRL = ( ((F_CPU / (Config_Ptr -> uart_BaudRate * 16UL))) - 1 );
     cba:	09 e2       	ldi	r16, 0x29	; 41
     cbc:	10 e0       	ldi	r17, 0x00	; 0
     cbe:	e9 81       	ldd	r30, Y+1	; 0x01
     cc0:	fa 81       	ldd	r31, Y+2	; 0x02
     cc2:	80 81       	ld	r24, Z
     cc4:	91 81       	ldd	r25, Z+1	; 0x01
     cc6:	a2 81       	ldd	r26, Z+2	; 0x02
     cc8:	b3 81       	ldd	r27, Z+3	; 0x03
     cca:	88 0f       	add	r24, r24
     ccc:	99 1f       	adc	r25, r25
     cce:	aa 1f       	adc	r26, r26
     cd0:	bb 1f       	adc	r27, r27
     cd2:	88 0f       	add	r24, r24
     cd4:	99 1f       	adc	r25, r25
     cd6:	aa 1f       	adc	r26, r26
     cd8:	bb 1f       	adc	r27, r27
     cda:	88 0f       	add	r24, r24
     cdc:	99 1f       	adc	r25, r25
     cde:	aa 1f       	adc	r26, r26
     ce0:	bb 1f       	adc	r27, r27
     ce2:	88 0f       	add	r24, r24
     ce4:	99 1f       	adc	r25, r25
     ce6:	aa 1f       	adc	r26, r26
     ce8:	bb 1f       	adc	r27, r27
     cea:	9c 01       	movw	r18, r24
     cec:	ad 01       	movw	r20, r26
     cee:	80 e0       	ldi	r24, 0x00	; 0
     cf0:	92 e1       	ldi	r25, 0x12	; 18
     cf2:	aa e7       	ldi	r26, 0x7A	; 122
     cf4:	b0 e0       	ldi	r27, 0x00	; 0
     cf6:	bc 01       	movw	r22, r24
     cf8:	cd 01       	movw	r24, r26
     cfa:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <__udivmodsi4>
     cfe:	da 01       	movw	r26, r20
     d00:	c9 01       	movw	r24, r18
     d02:	81 50       	subi	r24, 0x01	; 1
     d04:	f8 01       	movw	r30, r16
     d06:	80 83       	st	Z, r24
     d08:	4c c0       	rjmp	.+152    	; 0xda2 <UART_init+0x25c>
						break;

	case DOUBLE_SPEED:	UBRRH = ( (((F_CPU / (Config_Ptr -> uart_BaudRate * 8UL))) - 1) >> 8 );
     d0a:	00 e4       	ldi	r16, 0x40	; 64
     d0c:	10 e0       	ldi	r17, 0x00	; 0
     d0e:	e9 81       	ldd	r30, Y+1	; 0x01
     d10:	fa 81       	ldd	r31, Y+2	; 0x02
     d12:	80 81       	ld	r24, Z
     d14:	91 81       	ldd	r25, Z+1	; 0x01
     d16:	a2 81       	ldd	r26, Z+2	; 0x02
     d18:	b3 81       	ldd	r27, Z+3	; 0x03
     d1a:	88 0f       	add	r24, r24
     d1c:	99 1f       	adc	r25, r25
     d1e:	aa 1f       	adc	r26, r26
     d20:	bb 1f       	adc	r27, r27
     d22:	88 0f       	add	r24, r24
     d24:	99 1f       	adc	r25, r25
     d26:	aa 1f       	adc	r26, r26
     d28:	bb 1f       	adc	r27, r27
     d2a:	88 0f       	add	r24, r24
     d2c:	99 1f       	adc	r25, r25
     d2e:	aa 1f       	adc	r26, r26
     d30:	bb 1f       	adc	r27, r27
     d32:	9c 01       	movw	r18, r24
     d34:	ad 01       	movw	r20, r26
     d36:	80 e0       	ldi	r24, 0x00	; 0
     d38:	92 e1       	ldi	r25, 0x12	; 18
     d3a:	aa e7       	ldi	r26, 0x7A	; 122
     d3c:	b0 e0       	ldi	r27, 0x00	; 0
     d3e:	bc 01       	movw	r22, r24
     d40:	cd 01       	movw	r24, r26
     d42:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <__udivmodsi4>
     d46:	da 01       	movw	r26, r20
     d48:	c9 01       	movw	r24, r18
     d4a:	01 97       	sbiw	r24, 0x01	; 1
     d4c:	a1 09       	sbc	r26, r1
     d4e:	b1 09       	sbc	r27, r1
     d50:	89 2f       	mov	r24, r25
     d52:	9a 2f       	mov	r25, r26
     d54:	ab 2f       	mov	r26, r27
     d56:	bb 27       	eor	r27, r27
     d58:	f8 01       	movw	r30, r16
     d5a:	80 83       	st	Z, r24
						UBRRL = ( ((F_CPU / (Config_Ptr -> uart_BaudRate * 8UL))) - 1 );
     d5c:	09 e2       	ldi	r16, 0x29	; 41
     d5e:	10 e0       	ldi	r17, 0x00	; 0
     d60:	e9 81       	ldd	r30, Y+1	; 0x01
     d62:	fa 81       	ldd	r31, Y+2	; 0x02
     d64:	80 81       	ld	r24, Z
     d66:	91 81       	ldd	r25, Z+1	; 0x01
     d68:	a2 81       	ldd	r26, Z+2	; 0x02
     d6a:	b3 81       	ldd	r27, Z+3	; 0x03
     d6c:	88 0f       	add	r24, r24
     d6e:	99 1f       	adc	r25, r25
     d70:	aa 1f       	adc	r26, r26
     d72:	bb 1f       	adc	r27, r27
     d74:	88 0f       	add	r24, r24
     d76:	99 1f       	adc	r25, r25
     d78:	aa 1f       	adc	r26, r26
     d7a:	bb 1f       	adc	r27, r27
     d7c:	88 0f       	add	r24, r24
     d7e:	99 1f       	adc	r25, r25
     d80:	aa 1f       	adc	r26, r26
     d82:	bb 1f       	adc	r27, r27
     d84:	9c 01       	movw	r18, r24
     d86:	ad 01       	movw	r20, r26
     d88:	80 e0       	ldi	r24, 0x00	; 0
     d8a:	92 e1       	ldi	r25, 0x12	; 18
     d8c:	aa e7       	ldi	r26, 0x7A	; 122
     d8e:	b0 e0       	ldi	r27, 0x00	; 0
     d90:	bc 01       	movw	r22, r24
     d92:	cd 01       	movw	r24, r26
     d94:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <__udivmodsi4>
     d98:	da 01       	movw	r26, r20
     d9a:	c9 01       	movw	r24, r18
     d9c:	81 50       	subi	r24, 0x01	; 1
     d9e:	f8 01       	movw	r30, r16
     da0:	80 83       	st	Z, r24
						break;
	}
}
     da2:	0f 90       	pop	r0
     da4:	0f 90       	pop	r0
     da6:	0f 90       	pop	r0
     da8:	0f 90       	pop	r0
     daa:	cf 91       	pop	r28
     dac:	df 91       	pop	r29
     dae:	1f 91       	pop	r17
     db0:	0f 91       	pop	r16
     db2:	08 95       	ret

00000db4 <UART_sendByte>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 ****************************************************************************************/
void UART_sendByte(const uint8_t data)
{
     db4:	df 93       	push	r29
     db6:	cf 93       	push	r28
     db8:	0f 92       	push	r0
     dba:	cd b7       	in	r28, 0x3d	; 61
     dbc:	de b7       	in	r29, 0x3e	; 62
     dbe:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the TX buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
     dc0:	eb e2       	ldi	r30, 0x2B	; 43
     dc2:	f0 e0       	ldi	r31, 0x00	; 0
     dc4:	80 81       	ld	r24, Z
     dc6:	88 2f       	mov	r24, r24
     dc8:	90 e0       	ldi	r25, 0x00	; 0
     dca:	80 72       	andi	r24, 0x20	; 32
     dcc:	90 70       	andi	r25, 0x00	; 0
     dce:	00 97       	sbiw	r24, 0x00	; 0
     dd0:	b9 f3       	breq	.-18     	; 0xdc0 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE
	 * flag as the UDR register is not empty now
	 */
	UDR = data;
     dd2:	ec e2       	ldi	r30, 0x2C	; 44
     dd4:	f0 e0       	ldi	r31, 0x00	; 0
     dd6:	89 81       	ldd	r24, Y+1	; 0x01
     dd8:	80 83       	st	Z, r24
}
     dda:	0f 90       	pop	r0
     ddc:	cf 91       	pop	r28
     dde:	df 91       	pop	r29
     de0:	08 95       	ret

00000de2 <UART_recieveByte>:
 * [in/out]		 	None
 *
 * [Returns]:       The Byte that received through the UART
 ****************************************************************************************/
uint8_t UART_recieveByte(void)
{
     de2:	df 93       	push	r29
     de4:	cf 93       	push	r28
     de6:	cd b7       	in	r28, 0x3d	; 61
     de8:	de b7       	in	r29, 0x3e	; 62
	/*
	 * RXC flag is set when the UART receive data so wait until this
	 * flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
     dea:	eb e2       	ldi	r30, 0x2B	; 43
     dec:	f0 e0       	ldi	r31, 0x00	; 0
     dee:	80 81       	ld	r24, Z
     df0:	88 23       	and	r24, r24
     df2:	dc f7       	brge	.-10     	; 0xdea <UART_recieveByte+0x8>

	/*
	 * Read the received data from the RX buffer (UDR) and the RXC flag
	 * will be cleared after read this data
	 */
	return UDR;
     df4:	ec e2       	ldi	r30, 0x2C	; 44
     df6:	f0 e0       	ldi	r31, 0x00	; 0
     df8:	80 81       	ld	r24, Z
}
     dfa:	cf 91       	pop	r28
     dfc:	df 91       	pop	r29
     dfe:	08 95       	ret

00000e00 <UART_sendString>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 ****************************************************************************************/
void UART_sendString(const uint8_t * Str)
{
     e00:	df 93       	push	r29
     e02:	cf 93       	push	r28
     e04:	00 d0       	rcall	.+0      	; 0xe06 <UART_sendString+0x6>
     e06:	0f 92       	push	r0
     e08:	cd b7       	in	r28, 0x3d	; 61
     e0a:	de b7       	in	r29, 0x3e	; 62
     e0c:	9b 83       	std	Y+3, r25	; 0x03
     e0e:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t i = 0;
     e10:	19 82       	std	Y+1, r1	; 0x01
     e12:	0e c0       	rjmp	.+28     	; 0xe30 <UART_sendString+0x30>

	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
     e14:	89 81       	ldd	r24, Y+1	; 0x01
     e16:	28 2f       	mov	r18, r24
     e18:	30 e0       	ldi	r19, 0x00	; 0
     e1a:	8a 81       	ldd	r24, Y+2	; 0x02
     e1c:	9b 81       	ldd	r25, Y+3	; 0x03
     e1e:	fc 01       	movw	r30, r24
     e20:	e2 0f       	add	r30, r18
     e22:	f3 1f       	adc	r31, r19
     e24:	80 81       	ld	r24, Z
     e26:	0e 94 da 06 	call	0xdb4	; 0xdb4 <UART_sendByte>
		i++;
     e2a:	89 81       	ldd	r24, Y+1	; 0x01
     e2c:	8f 5f       	subi	r24, 0xFF	; 255
     e2e:	89 83       	std	Y+1, r24	; 0x01
 ****************************************************************************************/
void UART_sendString(const uint8_t * Str)
{
	uint8_t i = 0;

	while(Str[i] != '\0')
     e30:	89 81       	ldd	r24, Y+1	; 0x01
     e32:	28 2f       	mov	r18, r24
     e34:	30 e0       	ldi	r19, 0x00	; 0
     e36:	8a 81       	ldd	r24, Y+2	; 0x02
     e38:	9b 81       	ldd	r25, Y+3	; 0x03
     e3a:	fc 01       	movw	r30, r24
     e3c:	e2 0f       	add	r30, r18
     e3e:	f3 1f       	adc	r31, r19
     e40:	80 81       	ld	r24, Z
     e42:	88 23       	and	r24, r24
     e44:	39 f7       	brne	.-50     	; 0xe14 <UART_sendString+0x14>
	{
		UART_sendByte(Str[i]);
		i++;
	}
}
     e46:	0f 90       	pop	r0
     e48:	0f 90       	pop	r0
     e4a:	0f 90       	pop	r0
     e4c:	cf 91       	pop	r28
     e4e:	df 91       	pop	r29
     e50:	08 95       	ret

00000e52 <UART_receiveString>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 ****************************************************************************************/
void UART_receiveString(uint8_t * Str)
{
     e52:	0f 93       	push	r16
     e54:	1f 93       	push	r17
     e56:	df 93       	push	r29
     e58:	cf 93       	push	r28
     e5a:	00 d0       	rcall	.+0      	; 0xe5c <UART_receiveString+0xa>
     e5c:	0f 92       	push	r0
     e5e:	cd b7       	in	r28, 0x3d	; 61
     e60:	de b7       	in	r29, 0x3e	; 62
     e62:	9b 83       	std	Y+3, r25	; 0x03
     e64:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t i = 0;
     e66:	19 82       	std	Y+1, r1	; 0x01

	Str[i] = UART_recieveByte();
     e68:	89 81       	ldd	r24, Y+1	; 0x01
     e6a:	28 2f       	mov	r18, r24
     e6c:	30 e0       	ldi	r19, 0x00	; 0
     e6e:	8a 81       	ldd	r24, Y+2	; 0x02
     e70:	9b 81       	ldd	r25, Y+3	; 0x03
     e72:	8c 01       	movw	r16, r24
     e74:	02 0f       	add	r16, r18
     e76:	13 1f       	adc	r17, r19
     e78:	0e 94 f1 06 	call	0xde2	; 0xde2 <UART_recieveByte>
     e7c:	f8 01       	movw	r30, r16
     e7e:	80 83       	st	Z, r24
     e80:	0f c0       	rjmp	.+30     	; 0xea0 <UART_receiveString+0x4e>
	while(Str[i] != '\r')
	{
		i++;
     e82:	89 81       	ldd	r24, Y+1	; 0x01
     e84:	8f 5f       	subi	r24, 0xFF	; 255
     e86:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
     e88:	89 81       	ldd	r24, Y+1	; 0x01
     e8a:	28 2f       	mov	r18, r24
     e8c:	30 e0       	ldi	r19, 0x00	; 0
     e8e:	8a 81       	ldd	r24, Y+2	; 0x02
     e90:	9b 81       	ldd	r25, Y+3	; 0x03
     e92:	8c 01       	movw	r16, r24
     e94:	02 0f       	add	r16, r18
     e96:	13 1f       	adc	r17, r19
     e98:	0e 94 f1 06 	call	0xde2	; 0xde2 <UART_recieveByte>
     e9c:	f8 01       	movw	r30, r16
     e9e:	80 83       	st	Z, r24
void UART_receiveString(uint8_t * Str)
{
	uint8_t i = 0;

	Str[i] = UART_recieveByte();
	while(Str[i] != '\r')
     ea0:	89 81       	ldd	r24, Y+1	; 0x01
     ea2:	28 2f       	mov	r18, r24
     ea4:	30 e0       	ldi	r19, 0x00	; 0
     ea6:	8a 81       	ldd	r24, Y+2	; 0x02
     ea8:	9b 81       	ldd	r25, Y+3	; 0x03
     eaa:	fc 01       	movw	r30, r24
     eac:	e2 0f       	add	r30, r18
     eae:	f3 1f       	adc	r31, r19
     eb0:	80 81       	ld	r24, Z
     eb2:	8d 30       	cpi	r24, 0x0D	; 13
     eb4:	31 f7       	brne	.-52     	; 0xe82 <UART_receiveString+0x30>
	{
		i++;
		Str[i] = UART_recieveByte();
	}
	Str[i] = '\r';
     eb6:	89 81       	ldd	r24, Y+1	; 0x01
     eb8:	28 2f       	mov	r18, r24
     eba:	30 e0       	ldi	r19, 0x00	; 0
     ebc:	8a 81       	ldd	r24, Y+2	; 0x02
     ebe:	9b 81       	ldd	r25, Y+3	; 0x03
     ec0:	fc 01       	movw	r30, r24
     ec2:	e2 0f       	add	r30, r18
     ec4:	f3 1f       	adc	r31, r19
     ec6:	8d e0       	ldi	r24, 0x0D	; 13
     ec8:	80 83       	st	Z, r24
	i++;
     eca:	89 81       	ldd	r24, Y+1	; 0x01
     ecc:	8f 5f       	subi	r24, 0xFF	; 255
     ece:	89 83       	std	Y+1, r24	; 0x01
	Str[i] = '\0';
     ed0:	89 81       	ldd	r24, Y+1	; 0x01
     ed2:	28 2f       	mov	r18, r24
     ed4:	30 e0       	ldi	r19, 0x00	; 0
     ed6:	8a 81       	ldd	r24, Y+2	; 0x02
     ed8:	9b 81       	ldd	r25, Y+3	; 0x03
     eda:	fc 01       	movw	r30, r24
     edc:	e2 0f       	add	r30, r18
     ede:	f3 1f       	adc	r31, r19
     ee0:	10 82       	st	Z, r1
}
     ee2:	0f 90       	pop	r0
     ee4:	0f 90       	pop	r0
     ee6:	0f 90       	pop	r0
     ee8:	cf 91       	pop	r28
     eea:	df 91       	pop	r29
     eec:	1f 91       	pop	r17
     eee:	0f 91       	pop	r16
     ef0:	08 95       	ret

00000ef2 <UART_setParityType>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 ****************************************************************************************/
void UART_setParityType(const UART_ParityType a_parityType)
{
     ef2:	df 93       	push	r29
     ef4:	cf 93       	push	r28
     ef6:	0f 92       	push	r0
     ef8:	cd b7       	in	r28, 0x3d	; 61
     efa:	de b7       	in	r29, 0x3e	; 62
     efc:	89 83       	std	Y+1, r24	; 0x01
	/* Insert the required parity type in bits (UPM0, UPM1) in UCSRC Register */
	UCSRC = (UCSRC & 0xCF) | (a_parityType << 4);
     efe:	a0 e4       	ldi	r26, 0x40	; 64
     f00:	b0 e0       	ldi	r27, 0x00	; 0
     f02:	e0 e4       	ldi	r30, 0x40	; 64
     f04:	f0 e0       	ldi	r31, 0x00	; 0
     f06:	80 81       	ld	r24, Z
     f08:	28 2f       	mov	r18, r24
     f0a:	2f 7c       	andi	r18, 0xCF	; 207
     f0c:	89 81       	ldd	r24, Y+1	; 0x01
     f0e:	88 2f       	mov	r24, r24
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	82 95       	swap	r24
     f14:	92 95       	swap	r25
     f16:	90 7f       	andi	r25, 0xF0	; 240
     f18:	98 27       	eor	r25, r24
     f1a:	80 7f       	andi	r24, 0xF0	; 240
     f1c:	98 27       	eor	r25, r24
     f1e:	82 2b       	or	r24, r18
     f20:	8c 93       	st	X, r24
}
     f22:	0f 90       	pop	r0
     f24:	cf 91       	pop	r28
     f26:	df 91       	pop	r29
     f28:	08 95       	ret

00000f2a <UART_setStopBit>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 ****************************************************************************************/
void UART_setStopBit(const UART_StopBit a_stopBit)
{
     f2a:	df 93       	push	r29
     f2c:	cf 93       	push	r28
     f2e:	0f 92       	push	r0
     f30:	cd b7       	in	r28, 0x3d	; 61
     f32:	de b7       	in	r29, 0x3e	; 62
     f34:	89 83       	std	Y+1, r24	; 0x01
	/* Insert the required number of stop bit(s) in bit USBS in UCSRC Register */
	UCSRC = (UCSRC & 0xF7) | ( a_stopBit << 3);
     f36:	a0 e4       	ldi	r26, 0x40	; 64
     f38:	b0 e0       	ldi	r27, 0x00	; 0
     f3a:	e0 e4       	ldi	r30, 0x40	; 64
     f3c:	f0 e0       	ldi	r31, 0x00	; 0
     f3e:	80 81       	ld	r24, Z
     f40:	28 2f       	mov	r18, r24
     f42:	27 7f       	andi	r18, 0xF7	; 247
     f44:	89 81       	ldd	r24, Y+1	; 0x01
     f46:	88 2f       	mov	r24, r24
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	88 0f       	add	r24, r24
     f4c:	99 1f       	adc	r25, r25
     f4e:	88 0f       	add	r24, r24
     f50:	99 1f       	adc	r25, r25
     f52:	88 0f       	add	r24, r24
     f54:	99 1f       	adc	r25, r25
     f56:	82 2b       	or	r24, r18
     f58:	8c 93       	st	X, r24
}
     f5a:	0f 90       	pop	r0
     f5c:	cf 91       	pop	r28
     f5e:	df 91       	pop	r29
     f60:	08 95       	ret

00000f62 <UART_DeInit>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 ****************************************************************************************/
void UART_DeInit(void)
{
     f62:	df 93       	push	r29
     f64:	cf 93       	push	r28
     f66:	cd b7       	in	r28, 0x3d	; 61
     f68:	de b7       	in	r29, 0x3e	; 62
	/* Reset All UART Registers to its initial value */
	UCSRA = 0x20;
     f6a:	eb e2       	ldi	r30, 0x2B	; 43
     f6c:	f0 e0       	ldi	r31, 0x00	; 0
     f6e:	80 e2       	ldi	r24, 0x20	; 32
     f70:	80 83       	st	Z, r24
	UCSRB = 0;
     f72:	ea e2       	ldi	r30, 0x2A	; 42
     f74:	f0 e0       	ldi	r31, 0x00	; 0
     f76:	10 82       	st	Z, r1
	UCSRC = 0x86;
     f78:	e0 e4       	ldi	r30, 0x40	; 64
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	86 e8       	ldi	r24, 0x86	; 134
     f7e:	80 83       	st	Z, r24

	/* Clear UART Baud Rate Registers */
	UBRRH = 0;
     f80:	e0 e4       	ldi	r30, 0x40	; 64
     f82:	f0 e0       	ldi	r31, 0x00	; 0
     f84:	10 82       	st	Z, r1
	UBRRL = 0;
     f86:	e9 e2       	ldi	r30, 0x29	; 41
     f88:	f0 e0       	ldi	r31, 0x00	; 0
     f8a:	10 82       	st	Z, r1
}
     f8c:	cf 91       	pop	r28
     f8e:	df 91       	pop	r29
     f90:	08 95       	ret

00000f92 <SPI_initMaster>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void SPI_initMaster(void) 
{
     f92:	df 93       	push	r29
     f94:	cf 93       	push	r28
     f96:	cd b7       	in	r28, 0x3d	; 61
     f98:	de b7       	in	r29, 0x3e	; 62
	 * SS(PB4)   --> Output
	 * MOSI(PB5) --> Output 
	 * MISO(PB6) --> Input
	 * SCK(PB7)  --> Output
	 ********************************************/
	DIO_setPinDirection(DIO_PORTB, PIN_4, OUTPUT);
     f9a:	81 e0       	ldi	r24, 0x01	; 1
     f9c:	64 e0       	ldi	r22, 0x04	; 4
     f9e:	41 e0       	ldi	r20, 0x01	; 1
     fa0:	0e 94 25 09 	call	0x124a	; 0x124a <DIO_setPinDirection>
	DIO_setPinDirection(DIO_PORTB, PIN_5, OUTPUT);
     fa4:	81 e0       	ldi	r24, 0x01	; 1
     fa6:	65 e0       	ldi	r22, 0x05	; 5
     fa8:	41 e0       	ldi	r20, 0x01	; 1
     faa:	0e 94 25 09 	call	0x124a	; 0x124a <DIO_setPinDirection>
	DIO_setPinDirection(DIO_PORTB, PIN_6, INPUT);
     fae:	81 e0       	ldi	r24, 0x01	; 1
     fb0:	66 e0       	ldi	r22, 0x06	; 6
     fb2:	40 e0       	ldi	r20, 0x00	; 0
     fb4:	0e 94 25 09 	call	0x124a	; 0x124a <DIO_setPinDirection>
	DIO_setPinDirection(DIO_PORTB, PIN_7, OUTPUT);
     fb8:	81 e0       	ldi	r24, 0x01	; 1
     fba:	67 e0       	ldi	r22, 0x07	; 7
     fbc:	41 e0       	ldi	r20, 0x01	; 1
     fbe:	0e 94 25 09 	call	0x124a	; 0x124a <DIO_setPinDirection>
	
	SPCR = (1<<SPE) | (1<<MSTR); /* Enable SPI + Enable Master + Choose SPI clock = Fosc/4 */
     fc2:	ed e2       	ldi	r30, 0x2D	; 45
     fc4:	f0 e0       	ldi	r31, 0x00	; 0
     fc6:	80 e5       	ldi	r24, 0x50	; 80
     fc8:	80 83       	st	Z, r24
}
     fca:	cf 91       	pop	r28
     fcc:	df 91       	pop	r29
     fce:	08 95       	ret

00000fd0 <SPI_initSlave>:

void SPI_initSlave(void)
{ 
     fd0:	df 93       	push	r29
     fd2:	cf 93       	push	r28
     fd4:	cd b7       	in	r28, 0x3d	; 61
     fd6:	de b7       	in	r29, 0x3e	; 62
	 * SS(PB4)   --> Input
	 * MOSI(PB5) --> Input
	 * MISO(PB6) --> Output
	 * SCK(PB7)  --> Input
	 ********************************************/
	DIO_setPinDirection(DIO_PORTB, PIN_4, INPUT);
     fd8:	81 e0       	ldi	r24, 0x01	; 1
     fda:	64 e0       	ldi	r22, 0x04	; 4
     fdc:	40 e0       	ldi	r20, 0x00	; 0
     fde:	0e 94 25 09 	call	0x124a	; 0x124a <DIO_setPinDirection>
	DIO_setPinDirection(DIO_PORTB, PIN_5, INPUT);
     fe2:	81 e0       	ldi	r24, 0x01	; 1
     fe4:	65 e0       	ldi	r22, 0x05	; 5
     fe6:	40 e0       	ldi	r20, 0x00	; 0
     fe8:	0e 94 25 09 	call	0x124a	; 0x124a <DIO_setPinDirection>
	DIO_setPinDirection(DIO_PORTB, PIN_6, OUTPUT);
     fec:	81 e0       	ldi	r24, 0x01	; 1
     fee:	66 e0       	ldi	r22, 0x06	; 6
     ff0:	41 e0       	ldi	r20, 0x01	; 1
     ff2:	0e 94 25 09 	call	0x124a	; 0x124a <DIO_setPinDirection>
	DIO_setPinDirection(DIO_PORTB, PIN_7, INPUT);
     ff6:	81 e0       	ldi	r24, 0x01	; 1
     ff8:	67 e0       	ldi	r22, 0x07	; 7
     ffa:	40 e0       	ldi	r20, 0x00	; 0
     ffc:	0e 94 25 09 	call	0x124a	; 0x124a <DIO_setPinDirection>

	SPCR = (1<<SPE); /* Just enable SPI + Choose SPI clock = Fosc/4 */
    1000:	ed e2       	ldi	r30, 0x2D	; 45
    1002:	f0 e0       	ldi	r31, 0x00	; 0
    1004:	80 e4       	ldi	r24, 0x40	; 64
    1006:	80 83       	st	Z, r24
}
    1008:	cf 91       	pop	r28
    100a:	df 91       	pop	r29
    100c:	08 95       	ret

0000100e <SPI_sendByte>:

void SPI_sendByte(const uint8_t au8_data)
{
    100e:	df 93       	push	r29
    1010:	cf 93       	push	r28
    1012:	0f 92       	push	r0
    1014:	cd b7       	in	r28, 0x3d	; 61
    1016:	de b7       	in	r29, 0x3e	; 62
    1018:	89 83       	std	Y+1, r24	; 0x01
	SPDR = au8_data; /* Send data by SPI */
    101a:	ef e2       	ldi	r30, 0x2F	; 47
    101c:	f0 e0       	ldi	r31, 0x00	; 0
    101e:	89 81       	ldd	r24, Y+1	; 0x01
    1020:	80 83       	st	Z, r24
	while(BIT_IS_CLEAR(SPSR,SPIF)){} /* Wait until SPI interrupt flag=1 (data is sent correctly) */
    1022:	ee e2       	ldi	r30, 0x2E	; 46
    1024:	f0 e0       	ldi	r31, 0x00	; 0
    1026:	80 81       	ld	r24, Z
    1028:	88 23       	and	r24, r24
    102a:	dc f7       	brge	.-10     	; 0x1022 <SPI_sendByte+0x14>
}
    102c:	0f 90       	pop	r0
    102e:	cf 91       	pop	r28
    1030:	df 91       	pop	r29
    1032:	08 95       	ret

00001034 <SPI_receiveByte>:

uint8_t SPI_receiveByte(void)
{
    1034:	df 93       	push	r29
    1036:	cf 93       	push	r28
    1038:	cd b7       	in	r28, 0x3d	; 61
    103a:	de b7       	in	r29, 0x3e	; 62
   while(BIT_IS_CLEAR(SPSR,SPIF)){} /* Wait until SPI interrupt flag=1(data is receive correctly) */
    103c:	ee e2       	ldi	r30, 0x2E	; 46
    103e:	f0 e0       	ldi	r31, 0x00	; 0
    1040:	80 81       	ld	r24, Z
    1042:	88 23       	and	r24, r24
    1044:	dc f7       	brge	.-10     	; 0x103c <SPI_receiveByte+0x8>
   return SPDR; /* Return the received byte from SPI data register */
    1046:	ef e2       	ldi	r30, 0x2F	; 47
    1048:	f0 e0       	ldi	r31, 0x00	; 0
    104a:	80 81       	ld	r24, Z
}
    104c:	cf 91       	pop	r28
    104e:	df 91       	pop	r29
    1050:	08 95       	ret

00001052 <SPI_sendString>:

void SPI_sendString(const uint8_t * gStr_message)
{
    1052:	df 93       	push	r29
    1054:	cf 93       	push	r28
    1056:	00 d0       	rcall	.+0      	; 0x1058 <SPI_sendString+0x6>
    1058:	0f 92       	push	r0
    105a:	cd b7       	in	r28, 0x3d	; 61
    105c:	de b7       	in	r29, 0x3e	; 62
    105e:	9b 83       	std	Y+3, r25	; 0x03
    1060:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t i = 0;
    1062:	19 82       	std	Y+1, r1	; 0x01
    1064:	0e c0       	rjmp	.+28     	; 0x1082 <SPI_sendString+0x30>

	while(gStr_message[i] != '\0')
	{
		SPI_sendByte(gStr_message[i]);
    1066:	89 81       	ldd	r24, Y+1	; 0x01
    1068:	28 2f       	mov	r18, r24
    106a:	30 e0       	ldi	r19, 0x00	; 0
    106c:	8a 81       	ldd	r24, Y+2	; 0x02
    106e:	9b 81       	ldd	r25, Y+3	; 0x03
    1070:	fc 01       	movw	r30, r24
    1072:	e2 0f       	add	r30, r18
    1074:	f3 1f       	adc	r31, r19
    1076:	80 81       	ld	r24, Z
    1078:	0e 94 07 08 	call	0x100e	; 0x100e <SPI_sendByte>
		i++;
    107c:	89 81       	ldd	r24, Y+1	; 0x01
    107e:	8f 5f       	subi	r24, 0xFF	; 255
    1080:	89 83       	std	Y+1, r24	; 0x01

void SPI_sendString(const uint8_t * gStr_message)
{
	uint8_t i = 0;

	while(gStr_message[i] != '\0')
    1082:	89 81       	ldd	r24, Y+1	; 0x01
    1084:	28 2f       	mov	r18, r24
    1086:	30 e0       	ldi	r19, 0x00	; 0
    1088:	8a 81       	ldd	r24, Y+2	; 0x02
    108a:	9b 81       	ldd	r25, Y+3	; 0x03
    108c:	fc 01       	movw	r30, r24
    108e:	e2 0f       	add	r30, r18
    1090:	f3 1f       	adc	r31, r19
    1092:	80 81       	ld	r24, Z
    1094:	88 23       	and	r24, r24
    1096:	39 f7       	brne	.-50     	; 0x1066 <SPI_sendString+0x14>
	{
		SPI_sendByte(gStr_message[i]);
		i++;
	}
}
    1098:	0f 90       	pop	r0
    109a:	0f 90       	pop	r0
    109c:	0f 90       	pop	r0
    109e:	cf 91       	pop	r28
    10a0:	df 91       	pop	r29
    10a2:	08 95       	ret

000010a4 <SPI_receiveString>:

void SPI_receiveString(uint8_t * gStr_message)
{
    10a4:	0f 93       	push	r16
    10a6:	1f 93       	push	r17
    10a8:	df 93       	push	r29
    10aa:	cf 93       	push	r28
    10ac:	00 d0       	rcall	.+0      	; 0x10ae <SPI_receiveString+0xa>
    10ae:	0f 92       	push	r0
    10b0:	cd b7       	in	r28, 0x3d	; 61
    10b2:	de b7       	in	r29, 0x3e	; 62
    10b4:	9b 83       	std	Y+3, r25	; 0x03
    10b6:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t i = 0;
    10b8:	19 82       	std	Y+1, r1	; 0x01

	gStr_message[i] = SPI_receiveByte();
    10ba:	89 81       	ldd	r24, Y+1	; 0x01
    10bc:	28 2f       	mov	r18, r24
    10be:	30 e0       	ldi	r19, 0x00	; 0
    10c0:	8a 81       	ldd	r24, Y+2	; 0x02
    10c2:	9b 81       	ldd	r25, Y+3	; 0x03
    10c4:	8c 01       	movw	r16, r24
    10c6:	02 0f       	add	r16, r18
    10c8:	13 1f       	adc	r17, r19
    10ca:	0e 94 1a 08 	call	0x1034	; 0x1034 <SPI_receiveByte>
    10ce:	f8 01       	movw	r30, r16
    10d0:	80 83       	st	Z, r24
    10d2:	0f c0       	rjmp	.+30     	; 0x10f2 <SPI_receiveString+0x4e>
	while(gStr_message[i] != '\r')
	{
		i++;
    10d4:	89 81       	ldd	r24, Y+1	; 0x01
    10d6:	8f 5f       	subi	r24, 0xFF	; 255
    10d8:	89 83       	std	Y+1, r24	; 0x01
		gStr_message[i] = SPI_receiveByte();
    10da:	89 81       	ldd	r24, Y+1	; 0x01
    10dc:	28 2f       	mov	r18, r24
    10de:	30 e0       	ldi	r19, 0x00	; 0
    10e0:	8a 81       	ldd	r24, Y+2	; 0x02
    10e2:	9b 81       	ldd	r25, Y+3	; 0x03
    10e4:	8c 01       	movw	r16, r24
    10e6:	02 0f       	add	r16, r18
    10e8:	13 1f       	adc	r17, r19
    10ea:	0e 94 1a 08 	call	0x1034	; 0x1034 <SPI_receiveByte>
    10ee:	f8 01       	movw	r30, r16
    10f0:	80 83       	st	Z, r24
void SPI_receiveString(uint8_t * gStr_message)
{
	uint8_t i = 0;

	gStr_message[i] = SPI_receiveByte();
	while(gStr_message[i] != '\r')
    10f2:	89 81       	ldd	r24, Y+1	; 0x01
    10f4:	28 2f       	mov	r18, r24
    10f6:	30 e0       	ldi	r19, 0x00	; 0
    10f8:	8a 81       	ldd	r24, Y+2	; 0x02
    10fa:	9b 81       	ldd	r25, Y+3	; 0x03
    10fc:	fc 01       	movw	r30, r24
    10fe:	e2 0f       	add	r30, r18
    1100:	f3 1f       	adc	r31, r19
    1102:	80 81       	ld	r24, Z
    1104:	8d 30       	cpi	r24, 0x0D	; 13
    1106:	31 f7       	brne	.-52     	; 0x10d4 <SPI_receiveString+0x30>
	{
		i++;
		gStr_message[i] = SPI_receiveByte();
	}
	gStr_message[i] = '\0';
    1108:	89 81       	ldd	r24, Y+1	; 0x01
    110a:	28 2f       	mov	r18, r24
    110c:	30 e0       	ldi	r19, 0x00	; 0
    110e:	8a 81       	ldd	r24, Y+2	; 0x02
    1110:	9b 81       	ldd	r25, Y+3	; 0x03
    1112:	fc 01       	movw	r30, r24
    1114:	e2 0f       	add	r30, r18
    1116:	f3 1f       	adc	r31, r19
    1118:	10 82       	st	Z, r1
}
    111a:	0f 90       	pop	r0
    111c:	0f 90       	pop	r0
    111e:	0f 90       	pop	r0
    1120:	cf 91       	pop	r28
    1122:	df 91       	pop	r29
    1124:	1f 91       	pop	r17
    1126:	0f 91       	pop	r16
    1128:	08 95       	ret

0000112a <DIO_setPortDirection>:
 * [in/out]		 	None
 *
 * [Returns]:       Error state
 ******************************************************************************/
enuDIO_E_STATE_t DIO_setPortDirection(enuDIO_PortId_t enu_portID, enuDIO_DirectionType_t enu_portDirection)
{
    112a:	df 93       	push	r29
    112c:	cf 93       	push	r28
    112e:	cd b7       	in	r28, 0x3d	; 61
    1130:	de b7       	in	r29, 0x3e	; 62
    1132:	27 97       	sbiw	r28, 0x07	; 7
    1134:	0f b6       	in	r0, 0x3f	; 63
    1136:	f8 94       	cli
    1138:	de bf       	out	0x3e, r29	; 62
    113a:	0f be       	out	0x3f, r0	; 63
    113c:	cd bf       	out	0x3d, r28	; 61
    113e:	8a 83       	std	Y+2, r24	; 0x02
    1140:	6b 83       	std	Y+3, r22	; 0x03
	enuDIO_E_STATE_t enu_ErrorState = E_NOT_OK;
    1142:	81 e0       	ldi	r24, 0x01	; 1
    1144:	89 83       	std	Y+1, r24	; 0x01

	/* Check if the PORT is input or output */
    if(enu_portDirection == HIGH)
    1146:	8b 81       	ldd	r24, Y+3	; 0x03
    1148:	81 30       	cpi	r24, 0x01	; 1
    114a:	d1 f5       	brne	.+116    	; 0x11c0 <DIO_setPortDirection+0x96>
    {
    	switch (enu_portID)
    114c:	8a 81       	ldd	r24, Y+2	; 0x02
    114e:	28 2f       	mov	r18, r24
    1150:	30 e0       	ldi	r19, 0x00	; 0
    1152:	3f 83       	std	Y+7, r19	; 0x07
    1154:	2e 83       	std	Y+6, r18	; 0x06
    1156:	8e 81       	ldd	r24, Y+6	; 0x06
    1158:	9f 81       	ldd	r25, Y+7	; 0x07
    115a:	81 30       	cpi	r24, 0x01	; 1
    115c:	91 05       	cpc	r25, r1
    115e:	d9 f0       	breq	.+54     	; 0x1196 <DIO_setPortDirection+0x6c>
    1160:	2e 81       	ldd	r18, Y+6	; 0x06
    1162:	3f 81       	ldd	r19, Y+7	; 0x07
    1164:	22 30       	cpi	r18, 0x02	; 2
    1166:	31 05       	cpc	r19, r1
    1168:	2c f4       	brge	.+10     	; 0x1174 <DIO_setPortDirection+0x4a>
    116a:	8e 81       	ldd	r24, Y+6	; 0x06
    116c:	9f 81       	ldd	r25, Y+7	; 0x07
    116e:	00 97       	sbiw	r24, 0x00	; 0
    1170:	61 f0       	breq	.+24     	; 0x118a <DIO_setPortDirection+0x60>
    1172:	23 c0       	rjmp	.+70     	; 0x11ba <DIO_setPortDirection+0x90>
    1174:	2e 81       	ldd	r18, Y+6	; 0x06
    1176:	3f 81       	ldd	r19, Y+7	; 0x07
    1178:	22 30       	cpi	r18, 0x02	; 2
    117a:	31 05       	cpc	r19, r1
    117c:	91 f0       	breq	.+36     	; 0x11a2 <DIO_setPortDirection+0x78>
    117e:	8e 81       	ldd	r24, Y+6	; 0x06
    1180:	9f 81       	ldd	r25, Y+7	; 0x07
    1182:	83 30       	cpi	r24, 0x03	; 3
    1184:	91 05       	cpc	r25, r1
    1186:	99 f0       	breq	.+38     	; 0x11ae <DIO_setPortDirection+0x84>
    1188:	18 c0       	rjmp	.+48     	; 0x11ba <DIO_setPortDirection+0x90>
		{
		case DIO_PORTA:
			DDRA_DIR_R = OUTPUT_PORT;
    118a:	ea e3       	ldi	r30, 0x3A	; 58
    118c:	f0 e0       	ldi	r31, 0x00	; 0
    118e:	8f ef       	ldi	r24, 0xFF	; 255
    1190:	80 83       	st	Z, r24
			enu_ErrorState = DIO_E_PARAM_VALID;
    1192:	19 82       	std	Y+1, r1	; 0x01
    1194:	50 c0       	rjmp	.+160    	; 0x1236 <DIO_setPortDirection+0x10c>
			break;
		case DIO_PORTB:
			DDRB_DIR_R = OUTPUT_PORT;
    1196:	e7 e3       	ldi	r30, 0x37	; 55
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	8f ef       	ldi	r24, 0xFF	; 255
    119c:	80 83       	st	Z, r24
			enu_ErrorState = DIO_E_PARAM_VALID;
    119e:	19 82       	std	Y+1, r1	; 0x01
    11a0:	4a c0       	rjmp	.+148    	; 0x1236 <DIO_setPortDirection+0x10c>
			break;
		case DIO_PORTC:
			DDRC_DIR_R = OUTPUT_PORT;
    11a2:	e4 e3       	ldi	r30, 0x34	; 52
    11a4:	f0 e0       	ldi	r31, 0x00	; 0
    11a6:	8f ef       	ldi	r24, 0xFF	; 255
    11a8:	80 83       	st	Z, r24
			enu_ErrorState = DIO_E_PARAM_VALID;
    11aa:	19 82       	std	Y+1, r1	; 0x01
    11ac:	44 c0       	rjmp	.+136    	; 0x1236 <DIO_setPortDirection+0x10c>
			break;
		case DIO_PORTD:
			DDRD_DIR_R = OUTPUT_PORT;
    11ae:	e1 e3       	ldi	r30, 0x31	; 49
    11b0:	f0 e0       	ldi	r31, 0x00	; 0
    11b2:	8f ef       	ldi	r24, 0xFF	; 255
    11b4:	80 83       	st	Z, r24
			enu_ErrorState = DIO_E_PARAM_VALID;
    11b6:	19 82       	std	Y+1, r1	; 0x01
    11b8:	3e c0       	rjmp	.+124    	; 0x1236 <DIO_setPortDirection+0x10c>
			break;
		default:
			enu_ErrorState = DIO_E_PARAM_INVALID_PORT_ID;
    11ba:	81 e0       	ldi	r24, 0x01	; 1
    11bc:	89 83       	std	Y+1, r24	; 0x01
    11be:	3b c0       	rjmp	.+118    	; 0x1236 <DIO_setPortDirection+0x10c>
			break;
		}
    }
    else if(enu_portDirection == LOW)
    11c0:	8b 81       	ldd	r24, Y+3	; 0x03
    11c2:	88 23       	and	r24, r24
    11c4:	b1 f5       	brne	.+108    	; 0x1232 <DIO_setPortDirection+0x108>
    {
		switch (enu_portID)
    11c6:	8a 81       	ldd	r24, Y+2	; 0x02
    11c8:	28 2f       	mov	r18, r24
    11ca:	30 e0       	ldi	r19, 0x00	; 0
    11cc:	3d 83       	std	Y+5, r19	; 0x05
    11ce:	2c 83       	std	Y+4, r18	; 0x04
    11d0:	8c 81       	ldd	r24, Y+4	; 0x04
    11d2:	9d 81       	ldd	r25, Y+5	; 0x05
    11d4:	81 30       	cpi	r24, 0x01	; 1
    11d6:	91 05       	cpc	r25, r1
    11d8:	d1 f0       	breq	.+52     	; 0x120e <DIO_setPortDirection+0xe4>
    11da:	2c 81       	ldd	r18, Y+4	; 0x04
    11dc:	3d 81       	ldd	r19, Y+5	; 0x05
    11de:	22 30       	cpi	r18, 0x02	; 2
    11e0:	31 05       	cpc	r19, r1
    11e2:	2c f4       	brge	.+10     	; 0x11ee <DIO_setPortDirection+0xc4>
    11e4:	8c 81       	ldd	r24, Y+4	; 0x04
    11e6:	9d 81       	ldd	r25, Y+5	; 0x05
    11e8:	00 97       	sbiw	r24, 0x00	; 0
    11ea:	61 f0       	breq	.+24     	; 0x1204 <DIO_setPortDirection+0xda>
    11ec:	1f c0       	rjmp	.+62     	; 0x122c <DIO_setPortDirection+0x102>
    11ee:	2c 81       	ldd	r18, Y+4	; 0x04
    11f0:	3d 81       	ldd	r19, Y+5	; 0x05
    11f2:	22 30       	cpi	r18, 0x02	; 2
    11f4:	31 05       	cpc	r19, r1
    11f6:	81 f0       	breq	.+32     	; 0x1218 <DIO_setPortDirection+0xee>
    11f8:	8c 81       	ldd	r24, Y+4	; 0x04
    11fa:	9d 81       	ldd	r25, Y+5	; 0x05
    11fc:	83 30       	cpi	r24, 0x03	; 3
    11fe:	91 05       	cpc	r25, r1
    1200:	81 f0       	breq	.+32     	; 0x1222 <DIO_setPortDirection+0xf8>
    1202:	14 c0       	rjmp	.+40     	; 0x122c <DIO_setPortDirection+0x102>
		{
		case DIO_PORTA:
			DDRA_DIR_R = INPUT_PORT;
    1204:	ea e3       	ldi	r30, 0x3A	; 58
    1206:	f0 e0       	ldi	r31, 0x00	; 0
    1208:	10 82       	st	Z, r1
			enu_ErrorState = DIO_E_PARAM_VALID;
    120a:	19 82       	std	Y+1, r1	; 0x01
    120c:	14 c0       	rjmp	.+40     	; 0x1236 <DIO_setPortDirection+0x10c>
			break;
		case DIO_PORTB:
			DDRB_DIR_R = INPUT_PORT;
    120e:	e7 e3       	ldi	r30, 0x37	; 55
    1210:	f0 e0       	ldi	r31, 0x00	; 0
    1212:	10 82       	st	Z, r1
			enu_ErrorState = DIO_E_PARAM_VALID;
    1214:	19 82       	std	Y+1, r1	; 0x01
    1216:	0f c0       	rjmp	.+30     	; 0x1236 <DIO_setPortDirection+0x10c>
			break;
		case DIO_PORTC:
			DDRC_DIR_R = INPUT_PORT;
    1218:	e4 e3       	ldi	r30, 0x34	; 52
    121a:	f0 e0       	ldi	r31, 0x00	; 0
    121c:	10 82       	st	Z, r1
			enu_ErrorState = DIO_E_PARAM_VALID;
    121e:	19 82       	std	Y+1, r1	; 0x01
    1220:	0a c0       	rjmp	.+20     	; 0x1236 <DIO_setPortDirection+0x10c>
			break;
		case DIO_PORTD:
			DDRD_DIR_R = INPUT_PORT;
    1222:	e1 e3       	ldi	r30, 0x31	; 49
    1224:	f0 e0       	ldi	r31, 0x00	; 0
    1226:	10 82       	st	Z, r1
			enu_ErrorState = DIO_E_PARAM_VALID;
    1228:	19 82       	std	Y+1, r1	; 0x01
    122a:	05 c0       	rjmp	.+10     	; 0x1236 <DIO_setPortDirection+0x10c>
			break;
		default:
			enu_ErrorState = DIO_E_PARAM_INVALID_PORT_ID;
    122c:	81 e0       	ldi	r24, 0x01	; 1
    122e:	89 83       	std	Y+1, r24	; 0x01
    1230:	02 c0       	rjmp	.+4      	; 0x1236 <DIO_setPortDirection+0x10c>
			break;
		}
    }
    else
    {
    	enu_ErrorState = DIO_E_PARAM_INVALID_PORT_DIR;	/* Invalid port direction */
    1232:	84 e0       	ldi	r24, 0x04	; 4
    1234:	89 83       	std	Y+1, r24	; 0x01
    }
    return enu_ErrorState;
    1236:	89 81       	ldd	r24, Y+1	; 0x01
}
    1238:	27 96       	adiw	r28, 0x07	; 7
    123a:	0f b6       	in	r0, 0x3f	; 63
    123c:	f8 94       	cli
    123e:	de bf       	out	0x3e, r29	; 62
    1240:	0f be       	out	0x3f, r0	; 63
    1242:	cd bf       	out	0x3d, r28	; 61
    1244:	cf 91       	pop	r28
    1246:	df 91       	pop	r29
    1248:	08 95       	ret

0000124a <DIO_setPinDirection>:
 *
 * [Returns]:       Error State
 ******************************************************************************/
enuDIO_E_STATE_t DIO_setPinDirection(enuDIO_PortId_t enu_portID , enuDIO_PinId_t enu_pinID,
								     enuDIO_DirectionType_t enu_pinDirection)
{
    124a:	df 93       	push	r29
    124c:	cf 93       	push	r28
    124e:	cd b7       	in	r28, 0x3d	; 61
    1250:	de b7       	in	r29, 0x3e	; 62
    1252:	28 97       	sbiw	r28, 0x08	; 8
    1254:	0f b6       	in	r0, 0x3f	; 63
    1256:	f8 94       	cli
    1258:	de bf       	out	0x3e, r29	; 62
    125a:	0f be       	out	0x3f, r0	; 63
    125c:	cd bf       	out	0x3d, r28	; 61
    125e:	8a 83       	std	Y+2, r24	; 0x02
    1260:	6b 83       	std	Y+3, r22	; 0x03
    1262:	4c 83       	std	Y+4, r20	; 0x04
	enuDIO_E_STATE_t enu_ErrorState = E_NOT_OK;
    1264:	81 e0       	ldi	r24, 0x01	; 1
    1266:	89 83       	std	Y+1, r24	; 0x01

	/* Check if the pin id is one of the existed pin or not */
	if ((enu_pinID >= PIN_0) && (enu_pinID <= PIN_7))
    1268:	8b 81       	ldd	r24, Y+3	; 0x03
    126a:	88 30       	cpi	r24, 0x08	; 8
    126c:	08 f0       	brcs	.+2      	; 0x1270 <DIO_setPinDirection+0x26>
    126e:	fd c0       	rjmp	.+506    	; 0x146a <DIO_setPinDirection+0x220>
	{
		if (enu_pinDirection == OUTPUT)
    1270:	8c 81       	ldd	r24, Y+4	; 0x04
    1272:	81 30       	cpi	r24, 0x01	; 1
    1274:	09 f0       	breq	.+2      	; 0x1278 <DIO_setPinDirection+0x2e>
    1276:	77 c0       	rjmp	.+238    	; 0x1366 <DIO_setPinDirection+0x11c>
		{
			switch (enu_portID)
    1278:	8a 81       	ldd	r24, Y+2	; 0x02
    127a:	28 2f       	mov	r18, r24
    127c:	30 e0       	ldi	r19, 0x00	; 0
    127e:	38 87       	std	Y+8, r19	; 0x08
    1280:	2f 83       	std	Y+7, r18	; 0x07
    1282:	8f 81       	ldd	r24, Y+7	; 0x07
    1284:	98 85       	ldd	r25, Y+8	; 0x08
    1286:	81 30       	cpi	r24, 0x01	; 1
    1288:	91 05       	cpc	r25, r1
    128a:	59 f1       	breq	.+86     	; 0x12e2 <DIO_setPinDirection+0x98>
    128c:	2f 81       	ldd	r18, Y+7	; 0x07
    128e:	38 85       	ldd	r19, Y+8	; 0x08
    1290:	22 30       	cpi	r18, 0x02	; 2
    1292:	31 05       	cpc	r19, r1
    1294:	2c f4       	brge	.+10     	; 0x12a0 <DIO_setPinDirection+0x56>
    1296:	8f 81       	ldd	r24, Y+7	; 0x07
    1298:	98 85       	ldd	r25, Y+8	; 0x08
    129a:	00 97       	sbiw	r24, 0x00	; 0
    129c:	69 f0       	breq	.+26     	; 0x12b8 <DIO_setPinDirection+0x6e>
    129e:	60 c0       	rjmp	.+192    	; 0x1360 <DIO_setPinDirection+0x116>
    12a0:	2f 81       	ldd	r18, Y+7	; 0x07
    12a2:	38 85       	ldd	r19, Y+8	; 0x08
    12a4:	22 30       	cpi	r18, 0x02	; 2
    12a6:	31 05       	cpc	r19, r1
    12a8:	89 f1       	breq	.+98     	; 0x130c <DIO_setPinDirection+0xc2>
    12aa:	8f 81       	ldd	r24, Y+7	; 0x07
    12ac:	98 85       	ldd	r25, Y+8	; 0x08
    12ae:	83 30       	cpi	r24, 0x03	; 3
    12b0:	91 05       	cpc	r25, r1
    12b2:	09 f4       	brne	.+2      	; 0x12b6 <DIO_setPinDirection+0x6c>
    12b4:	40 c0       	rjmp	.+128    	; 0x1336 <DIO_setPinDirection+0xec>
    12b6:	54 c0       	rjmp	.+168    	; 0x1360 <DIO_setPinDirection+0x116>
			{
			case DIO_PORTA:
				SET_BIT(DDRA_DIR_R, enu_pinID);
    12b8:	aa e3       	ldi	r26, 0x3A	; 58
    12ba:	b0 e0       	ldi	r27, 0x00	; 0
    12bc:	ea e3       	ldi	r30, 0x3A	; 58
    12be:	f0 e0       	ldi	r31, 0x00	; 0
    12c0:	80 81       	ld	r24, Z
    12c2:	48 2f       	mov	r20, r24
    12c4:	8b 81       	ldd	r24, Y+3	; 0x03
    12c6:	28 2f       	mov	r18, r24
    12c8:	30 e0       	ldi	r19, 0x00	; 0
    12ca:	81 e0       	ldi	r24, 0x01	; 1
    12cc:	90 e0       	ldi	r25, 0x00	; 0
    12ce:	02 2e       	mov	r0, r18
    12d0:	02 c0       	rjmp	.+4      	; 0x12d6 <DIO_setPinDirection+0x8c>
    12d2:	88 0f       	add	r24, r24
    12d4:	99 1f       	adc	r25, r25
    12d6:	0a 94       	dec	r0
    12d8:	e2 f7       	brpl	.-8      	; 0x12d2 <DIO_setPinDirection+0x88>
    12da:	84 2b       	or	r24, r20
    12dc:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
    12de:	19 82       	std	Y+1, r1	; 0x01
    12e0:	c6 c0       	rjmp	.+396    	; 0x146e <DIO_setPinDirection+0x224>
				break;
			case DIO_PORTB:
				SET_BIT(DDRB_DIR_R, enu_pinID);
    12e2:	a7 e3       	ldi	r26, 0x37	; 55
    12e4:	b0 e0       	ldi	r27, 0x00	; 0
    12e6:	e7 e3       	ldi	r30, 0x37	; 55
    12e8:	f0 e0       	ldi	r31, 0x00	; 0
    12ea:	80 81       	ld	r24, Z
    12ec:	48 2f       	mov	r20, r24
    12ee:	8b 81       	ldd	r24, Y+3	; 0x03
    12f0:	28 2f       	mov	r18, r24
    12f2:	30 e0       	ldi	r19, 0x00	; 0
    12f4:	81 e0       	ldi	r24, 0x01	; 1
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	02 2e       	mov	r0, r18
    12fa:	02 c0       	rjmp	.+4      	; 0x1300 <DIO_setPinDirection+0xb6>
    12fc:	88 0f       	add	r24, r24
    12fe:	99 1f       	adc	r25, r25
    1300:	0a 94       	dec	r0
    1302:	e2 f7       	brpl	.-8      	; 0x12fc <DIO_setPinDirection+0xb2>
    1304:	84 2b       	or	r24, r20
    1306:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
    1308:	19 82       	std	Y+1, r1	; 0x01
    130a:	b1 c0       	rjmp	.+354    	; 0x146e <DIO_setPinDirection+0x224>
				break;
			case DIO_PORTC:
				SET_BIT(DDRC_DIR_R, enu_pinID);
    130c:	a4 e3       	ldi	r26, 0x34	; 52
    130e:	b0 e0       	ldi	r27, 0x00	; 0
    1310:	e4 e3       	ldi	r30, 0x34	; 52
    1312:	f0 e0       	ldi	r31, 0x00	; 0
    1314:	80 81       	ld	r24, Z
    1316:	48 2f       	mov	r20, r24
    1318:	8b 81       	ldd	r24, Y+3	; 0x03
    131a:	28 2f       	mov	r18, r24
    131c:	30 e0       	ldi	r19, 0x00	; 0
    131e:	81 e0       	ldi	r24, 0x01	; 1
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	02 2e       	mov	r0, r18
    1324:	02 c0       	rjmp	.+4      	; 0x132a <DIO_setPinDirection+0xe0>
    1326:	88 0f       	add	r24, r24
    1328:	99 1f       	adc	r25, r25
    132a:	0a 94       	dec	r0
    132c:	e2 f7       	brpl	.-8      	; 0x1326 <DIO_setPinDirection+0xdc>
    132e:	84 2b       	or	r24, r20
    1330:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
    1332:	19 82       	std	Y+1, r1	; 0x01
    1334:	9c c0       	rjmp	.+312    	; 0x146e <DIO_setPinDirection+0x224>
				break;
			case DIO_PORTD:
				SET_BIT(DDRD_DIR_R, enu_pinID);
    1336:	a1 e3       	ldi	r26, 0x31	; 49
    1338:	b0 e0       	ldi	r27, 0x00	; 0
    133a:	e1 e3       	ldi	r30, 0x31	; 49
    133c:	f0 e0       	ldi	r31, 0x00	; 0
    133e:	80 81       	ld	r24, Z
    1340:	48 2f       	mov	r20, r24
    1342:	8b 81       	ldd	r24, Y+3	; 0x03
    1344:	28 2f       	mov	r18, r24
    1346:	30 e0       	ldi	r19, 0x00	; 0
    1348:	81 e0       	ldi	r24, 0x01	; 1
    134a:	90 e0       	ldi	r25, 0x00	; 0
    134c:	02 2e       	mov	r0, r18
    134e:	02 c0       	rjmp	.+4      	; 0x1354 <DIO_setPinDirection+0x10a>
    1350:	88 0f       	add	r24, r24
    1352:	99 1f       	adc	r25, r25
    1354:	0a 94       	dec	r0
    1356:	e2 f7       	brpl	.-8      	; 0x1350 <DIO_setPinDirection+0x106>
    1358:	84 2b       	or	r24, r20
    135a:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
    135c:	19 82       	std	Y+1, r1	; 0x01
    135e:	87 c0       	rjmp	.+270    	; 0x146e <DIO_setPinDirection+0x224>
				break;
            default:
            	enu_ErrorState = DIO_E_PARAM_INVALID_PORT_ID;	/* Invalid port id */
    1360:	81 e0       	ldi	r24, 0x01	; 1
    1362:	89 83       	std	Y+1, r24	; 0x01
    1364:	84 c0       	rjmp	.+264    	; 0x146e <DIO_setPinDirection+0x224>
                break;
			}
		}
		else if (enu_pinDirection == INPUT)
    1366:	8c 81       	ldd	r24, Y+4	; 0x04
    1368:	88 23       	and	r24, r24
    136a:	09 f0       	breq	.+2      	; 0x136e <DIO_setPinDirection+0x124>
    136c:	7b c0       	rjmp	.+246    	; 0x1464 <DIO_setPinDirection+0x21a>
		{
			switch (enu_portID)
    136e:	8a 81       	ldd	r24, Y+2	; 0x02
    1370:	28 2f       	mov	r18, r24
    1372:	30 e0       	ldi	r19, 0x00	; 0
    1374:	3e 83       	std	Y+6, r19	; 0x06
    1376:	2d 83       	std	Y+5, r18	; 0x05
    1378:	8d 81       	ldd	r24, Y+5	; 0x05
    137a:	9e 81       	ldd	r25, Y+6	; 0x06
    137c:	81 30       	cpi	r24, 0x01	; 1
    137e:	91 05       	cpc	r25, r1
    1380:	61 f1       	breq	.+88     	; 0x13da <DIO_setPinDirection+0x190>
    1382:	2d 81       	ldd	r18, Y+5	; 0x05
    1384:	3e 81       	ldd	r19, Y+6	; 0x06
    1386:	22 30       	cpi	r18, 0x02	; 2
    1388:	31 05       	cpc	r19, r1
    138a:	2c f4       	brge	.+10     	; 0x1396 <DIO_setPinDirection+0x14c>
    138c:	8d 81       	ldd	r24, Y+5	; 0x05
    138e:	9e 81       	ldd	r25, Y+6	; 0x06
    1390:	00 97       	sbiw	r24, 0x00	; 0
    1392:	69 f0       	breq	.+26     	; 0x13ae <DIO_setPinDirection+0x164>
    1394:	64 c0       	rjmp	.+200    	; 0x145e <DIO_setPinDirection+0x214>
    1396:	2d 81       	ldd	r18, Y+5	; 0x05
    1398:	3e 81       	ldd	r19, Y+6	; 0x06
    139a:	22 30       	cpi	r18, 0x02	; 2
    139c:	31 05       	cpc	r19, r1
    139e:	99 f1       	breq	.+102    	; 0x1406 <DIO_setPinDirection+0x1bc>
    13a0:	8d 81       	ldd	r24, Y+5	; 0x05
    13a2:	9e 81       	ldd	r25, Y+6	; 0x06
    13a4:	83 30       	cpi	r24, 0x03	; 3
    13a6:	91 05       	cpc	r25, r1
    13a8:	09 f4       	brne	.+2      	; 0x13ac <DIO_setPinDirection+0x162>
    13aa:	43 c0       	rjmp	.+134    	; 0x1432 <DIO_setPinDirection+0x1e8>
    13ac:	58 c0       	rjmp	.+176    	; 0x145e <DIO_setPinDirection+0x214>
			{
			case DIO_PORTA:
				CLEAR_BIT(DDRA_DIR_R, enu_pinID);
    13ae:	aa e3       	ldi	r26, 0x3A	; 58
    13b0:	b0 e0       	ldi	r27, 0x00	; 0
    13b2:	ea e3       	ldi	r30, 0x3A	; 58
    13b4:	f0 e0       	ldi	r31, 0x00	; 0
    13b6:	80 81       	ld	r24, Z
    13b8:	48 2f       	mov	r20, r24
    13ba:	8b 81       	ldd	r24, Y+3	; 0x03
    13bc:	28 2f       	mov	r18, r24
    13be:	30 e0       	ldi	r19, 0x00	; 0
    13c0:	81 e0       	ldi	r24, 0x01	; 1
    13c2:	90 e0       	ldi	r25, 0x00	; 0
    13c4:	02 2e       	mov	r0, r18
    13c6:	02 c0       	rjmp	.+4      	; 0x13cc <DIO_setPinDirection+0x182>
    13c8:	88 0f       	add	r24, r24
    13ca:	99 1f       	adc	r25, r25
    13cc:	0a 94       	dec	r0
    13ce:	e2 f7       	brpl	.-8      	; 0x13c8 <DIO_setPinDirection+0x17e>
    13d0:	80 95       	com	r24
    13d2:	84 23       	and	r24, r20
    13d4:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
    13d6:	19 82       	std	Y+1, r1	; 0x01
    13d8:	4a c0       	rjmp	.+148    	; 0x146e <DIO_setPinDirection+0x224>
				break;
			case DIO_PORTB:
				CLEAR_BIT(DDRB_DIR_R, enu_pinID);
    13da:	a7 e3       	ldi	r26, 0x37	; 55
    13dc:	b0 e0       	ldi	r27, 0x00	; 0
    13de:	e7 e3       	ldi	r30, 0x37	; 55
    13e0:	f0 e0       	ldi	r31, 0x00	; 0
    13e2:	80 81       	ld	r24, Z
    13e4:	48 2f       	mov	r20, r24
    13e6:	8b 81       	ldd	r24, Y+3	; 0x03
    13e8:	28 2f       	mov	r18, r24
    13ea:	30 e0       	ldi	r19, 0x00	; 0
    13ec:	81 e0       	ldi	r24, 0x01	; 1
    13ee:	90 e0       	ldi	r25, 0x00	; 0
    13f0:	02 2e       	mov	r0, r18
    13f2:	02 c0       	rjmp	.+4      	; 0x13f8 <DIO_setPinDirection+0x1ae>
    13f4:	88 0f       	add	r24, r24
    13f6:	99 1f       	adc	r25, r25
    13f8:	0a 94       	dec	r0
    13fa:	e2 f7       	brpl	.-8      	; 0x13f4 <DIO_setPinDirection+0x1aa>
    13fc:	80 95       	com	r24
    13fe:	84 23       	and	r24, r20
    1400:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
    1402:	19 82       	std	Y+1, r1	; 0x01
    1404:	34 c0       	rjmp	.+104    	; 0x146e <DIO_setPinDirection+0x224>
				break;
			case DIO_PORTC:
				CLEAR_BIT(DDRC_DIR_R, enu_pinID);
    1406:	a4 e3       	ldi	r26, 0x34	; 52
    1408:	b0 e0       	ldi	r27, 0x00	; 0
    140a:	e4 e3       	ldi	r30, 0x34	; 52
    140c:	f0 e0       	ldi	r31, 0x00	; 0
    140e:	80 81       	ld	r24, Z
    1410:	48 2f       	mov	r20, r24
    1412:	8b 81       	ldd	r24, Y+3	; 0x03
    1414:	28 2f       	mov	r18, r24
    1416:	30 e0       	ldi	r19, 0x00	; 0
    1418:	81 e0       	ldi	r24, 0x01	; 1
    141a:	90 e0       	ldi	r25, 0x00	; 0
    141c:	02 2e       	mov	r0, r18
    141e:	02 c0       	rjmp	.+4      	; 0x1424 <DIO_setPinDirection+0x1da>
    1420:	88 0f       	add	r24, r24
    1422:	99 1f       	adc	r25, r25
    1424:	0a 94       	dec	r0
    1426:	e2 f7       	brpl	.-8      	; 0x1420 <DIO_setPinDirection+0x1d6>
    1428:	80 95       	com	r24
    142a:	84 23       	and	r24, r20
    142c:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
    142e:	19 82       	std	Y+1, r1	; 0x01
    1430:	1e c0       	rjmp	.+60     	; 0x146e <DIO_setPinDirection+0x224>
				break;
			case DIO_PORTD:
				CLEAR_BIT(DDRD_DIR_R, enu_pinID);
    1432:	a1 e3       	ldi	r26, 0x31	; 49
    1434:	b0 e0       	ldi	r27, 0x00	; 0
    1436:	e1 e3       	ldi	r30, 0x31	; 49
    1438:	f0 e0       	ldi	r31, 0x00	; 0
    143a:	80 81       	ld	r24, Z
    143c:	48 2f       	mov	r20, r24
    143e:	8b 81       	ldd	r24, Y+3	; 0x03
    1440:	28 2f       	mov	r18, r24
    1442:	30 e0       	ldi	r19, 0x00	; 0
    1444:	81 e0       	ldi	r24, 0x01	; 1
    1446:	90 e0       	ldi	r25, 0x00	; 0
    1448:	02 2e       	mov	r0, r18
    144a:	02 c0       	rjmp	.+4      	; 0x1450 <DIO_setPinDirection+0x206>
    144c:	88 0f       	add	r24, r24
    144e:	99 1f       	adc	r25, r25
    1450:	0a 94       	dec	r0
    1452:	e2 f7       	brpl	.-8      	; 0x144c <DIO_setPinDirection+0x202>
    1454:	80 95       	com	r24
    1456:	84 23       	and	r24, r20
    1458:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
    145a:	19 82       	std	Y+1, r1	; 0x01
    145c:	08 c0       	rjmp	.+16     	; 0x146e <DIO_setPinDirection+0x224>
				break;
            default:
            	enu_ErrorState = DIO_E_PARAM_INVALID_PORT_ID;	/* Invalid port id */
    145e:	81 e0       	ldi	r24, 0x01	; 1
    1460:	89 83       	std	Y+1, r24	; 0x01
    1462:	05 c0       	rjmp	.+10     	; 0x146e <DIO_setPinDirection+0x224>
                break;
			}
		}
		else
		{
			enu_ErrorState = DIO_E_PARAM_INVALID_PORT_DIR;	/* Invalid port direction */
    1464:	84 e0       	ldi	r24, 0x04	; 4
    1466:	89 83       	std	Y+1, r24	; 0x01
    1468:	02 c0       	rjmp	.+4      	; 0x146e <DIO_setPinDirection+0x224>
		}
	}
	else
	{
		enu_ErrorState = DIO_E_PARAM_INVALID_PIN_ID;	/* Invalid pin id */
    146a:	82 e0       	ldi	r24, 0x02	; 2
    146c:	89 83       	std	Y+1, r24	; 0x01
	}
	return enu_ErrorState;
    146e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1470:	28 96       	adiw	r28, 0x08	; 8
    1472:	0f b6       	in	r0, 0x3f	; 63
    1474:	f8 94       	cli
    1476:	de bf       	out	0x3e, r29	; 62
    1478:	0f be       	out	0x3f, r0	; 63
    147a:	cd bf       	out	0x3d, r28	; 61
    147c:	cf 91       	pop	r28
    147e:	df 91       	pop	r29
    1480:	08 95       	ret

00001482 <DIO_writePort>:
 * [in/out]		 	None
 *
 * [Returns]:       Error State
 ******************************************************************************/
enuDIO_E_STATE_t DIO_writePort(enuDIO_PortId_t enu_portID, uint8_t au8_portValue)
{
    1482:	df 93       	push	r29
    1484:	cf 93       	push	r28
    1486:	00 d0       	rcall	.+0      	; 0x1488 <DIO_writePort+0x6>
    1488:	00 d0       	rcall	.+0      	; 0x148a <DIO_writePort+0x8>
    148a:	0f 92       	push	r0
    148c:	cd b7       	in	r28, 0x3d	; 61
    148e:	de b7       	in	r29, 0x3e	; 62
    1490:	8a 83       	std	Y+2, r24	; 0x02
    1492:	6b 83       	std	Y+3, r22	; 0x03
	enuDIO_E_STATE_t enu_ErrorState = E_NOT_OK;
    1494:	81 e0       	ldi	r24, 0x01	; 1
    1496:	89 83       	std	Y+1, r24	; 0x01

    switch (enu_portID)
    1498:	8a 81       	ldd	r24, Y+2	; 0x02
    149a:	28 2f       	mov	r18, r24
    149c:	30 e0       	ldi	r19, 0x00	; 0
    149e:	3d 83       	std	Y+5, r19	; 0x05
    14a0:	2c 83       	std	Y+4, r18	; 0x04
    14a2:	8c 81       	ldd	r24, Y+4	; 0x04
    14a4:	9d 81       	ldd	r25, Y+5	; 0x05
    14a6:	81 30       	cpi	r24, 0x01	; 1
    14a8:	91 05       	cpc	r25, r1
    14aa:	d9 f0       	breq	.+54     	; 0x14e2 <DIO_writePort+0x60>
    14ac:	2c 81       	ldd	r18, Y+4	; 0x04
    14ae:	3d 81       	ldd	r19, Y+5	; 0x05
    14b0:	22 30       	cpi	r18, 0x02	; 2
    14b2:	31 05       	cpc	r19, r1
    14b4:	2c f4       	brge	.+10     	; 0x14c0 <DIO_writePort+0x3e>
    14b6:	8c 81       	ldd	r24, Y+4	; 0x04
    14b8:	9d 81       	ldd	r25, Y+5	; 0x05
    14ba:	00 97       	sbiw	r24, 0x00	; 0
    14bc:	61 f0       	breq	.+24     	; 0x14d6 <DIO_writePort+0x54>
    14be:	23 c0       	rjmp	.+70     	; 0x1506 <DIO_writePort+0x84>
    14c0:	2c 81       	ldd	r18, Y+4	; 0x04
    14c2:	3d 81       	ldd	r19, Y+5	; 0x05
    14c4:	22 30       	cpi	r18, 0x02	; 2
    14c6:	31 05       	cpc	r19, r1
    14c8:	91 f0       	breq	.+36     	; 0x14ee <DIO_writePort+0x6c>
    14ca:	8c 81       	ldd	r24, Y+4	; 0x04
    14cc:	9d 81       	ldd	r25, Y+5	; 0x05
    14ce:	83 30       	cpi	r24, 0x03	; 3
    14d0:	91 05       	cpc	r25, r1
    14d2:	99 f0       	breq	.+38     	; 0x14fa <DIO_writePort+0x78>
    14d4:	18 c0       	rjmp	.+48     	; 0x1506 <DIO_writePort+0x84>
    {
    case DIO_PORTA:
        PORTA_DATA_R = au8_portValue;
    14d6:	eb e3       	ldi	r30, 0x3B	; 59
    14d8:	f0 e0       	ldi	r31, 0x00	; 0
    14da:	8b 81       	ldd	r24, Y+3	; 0x03
    14dc:	80 83       	st	Z, r24
        enu_ErrorState = DIO_E_PARAM_VALID;
    14de:	19 82       	std	Y+1, r1	; 0x01
    14e0:	14 c0       	rjmp	.+40     	; 0x150a <DIO_writePort+0x88>
        break;
    case DIO_PORTB:
        PORTB_DATA_R = au8_portValue;
    14e2:	e8 e3       	ldi	r30, 0x38	; 56
    14e4:	f0 e0       	ldi	r31, 0x00	; 0
    14e6:	8b 81       	ldd	r24, Y+3	; 0x03
    14e8:	80 83       	st	Z, r24
        enu_ErrorState = DIO_E_PARAM_VALID;
    14ea:	19 82       	std	Y+1, r1	; 0x01
    14ec:	0e c0       	rjmp	.+28     	; 0x150a <DIO_writePort+0x88>
        break;
    case DIO_PORTC:
        PORTC_DATA_R = au8_portValue;
    14ee:	e5 e3       	ldi	r30, 0x35	; 53
    14f0:	f0 e0       	ldi	r31, 0x00	; 0
    14f2:	8b 81       	ldd	r24, Y+3	; 0x03
    14f4:	80 83       	st	Z, r24
        enu_ErrorState = DIO_E_PARAM_VALID;
    14f6:	19 82       	std	Y+1, r1	; 0x01
    14f8:	08 c0       	rjmp	.+16     	; 0x150a <DIO_writePort+0x88>
        break;
    case DIO_PORTD:
        PORTD_DATA_R = au8_portValue;
    14fa:	e2 e3       	ldi	r30, 0x32	; 50
    14fc:	f0 e0       	ldi	r31, 0x00	; 0
    14fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1500:	80 83       	st	Z, r24
        enu_ErrorState = DIO_E_PARAM_VALID;
    1502:	19 82       	std	Y+1, r1	; 0x01
    1504:	02 c0       	rjmp	.+4      	; 0x150a <DIO_writePort+0x88>
        break;
    default:
    	enu_ErrorState = DIO_E_PARAM_INVALID_PORT_ID;	/* Invalid port id */
    1506:	81 e0       	ldi	r24, 0x01	; 1
    1508:	89 83       	std	Y+1, r24	; 0x01
        break;
    }
    return enu_ErrorState;
    150a:	89 81       	ldd	r24, Y+1	; 0x01
}
    150c:	0f 90       	pop	r0
    150e:	0f 90       	pop	r0
    1510:	0f 90       	pop	r0
    1512:	0f 90       	pop	r0
    1514:	0f 90       	pop	r0
    1516:	cf 91       	pop	r28
    1518:	df 91       	pop	r29
    151a:	08 95       	ret

0000151c <DIO_writePin>:
 * [in/out]		 	None
 *
 * [Returns]:       Error State
 ******************************************************************************/
enuDIO_E_STATE_t DIO_writePin(enuDIO_PortId_t enu_portID, enuDIO_PinId_t enu_pinID, uint8_t au8_pinValue)
{
    151c:	df 93       	push	r29
    151e:	cf 93       	push	r28
    1520:	cd b7       	in	r28, 0x3d	; 61
    1522:	de b7       	in	r29, 0x3e	; 62
    1524:	28 97       	sbiw	r28, 0x08	; 8
    1526:	0f b6       	in	r0, 0x3f	; 63
    1528:	f8 94       	cli
    152a:	de bf       	out	0x3e, r29	; 62
    152c:	0f be       	out	0x3f, r0	; 63
    152e:	cd bf       	out	0x3d, r28	; 61
    1530:	8a 83       	std	Y+2, r24	; 0x02
    1532:	6b 83       	std	Y+3, r22	; 0x03
    1534:	4c 83       	std	Y+4, r20	; 0x04
	enuDIO_E_STATE_t enu_ErrorState = E_NOT_OK;
    1536:	81 e0       	ldi	r24, 0x01	; 1
    1538:	89 83       	std	Y+1, r24	; 0x01

	/* Check if the pin id is one of the existed pin or not */
	if ((enu_pinID >= PIN_0) && (enu_pinID <= PIN_7))
    153a:	8b 81       	ldd	r24, Y+3	; 0x03
    153c:	88 30       	cpi	r24, 0x08	; 8
    153e:	08 f0       	brcs	.+2      	; 0x1542 <DIO_writePin+0x26>
    1540:	fd c0       	rjmp	.+506    	; 0x173c <DIO_writePin+0x220>
	{
		if (au8_pinValue == HIGH)
    1542:	8c 81       	ldd	r24, Y+4	; 0x04
    1544:	81 30       	cpi	r24, 0x01	; 1
    1546:	09 f0       	breq	.+2      	; 0x154a <DIO_writePin+0x2e>
    1548:	77 c0       	rjmp	.+238    	; 0x1638 <DIO_writePin+0x11c>
		{
			switch (enu_portID)
    154a:	8a 81       	ldd	r24, Y+2	; 0x02
    154c:	28 2f       	mov	r18, r24
    154e:	30 e0       	ldi	r19, 0x00	; 0
    1550:	38 87       	std	Y+8, r19	; 0x08
    1552:	2f 83       	std	Y+7, r18	; 0x07
    1554:	8f 81       	ldd	r24, Y+7	; 0x07
    1556:	98 85       	ldd	r25, Y+8	; 0x08
    1558:	81 30       	cpi	r24, 0x01	; 1
    155a:	91 05       	cpc	r25, r1
    155c:	59 f1       	breq	.+86     	; 0x15b4 <DIO_writePin+0x98>
    155e:	2f 81       	ldd	r18, Y+7	; 0x07
    1560:	38 85       	ldd	r19, Y+8	; 0x08
    1562:	22 30       	cpi	r18, 0x02	; 2
    1564:	31 05       	cpc	r19, r1
    1566:	2c f4       	brge	.+10     	; 0x1572 <DIO_writePin+0x56>
    1568:	8f 81       	ldd	r24, Y+7	; 0x07
    156a:	98 85       	ldd	r25, Y+8	; 0x08
    156c:	00 97       	sbiw	r24, 0x00	; 0
    156e:	69 f0       	breq	.+26     	; 0x158a <DIO_writePin+0x6e>
    1570:	60 c0       	rjmp	.+192    	; 0x1632 <DIO_writePin+0x116>
    1572:	2f 81       	ldd	r18, Y+7	; 0x07
    1574:	38 85       	ldd	r19, Y+8	; 0x08
    1576:	22 30       	cpi	r18, 0x02	; 2
    1578:	31 05       	cpc	r19, r1
    157a:	89 f1       	breq	.+98     	; 0x15de <DIO_writePin+0xc2>
    157c:	8f 81       	ldd	r24, Y+7	; 0x07
    157e:	98 85       	ldd	r25, Y+8	; 0x08
    1580:	83 30       	cpi	r24, 0x03	; 3
    1582:	91 05       	cpc	r25, r1
    1584:	09 f4       	brne	.+2      	; 0x1588 <DIO_writePin+0x6c>
    1586:	40 c0       	rjmp	.+128    	; 0x1608 <DIO_writePin+0xec>
    1588:	54 c0       	rjmp	.+168    	; 0x1632 <DIO_writePin+0x116>
			{
			case DIO_PORTA:
				SET_BIT(PORTA_DATA_R, enu_pinID);
    158a:	ab e3       	ldi	r26, 0x3B	; 59
    158c:	b0 e0       	ldi	r27, 0x00	; 0
    158e:	eb e3       	ldi	r30, 0x3B	; 59
    1590:	f0 e0       	ldi	r31, 0x00	; 0
    1592:	80 81       	ld	r24, Z
    1594:	48 2f       	mov	r20, r24
    1596:	8b 81       	ldd	r24, Y+3	; 0x03
    1598:	28 2f       	mov	r18, r24
    159a:	30 e0       	ldi	r19, 0x00	; 0
    159c:	81 e0       	ldi	r24, 0x01	; 1
    159e:	90 e0       	ldi	r25, 0x00	; 0
    15a0:	02 2e       	mov	r0, r18
    15a2:	02 c0       	rjmp	.+4      	; 0x15a8 <DIO_writePin+0x8c>
    15a4:	88 0f       	add	r24, r24
    15a6:	99 1f       	adc	r25, r25
    15a8:	0a 94       	dec	r0
    15aa:	e2 f7       	brpl	.-8      	; 0x15a4 <DIO_writePin+0x88>
    15ac:	84 2b       	or	r24, r20
    15ae:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
    15b0:	19 82       	std	Y+1, r1	; 0x01
    15b2:	c6 c0       	rjmp	.+396    	; 0x1740 <DIO_writePin+0x224>
				break;
			case DIO_PORTB:
				SET_BIT(PORTB_DATA_R, enu_pinID);
    15b4:	a8 e3       	ldi	r26, 0x38	; 56
    15b6:	b0 e0       	ldi	r27, 0x00	; 0
    15b8:	e8 e3       	ldi	r30, 0x38	; 56
    15ba:	f0 e0       	ldi	r31, 0x00	; 0
    15bc:	80 81       	ld	r24, Z
    15be:	48 2f       	mov	r20, r24
    15c0:	8b 81       	ldd	r24, Y+3	; 0x03
    15c2:	28 2f       	mov	r18, r24
    15c4:	30 e0       	ldi	r19, 0x00	; 0
    15c6:	81 e0       	ldi	r24, 0x01	; 1
    15c8:	90 e0       	ldi	r25, 0x00	; 0
    15ca:	02 2e       	mov	r0, r18
    15cc:	02 c0       	rjmp	.+4      	; 0x15d2 <DIO_writePin+0xb6>
    15ce:	88 0f       	add	r24, r24
    15d0:	99 1f       	adc	r25, r25
    15d2:	0a 94       	dec	r0
    15d4:	e2 f7       	brpl	.-8      	; 0x15ce <DIO_writePin+0xb2>
    15d6:	84 2b       	or	r24, r20
    15d8:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
    15da:	19 82       	std	Y+1, r1	; 0x01
    15dc:	b1 c0       	rjmp	.+354    	; 0x1740 <DIO_writePin+0x224>
				break;
			case DIO_PORTC:
				SET_BIT(PORTC_DATA_R, enu_pinID);
    15de:	a5 e3       	ldi	r26, 0x35	; 53
    15e0:	b0 e0       	ldi	r27, 0x00	; 0
    15e2:	e5 e3       	ldi	r30, 0x35	; 53
    15e4:	f0 e0       	ldi	r31, 0x00	; 0
    15e6:	80 81       	ld	r24, Z
    15e8:	48 2f       	mov	r20, r24
    15ea:	8b 81       	ldd	r24, Y+3	; 0x03
    15ec:	28 2f       	mov	r18, r24
    15ee:	30 e0       	ldi	r19, 0x00	; 0
    15f0:	81 e0       	ldi	r24, 0x01	; 1
    15f2:	90 e0       	ldi	r25, 0x00	; 0
    15f4:	02 2e       	mov	r0, r18
    15f6:	02 c0       	rjmp	.+4      	; 0x15fc <DIO_writePin+0xe0>
    15f8:	88 0f       	add	r24, r24
    15fa:	99 1f       	adc	r25, r25
    15fc:	0a 94       	dec	r0
    15fe:	e2 f7       	brpl	.-8      	; 0x15f8 <DIO_writePin+0xdc>
    1600:	84 2b       	or	r24, r20
    1602:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
    1604:	19 82       	std	Y+1, r1	; 0x01
    1606:	9c c0       	rjmp	.+312    	; 0x1740 <DIO_writePin+0x224>
				break;
			case DIO_PORTD:
				SET_BIT(PORTD_DATA_R, enu_pinID);
    1608:	a2 e3       	ldi	r26, 0x32	; 50
    160a:	b0 e0       	ldi	r27, 0x00	; 0
    160c:	e2 e3       	ldi	r30, 0x32	; 50
    160e:	f0 e0       	ldi	r31, 0x00	; 0
    1610:	80 81       	ld	r24, Z
    1612:	48 2f       	mov	r20, r24
    1614:	8b 81       	ldd	r24, Y+3	; 0x03
    1616:	28 2f       	mov	r18, r24
    1618:	30 e0       	ldi	r19, 0x00	; 0
    161a:	81 e0       	ldi	r24, 0x01	; 1
    161c:	90 e0       	ldi	r25, 0x00	; 0
    161e:	02 2e       	mov	r0, r18
    1620:	02 c0       	rjmp	.+4      	; 0x1626 <DIO_writePin+0x10a>
    1622:	88 0f       	add	r24, r24
    1624:	99 1f       	adc	r25, r25
    1626:	0a 94       	dec	r0
    1628:	e2 f7       	brpl	.-8      	; 0x1622 <DIO_writePin+0x106>
    162a:	84 2b       	or	r24, r20
    162c:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
    162e:	19 82       	std	Y+1, r1	; 0x01
    1630:	87 c0       	rjmp	.+270    	; 0x1740 <DIO_writePin+0x224>
				break;
            default:
            	enu_ErrorState = DIO_E_PARAM_INVALID_PORT_ID;	/* Invalid port id */
    1632:	81 e0       	ldi	r24, 0x01	; 1
    1634:	89 83       	std	Y+1, r24	; 0x01
    1636:	84 c0       	rjmp	.+264    	; 0x1740 <DIO_writePin+0x224>
                break;
			}
		}
		else if (au8_pinValue == LOW)
    1638:	8c 81       	ldd	r24, Y+4	; 0x04
    163a:	88 23       	and	r24, r24
    163c:	09 f0       	breq	.+2      	; 0x1640 <DIO_writePin+0x124>
    163e:	7b c0       	rjmp	.+246    	; 0x1736 <DIO_writePin+0x21a>
		{
			switch (enu_portID)
    1640:	8a 81       	ldd	r24, Y+2	; 0x02
    1642:	28 2f       	mov	r18, r24
    1644:	30 e0       	ldi	r19, 0x00	; 0
    1646:	3e 83       	std	Y+6, r19	; 0x06
    1648:	2d 83       	std	Y+5, r18	; 0x05
    164a:	8d 81       	ldd	r24, Y+5	; 0x05
    164c:	9e 81       	ldd	r25, Y+6	; 0x06
    164e:	81 30       	cpi	r24, 0x01	; 1
    1650:	91 05       	cpc	r25, r1
    1652:	61 f1       	breq	.+88     	; 0x16ac <DIO_writePin+0x190>
    1654:	2d 81       	ldd	r18, Y+5	; 0x05
    1656:	3e 81       	ldd	r19, Y+6	; 0x06
    1658:	22 30       	cpi	r18, 0x02	; 2
    165a:	31 05       	cpc	r19, r1
    165c:	2c f4       	brge	.+10     	; 0x1668 <DIO_writePin+0x14c>
    165e:	8d 81       	ldd	r24, Y+5	; 0x05
    1660:	9e 81       	ldd	r25, Y+6	; 0x06
    1662:	00 97       	sbiw	r24, 0x00	; 0
    1664:	69 f0       	breq	.+26     	; 0x1680 <DIO_writePin+0x164>
    1666:	64 c0       	rjmp	.+200    	; 0x1730 <DIO_writePin+0x214>
    1668:	2d 81       	ldd	r18, Y+5	; 0x05
    166a:	3e 81       	ldd	r19, Y+6	; 0x06
    166c:	22 30       	cpi	r18, 0x02	; 2
    166e:	31 05       	cpc	r19, r1
    1670:	99 f1       	breq	.+102    	; 0x16d8 <DIO_writePin+0x1bc>
    1672:	8d 81       	ldd	r24, Y+5	; 0x05
    1674:	9e 81       	ldd	r25, Y+6	; 0x06
    1676:	83 30       	cpi	r24, 0x03	; 3
    1678:	91 05       	cpc	r25, r1
    167a:	09 f4       	brne	.+2      	; 0x167e <DIO_writePin+0x162>
    167c:	43 c0       	rjmp	.+134    	; 0x1704 <DIO_writePin+0x1e8>
    167e:	58 c0       	rjmp	.+176    	; 0x1730 <DIO_writePin+0x214>
			{
			case DIO_PORTA:
				CLEAR_BIT(PORTA_DATA_R, enu_pinID);
    1680:	ab e3       	ldi	r26, 0x3B	; 59
    1682:	b0 e0       	ldi	r27, 0x00	; 0
    1684:	eb e3       	ldi	r30, 0x3B	; 59
    1686:	f0 e0       	ldi	r31, 0x00	; 0
    1688:	80 81       	ld	r24, Z
    168a:	48 2f       	mov	r20, r24
    168c:	8b 81       	ldd	r24, Y+3	; 0x03
    168e:	28 2f       	mov	r18, r24
    1690:	30 e0       	ldi	r19, 0x00	; 0
    1692:	81 e0       	ldi	r24, 0x01	; 1
    1694:	90 e0       	ldi	r25, 0x00	; 0
    1696:	02 2e       	mov	r0, r18
    1698:	02 c0       	rjmp	.+4      	; 0x169e <DIO_writePin+0x182>
    169a:	88 0f       	add	r24, r24
    169c:	99 1f       	adc	r25, r25
    169e:	0a 94       	dec	r0
    16a0:	e2 f7       	brpl	.-8      	; 0x169a <DIO_writePin+0x17e>
    16a2:	80 95       	com	r24
    16a4:	84 23       	and	r24, r20
    16a6:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
    16a8:	19 82       	std	Y+1, r1	; 0x01
    16aa:	4a c0       	rjmp	.+148    	; 0x1740 <DIO_writePin+0x224>
				break;
			case DIO_PORTB:
				CLEAR_BIT(PORTB_DATA_R, enu_pinID);
    16ac:	a8 e3       	ldi	r26, 0x38	; 56
    16ae:	b0 e0       	ldi	r27, 0x00	; 0
    16b0:	e8 e3       	ldi	r30, 0x38	; 56
    16b2:	f0 e0       	ldi	r31, 0x00	; 0
    16b4:	80 81       	ld	r24, Z
    16b6:	48 2f       	mov	r20, r24
    16b8:	8b 81       	ldd	r24, Y+3	; 0x03
    16ba:	28 2f       	mov	r18, r24
    16bc:	30 e0       	ldi	r19, 0x00	; 0
    16be:	81 e0       	ldi	r24, 0x01	; 1
    16c0:	90 e0       	ldi	r25, 0x00	; 0
    16c2:	02 2e       	mov	r0, r18
    16c4:	02 c0       	rjmp	.+4      	; 0x16ca <DIO_writePin+0x1ae>
    16c6:	88 0f       	add	r24, r24
    16c8:	99 1f       	adc	r25, r25
    16ca:	0a 94       	dec	r0
    16cc:	e2 f7       	brpl	.-8      	; 0x16c6 <DIO_writePin+0x1aa>
    16ce:	80 95       	com	r24
    16d0:	84 23       	and	r24, r20
    16d2:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
    16d4:	19 82       	std	Y+1, r1	; 0x01
    16d6:	34 c0       	rjmp	.+104    	; 0x1740 <DIO_writePin+0x224>
				break;
			case DIO_PORTC:
				CLEAR_BIT(PORTC_DATA_R, enu_pinID);
    16d8:	a5 e3       	ldi	r26, 0x35	; 53
    16da:	b0 e0       	ldi	r27, 0x00	; 0
    16dc:	e5 e3       	ldi	r30, 0x35	; 53
    16de:	f0 e0       	ldi	r31, 0x00	; 0
    16e0:	80 81       	ld	r24, Z
    16e2:	48 2f       	mov	r20, r24
    16e4:	8b 81       	ldd	r24, Y+3	; 0x03
    16e6:	28 2f       	mov	r18, r24
    16e8:	30 e0       	ldi	r19, 0x00	; 0
    16ea:	81 e0       	ldi	r24, 0x01	; 1
    16ec:	90 e0       	ldi	r25, 0x00	; 0
    16ee:	02 2e       	mov	r0, r18
    16f0:	02 c0       	rjmp	.+4      	; 0x16f6 <DIO_writePin+0x1da>
    16f2:	88 0f       	add	r24, r24
    16f4:	99 1f       	adc	r25, r25
    16f6:	0a 94       	dec	r0
    16f8:	e2 f7       	brpl	.-8      	; 0x16f2 <DIO_writePin+0x1d6>
    16fa:	80 95       	com	r24
    16fc:	84 23       	and	r24, r20
    16fe:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
    1700:	19 82       	std	Y+1, r1	; 0x01
    1702:	1e c0       	rjmp	.+60     	; 0x1740 <DIO_writePin+0x224>
				break;
			case DIO_PORTD:
				CLEAR_BIT(PORTD_DATA_R, enu_pinID);
    1704:	a2 e3       	ldi	r26, 0x32	; 50
    1706:	b0 e0       	ldi	r27, 0x00	; 0
    1708:	e2 e3       	ldi	r30, 0x32	; 50
    170a:	f0 e0       	ldi	r31, 0x00	; 0
    170c:	80 81       	ld	r24, Z
    170e:	48 2f       	mov	r20, r24
    1710:	8b 81       	ldd	r24, Y+3	; 0x03
    1712:	28 2f       	mov	r18, r24
    1714:	30 e0       	ldi	r19, 0x00	; 0
    1716:	81 e0       	ldi	r24, 0x01	; 1
    1718:	90 e0       	ldi	r25, 0x00	; 0
    171a:	02 2e       	mov	r0, r18
    171c:	02 c0       	rjmp	.+4      	; 0x1722 <DIO_writePin+0x206>
    171e:	88 0f       	add	r24, r24
    1720:	99 1f       	adc	r25, r25
    1722:	0a 94       	dec	r0
    1724:	e2 f7       	brpl	.-8      	; 0x171e <DIO_writePin+0x202>
    1726:	80 95       	com	r24
    1728:	84 23       	and	r24, r20
    172a:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
    172c:	19 82       	std	Y+1, r1	; 0x01
    172e:	08 c0       	rjmp	.+16     	; 0x1740 <DIO_writePin+0x224>
				break;
            default:
            	enu_ErrorState = DIO_E_PARAM_INVALID_PORT_ID;	/* Invalid port id */
    1730:	81 e0       	ldi	r24, 0x01	; 1
    1732:	89 83       	std	Y+1, r24	; 0x01
    1734:	05 c0       	rjmp	.+10     	; 0x1740 <DIO_writePin+0x224>
                break;
			}
		}
		else
        {
			enu_ErrorState = DIO_E_PARAM_INVALID_PORT_DIR;	/* Invalid port direction */
    1736:	84 e0       	ldi	r24, 0x04	; 4
    1738:	89 83       	std	Y+1, r24	; 0x01
    173a:	02 c0       	rjmp	.+4      	; 0x1740 <DIO_writePin+0x224>
		}
	}
	else
	{
		enu_ErrorState = DIO_E_PARAM_INVALID_PIN_ID;	/* Invalid pin id */
    173c:	82 e0       	ldi	r24, 0x02	; 2
    173e:	89 83       	std	Y+1, r24	; 0x01
	}
	return enu_ErrorState;
    1740:	89 81       	ldd	r24, Y+1	; 0x01
}
    1742:	28 96       	adiw	r28, 0x08	; 8
    1744:	0f b6       	in	r0, 0x3f	; 63
    1746:	f8 94       	cli
    1748:	de bf       	out	0x3e, r29	; 62
    174a:	0f be       	out	0x3f, r0	; 63
    174c:	cd bf       	out	0x3d, r28	; 61
    174e:	cf 91       	pop	r28
    1750:	df 91       	pop	r29
    1752:	08 95       	ret

00001754 <DIO_readPort>:
 * [in/out]		 	None
 *
 * [Returns]:       Error State
 ******************************************************************************/
enuDIO_E_STATE_t DIO_readPort(enuDIO_PortId_t enu_portID, uint8_t * ptr_portState)
{
    1754:	df 93       	push	r29
    1756:	cf 93       	push	r28
    1758:	00 d0       	rcall	.+0      	; 0x175a <DIO_readPort+0x6>
    175a:	00 d0       	rcall	.+0      	; 0x175c <DIO_readPort+0x8>
    175c:	00 d0       	rcall	.+0      	; 0x175e <DIO_readPort+0xa>
    175e:	cd b7       	in	r28, 0x3d	; 61
    1760:	de b7       	in	r29, 0x3e	; 62
    1762:	8a 83       	std	Y+2, r24	; 0x02
    1764:	7c 83       	std	Y+4, r23	; 0x04
    1766:	6b 83       	std	Y+3, r22	; 0x03
	enuDIO_E_STATE_t enu_ErrorState = E_NOT_OK;
    1768:	81 e0       	ldi	r24, 0x01	; 1
    176a:	89 83       	std	Y+1, r24	; 0x01

	/* Check if the pointer is NULL pointer or not */
	if(ptr_portState == NULL_PTR)
    176c:	8b 81       	ldd	r24, Y+3	; 0x03
    176e:	9c 81       	ldd	r25, Y+4	; 0x04
    1770:	00 97       	sbiw	r24, 0x00	; 0
    1772:	19 f4       	brne	.+6      	; 0x177a <DIO_readPort+0x26>
    {
		enu_ErrorState = DIO_E_PARAM_POINTER;	/* Invalid pointer */
    1774:	85 e0       	ldi	r24, 0x05	; 5
    1776:	89 83       	std	Y+1, r24	; 0x01
    1778:	41 c0       	rjmp	.+130    	; 0x17fc <DIO_readPort+0xa8>
	}
	else
	{
		switch (enu_portID)
    177a:	8a 81       	ldd	r24, Y+2	; 0x02
    177c:	28 2f       	mov	r18, r24
    177e:	30 e0       	ldi	r19, 0x00	; 0
    1780:	3e 83       	std	Y+6, r19	; 0x06
    1782:	2d 83       	std	Y+5, r18	; 0x05
    1784:	8d 81       	ldd	r24, Y+5	; 0x05
    1786:	9e 81       	ldd	r25, Y+6	; 0x06
    1788:	81 30       	cpi	r24, 0x01	; 1
    178a:	91 05       	cpc	r25, r1
    178c:	e9 f0       	breq	.+58     	; 0x17c8 <DIO_readPort+0x74>
    178e:	2d 81       	ldd	r18, Y+5	; 0x05
    1790:	3e 81       	ldd	r19, Y+6	; 0x06
    1792:	22 30       	cpi	r18, 0x02	; 2
    1794:	31 05       	cpc	r19, r1
    1796:	2c f4       	brge	.+10     	; 0x17a2 <DIO_readPort+0x4e>
    1798:	8d 81       	ldd	r24, Y+5	; 0x05
    179a:	9e 81       	ldd	r25, Y+6	; 0x06
    179c:	00 97       	sbiw	r24, 0x00	; 0
    179e:	61 f0       	breq	.+24     	; 0x17b8 <DIO_readPort+0x64>
    17a0:	2b c0       	rjmp	.+86     	; 0x17f8 <DIO_readPort+0xa4>
    17a2:	2d 81       	ldd	r18, Y+5	; 0x05
    17a4:	3e 81       	ldd	r19, Y+6	; 0x06
    17a6:	22 30       	cpi	r18, 0x02	; 2
    17a8:	31 05       	cpc	r19, r1
    17aa:	b1 f0       	breq	.+44     	; 0x17d8 <DIO_readPort+0x84>
    17ac:	8d 81       	ldd	r24, Y+5	; 0x05
    17ae:	9e 81       	ldd	r25, Y+6	; 0x06
    17b0:	83 30       	cpi	r24, 0x03	; 3
    17b2:	91 05       	cpc	r25, r1
    17b4:	c9 f0       	breq	.+50     	; 0x17e8 <DIO_readPort+0x94>
    17b6:	20 c0       	rjmp	.+64     	; 0x17f8 <DIO_readPort+0xa4>
		{
		case DIO_PORTA:
			*ptr_portState = PINA_INPUT_R;
    17b8:	e9 e3       	ldi	r30, 0x39	; 57
    17ba:	f0 e0       	ldi	r31, 0x00	; 0
    17bc:	80 81       	ld	r24, Z
    17be:	eb 81       	ldd	r30, Y+3	; 0x03
    17c0:	fc 81       	ldd	r31, Y+4	; 0x04
    17c2:	80 83       	st	Z, r24
			enu_ErrorState = DIO_E_PARAM_VALID;
    17c4:	19 82       	std	Y+1, r1	; 0x01
    17c6:	1a c0       	rjmp	.+52     	; 0x17fc <DIO_readPort+0xa8>
			break;
		case DIO_PORTB:
			*ptr_portState = PINB_INPUT_R;
    17c8:	e6 e3       	ldi	r30, 0x36	; 54
    17ca:	f0 e0       	ldi	r31, 0x00	; 0
    17cc:	80 81       	ld	r24, Z
    17ce:	eb 81       	ldd	r30, Y+3	; 0x03
    17d0:	fc 81       	ldd	r31, Y+4	; 0x04
    17d2:	80 83       	st	Z, r24
			enu_ErrorState = DIO_E_PARAM_VALID;;
    17d4:	19 82       	std	Y+1, r1	; 0x01
    17d6:	12 c0       	rjmp	.+36     	; 0x17fc <DIO_readPort+0xa8>
			break;
		case DIO_PORTC:
			*ptr_portState = PINC_INPUT_R;
    17d8:	e3 e3       	ldi	r30, 0x33	; 51
    17da:	f0 e0       	ldi	r31, 0x00	; 0
    17dc:	80 81       	ld	r24, Z
    17de:	eb 81       	ldd	r30, Y+3	; 0x03
    17e0:	fc 81       	ldd	r31, Y+4	; 0x04
    17e2:	80 83       	st	Z, r24
			enu_ErrorState = DIO_E_PARAM_VALID;
    17e4:	19 82       	std	Y+1, r1	; 0x01
    17e6:	0a c0       	rjmp	.+20     	; 0x17fc <DIO_readPort+0xa8>
			break;
		case DIO_PORTD:
			*ptr_portState = PIND_INPUT_R;
    17e8:	e0 e3       	ldi	r30, 0x30	; 48
    17ea:	f0 e0       	ldi	r31, 0x00	; 0
    17ec:	80 81       	ld	r24, Z
    17ee:	eb 81       	ldd	r30, Y+3	; 0x03
    17f0:	fc 81       	ldd	r31, Y+4	; 0x04
    17f2:	80 83       	st	Z, r24
			enu_ErrorState = DIO_E_PARAM_VALID;
    17f4:	19 82       	std	Y+1, r1	; 0x01
    17f6:	02 c0       	rjmp	.+4      	; 0x17fc <DIO_readPort+0xa8>
			break;
		default:
			enu_ErrorState = DIO_E_PARAM_INVALID_PORT_ID;	/* Invalid port id */
    17f8:	81 e0       	ldi	r24, 0x01	; 1
    17fa:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return enu_ErrorState;
    17fc:	89 81       	ldd	r24, Y+1	; 0x01
}
    17fe:	26 96       	adiw	r28, 0x06	; 6
    1800:	0f b6       	in	r0, 0x3f	; 63
    1802:	f8 94       	cli
    1804:	de bf       	out	0x3e, r29	; 62
    1806:	0f be       	out	0x3f, r0	; 63
    1808:	cd bf       	out	0x3d, r28	; 61
    180a:	cf 91       	pop	r28
    180c:	df 91       	pop	r29
    180e:	08 95       	ret

00001810 <DIO_readPin>:
 * [in/out]		 	None
 *
 * [Returns]:       Error State
 ******************************************************************************/
enuDIO_E_STATE_t DIO_readPin(enuDIO_PortId_t enu_portID, enuDIO_PinId_t enu_pinID, uint8_t * ptr_pinState)
{
    1810:	df 93       	push	r29
    1812:	cf 93       	push	r28
    1814:	cd b7       	in	r28, 0x3d	; 61
    1816:	de b7       	in	r29, 0x3e	; 62
    1818:	27 97       	sbiw	r28, 0x07	; 7
    181a:	0f b6       	in	r0, 0x3f	; 63
    181c:	f8 94       	cli
    181e:	de bf       	out	0x3e, r29	; 62
    1820:	0f be       	out	0x3f, r0	; 63
    1822:	cd bf       	out	0x3d, r28	; 61
    1824:	8a 83       	std	Y+2, r24	; 0x02
    1826:	6b 83       	std	Y+3, r22	; 0x03
    1828:	5d 83       	std	Y+5, r21	; 0x05
    182a:	4c 83       	std	Y+4, r20	; 0x04
	enuDIO_E_STATE_t enu_ErrorState = E_NOT_OK;
    182c:	81 e0       	ldi	r24, 0x01	; 1
    182e:	89 83       	std	Y+1, r24	; 0x01

	/* Check if the pointer is NULL pointer or not */
	if(ptr_pinState == NULL_PTR)
    1830:	8c 81       	ldd	r24, Y+4	; 0x04
    1832:	9d 81       	ldd	r25, Y+5	; 0x05
    1834:	00 97       	sbiw	r24, 0x00	; 0
    1836:	19 f4       	brne	.+6      	; 0x183e <DIO_readPin+0x2e>
    {
		enu_ErrorState = DIO_E_PARAM_POINTER;
    1838:	85 e0       	ldi	r24, 0x05	; 5
    183a:	89 83       	std	Y+1, r24	; 0x01
    183c:	af c0       	rjmp	.+350    	; 0x199c <DIO_readPin+0x18c>
	}
	else
	{
        if((enu_pinID >= PIN_0) && (enu_pinID <= PIN_7))
    183e:	8b 81       	ldd	r24, Y+3	; 0x03
    1840:	88 30       	cpi	r24, 0x08	; 8
    1842:	08 f0       	brcs	.+2      	; 0x1846 <DIO_readPin+0x36>
    1844:	a9 c0       	rjmp	.+338    	; 0x1998 <DIO_readPin+0x188>
        {
            switch (enu_portID)
    1846:	8a 81       	ldd	r24, Y+2	; 0x02
    1848:	28 2f       	mov	r18, r24
    184a:	30 e0       	ldi	r19, 0x00	; 0
    184c:	3f 83       	std	Y+7, r19	; 0x07
    184e:	2e 83       	std	Y+6, r18	; 0x06
    1850:	4e 81       	ldd	r20, Y+6	; 0x06
    1852:	5f 81       	ldd	r21, Y+7	; 0x07
    1854:	41 30       	cpi	r20, 0x01	; 1
    1856:	51 05       	cpc	r21, r1
    1858:	c9 f1       	breq	.+114    	; 0x18cc <DIO_readPin+0xbc>
    185a:	8e 81       	ldd	r24, Y+6	; 0x06
    185c:	9f 81       	ldd	r25, Y+7	; 0x07
    185e:	82 30       	cpi	r24, 0x02	; 2
    1860:	91 05       	cpc	r25, r1
    1862:	34 f4       	brge	.+12     	; 0x1870 <DIO_readPin+0x60>
    1864:	2e 81       	ldd	r18, Y+6	; 0x06
    1866:	3f 81       	ldd	r19, Y+7	; 0x07
    1868:	21 15       	cp	r18, r1
    186a:	31 05       	cpc	r19, r1
    186c:	71 f0       	breq	.+28     	; 0x188a <DIO_readPin+0x7a>
    186e:	91 c0       	rjmp	.+290    	; 0x1992 <DIO_readPin+0x182>
    1870:	4e 81       	ldd	r20, Y+6	; 0x06
    1872:	5f 81       	ldd	r21, Y+7	; 0x07
    1874:	42 30       	cpi	r20, 0x02	; 2
    1876:	51 05       	cpc	r21, r1
    1878:	09 f4       	brne	.+2      	; 0x187c <DIO_readPin+0x6c>
    187a:	49 c0       	rjmp	.+146    	; 0x190e <DIO_readPin+0xfe>
    187c:	8e 81       	ldd	r24, Y+6	; 0x06
    187e:	9f 81       	ldd	r25, Y+7	; 0x07
    1880:	83 30       	cpi	r24, 0x03	; 3
    1882:	91 05       	cpc	r25, r1
    1884:	09 f4       	brne	.+2      	; 0x1888 <DIO_readPin+0x78>
    1886:	64 c0       	rjmp	.+200    	; 0x1950 <DIO_readPin+0x140>
    1888:	84 c0       	rjmp	.+264    	; 0x1992 <DIO_readPin+0x182>
            {
            case DIO_PORTA:
                *ptr_pinState = READ_BIT(PINA_INPUT_R, enu_pinID);
    188a:	e9 e3       	ldi	r30, 0x39	; 57
    188c:	f0 e0       	ldi	r31, 0x00	; 0
    188e:	80 81       	ld	r24, Z
    1890:	48 2f       	mov	r20, r24
    1892:	50 e0       	ldi	r21, 0x00	; 0
    1894:	8b 81       	ldd	r24, Y+3	; 0x03
    1896:	28 2f       	mov	r18, r24
    1898:	30 e0       	ldi	r19, 0x00	; 0
    189a:	81 e0       	ldi	r24, 0x01	; 1
    189c:	90 e0       	ldi	r25, 0x00	; 0
    189e:	02 c0       	rjmp	.+4      	; 0x18a4 <DIO_readPin+0x94>
    18a0:	88 0f       	add	r24, r24
    18a2:	99 1f       	adc	r25, r25
    18a4:	2a 95       	dec	r18
    18a6:	e2 f7       	brpl	.-8      	; 0x18a0 <DIO_readPin+0x90>
    18a8:	9a 01       	movw	r18, r20
    18aa:	28 23       	and	r18, r24
    18ac:	39 23       	and	r19, r25
    18ae:	8b 81       	ldd	r24, Y+3	; 0x03
    18b0:	88 2f       	mov	r24, r24
    18b2:	90 e0       	ldi	r25, 0x00	; 0
    18b4:	a9 01       	movw	r20, r18
    18b6:	02 c0       	rjmp	.+4      	; 0x18bc <DIO_readPin+0xac>
    18b8:	55 95       	asr	r21
    18ba:	47 95       	ror	r20
    18bc:	8a 95       	dec	r24
    18be:	e2 f7       	brpl	.-8      	; 0x18b8 <DIO_readPin+0xa8>
    18c0:	ca 01       	movw	r24, r20
    18c2:	ec 81       	ldd	r30, Y+4	; 0x04
    18c4:	fd 81       	ldd	r31, Y+5	; 0x05
    18c6:	80 83       	st	Z, r24
                enu_ErrorState = DIO_E_PARAM_VALID;
    18c8:	19 82       	std	Y+1, r1	; 0x01
    18ca:	68 c0       	rjmp	.+208    	; 0x199c <DIO_readPin+0x18c>
                break;
            case DIO_PORTB:
                *ptr_pinState = READ_BIT(PINB_INPUT_R, enu_pinID);
    18cc:	e6 e3       	ldi	r30, 0x36	; 54
    18ce:	f0 e0       	ldi	r31, 0x00	; 0
    18d0:	80 81       	ld	r24, Z
    18d2:	48 2f       	mov	r20, r24
    18d4:	50 e0       	ldi	r21, 0x00	; 0
    18d6:	8b 81       	ldd	r24, Y+3	; 0x03
    18d8:	28 2f       	mov	r18, r24
    18da:	30 e0       	ldi	r19, 0x00	; 0
    18dc:	81 e0       	ldi	r24, 0x01	; 1
    18de:	90 e0       	ldi	r25, 0x00	; 0
    18e0:	02 c0       	rjmp	.+4      	; 0x18e6 <DIO_readPin+0xd6>
    18e2:	88 0f       	add	r24, r24
    18e4:	99 1f       	adc	r25, r25
    18e6:	2a 95       	dec	r18
    18e8:	e2 f7       	brpl	.-8      	; 0x18e2 <DIO_readPin+0xd2>
    18ea:	9a 01       	movw	r18, r20
    18ec:	28 23       	and	r18, r24
    18ee:	39 23       	and	r19, r25
    18f0:	8b 81       	ldd	r24, Y+3	; 0x03
    18f2:	88 2f       	mov	r24, r24
    18f4:	90 e0       	ldi	r25, 0x00	; 0
    18f6:	a9 01       	movw	r20, r18
    18f8:	02 c0       	rjmp	.+4      	; 0x18fe <DIO_readPin+0xee>
    18fa:	55 95       	asr	r21
    18fc:	47 95       	ror	r20
    18fe:	8a 95       	dec	r24
    1900:	e2 f7       	brpl	.-8      	; 0x18fa <DIO_readPin+0xea>
    1902:	ca 01       	movw	r24, r20
    1904:	ec 81       	ldd	r30, Y+4	; 0x04
    1906:	fd 81       	ldd	r31, Y+5	; 0x05
    1908:	80 83       	st	Z, r24
                enu_ErrorState = DIO_E_PARAM_VALID;
    190a:	19 82       	std	Y+1, r1	; 0x01
    190c:	47 c0       	rjmp	.+142    	; 0x199c <DIO_readPin+0x18c>
                break;
            case DIO_PORTC:
                *ptr_pinState = READ_BIT(PINC_INPUT_R, enu_pinID);
    190e:	e3 e3       	ldi	r30, 0x33	; 51
    1910:	f0 e0       	ldi	r31, 0x00	; 0
    1912:	80 81       	ld	r24, Z
    1914:	48 2f       	mov	r20, r24
    1916:	50 e0       	ldi	r21, 0x00	; 0
    1918:	8b 81       	ldd	r24, Y+3	; 0x03
    191a:	28 2f       	mov	r18, r24
    191c:	30 e0       	ldi	r19, 0x00	; 0
    191e:	81 e0       	ldi	r24, 0x01	; 1
    1920:	90 e0       	ldi	r25, 0x00	; 0
    1922:	02 c0       	rjmp	.+4      	; 0x1928 <DIO_readPin+0x118>
    1924:	88 0f       	add	r24, r24
    1926:	99 1f       	adc	r25, r25
    1928:	2a 95       	dec	r18
    192a:	e2 f7       	brpl	.-8      	; 0x1924 <DIO_readPin+0x114>
    192c:	9a 01       	movw	r18, r20
    192e:	28 23       	and	r18, r24
    1930:	39 23       	and	r19, r25
    1932:	8b 81       	ldd	r24, Y+3	; 0x03
    1934:	88 2f       	mov	r24, r24
    1936:	90 e0       	ldi	r25, 0x00	; 0
    1938:	a9 01       	movw	r20, r18
    193a:	02 c0       	rjmp	.+4      	; 0x1940 <DIO_readPin+0x130>
    193c:	55 95       	asr	r21
    193e:	47 95       	ror	r20
    1940:	8a 95       	dec	r24
    1942:	e2 f7       	brpl	.-8      	; 0x193c <DIO_readPin+0x12c>
    1944:	ca 01       	movw	r24, r20
    1946:	ec 81       	ldd	r30, Y+4	; 0x04
    1948:	fd 81       	ldd	r31, Y+5	; 0x05
    194a:	80 83       	st	Z, r24
                enu_ErrorState = DIO_E_PARAM_VALID;
    194c:	19 82       	std	Y+1, r1	; 0x01
    194e:	26 c0       	rjmp	.+76     	; 0x199c <DIO_readPin+0x18c>
                break;
            case DIO_PORTD:
                *ptr_pinState = READ_BIT(PIND_INPUT_R, enu_pinID);
    1950:	e0 e3       	ldi	r30, 0x30	; 48
    1952:	f0 e0       	ldi	r31, 0x00	; 0
    1954:	80 81       	ld	r24, Z
    1956:	48 2f       	mov	r20, r24
    1958:	50 e0       	ldi	r21, 0x00	; 0
    195a:	8b 81       	ldd	r24, Y+3	; 0x03
    195c:	28 2f       	mov	r18, r24
    195e:	30 e0       	ldi	r19, 0x00	; 0
    1960:	81 e0       	ldi	r24, 0x01	; 1
    1962:	90 e0       	ldi	r25, 0x00	; 0
    1964:	02 c0       	rjmp	.+4      	; 0x196a <DIO_readPin+0x15a>
    1966:	88 0f       	add	r24, r24
    1968:	99 1f       	adc	r25, r25
    196a:	2a 95       	dec	r18
    196c:	e2 f7       	brpl	.-8      	; 0x1966 <DIO_readPin+0x156>
    196e:	9a 01       	movw	r18, r20
    1970:	28 23       	and	r18, r24
    1972:	39 23       	and	r19, r25
    1974:	8b 81       	ldd	r24, Y+3	; 0x03
    1976:	88 2f       	mov	r24, r24
    1978:	90 e0       	ldi	r25, 0x00	; 0
    197a:	a9 01       	movw	r20, r18
    197c:	02 c0       	rjmp	.+4      	; 0x1982 <DIO_readPin+0x172>
    197e:	55 95       	asr	r21
    1980:	47 95       	ror	r20
    1982:	8a 95       	dec	r24
    1984:	e2 f7       	brpl	.-8      	; 0x197e <DIO_readPin+0x16e>
    1986:	ca 01       	movw	r24, r20
    1988:	ec 81       	ldd	r30, Y+4	; 0x04
    198a:	fd 81       	ldd	r31, Y+5	; 0x05
    198c:	80 83       	st	Z, r24
                enu_ErrorState = DIO_E_PARAM_VALID;
    198e:	19 82       	std	Y+1, r1	; 0x01
    1990:	05 c0       	rjmp	.+10     	; 0x199c <DIO_readPin+0x18c>
                break;
            default:
            	enu_ErrorState = DIO_E_PARAM_INVALID_PORT_ID;	/* Invalid port id */
    1992:	81 e0       	ldi	r24, 0x01	; 1
    1994:	89 83       	std	Y+1, r24	; 0x01
    1996:	02 c0       	rjmp	.+4      	; 0x199c <DIO_readPin+0x18c>
                break;
            }
        }
        else
        {
        	enu_ErrorState = DIO_E_PARAM_INVALID_PIN_ID;	/* Invalid pin id */
    1998:	82 e0       	ldi	r24, 0x02	; 2
    199a:	89 83       	std	Y+1, r24	; 0x01
        }
	}
    return enu_ErrorState;
    199c:	89 81       	ldd	r24, Y+1	; 0x01
}
    199e:	27 96       	adiw	r28, 0x07	; 7
    19a0:	0f b6       	in	r0, 0x3f	; 63
    19a2:	f8 94       	cli
    19a4:	de bf       	out	0x3e, r29	; 62
    19a6:	0f be       	out	0x3f, r0	; 63
    19a8:	cd bf       	out	0x3d, r28	; 61
    19aa:	cf 91       	pop	r28
    19ac:	df 91       	pop	r29
    19ae:	08 95       	ret

000019b0 <DIO_TogglePin>:
 * [in/out]		 	None
 *
 * [Returns]:       Error State
 ******************************************************************************/
enuDIO_E_STATE_t DIO_TogglePin(enuDIO_PortId_t enu_portID, enuDIO_PinId_t enu_pinID)
{
    19b0:	df 93       	push	r29
    19b2:	cf 93       	push	r28
    19b4:	00 d0       	rcall	.+0      	; 0x19b6 <DIO_TogglePin+0x6>
    19b6:	00 d0       	rcall	.+0      	; 0x19b8 <DIO_TogglePin+0x8>
    19b8:	0f 92       	push	r0
    19ba:	cd b7       	in	r28, 0x3d	; 61
    19bc:	de b7       	in	r29, 0x3e	; 62
    19be:	8a 83       	std	Y+2, r24	; 0x02
    19c0:	6b 83       	std	Y+3, r22	; 0x03
	enuDIO_E_STATE_t enu_ErrorState = E_NOT_OK;
    19c2:	81 e0       	ldi	r24, 0x01	; 1
    19c4:	89 83       	std	Y+1, r24	; 0x01

	/* Check if the pointer is NULL pointer or not */
    if ((enu_pinID >= PIN_0) && (enu_pinID <= PIN_7))
    19c6:	8b 81       	ldd	r24, Y+3	; 0x03
    19c8:	88 30       	cpi	r24, 0x08	; 8
    19ca:	08 f0       	brcs	.+2      	; 0x19ce <DIO_TogglePin+0x1e>
    19cc:	77 c0       	rjmp	.+238    	; 0x1abc <DIO_TogglePin+0x10c>
    {
        switch (enu_portID)
    19ce:	8a 81       	ldd	r24, Y+2	; 0x02
    19d0:	28 2f       	mov	r18, r24
    19d2:	30 e0       	ldi	r19, 0x00	; 0
    19d4:	3d 83       	std	Y+5, r19	; 0x05
    19d6:	2c 83       	std	Y+4, r18	; 0x04
    19d8:	8c 81       	ldd	r24, Y+4	; 0x04
    19da:	9d 81       	ldd	r25, Y+5	; 0x05
    19dc:	81 30       	cpi	r24, 0x01	; 1
    19de:	91 05       	cpc	r25, r1
    19e0:	59 f1       	breq	.+86     	; 0x1a38 <DIO_TogglePin+0x88>
    19e2:	2c 81       	ldd	r18, Y+4	; 0x04
    19e4:	3d 81       	ldd	r19, Y+5	; 0x05
    19e6:	22 30       	cpi	r18, 0x02	; 2
    19e8:	31 05       	cpc	r19, r1
    19ea:	2c f4       	brge	.+10     	; 0x19f6 <DIO_TogglePin+0x46>
    19ec:	8c 81       	ldd	r24, Y+4	; 0x04
    19ee:	9d 81       	ldd	r25, Y+5	; 0x05
    19f0:	00 97       	sbiw	r24, 0x00	; 0
    19f2:	69 f0       	breq	.+26     	; 0x1a0e <DIO_TogglePin+0x5e>
    19f4:	60 c0       	rjmp	.+192    	; 0x1ab6 <DIO_TogglePin+0x106>
    19f6:	2c 81       	ldd	r18, Y+4	; 0x04
    19f8:	3d 81       	ldd	r19, Y+5	; 0x05
    19fa:	22 30       	cpi	r18, 0x02	; 2
    19fc:	31 05       	cpc	r19, r1
    19fe:	89 f1       	breq	.+98     	; 0x1a62 <DIO_TogglePin+0xb2>
    1a00:	8c 81       	ldd	r24, Y+4	; 0x04
    1a02:	9d 81       	ldd	r25, Y+5	; 0x05
    1a04:	83 30       	cpi	r24, 0x03	; 3
    1a06:	91 05       	cpc	r25, r1
    1a08:	09 f4       	brne	.+2      	; 0x1a0c <DIO_TogglePin+0x5c>
    1a0a:	40 c0       	rjmp	.+128    	; 0x1a8c <DIO_TogglePin+0xdc>
    1a0c:	54 c0       	rjmp	.+168    	; 0x1ab6 <DIO_TogglePin+0x106>
        {
        case DIO_PORTA:
            TOGGLE_BIT(PORTA_DATA_R, enu_pinID);
    1a0e:	ab e3       	ldi	r26, 0x3B	; 59
    1a10:	b0 e0       	ldi	r27, 0x00	; 0
    1a12:	eb e3       	ldi	r30, 0x3B	; 59
    1a14:	f0 e0       	ldi	r31, 0x00	; 0
    1a16:	80 81       	ld	r24, Z
    1a18:	48 2f       	mov	r20, r24
    1a1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a1c:	28 2f       	mov	r18, r24
    1a1e:	30 e0       	ldi	r19, 0x00	; 0
    1a20:	81 e0       	ldi	r24, 0x01	; 1
    1a22:	90 e0       	ldi	r25, 0x00	; 0
    1a24:	02 2e       	mov	r0, r18
    1a26:	02 c0       	rjmp	.+4      	; 0x1a2c <DIO_TogglePin+0x7c>
    1a28:	88 0f       	add	r24, r24
    1a2a:	99 1f       	adc	r25, r25
    1a2c:	0a 94       	dec	r0
    1a2e:	e2 f7       	brpl	.-8      	; 0x1a28 <DIO_TogglePin+0x78>
    1a30:	84 27       	eor	r24, r20
    1a32:	8c 93       	st	X, r24
            enu_ErrorState = DIO_E_PARAM_VALID;
    1a34:	19 82       	std	Y+1, r1	; 0x01
    1a36:	44 c0       	rjmp	.+136    	; 0x1ac0 <DIO_TogglePin+0x110>
            break;
        case DIO_PORTB:
        	TOGGLE_BIT(PORTB_DATA_R, enu_pinID);
    1a38:	a8 e3       	ldi	r26, 0x38	; 56
    1a3a:	b0 e0       	ldi	r27, 0x00	; 0
    1a3c:	e8 e3       	ldi	r30, 0x38	; 56
    1a3e:	f0 e0       	ldi	r31, 0x00	; 0
    1a40:	80 81       	ld	r24, Z
    1a42:	48 2f       	mov	r20, r24
    1a44:	8b 81       	ldd	r24, Y+3	; 0x03
    1a46:	28 2f       	mov	r18, r24
    1a48:	30 e0       	ldi	r19, 0x00	; 0
    1a4a:	81 e0       	ldi	r24, 0x01	; 1
    1a4c:	90 e0       	ldi	r25, 0x00	; 0
    1a4e:	02 2e       	mov	r0, r18
    1a50:	02 c0       	rjmp	.+4      	; 0x1a56 <DIO_TogglePin+0xa6>
    1a52:	88 0f       	add	r24, r24
    1a54:	99 1f       	adc	r25, r25
    1a56:	0a 94       	dec	r0
    1a58:	e2 f7       	brpl	.-8      	; 0x1a52 <DIO_TogglePin+0xa2>
    1a5a:	84 27       	eor	r24, r20
    1a5c:	8c 93       	st	X, r24
            enu_ErrorState = DIO_E_PARAM_VALID;
    1a5e:	19 82       	std	Y+1, r1	; 0x01
    1a60:	2f c0       	rjmp	.+94     	; 0x1ac0 <DIO_TogglePin+0x110>
            break;
        case DIO_PORTC:
        	TOGGLE_BIT(PORTC_DATA_R, enu_pinID);
    1a62:	a5 e3       	ldi	r26, 0x35	; 53
    1a64:	b0 e0       	ldi	r27, 0x00	; 0
    1a66:	e5 e3       	ldi	r30, 0x35	; 53
    1a68:	f0 e0       	ldi	r31, 0x00	; 0
    1a6a:	80 81       	ld	r24, Z
    1a6c:	48 2f       	mov	r20, r24
    1a6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a70:	28 2f       	mov	r18, r24
    1a72:	30 e0       	ldi	r19, 0x00	; 0
    1a74:	81 e0       	ldi	r24, 0x01	; 1
    1a76:	90 e0       	ldi	r25, 0x00	; 0
    1a78:	02 2e       	mov	r0, r18
    1a7a:	02 c0       	rjmp	.+4      	; 0x1a80 <DIO_TogglePin+0xd0>
    1a7c:	88 0f       	add	r24, r24
    1a7e:	99 1f       	adc	r25, r25
    1a80:	0a 94       	dec	r0
    1a82:	e2 f7       	brpl	.-8      	; 0x1a7c <DIO_TogglePin+0xcc>
    1a84:	84 27       	eor	r24, r20
    1a86:	8c 93       	st	X, r24
            enu_ErrorState = DIO_E_PARAM_VALID;
    1a88:	19 82       	std	Y+1, r1	; 0x01
    1a8a:	1a c0       	rjmp	.+52     	; 0x1ac0 <DIO_TogglePin+0x110>
            break;
        case DIO_PORTD:
        	TOGGLE_BIT(PORTD_DATA_R, enu_pinID);
    1a8c:	a2 e3       	ldi	r26, 0x32	; 50
    1a8e:	b0 e0       	ldi	r27, 0x00	; 0
    1a90:	e2 e3       	ldi	r30, 0x32	; 50
    1a92:	f0 e0       	ldi	r31, 0x00	; 0
    1a94:	80 81       	ld	r24, Z
    1a96:	48 2f       	mov	r20, r24
    1a98:	8b 81       	ldd	r24, Y+3	; 0x03
    1a9a:	28 2f       	mov	r18, r24
    1a9c:	30 e0       	ldi	r19, 0x00	; 0
    1a9e:	81 e0       	ldi	r24, 0x01	; 1
    1aa0:	90 e0       	ldi	r25, 0x00	; 0
    1aa2:	02 2e       	mov	r0, r18
    1aa4:	02 c0       	rjmp	.+4      	; 0x1aaa <DIO_TogglePin+0xfa>
    1aa6:	88 0f       	add	r24, r24
    1aa8:	99 1f       	adc	r25, r25
    1aaa:	0a 94       	dec	r0
    1aac:	e2 f7       	brpl	.-8      	; 0x1aa6 <DIO_TogglePin+0xf6>
    1aae:	84 27       	eor	r24, r20
    1ab0:	8c 93       	st	X, r24
            enu_ErrorState = DIO_E_PARAM_VALID;
    1ab2:	19 82       	std	Y+1, r1	; 0x01
    1ab4:	05 c0       	rjmp	.+10     	; 0x1ac0 <DIO_TogglePin+0x110>
            break;
        default:
        	enu_ErrorState = E_NOT_OK;	/* Invalid port id */
    1ab6:	81 e0       	ldi	r24, 0x01	; 1
    1ab8:	89 83       	std	Y+1, r24	; 0x01
    1aba:	02 c0       	rjmp	.+4      	; 0x1ac0 <DIO_TogglePin+0x110>
            break;
        }
    }
    else
    {
    	enu_ErrorState = DIO_E_PARAM_INVALID_PIN_ID;	/* Invalid pin id */
    1abc:	82 e0       	ldi	r24, 0x02	; 2
    1abe:	89 83       	std	Y+1, r24	; 0x01
    }
    return enu_ErrorState;
    1ac0:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ac2:	0f 90       	pop	r0
    1ac4:	0f 90       	pop	r0
    1ac6:	0f 90       	pop	r0
    1ac8:	0f 90       	pop	r0
    1aca:	0f 90       	pop	r0
    1acc:	cf 91       	pop	r28
    1ace:	df 91       	pop	r29
    1ad0:	08 95       	ret

00001ad2 <LCD_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void LCD_init(void)
{
    1ad2:	df 93       	push	r29
    1ad4:	cf 93       	push	r28
    1ad6:	cd b7       	in	r28, 0x3d	; 61
    1ad8:	de b7       	in	r29, 0x3e	; 62
	LCD_CTRL_PORT_DIR |= (1<<E) | (1<<RS) | (1<<RW); /* Configure the control pins(E,RS,RW) as output pins */
    1ada:	aa e3       	ldi	r26, 0x3A	; 58
    1adc:	b0 e0       	ldi	r27, 0x00	; 0
    1ade:	ea e3       	ldi	r30, 0x3A	; 58
    1ae0:	f0 e0       	ldi	r31, 0x00	; 0
    1ae2:	80 81       	ld	r24, Z
    1ae4:	8e 60       	ori	r24, 0x0E	; 14
    1ae6:	8c 93       	st	X, r24
	
	#if (DATA_BITS_MODE == 4)
		#ifdef UPPER_PORT_PINS
			LCD_DATA_PORT_DIR |= 0xF0; /* Configure the highest 4 bits of the data port as output pins */
    1ae8:	aa e3       	ldi	r26, 0x3A	; 58
    1aea:	b0 e0       	ldi	r27, 0x00	; 0
    1aec:	ea e3       	ldi	r30, 0x3A	; 58
    1aee:	f0 e0       	ldi	r31, 0x00	; 0
    1af0:	80 81       	ld	r24, Z
    1af2:	80 6f       	ori	r24, 0xF0	; 240
    1af4:	8c 93       	st	X, r24
		#else
			LCD_DATA_PORT_DIR |= 0x0F; /* Configure the lowest 4 bits of the data port as output pins */
		#endif		 
		LCD_sendCommand(FOUR_BITS_DATA_MODE); /* Initialize LCD in 4-bit mode */
    1af6:	82 e0       	ldi	r24, 0x02	; 2
    1af8:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <LCD_sendCommand>
		LCD_sendCommand(TWO_LINE_LCD_Four_BIT_MODE); /* Use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */
    1afc:	88 e2       	ldi	r24, 0x28	; 40
    1afe:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <LCD_sendCommand>
	#elif (DATA_BITS_MODE == 8)
		LCD_DATA_PORT_DIR = 0xFF; /* Configure the data port as output port */ 
		LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE); /* Use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
	#endif
	
	LCD_sendCommand(CURSOR_OFF); /* Cursor off */
    1b02:	8c e0       	ldi	r24, 0x0C	; 12
    1b04:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <LCD_sendCommand>
	LCD_sendCommand(CLEAR_COMMAND); /* Clear LCD at the beginning */
    1b08:	81 e0       	ldi	r24, 0x01	; 1
    1b0a:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <LCD_sendCommand>
}
    1b0e:	cf 91       	pop	r28
    1b10:	df 91       	pop	r29
    1b12:	08 95       	ret

00001b14 <LCD_sendCommand>:

void LCD_sendCommand(uint8_t command)
{
    1b14:	0f 93       	push	r16
    1b16:	1f 93       	push	r17
    1b18:	df 93       	push	r29
    1b1a:	cf 93       	push	r28
    1b1c:	cd b7       	in	r28, 0x3d	; 61
    1b1e:	de b7       	in	r29, 0x3e	; 62
    1b20:	c3 56       	subi	r28, 0x63	; 99
    1b22:	d0 40       	sbci	r29, 0x00	; 0
    1b24:	0f b6       	in	r0, 0x3f	; 63
    1b26:	f8 94       	cli
    1b28:	de bf       	out	0x3e, r29	; 62
    1b2a:	0f be       	out	0x3f, r0	; 63
    1b2c:	cd bf       	out	0x3d, r28	; 61
    1b2e:	fe 01       	movw	r30, r28
    1b30:	ed 59       	subi	r30, 0x9D	; 157
    1b32:	ff 4f       	sbci	r31, 0xFF	; 255
    1b34:	80 83       	st	Z, r24
	CLEAR_BIT(LCD_CTRL_PORT,RS); /* Instruction Mode RS = 0 */
    1b36:	ab e3       	ldi	r26, 0x3B	; 59
    1b38:	b0 e0       	ldi	r27, 0x00	; 0
    1b3a:	eb e3       	ldi	r30, 0x3B	; 59
    1b3c:	f0 e0       	ldi	r31, 0x00	; 0
    1b3e:	80 81       	ld	r24, Z
    1b40:	8d 7f       	andi	r24, 0xFD	; 253
    1b42:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* Write data to LCD so RW = 0 */
    1b44:	ab e3       	ldi	r26, 0x3B	; 59
    1b46:	b0 e0       	ldi	r27, 0x00	; 0
    1b48:	eb e3       	ldi	r30, 0x3B	; 59
    1b4a:	f0 e0       	ldi	r31, 0x00	; 0
    1b4c:	80 81       	ld	r24, Z
    1b4e:	8b 7f       	andi	r24, 0xFB	; 251
    1b50:	8c 93       	st	X, r24
    1b52:	fe 01       	movw	r30, r28
    1b54:	e1 5a       	subi	r30, 0xA1	; 161
    1b56:	ff 4f       	sbci	r31, 0xFF	; 255
    1b58:	80 e0       	ldi	r24, 0x00	; 0
    1b5a:	90 e0       	ldi	r25, 0x00	; 0
    1b5c:	a0 e8       	ldi	r26, 0x80	; 128
    1b5e:	bf e3       	ldi	r27, 0x3F	; 63
    1b60:	80 83       	st	Z, r24
    1b62:	91 83       	std	Z+1, r25	; 0x01
    1b64:	a2 83       	std	Z+2, r26	; 0x02
    1b66:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b68:	8e 01       	movw	r16, r28
    1b6a:	05 5a       	subi	r16, 0xA5	; 165
    1b6c:	1f 4f       	sbci	r17, 0xFF	; 255
    1b6e:	fe 01       	movw	r30, r28
    1b70:	e1 5a       	subi	r30, 0xA1	; 161
    1b72:	ff 4f       	sbci	r31, 0xFF	; 255
    1b74:	60 81       	ld	r22, Z
    1b76:	71 81       	ldd	r23, Z+1	; 0x01
    1b78:	82 81       	ldd	r24, Z+2	; 0x02
    1b7a:	93 81       	ldd	r25, Z+3	; 0x03
    1b7c:	20 e0       	ldi	r18, 0x00	; 0
    1b7e:	30 e0       	ldi	r19, 0x00	; 0
    1b80:	4a ef       	ldi	r20, 0xFA	; 250
    1b82:	54 e4       	ldi	r21, 0x44	; 68
    1b84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b88:	dc 01       	movw	r26, r24
    1b8a:	cb 01       	movw	r24, r22
    1b8c:	f8 01       	movw	r30, r16
    1b8e:	80 83       	st	Z, r24
    1b90:	91 83       	std	Z+1, r25	; 0x01
    1b92:	a2 83       	std	Z+2, r26	; 0x02
    1b94:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b96:	fe 01       	movw	r30, r28
    1b98:	e5 5a       	subi	r30, 0xA5	; 165
    1b9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b9c:	60 81       	ld	r22, Z
    1b9e:	71 81       	ldd	r23, Z+1	; 0x01
    1ba0:	82 81       	ldd	r24, Z+2	; 0x02
    1ba2:	93 81       	ldd	r25, Z+3	; 0x03
    1ba4:	20 e0       	ldi	r18, 0x00	; 0
    1ba6:	30 e0       	ldi	r19, 0x00	; 0
    1ba8:	40 e8       	ldi	r20, 0x80	; 128
    1baa:	5f e3       	ldi	r21, 0x3F	; 63
    1bac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bb0:	88 23       	and	r24, r24
    1bb2:	44 f4       	brge	.+16     	; 0x1bc4 <LCD_sendCommand+0xb0>
		__ticks = 1;
    1bb4:	fe 01       	movw	r30, r28
    1bb6:	e7 5a       	subi	r30, 0xA7	; 167
    1bb8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bba:	81 e0       	ldi	r24, 0x01	; 1
    1bbc:	90 e0       	ldi	r25, 0x00	; 0
    1bbe:	91 83       	std	Z+1, r25	; 0x01
    1bc0:	80 83       	st	Z, r24
    1bc2:	64 c0       	rjmp	.+200    	; 0x1c8c <LCD_sendCommand+0x178>
	else if (__tmp > 65535)
    1bc4:	fe 01       	movw	r30, r28
    1bc6:	e5 5a       	subi	r30, 0xA5	; 165
    1bc8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bca:	60 81       	ld	r22, Z
    1bcc:	71 81       	ldd	r23, Z+1	; 0x01
    1bce:	82 81       	ldd	r24, Z+2	; 0x02
    1bd0:	93 81       	ldd	r25, Z+3	; 0x03
    1bd2:	20 e0       	ldi	r18, 0x00	; 0
    1bd4:	3f ef       	ldi	r19, 0xFF	; 255
    1bd6:	4f e7       	ldi	r20, 0x7F	; 127
    1bd8:	57 e4       	ldi	r21, 0x47	; 71
    1bda:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bde:	18 16       	cp	r1, r24
    1be0:	0c f0       	brlt	.+2      	; 0x1be4 <LCD_sendCommand+0xd0>
    1be2:	43 c0       	rjmp	.+134    	; 0x1c6a <LCD_sendCommand+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1be4:	fe 01       	movw	r30, r28
    1be6:	e1 5a       	subi	r30, 0xA1	; 161
    1be8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bea:	60 81       	ld	r22, Z
    1bec:	71 81       	ldd	r23, Z+1	; 0x01
    1bee:	82 81       	ldd	r24, Z+2	; 0x02
    1bf0:	93 81       	ldd	r25, Z+3	; 0x03
    1bf2:	20 e0       	ldi	r18, 0x00	; 0
    1bf4:	30 e0       	ldi	r19, 0x00	; 0
    1bf6:	40 e2       	ldi	r20, 0x20	; 32
    1bf8:	51 e4       	ldi	r21, 0x41	; 65
    1bfa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bfe:	dc 01       	movw	r26, r24
    1c00:	cb 01       	movw	r24, r22
    1c02:	8e 01       	movw	r16, r28
    1c04:	07 5a       	subi	r16, 0xA7	; 167
    1c06:	1f 4f       	sbci	r17, 0xFF	; 255
    1c08:	bc 01       	movw	r22, r24
    1c0a:	cd 01       	movw	r24, r26
    1c0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c10:	dc 01       	movw	r26, r24
    1c12:	cb 01       	movw	r24, r22
    1c14:	f8 01       	movw	r30, r16
    1c16:	91 83       	std	Z+1, r25	; 0x01
    1c18:	80 83       	st	Z, r24
    1c1a:	1f c0       	rjmp	.+62     	; 0x1c5a <LCD_sendCommand+0x146>
    1c1c:	fe 01       	movw	r30, r28
    1c1e:	e9 5a       	subi	r30, 0xA9	; 169
    1c20:	ff 4f       	sbci	r31, 0xFF	; 255
    1c22:	88 ec       	ldi	r24, 0xC8	; 200
    1c24:	90 e0       	ldi	r25, 0x00	; 0
    1c26:	91 83       	std	Z+1, r25	; 0x01
    1c28:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c2a:	fe 01       	movw	r30, r28
    1c2c:	e9 5a       	subi	r30, 0xA9	; 169
    1c2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c30:	80 81       	ld	r24, Z
    1c32:	91 81       	ldd	r25, Z+1	; 0x01
    1c34:	01 97       	sbiw	r24, 0x01	; 1
    1c36:	f1 f7       	brne	.-4      	; 0x1c34 <LCD_sendCommand+0x120>
    1c38:	fe 01       	movw	r30, r28
    1c3a:	e9 5a       	subi	r30, 0xA9	; 169
    1c3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c3e:	91 83       	std	Z+1, r25	; 0x01
    1c40:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c42:	de 01       	movw	r26, r28
    1c44:	a7 5a       	subi	r26, 0xA7	; 167
    1c46:	bf 4f       	sbci	r27, 0xFF	; 255
    1c48:	fe 01       	movw	r30, r28
    1c4a:	e7 5a       	subi	r30, 0xA7	; 167
    1c4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c4e:	80 81       	ld	r24, Z
    1c50:	91 81       	ldd	r25, Z+1	; 0x01
    1c52:	01 97       	sbiw	r24, 0x01	; 1
    1c54:	11 96       	adiw	r26, 0x01	; 1
    1c56:	9c 93       	st	X, r25
    1c58:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c5a:	fe 01       	movw	r30, r28
    1c5c:	e7 5a       	subi	r30, 0xA7	; 167
    1c5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c60:	80 81       	ld	r24, Z
    1c62:	91 81       	ldd	r25, Z+1	; 0x01
    1c64:	00 97       	sbiw	r24, 0x00	; 0
    1c66:	d1 f6       	brne	.-76     	; 0x1c1c <LCD_sendCommand+0x108>
    1c68:	27 c0       	rjmp	.+78     	; 0x1cb8 <LCD_sendCommand+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c6a:	8e 01       	movw	r16, r28
    1c6c:	07 5a       	subi	r16, 0xA7	; 167
    1c6e:	1f 4f       	sbci	r17, 0xFF	; 255
    1c70:	fe 01       	movw	r30, r28
    1c72:	e5 5a       	subi	r30, 0xA5	; 165
    1c74:	ff 4f       	sbci	r31, 0xFF	; 255
    1c76:	60 81       	ld	r22, Z
    1c78:	71 81       	ldd	r23, Z+1	; 0x01
    1c7a:	82 81       	ldd	r24, Z+2	; 0x02
    1c7c:	93 81       	ldd	r25, Z+3	; 0x03
    1c7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c82:	dc 01       	movw	r26, r24
    1c84:	cb 01       	movw	r24, r22
    1c86:	f8 01       	movw	r30, r16
    1c88:	91 83       	std	Z+1, r25	; 0x01
    1c8a:	80 83       	st	Z, r24
    1c8c:	de 01       	movw	r26, r28
    1c8e:	ab 5a       	subi	r26, 0xAB	; 171
    1c90:	bf 4f       	sbci	r27, 0xFF	; 255
    1c92:	fe 01       	movw	r30, r28
    1c94:	e7 5a       	subi	r30, 0xA7	; 167
    1c96:	ff 4f       	sbci	r31, 0xFF	; 255
    1c98:	80 81       	ld	r24, Z
    1c9a:	91 81       	ldd	r25, Z+1	; 0x01
    1c9c:	8d 93       	st	X+, r24
    1c9e:	9c 93       	st	X, r25
    1ca0:	fe 01       	movw	r30, r28
    1ca2:	eb 5a       	subi	r30, 0xAB	; 171
    1ca4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca6:	80 81       	ld	r24, Z
    1ca8:	91 81       	ldd	r25, Z+1	; 0x01
    1caa:	01 97       	sbiw	r24, 0x01	; 1
    1cac:	f1 f7       	brne	.-4      	; 0x1caa <LCD_sendCommand+0x196>
    1cae:	fe 01       	movw	r30, r28
    1cb0:	eb 5a       	subi	r30, 0xAB	; 171
    1cb2:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb4:	91 83       	std	Z+1, r25	; 0x01
    1cb6:	80 83       	st	Z, r24
	_delay_ms(1); /* Delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E = 1 */
    1cb8:	ab e3       	ldi	r26, 0x3B	; 59
    1cba:	b0 e0       	ldi	r27, 0x00	; 0
    1cbc:	eb e3       	ldi	r30, 0x3B	; 59
    1cbe:	f0 e0       	ldi	r31, 0x00	; 0
    1cc0:	80 81       	ld	r24, Z
    1cc2:	88 60       	ori	r24, 0x08	; 8
    1cc4:	8c 93       	st	X, r24
    1cc6:	fe 01       	movw	r30, r28
    1cc8:	ef 5a       	subi	r30, 0xAF	; 175
    1cca:	ff 4f       	sbci	r31, 0xFF	; 255
    1ccc:	80 e0       	ldi	r24, 0x00	; 0
    1cce:	90 e0       	ldi	r25, 0x00	; 0
    1cd0:	a0 e8       	ldi	r26, 0x80	; 128
    1cd2:	bf e3       	ldi	r27, 0x3F	; 63
    1cd4:	80 83       	st	Z, r24
    1cd6:	91 83       	std	Z+1, r25	; 0x01
    1cd8:	a2 83       	std	Z+2, r26	; 0x02
    1cda:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cdc:	8e 01       	movw	r16, r28
    1cde:	03 5b       	subi	r16, 0xB3	; 179
    1ce0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ce2:	fe 01       	movw	r30, r28
    1ce4:	ef 5a       	subi	r30, 0xAF	; 175
    1ce6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce8:	60 81       	ld	r22, Z
    1cea:	71 81       	ldd	r23, Z+1	; 0x01
    1cec:	82 81       	ldd	r24, Z+2	; 0x02
    1cee:	93 81       	ldd	r25, Z+3	; 0x03
    1cf0:	20 e0       	ldi	r18, 0x00	; 0
    1cf2:	30 e0       	ldi	r19, 0x00	; 0
    1cf4:	4a ef       	ldi	r20, 0xFA	; 250
    1cf6:	54 e4       	ldi	r21, 0x44	; 68
    1cf8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cfc:	dc 01       	movw	r26, r24
    1cfe:	cb 01       	movw	r24, r22
    1d00:	f8 01       	movw	r30, r16
    1d02:	80 83       	st	Z, r24
    1d04:	91 83       	std	Z+1, r25	; 0x01
    1d06:	a2 83       	std	Z+2, r26	; 0x02
    1d08:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d0a:	fe 01       	movw	r30, r28
    1d0c:	e3 5b       	subi	r30, 0xB3	; 179
    1d0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d10:	60 81       	ld	r22, Z
    1d12:	71 81       	ldd	r23, Z+1	; 0x01
    1d14:	82 81       	ldd	r24, Z+2	; 0x02
    1d16:	93 81       	ldd	r25, Z+3	; 0x03
    1d18:	20 e0       	ldi	r18, 0x00	; 0
    1d1a:	30 e0       	ldi	r19, 0x00	; 0
    1d1c:	40 e8       	ldi	r20, 0x80	; 128
    1d1e:	5f e3       	ldi	r21, 0x3F	; 63
    1d20:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d24:	88 23       	and	r24, r24
    1d26:	44 f4       	brge	.+16     	; 0x1d38 <LCD_sendCommand+0x224>
		__ticks = 1;
    1d28:	fe 01       	movw	r30, r28
    1d2a:	e5 5b       	subi	r30, 0xB5	; 181
    1d2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d2e:	81 e0       	ldi	r24, 0x01	; 1
    1d30:	90 e0       	ldi	r25, 0x00	; 0
    1d32:	91 83       	std	Z+1, r25	; 0x01
    1d34:	80 83       	st	Z, r24
    1d36:	64 c0       	rjmp	.+200    	; 0x1e00 <LCD_sendCommand+0x2ec>
	else if (__tmp > 65535)
    1d38:	fe 01       	movw	r30, r28
    1d3a:	e3 5b       	subi	r30, 0xB3	; 179
    1d3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d3e:	60 81       	ld	r22, Z
    1d40:	71 81       	ldd	r23, Z+1	; 0x01
    1d42:	82 81       	ldd	r24, Z+2	; 0x02
    1d44:	93 81       	ldd	r25, Z+3	; 0x03
    1d46:	20 e0       	ldi	r18, 0x00	; 0
    1d48:	3f ef       	ldi	r19, 0xFF	; 255
    1d4a:	4f e7       	ldi	r20, 0x7F	; 127
    1d4c:	57 e4       	ldi	r21, 0x47	; 71
    1d4e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d52:	18 16       	cp	r1, r24
    1d54:	0c f0       	brlt	.+2      	; 0x1d58 <LCD_sendCommand+0x244>
    1d56:	43 c0       	rjmp	.+134    	; 0x1dde <LCD_sendCommand+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d58:	fe 01       	movw	r30, r28
    1d5a:	ef 5a       	subi	r30, 0xAF	; 175
    1d5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d5e:	60 81       	ld	r22, Z
    1d60:	71 81       	ldd	r23, Z+1	; 0x01
    1d62:	82 81       	ldd	r24, Z+2	; 0x02
    1d64:	93 81       	ldd	r25, Z+3	; 0x03
    1d66:	20 e0       	ldi	r18, 0x00	; 0
    1d68:	30 e0       	ldi	r19, 0x00	; 0
    1d6a:	40 e2       	ldi	r20, 0x20	; 32
    1d6c:	51 e4       	ldi	r21, 0x41	; 65
    1d6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d72:	dc 01       	movw	r26, r24
    1d74:	cb 01       	movw	r24, r22
    1d76:	8e 01       	movw	r16, r28
    1d78:	05 5b       	subi	r16, 0xB5	; 181
    1d7a:	1f 4f       	sbci	r17, 0xFF	; 255
    1d7c:	bc 01       	movw	r22, r24
    1d7e:	cd 01       	movw	r24, r26
    1d80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d84:	dc 01       	movw	r26, r24
    1d86:	cb 01       	movw	r24, r22
    1d88:	f8 01       	movw	r30, r16
    1d8a:	91 83       	std	Z+1, r25	; 0x01
    1d8c:	80 83       	st	Z, r24
    1d8e:	1f c0       	rjmp	.+62     	; 0x1dce <LCD_sendCommand+0x2ba>
    1d90:	fe 01       	movw	r30, r28
    1d92:	e7 5b       	subi	r30, 0xB7	; 183
    1d94:	ff 4f       	sbci	r31, 0xFF	; 255
    1d96:	88 ec       	ldi	r24, 0xC8	; 200
    1d98:	90 e0       	ldi	r25, 0x00	; 0
    1d9a:	91 83       	std	Z+1, r25	; 0x01
    1d9c:	80 83       	st	Z, r24
    1d9e:	fe 01       	movw	r30, r28
    1da0:	e7 5b       	subi	r30, 0xB7	; 183
    1da2:	ff 4f       	sbci	r31, 0xFF	; 255
    1da4:	80 81       	ld	r24, Z
    1da6:	91 81       	ldd	r25, Z+1	; 0x01
    1da8:	01 97       	sbiw	r24, 0x01	; 1
    1daa:	f1 f7       	brne	.-4      	; 0x1da8 <LCD_sendCommand+0x294>
    1dac:	fe 01       	movw	r30, r28
    1dae:	e7 5b       	subi	r30, 0xB7	; 183
    1db0:	ff 4f       	sbci	r31, 0xFF	; 255
    1db2:	91 83       	std	Z+1, r25	; 0x01
    1db4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1db6:	de 01       	movw	r26, r28
    1db8:	a5 5b       	subi	r26, 0xB5	; 181
    1dba:	bf 4f       	sbci	r27, 0xFF	; 255
    1dbc:	fe 01       	movw	r30, r28
    1dbe:	e5 5b       	subi	r30, 0xB5	; 181
    1dc0:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc2:	80 81       	ld	r24, Z
    1dc4:	91 81       	ldd	r25, Z+1	; 0x01
    1dc6:	01 97       	sbiw	r24, 0x01	; 1
    1dc8:	11 96       	adiw	r26, 0x01	; 1
    1dca:	9c 93       	st	X, r25
    1dcc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dce:	fe 01       	movw	r30, r28
    1dd0:	e5 5b       	subi	r30, 0xB5	; 181
    1dd2:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd4:	80 81       	ld	r24, Z
    1dd6:	91 81       	ldd	r25, Z+1	; 0x01
    1dd8:	00 97       	sbiw	r24, 0x00	; 0
    1dda:	d1 f6       	brne	.-76     	; 0x1d90 <LCD_sendCommand+0x27c>
    1ddc:	27 c0       	rjmp	.+78     	; 0x1e2c <LCD_sendCommand+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dde:	8e 01       	movw	r16, r28
    1de0:	05 5b       	subi	r16, 0xB5	; 181
    1de2:	1f 4f       	sbci	r17, 0xFF	; 255
    1de4:	fe 01       	movw	r30, r28
    1de6:	e3 5b       	subi	r30, 0xB3	; 179
    1de8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dea:	60 81       	ld	r22, Z
    1dec:	71 81       	ldd	r23, Z+1	; 0x01
    1dee:	82 81       	ldd	r24, Z+2	; 0x02
    1df0:	93 81       	ldd	r25, Z+3	; 0x03
    1df2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1df6:	dc 01       	movw	r26, r24
    1df8:	cb 01       	movw	r24, r22
    1dfa:	f8 01       	movw	r30, r16
    1dfc:	91 83       	std	Z+1, r25	; 0x01
    1dfe:	80 83       	st	Z, r24
    1e00:	de 01       	movw	r26, r28
    1e02:	a9 5b       	subi	r26, 0xB9	; 185
    1e04:	bf 4f       	sbci	r27, 0xFF	; 255
    1e06:	fe 01       	movw	r30, r28
    1e08:	e5 5b       	subi	r30, 0xB5	; 181
    1e0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e0c:	80 81       	ld	r24, Z
    1e0e:	91 81       	ldd	r25, Z+1	; 0x01
    1e10:	8d 93       	st	X+, r24
    1e12:	9c 93       	st	X, r25
    1e14:	fe 01       	movw	r30, r28
    1e16:	e9 5b       	subi	r30, 0xB9	; 185
    1e18:	ff 4f       	sbci	r31, 0xFF	; 255
    1e1a:	80 81       	ld	r24, Z
    1e1c:	91 81       	ldd	r25, Z+1	; 0x01
    1e1e:	01 97       	sbiw	r24, 0x01	; 1
    1e20:	f1 f7       	brne	.-4      	; 0x1e1e <LCD_sendCommand+0x30a>
    1e22:	fe 01       	movw	r30, r28
    1e24:	e9 5b       	subi	r30, 0xB9	; 185
    1e26:	ff 4f       	sbci	r31, 0xFF	; 255
    1e28:	91 83       	std	Z+1, r25	; 0x01
    1e2a:	80 83       	st	Z, r24
	_delay_ms(1); /* Delay for processing Tpw - Tdws = 190ns */
#if (DATA_BITS_MODE == 4)
	/* Out the highest 4 bits of the required command to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (command & 0xF0);
    1e2c:	ab e3       	ldi	r26, 0x3B	; 59
    1e2e:	b0 e0       	ldi	r27, 0x00	; 0
    1e30:	eb e3       	ldi	r30, 0x3B	; 59
    1e32:	f0 e0       	ldi	r31, 0x00	; 0
    1e34:	80 81       	ld	r24, Z
    1e36:	98 2f       	mov	r25, r24
    1e38:	9f 70       	andi	r25, 0x0F	; 15
    1e3a:	fe 01       	movw	r30, r28
    1e3c:	ed 59       	subi	r30, 0x9D	; 157
    1e3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e40:	80 81       	ld	r24, Z
    1e42:	80 7f       	andi	r24, 0xF0	; 240
    1e44:	89 2b       	or	r24, r25
    1e46:	8c 93       	st	X, r24
    1e48:	fe 01       	movw	r30, r28
    1e4a:	ed 5b       	subi	r30, 0xBD	; 189
    1e4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e4e:	80 e0       	ldi	r24, 0x00	; 0
    1e50:	90 e0       	ldi	r25, 0x00	; 0
    1e52:	a0 e8       	ldi	r26, 0x80	; 128
    1e54:	bf e3       	ldi	r27, 0x3F	; 63
    1e56:	80 83       	st	Z, r24
    1e58:	91 83       	std	Z+1, r25	; 0x01
    1e5a:	a2 83       	std	Z+2, r26	; 0x02
    1e5c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e5e:	8e 01       	movw	r16, r28
    1e60:	01 5c       	subi	r16, 0xC1	; 193
    1e62:	1f 4f       	sbci	r17, 0xFF	; 255
    1e64:	fe 01       	movw	r30, r28
    1e66:	ed 5b       	subi	r30, 0xBD	; 189
    1e68:	ff 4f       	sbci	r31, 0xFF	; 255
    1e6a:	60 81       	ld	r22, Z
    1e6c:	71 81       	ldd	r23, Z+1	; 0x01
    1e6e:	82 81       	ldd	r24, Z+2	; 0x02
    1e70:	93 81       	ldd	r25, Z+3	; 0x03
    1e72:	20 e0       	ldi	r18, 0x00	; 0
    1e74:	30 e0       	ldi	r19, 0x00	; 0
    1e76:	4a ef       	ldi	r20, 0xFA	; 250
    1e78:	54 e4       	ldi	r21, 0x44	; 68
    1e7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e7e:	dc 01       	movw	r26, r24
    1e80:	cb 01       	movw	r24, r22
    1e82:	f8 01       	movw	r30, r16
    1e84:	80 83       	st	Z, r24
    1e86:	91 83       	std	Z+1, r25	; 0x01
    1e88:	a2 83       	std	Z+2, r26	; 0x02
    1e8a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e8c:	fe 01       	movw	r30, r28
    1e8e:	ff 96       	adiw	r30, 0x3f	; 63
    1e90:	60 81       	ld	r22, Z
    1e92:	71 81       	ldd	r23, Z+1	; 0x01
    1e94:	82 81       	ldd	r24, Z+2	; 0x02
    1e96:	93 81       	ldd	r25, Z+3	; 0x03
    1e98:	20 e0       	ldi	r18, 0x00	; 0
    1e9a:	30 e0       	ldi	r19, 0x00	; 0
    1e9c:	40 e8       	ldi	r20, 0x80	; 128
    1e9e:	5f e3       	ldi	r21, 0x3F	; 63
    1ea0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ea4:	88 23       	and	r24, r24
    1ea6:	2c f4       	brge	.+10     	; 0x1eb2 <LCD_sendCommand+0x39e>
		__ticks = 1;
    1ea8:	81 e0       	ldi	r24, 0x01	; 1
    1eaa:	90 e0       	ldi	r25, 0x00	; 0
    1eac:	9e af       	std	Y+62, r25	; 0x3e
    1eae:	8d af       	std	Y+61, r24	; 0x3d
    1eb0:	46 c0       	rjmp	.+140    	; 0x1f3e <LCD_sendCommand+0x42a>
	else if (__tmp > 65535)
    1eb2:	fe 01       	movw	r30, r28
    1eb4:	ff 96       	adiw	r30, 0x3f	; 63
    1eb6:	60 81       	ld	r22, Z
    1eb8:	71 81       	ldd	r23, Z+1	; 0x01
    1eba:	82 81       	ldd	r24, Z+2	; 0x02
    1ebc:	93 81       	ldd	r25, Z+3	; 0x03
    1ebe:	20 e0       	ldi	r18, 0x00	; 0
    1ec0:	3f ef       	ldi	r19, 0xFF	; 255
    1ec2:	4f e7       	ldi	r20, 0x7F	; 127
    1ec4:	57 e4       	ldi	r21, 0x47	; 71
    1ec6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1eca:	18 16       	cp	r1, r24
    1ecc:	64 f5       	brge	.+88     	; 0x1f26 <LCD_sendCommand+0x412>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ece:	fe 01       	movw	r30, r28
    1ed0:	ed 5b       	subi	r30, 0xBD	; 189
    1ed2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed4:	60 81       	ld	r22, Z
    1ed6:	71 81       	ldd	r23, Z+1	; 0x01
    1ed8:	82 81       	ldd	r24, Z+2	; 0x02
    1eda:	93 81       	ldd	r25, Z+3	; 0x03
    1edc:	20 e0       	ldi	r18, 0x00	; 0
    1ede:	30 e0       	ldi	r19, 0x00	; 0
    1ee0:	40 e2       	ldi	r20, 0x20	; 32
    1ee2:	51 e4       	ldi	r21, 0x41	; 65
    1ee4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ee8:	dc 01       	movw	r26, r24
    1eea:	cb 01       	movw	r24, r22
    1eec:	bc 01       	movw	r22, r24
    1eee:	cd 01       	movw	r24, r26
    1ef0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ef4:	dc 01       	movw	r26, r24
    1ef6:	cb 01       	movw	r24, r22
    1ef8:	9e af       	std	Y+62, r25	; 0x3e
    1efa:	8d af       	std	Y+61, r24	; 0x3d
    1efc:	0f c0       	rjmp	.+30     	; 0x1f1c <LCD_sendCommand+0x408>
    1efe:	88 ec       	ldi	r24, 0xC8	; 200
    1f00:	90 e0       	ldi	r25, 0x00	; 0
    1f02:	9c af       	std	Y+60, r25	; 0x3c
    1f04:	8b af       	std	Y+59, r24	; 0x3b
    1f06:	8b ad       	ldd	r24, Y+59	; 0x3b
    1f08:	9c ad       	ldd	r25, Y+60	; 0x3c
    1f0a:	01 97       	sbiw	r24, 0x01	; 1
    1f0c:	f1 f7       	brne	.-4      	; 0x1f0a <LCD_sendCommand+0x3f6>
    1f0e:	9c af       	std	Y+60, r25	; 0x3c
    1f10:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f12:	8d ad       	ldd	r24, Y+61	; 0x3d
    1f14:	9e ad       	ldd	r25, Y+62	; 0x3e
    1f16:	01 97       	sbiw	r24, 0x01	; 1
    1f18:	9e af       	std	Y+62, r25	; 0x3e
    1f1a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f1c:	8d ad       	ldd	r24, Y+61	; 0x3d
    1f1e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1f20:	00 97       	sbiw	r24, 0x00	; 0
    1f22:	69 f7       	brne	.-38     	; 0x1efe <LCD_sendCommand+0x3ea>
    1f24:	16 c0       	rjmp	.+44     	; 0x1f52 <LCD_sendCommand+0x43e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f26:	fe 01       	movw	r30, r28
    1f28:	ff 96       	adiw	r30, 0x3f	; 63
    1f2a:	60 81       	ld	r22, Z
    1f2c:	71 81       	ldd	r23, Z+1	; 0x01
    1f2e:	82 81       	ldd	r24, Z+2	; 0x02
    1f30:	93 81       	ldd	r25, Z+3	; 0x03
    1f32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f36:	dc 01       	movw	r26, r24
    1f38:	cb 01       	movw	r24, r22
    1f3a:	9e af       	std	Y+62, r25	; 0x3e
    1f3c:	8d af       	std	Y+61, r24	; 0x3d
    1f3e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1f40:	9e ad       	ldd	r25, Y+62	; 0x3e
    1f42:	9a af       	std	Y+58, r25	; 0x3a
    1f44:	89 af       	std	Y+57, r24	; 0x39
    1f46:	89 ad       	ldd	r24, Y+57	; 0x39
    1f48:	9a ad       	ldd	r25, Y+58	; 0x3a
    1f4a:	01 97       	sbiw	r24, 0x01	; 1
    1f4c:	f1 f7       	brne	.-4      	; 0x1f4a <LCD_sendCommand+0x436>
    1f4e:	9a af       	std	Y+58, r25	; 0x3a
    1f50:	89 af       	std	Y+57, r24	; 0x39
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | ((command & 0xF0) >> 4);
#endif

	_delay_ms(1); /* Delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E = 0 */
    1f52:	ab e3       	ldi	r26, 0x3B	; 59
    1f54:	b0 e0       	ldi	r27, 0x00	; 0
    1f56:	eb e3       	ldi	r30, 0x3B	; 59
    1f58:	f0 e0       	ldi	r31, 0x00	; 0
    1f5a:	80 81       	ld	r24, Z
    1f5c:	87 7f       	andi	r24, 0xF7	; 247
    1f5e:	8c 93       	st	X, r24
    1f60:	80 e0       	ldi	r24, 0x00	; 0
    1f62:	90 e0       	ldi	r25, 0x00	; 0
    1f64:	a0 e8       	ldi	r26, 0x80	; 128
    1f66:	bf e3       	ldi	r27, 0x3F	; 63
    1f68:	8d ab       	std	Y+53, r24	; 0x35
    1f6a:	9e ab       	std	Y+54, r25	; 0x36
    1f6c:	af ab       	std	Y+55, r26	; 0x37
    1f6e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f70:	6d a9       	ldd	r22, Y+53	; 0x35
    1f72:	7e a9       	ldd	r23, Y+54	; 0x36
    1f74:	8f a9       	ldd	r24, Y+55	; 0x37
    1f76:	98 ad       	ldd	r25, Y+56	; 0x38
    1f78:	20 e0       	ldi	r18, 0x00	; 0
    1f7a:	30 e0       	ldi	r19, 0x00	; 0
    1f7c:	4a ef       	ldi	r20, 0xFA	; 250
    1f7e:	54 e4       	ldi	r21, 0x44	; 68
    1f80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f84:	dc 01       	movw	r26, r24
    1f86:	cb 01       	movw	r24, r22
    1f88:	89 ab       	std	Y+49, r24	; 0x31
    1f8a:	9a ab       	std	Y+50, r25	; 0x32
    1f8c:	ab ab       	std	Y+51, r26	; 0x33
    1f8e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1f90:	69 a9       	ldd	r22, Y+49	; 0x31
    1f92:	7a a9       	ldd	r23, Y+50	; 0x32
    1f94:	8b a9       	ldd	r24, Y+51	; 0x33
    1f96:	9c a9       	ldd	r25, Y+52	; 0x34
    1f98:	20 e0       	ldi	r18, 0x00	; 0
    1f9a:	30 e0       	ldi	r19, 0x00	; 0
    1f9c:	40 e8       	ldi	r20, 0x80	; 128
    1f9e:	5f e3       	ldi	r21, 0x3F	; 63
    1fa0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fa4:	88 23       	and	r24, r24
    1fa6:	2c f4       	brge	.+10     	; 0x1fb2 <LCD_sendCommand+0x49e>
		__ticks = 1;
    1fa8:	81 e0       	ldi	r24, 0x01	; 1
    1faa:	90 e0       	ldi	r25, 0x00	; 0
    1fac:	98 ab       	std	Y+48, r25	; 0x30
    1fae:	8f a7       	std	Y+47, r24	; 0x2f
    1fb0:	3f c0       	rjmp	.+126    	; 0x2030 <LCD_sendCommand+0x51c>
	else if (__tmp > 65535)
    1fb2:	69 a9       	ldd	r22, Y+49	; 0x31
    1fb4:	7a a9       	ldd	r23, Y+50	; 0x32
    1fb6:	8b a9       	ldd	r24, Y+51	; 0x33
    1fb8:	9c a9       	ldd	r25, Y+52	; 0x34
    1fba:	20 e0       	ldi	r18, 0x00	; 0
    1fbc:	3f ef       	ldi	r19, 0xFF	; 255
    1fbe:	4f e7       	ldi	r20, 0x7F	; 127
    1fc0:	57 e4       	ldi	r21, 0x47	; 71
    1fc2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fc6:	18 16       	cp	r1, r24
    1fc8:	4c f5       	brge	.+82     	; 0x201c <LCD_sendCommand+0x508>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fca:	6d a9       	ldd	r22, Y+53	; 0x35
    1fcc:	7e a9       	ldd	r23, Y+54	; 0x36
    1fce:	8f a9       	ldd	r24, Y+55	; 0x37
    1fd0:	98 ad       	ldd	r25, Y+56	; 0x38
    1fd2:	20 e0       	ldi	r18, 0x00	; 0
    1fd4:	30 e0       	ldi	r19, 0x00	; 0
    1fd6:	40 e2       	ldi	r20, 0x20	; 32
    1fd8:	51 e4       	ldi	r21, 0x41	; 65
    1fda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fde:	dc 01       	movw	r26, r24
    1fe0:	cb 01       	movw	r24, r22
    1fe2:	bc 01       	movw	r22, r24
    1fe4:	cd 01       	movw	r24, r26
    1fe6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fea:	dc 01       	movw	r26, r24
    1fec:	cb 01       	movw	r24, r22
    1fee:	98 ab       	std	Y+48, r25	; 0x30
    1ff0:	8f a7       	std	Y+47, r24	; 0x2f
    1ff2:	0f c0       	rjmp	.+30     	; 0x2012 <LCD_sendCommand+0x4fe>
    1ff4:	88 ec       	ldi	r24, 0xC8	; 200
    1ff6:	90 e0       	ldi	r25, 0x00	; 0
    1ff8:	9e a7       	std	Y+46, r25	; 0x2e
    1ffa:	8d a7       	std	Y+45, r24	; 0x2d
    1ffc:	8d a5       	ldd	r24, Y+45	; 0x2d
    1ffe:	9e a5       	ldd	r25, Y+46	; 0x2e
    2000:	01 97       	sbiw	r24, 0x01	; 1
    2002:	f1 f7       	brne	.-4      	; 0x2000 <LCD_sendCommand+0x4ec>
    2004:	9e a7       	std	Y+46, r25	; 0x2e
    2006:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2008:	8f a5       	ldd	r24, Y+47	; 0x2f
    200a:	98 a9       	ldd	r25, Y+48	; 0x30
    200c:	01 97       	sbiw	r24, 0x01	; 1
    200e:	98 ab       	std	Y+48, r25	; 0x30
    2010:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2012:	8f a5       	ldd	r24, Y+47	; 0x2f
    2014:	98 a9       	ldd	r25, Y+48	; 0x30
    2016:	00 97       	sbiw	r24, 0x00	; 0
    2018:	69 f7       	brne	.-38     	; 0x1ff4 <LCD_sendCommand+0x4e0>
    201a:	14 c0       	rjmp	.+40     	; 0x2044 <LCD_sendCommand+0x530>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    201c:	69 a9       	ldd	r22, Y+49	; 0x31
    201e:	7a a9       	ldd	r23, Y+50	; 0x32
    2020:	8b a9       	ldd	r24, Y+51	; 0x33
    2022:	9c a9       	ldd	r25, Y+52	; 0x34
    2024:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2028:	dc 01       	movw	r26, r24
    202a:	cb 01       	movw	r24, r22
    202c:	98 ab       	std	Y+48, r25	; 0x30
    202e:	8f a7       	std	Y+47, r24	; 0x2f
    2030:	8f a5       	ldd	r24, Y+47	; 0x2f
    2032:	98 a9       	ldd	r25, Y+48	; 0x30
    2034:	9c a7       	std	Y+44, r25	; 0x2c
    2036:	8b a7       	std	Y+43, r24	; 0x2b
    2038:	8b a5       	ldd	r24, Y+43	; 0x2b
    203a:	9c a5       	ldd	r25, Y+44	; 0x2c
    203c:	01 97       	sbiw	r24, 0x01	; 1
    203e:	f1 f7       	brne	.-4      	; 0x203c <LCD_sendCommand+0x528>
    2040:	9c a7       	std	Y+44, r25	; 0x2c
    2042:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* Delay for processing Th = 13ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E = 1 */
    2044:	ab e3       	ldi	r26, 0x3B	; 59
    2046:	b0 e0       	ldi	r27, 0x00	; 0
    2048:	eb e3       	ldi	r30, 0x3B	; 59
    204a:	f0 e0       	ldi	r31, 0x00	; 0
    204c:	80 81       	ld	r24, Z
    204e:	88 60       	ori	r24, 0x08	; 8
    2050:	8c 93       	st	X, r24
    2052:	80 e0       	ldi	r24, 0x00	; 0
    2054:	90 e0       	ldi	r25, 0x00	; 0
    2056:	a0 e8       	ldi	r26, 0x80	; 128
    2058:	bf e3       	ldi	r27, 0x3F	; 63
    205a:	8f a3       	std	Y+39, r24	; 0x27
    205c:	98 a7       	std	Y+40, r25	; 0x28
    205e:	a9 a7       	std	Y+41, r26	; 0x29
    2060:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2062:	6f a1       	ldd	r22, Y+39	; 0x27
    2064:	78 a5       	ldd	r23, Y+40	; 0x28
    2066:	89 a5       	ldd	r24, Y+41	; 0x29
    2068:	9a a5       	ldd	r25, Y+42	; 0x2a
    206a:	20 e0       	ldi	r18, 0x00	; 0
    206c:	30 e0       	ldi	r19, 0x00	; 0
    206e:	4a ef       	ldi	r20, 0xFA	; 250
    2070:	54 e4       	ldi	r21, 0x44	; 68
    2072:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2076:	dc 01       	movw	r26, r24
    2078:	cb 01       	movw	r24, r22
    207a:	8b a3       	std	Y+35, r24	; 0x23
    207c:	9c a3       	std	Y+36, r25	; 0x24
    207e:	ad a3       	std	Y+37, r26	; 0x25
    2080:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2082:	6b a1       	ldd	r22, Y+35	; 0x23
    2084:	7c a1       	ldd	r23, Y+36	; 0x24
    2086:	8d a1       	ldd	r24, Y+37	; 0x25
    2088:	9e a1       	ldd	r25, Y+38	; 0x26
    208a:	20 e0       	ldi	r18, 0x00	; 0
    208c:	30 e0       	ldi	r19, 0x00	; 0
    208e:	40 e8       	ldi	r20, 0x80	; 128
    2090:	5f e3       	ldi	r21, 0x3F	; 63
    2092:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2096:	88 23       	and	r24, r24
    2098:	2c f4       	brge	.+10     	; 0x20a4 <LCD_sendCommand+0x590>
		__ticks = 1;
    209a:	81 e0       	ldi	r24, 0x01	; 1
    209c:	90 e0       	ldi	r25, 0x00	; 0
    209e:	9a a3       	std	Y+34, r25	; 0x22
    20a0:	89 a3       	std	Y+33, r24	; 0x21
    20a2:	3f c0       	rjmp	.+126    	; 0x2122 <LCD_sendCommand+0x60e>
	else if (__tmp > 65535)
    20a4:	6b a1       	ldd	r22, Y+35	; 0x23
    20a6:	7c a1       	ldd	r23, Y+36	; 0x24
    20a8:	8d a1       	ldd	r24, Y+37	; 0x25
    20aa:	9e a1       	ldd	r25, Y+38	; 0x26
    20ac:	20 e0       	ldi	r18, 0x00	; 0
    20ae:	3f ef       	ldi	r19, 0xFF	; 255
    20b0:	4f e7       	ldi	r20, 0x7F	; 127
    20b2:	57 e4       	ldi	r21, 0x47	; 71
    20b4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20b8:	18 16       	cp	r1, r24
    20ba:	4c f5       	brge	.+82     	; 0x210e <LCD_sendCommand+0x5fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20bc:	6f a1       	ldd	r22, Y+39	; 0x27
    20be:	78 a5       	ldd	r23, Y+40	; 0x28
    20c0:	89 a5       	ldd	r24, Y+41	; 0x29
    20c2:	9a a5       	ldd	r25, Y+42	; 0x2a
    20c4:	20 e0       	ldi	r18, 0x00	; 0
    20c6:	30 e0       	ldi	r19, 0x00	; 0
    20c8:	40 e2       	ldi	r20, 0x20	; 32
    20ca:	51 e4       	ldi	r21, 0x41	; 65
    20cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20d0:	dc 01       	movw	r26, r24
    20d2:	cb 01       	movw	r24, r22
    20d4:	bc 01       	movw	r22, r24
    20d6:	cd 01       	movw	r24, r26
    20d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20dc:	dc 01       	movw	r26, r24
    20de:	cb 01       	movw	r24, r22
    20e0:	9a a3       	std	Y+34, r25	; 0x22
    20e2:	89 a3       	std	Y+33, r24	; 0x21
    20e4:	0f c0       	rjmp	.+30     	; 0x2104 <LCD_sendCommand+0x5f0>
    20e6:	88 ec       	ldi	r24, 0xC8	; 200
    20e8:	90 e0       	ldi	r25, 0x00	; 0
    20ea:	98 a3       	std	Y+32, r25	; 0x20
    20ec:	8f 8f       	std	Y+31, r24	; 0x1f
    20ee:	8f 8d       	ldd	r24, Y+31	; 0x1f
    20f0:	98 a1       	ldd	r25, Y+32	; 0x20
    20f2:	01 97       	sbiw	r24, 0x01	; 1
    20f4:	f1 f7       	brne	.-4      	; 0x20f2 <LCD_sendCommand+0x5de>
    20f6:	98 a3       	std	Y+32, r25	; 0x20
    20f8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20fa:	89 a1       	ldd	r24, Y+33	; 0x21
    20fc:	9a a1       	ldd	r25, Y+34	; 0x22
    20fe:	01 97       	sbiw	r24, 0x01	; 1
    2100:	9a a3       	std	Y+34, r25	; 0x22
    2102:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2104:	89 a1       	ldd	r24, Y+33	; 0x21
    2106:	9a a1       	ldd	r25, Y+34	; 0x22
    2108:	00 97       	sbiw	r24, 0x00	; 0
    210a:	69 f7       	brne	.-38     	; 0x20e6 <LCD_sendCommand+0x5d2>
    210c:	14 c0       	rjmp	.+40     	; 0x2136 <LCD_sendCommand+0x622>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    210e:	6b a1       	ldd	r22, Y+35	; 0x23
    2110:	7c a1       	ldd	r23, Y+36	; 0x24
    2112:	8d a1       	ldd	r24, Y+37	; 0x25
    2114:	9e a1       	ldd	r25, Y+38	; 0x26
    2116:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    211a:	dc 01       	movw	r26, r24
    211c:	cb 01       	movw	r24, r22
    211e:	9a a3       	std	Y+34, r25	; 0x22
    2120:	89 a3       	std	Y+33, r24	; 0x21
    2122:	89 a1       	ldd	r24, Y+33	; 0x21
    2124:	9a a1       	ldd	r25, Y+34	; 0x22
    2126:	9e 8f       	std	Y+30, r25	; 0x1e
    2128:	8d 8f       	std	Y+29, r24	; 0x1d
    212a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    212c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    212e:	01 97       	sbiw	r24, 0x01	; 1
    2130:	f1 f7       	brne	.-4      	; 0x212e <LCD_sendCommand+0x61a>
    2132:	9e 8f       	std	Y+30, r25	; 0x1e
    2134:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* Delay for processing Tpw - Tdws = 190ns */

	/* Out the lowest 4 bits of the required command to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | ((command & 0x0F) << 4);
    2136:	ab e3       	ldi	r26, 0x3B	; 59
    2138:	b0 e0       	ldi	r27, 0x00	; 0
    213a:	eb e3       	ldi	r30, 0x3B	; 59
    213c:	f0 e0       	ldi	r31, 0x00	; 0
    213e:	80 81       	ld	r24, Z
    2140:	28 2f       	mov	r18, r24
    2142:	2f 70       	andi	r18, 0x0F	; 15
    2144:	fe 01       	movw	r30, r28
    2146:	ed 59       	subi	r30, 0x9D	; 157
    2148:	ff 4f       	sbci	r31, 0xFF	; 255
    214a:	80 81       	ld	r24, Z
    214c:	88 2f       	mov	r24, r24
    214e:	90 e0       	ldi	r25, 0x00	; 0
    2150:	82 95       	swap	r24
    2152:	92 95       	swap	r25
    2154:	90 7f       	andi	r25, 0xF0	; 240
    2156:	98 27       	eor	r25, r24
    2158:	80 7f       	andi	r24, 0xF0	; 240
    215a:	98 27       	eor	r25, r24
    215c:	82 2b       	or	r24, r18
    215e:	8c 93       	st	X, r24
    2160:	80 e0       	ldi	r24, 0x00	; 0
    2162:	90 e0       	ldi	r25, 0x00	; 0
    2164:	a0 e8       	ldi	r26, 0x80	; 128
    2166:	bf e3       	ldi	r27, 0x3F	; 63
    2168:	89 8f       	std	Y+25, r24	; 0x19
    216a:	9a 8f       	std	Y+26, r25	; 0x1a
    216c:	ab 8f       	std	Y+27, r26	; 0x1b
    216e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2170:	69 8d       	ldd	r22, Y+25	; 0x19
    2172:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2174:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2176:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2178:	20 e0       	ldi	r18, 0x00	; 0
    217a:	30 e0       	ldi	r19, 0x00	; 0
    217c:	4a ef       	ldi	r20, 0xFA	; 250
    217e:	54 e4       	ldi	r21, 0x44	; 68
    2180:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2184:	dc 01       	movw	r26, r24
    2186:	cb 01       	movw	r24, r22
    2188:	8d 8b       	std	Y+21, r24	; 0x15
    218a:	9e 8b       	std	Y+22, r25	; 0x16
    218c:	af 8b       	std	Y+23, r26	; 0x17
    218e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2190:	6d 89       	ldd	r22, Y+21	; 0x15
    2192:	7e 89       	ldd	r23, Y+22	; 0x16
    2194:	8f 89       	ldd	r24, Y+23	; 0x17
    2196:	98 8d       	ldd	r25, Y+24	; 0x18
    2198:	20 e0       	ldi	r18, 0x00	; 0
    219a:	30 e0       	ldi	r19, 0x00	; 0
    219c:	40 e8       	ldi	r20, 0x80	; 128
    219e:	5f e3       	ldi	r21, 0x3F	; 63
    21a0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21a4:	88 23       	and	r24, r24
    21a6:	2c f4       	brge	.+10     	; 0x21b2 <LCD_sendCommand+0x69e>
		__ticks = 1;
    21a8:	81 e0       	ldi	r24, 0x01	; 1
    21aa:	90 e0       	ldi	r25, 0x00	; 0
    21ac:	9c 8b       	std	Y+20, r25	; 0x14
    21ae:	8b 8b       	std	Y+19, r24	; 0x13
    21b0:	3f c0       	rjmp	.+126    	; 0x2230 <LCD_sendCommand+0x71c>
	else if (__tmp > 65535)
    21b2:	6d 89       	ldd	r22, Y+21	; 0x15
    21b4:	7e 89       	ldd	r23, Y+22	; 0x16
    21b6:	8f 89       	ldd	r24, Y+23	; 0x17
    21b8:	98 8d       	ldd	r25, Y+24	; 0x18
    21ba:	20 e0       	ldi	r18, 0x00	; 0
    21bc:	3f ef       	ldi	r19, 0xFF	; 255
    21be:	4f e7       	ldi	r20, 0x7F	; 127
    21c0:	57 e4       	ldi	r21, 0x47	; 71
    21c2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21c6:	18 16       	cp	r1, r24
    21c8:	4c f5       	brge	.+82     	; 0x221c <LCD_sendCommand+0x708>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21ca:	69 8d       	ldd	r22, Y+25	; 0x19
    21cc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21ce:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21d0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21d2:	20 e0       	ldi	r18, 0x00	; 0
    21d4:	30 e0       	ldi	r19, 0x00	; 0
    21d6:	40 e2       	ldi	r20, 0x20	; 32
    21d8:	51 e4       	ldi	r21, 0x41	; 65
    21da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21de:	dc 01       	movw	r26, r24
    21e0:	cb 01       	movw	r24, r22
    21e2:	bc 01       	movw	r22, r24
    21e4:	cd 01       	movw	r24, r26
    21e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21ea:	dc 01       	movw	r26, r24
    21ec:	cb 01       	movw	r24, r22
    21ee:	9c 8b       	std	Y+20, r25	; 0x14
    21f0:	8b 8b       	std	Y+19, r24	; 0x13
    21f2:	0f c0       	rjmp	.+30     	; 0x2212 <LCD_sendCommand+0x6fe>
    21f4:	88 ec       	ldi	r24, 0xC8	; 200
    21f6:	90 e0       	ldi	r25, 0x00	; 0
    21f8:	9a 8b       	std	Y+18, r25	; 0x12
    21fa:	89 8b       	std	Y+17, r24	; 0x11
    21fc:	89 89       	ldd	r24, Y+17	; 0x11
    21fe:	9a 89       	ldd	r25, Y+18	; 0x12
    2200:	01 97       	sbiw	r24, 0x01	; 1
    2202:	f1 f7       	brne	.-4      	; 0x2200 <LCD_sendCommand+0x6ec>
    2204:	9a 8b       	std	Y+18, r25	; 0x12
    2206:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2208:	8b 89       	ldd	r24, Y+19	; 0x13
    220a:	9c 89       	ldd	r25, Y+20	; 0x14
    220c:	01 97       	sbiw	r24, 0x01	; 1
    220e:	9c 8b       	std	Y+20, r25	; 0x14
    2210:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2212:	8b 89       	ldd	r24, Y+19	; 0x13
    2214:	9c 89       	ldd	r25, Y+20	; 0x14
    2216:	00 97       	sbiw	r24, 0x00	; 0
    2218:	69 f7       	brne	.-38     	; 0x21f4 <LCD_sendCommand+0x6e0>
    221a:	14 c0       	rjmp	.+40     	; 0x2244 <LCD_sendCommand+0x730>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    221c:	6d 89       	ldd	r22, Y+21	; 0x15
    221e:	7e 89       	ldd	r23, Y+22	; 0x16
    2220:	8f 89       	ldd	r24, Y+23	; 0x17
    2222:	98 8d       	ldd	r25, Y+24	; 0x18
    2224:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2228:	dc 01       	movw	r26, r24
    222a:	cb 01       	movw	r24, r22
    222c:	9c 8b       	std	Y+20, r25	; 0x14
    222e:	8b 8b       	std	Y+19, r24	; 0x13
    2230:	8b 89       	ldd	r24, Y+19	; 0x13
    2232:	9c 89       	ldd	r25, Y+20	; 0x14
    2234:	98 8b       	std	Y+16, r25	; 0x10
    2236:	8f 87       	std	Y+15, r24	; 0x0f
    2238:	8f 85       	ldd	r24, Y+15	; 0x0f
    223a:	98 89       	ldd	r25, Y+16	; 0x10
    223c:	01 97       	sbiw	r24, 0x01	; 1
    223e:	f1 f7       	brne	.-4      	; 0x223c <LCD_sendCommand+0x728>
    2240:	98 8b       	std	Y+16, r25	; 0x10
    2242:	8f 87       	std	Y+15, r24	; 0x0f
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | (command & 0x0F);
#endif

	_delay_ms(1); /* Delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* Disable LCD E = 0 */
    2244:	ab e3       	ldi	r26, 0x3B	; 59
    2246:	b0 e0       	ldi	r27, 0x00	; 0
    2248:	eb e3       	ldi	r30, 0x3B	; 59
    224a:	f0 e0       	ldi	r31, 0x00	; 0
    224c:	80 81       	ld	r24, Z
    224e:	87 7f       	andi	r24, 0xF7	; 247
    2250:	8c 93       	st	X, r24
    2252:	80 e0       	ldi	r24, 0x00	; 0
    2254:	90 e0       	ldi	r25, 0x00	; 0
    2256:	a0 e8       	ldi	r26, 0x80	; 128
    2258:	bf e3       	ldi	r27, 0x3F	; 63
    225a:	8b 87       	std	Y+11, r24	; 0x0b
    225c:	9c 87       	std	Y+12, r25	; 0x0c
    225e:	ad 87       	std	Y+13, r26	; 0x0d
    2260:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2262:	6b 85       	ldd	r22, Y+11	; 0x0b
    2264:	7c 85       	ldd	r23, Y+12	; 0x0c
    2266:	8d 85       	ldd	r24, Y+13	; 0x0d
    2268:	9e 85       	ldd	r25, Y+14	; 0x0e
    226a:	20 e0       	ldi	r18, 0x00	; 0
    226c:	30 e0       	ldi	r19, 0x00	; 0
    226e:	4a ef       	ldi	r20, 0xFA	; 250
    2270:	54 e4       	ldi	r21, 0x44	; 68
    2272:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2276:	dc 01       	movw	r26, r24
    2278:	cb 01       	movw	r24, r22
    227a:	8f 83       	std	Y+7, r24	; 0x07
    227c:	98 87       	std	Y+8, r25	; 0x08
    227e:	a9 87       	std	Y+9, r26	; 0x09
    2280:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2282:	6f 81       	ldd	r22, Y+7	; 0x07
    2284:	78 85       	ldd	r23, Y+8	; 0x08
    2286:	89 85       	ldd	r24, Y+9	; 0x09
    2288:	9a 85       	ldd	r25, Y+10	; 0x0a
    228a:	20 e0       	ldi	r18, 0x00	; 0
    228c:	30 e0       	ldi	r19, 0x00	; 0
    228e:	40 e8       	ldi	r20, 0x80	; 128
    2290:	5f e3       	ldi	r21, 0x3F	; 63
    2292:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2296:	88 23       	and	r24, r24
    2298:	2c f4       	brge	.+10     	; 0x22a4 <LCD_sendCommand+0x790>
		__ticks = 1;
    229a:	81 e0       	ldi	r24, 0x01	; 1
    229c:	90 e0       	ldi	r25, 0x00	; 0
    229e:	9e 83       	std	Y+6, r25	; 0x06
    22a0:	8d 83       	std	Y+5, r24	; 0x05
    22a2:	3f c0       	rjmp	.+126    	; 0x2322 <LCD_sendCommand+0x80e>
	else if (__tmp > 65535)
    22a4:	6f 81       	ldd	r22, Y+7	; 0x07
    22a6:	78 85       	ldd	r23, Y+8	; 0x08
    22a8:	89 85       	ldd	r24, Y+9	; 0x09
    22aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    22ac:	20 e0       	ldi	r18, 0x00	; 0
    22ae:	3f ef       	ldi	r19, 0xFF	; 255
    22b0:	4f e7       	ldi	r20, 0x7F	; 127
    22b2:	57 e4       	ldi	r21, 0x47	; 71
    22b4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22b8:	18 16       	cp	r1, r24
    22ba:	4c f5       	brge	.+82     	; 0x230e <LCD_sendCommand+0x7fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    22be:	7c 85       	ldd	r23, Y+12	; 0x0c
    22c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    22c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    22c4:	20 e0       	ldi	r18, 0x00	; 0
    22c6:	30 e0       	ldi	r19, 0x00	; 0
    22c8:	40 e2       	ldi	r20, 0x20	; 32
    22ca:	51 e4       	ldi	r21, 0x41	; 65
    22cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22d0:	dc 01       	movw	r26, r24
    22d2:	cb 01       	movw	r24, r22
    22d4:	bc 01       	movw	r22, r24
    22d6:	cd 01       	movw	r24, r26
    22d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22dc:	dc 01       	movw	r26, r24
    22de:	cb 01       	movw	r24, r22
    22e0:	9e 83       	std	Y+6, r25	; 0x06
    22e2:	8d 83       	std	Y+5, r24	; 0x05
    22e4:	0f c0       	rjmp	.+30     	; 0x2304 <LCD_sendCommand+0x7f0>
    22e6:	88 ec       	ldi	r24, 0xC8	; 200
    22e8:	90 e0       	ldi	r25, 0x00	; 0
    22ea:	9c 83       	std	Y+4, r25	; 0x04
    22ec:	8b 83       	std	Y+3, r24	; 0x03
    22ee:	8b 81       	ldd	r24, Y+3	; 0x03
    22f0:	9c 81       	ldd	r25, Y+4	; 0x04
    22f2:	01 97       	sbiw	r24, 0x01	; 1
    22f4:	f1 f7       	brne	.-4      	; 0x22f2 <LCD_sendCommand+0x7de>
    22f6:	9c 83       	std	Y+4, r25	; 0x04
    22f8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22fa:	8d 81       	ldd	r24, Y+5	; 0x05
    22fc:	9e 81       	ldd	r25, Y+6	; 0x06
    22fe:	01 97       	sbiw	r24, 0x01	; 1
    2300:	9e 83       	std	Y+6, r25	; 0x06
    2302:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2304:	8d 81       	ldd	r24, Y+5	; 0x05
    2306:	9e 81       	ldd	r25, Y+6	; 0x06
    2308:	00 97       	sbiw	r24, 0x00	; 0
    230a:	69 f7       	brne	.-38     	; 0x22e6 <LCD_sendCommand+0x7d2>
    230c:	14 c0       	rjmp	.+40     	; 0x2336 <LCD_sendCommand+0x822>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    230e:	6f 81       	ldd	r22, Y+7	; 0x07
    2310:	78 85       	ldd	r23, Y+8	; 0x08
    2312:	89 85       	ldd	r24, Y+9	; 0x09
    2314:	9a 85       	ldd	r25, Y+10	; 0x0a
    2316:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    231a:	dc 01       	movw	r26, r24
    231c:	cb 01       	movw	r24, r22
    231e:	9e 83       	std	Y+6, r25	; 0x06
    2320:	8d 83       	std	Y+5, r24	; 0x05
    2322:	8d 81       	ldd	r24, Y+5	; 0x05
    2324:	9e 81       	ldd	r25, Y+6	; 0x06
    2326:	9a 83       	std	Y+2, r25	; 0x02
    2328:	89 83       	std	Y+1, r24	; 0x01
    232a:	89 81       	ldd	r24, Y+1	; 0x01
    232c:	9a 81       	ldd	r25, Y+2	; 0x02
    232e:	01 97       	sbiw	r24, 0x01	; 1
    2330:	f1 f7       	brne	.-4      	; 0x232e <LCD_sendCommand+0x81a>
    2332:	9a 83       	std	Y+2, r25	; 0x02
    2334:	89 83       	std	Y+1, r24	; 0x01
	LCD_DATA_PORT = command; /* Out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* Delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E = 0 */
	_delay_ms(1); /* Delay for processing Th = 13ns */
#endif
}
    2336:	cd 59       	subi	r28, 0x9D	; 157
    2338:	df 4f       	sbci	r29, 0xFF	; 255
    233a:	0f b6       	in	r0, 0x3f	; 63
    233c:	f8 94       	cli
    233e:	de bf       	out	0x3e, r29	; 62
    2340:	0f be       	out	0x3f, r0	; 63
    2342:	cd bf       	out	0x3d, r28	; 61
    2344:	cf 91       	pop	r28
    2346:	df 91       	pop	r29
    2348:	1f 91       	pop	r17
    234a:	0f 91       	pop	r16
    234c:	08 95       	ret

0000234e <LCD_displayCharacter>:

void LCD_displayCharacter(uint8_t data)
{
    234e:	0f 93       	push	r16
    2350:	1f 93       	push	r17
    2352:	df 93       	push	r29
    2354:	cf 93       	push	r28
    2356:	cd b7       	in	r28, 0x3d	; 61
    2358:	de b7       	in	r29, 0x3e	; 62
    235a:	c3 56       	subi	r28, 0x63	; 99
    235c:	d0 40       	sbci	r29, 0x00	; 0
    235e:	0f b6       	in	r0, 0x3f	; 63
    2360:	f8 94       	cli
    2362:	de bf       	out	0x3e, r29	; 62
    2364:	0f be       	out	0x3f, r0	; 63
    2366:	cd bf       	out	0x3d, r28	; 61
    2368:	fe 01       	movw	r30, r28
    236a:	ed 59       	subi	r30, 0x9D	; 157
    236c:	ff 4f       	sbci	r31, 0xFF	; 255
    236e:	80 83       	st	Z, r24
	SET_BIT(LCD_CTRL_PORT,RS); /* Data Mode RS = 1 */
    2370:	ab e3       	ldi	r26, 0x3B	; 59
    2372:	b0 e0       	ldi	r27, 0x00	; 0
    2374:	eb e3       	ldi	r30, 0x3B	; 59
    2376:	f0 e0       	ldi	r31, 0x00	; 0
    2378:	80 81       	ld	r24, Z
    237a:	82 60       	ori	r24, 0x02	; 2
    237c:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* Write data to LCD so RW = 0 */
    237e:	ab e3       	ldi	r26, 0x3B	; 59
    2380:	b0 e0       	ldi	r27, 0x00	; 0
    2382:	eb e3       	ldi	r30, 0x3B	; 59
    2384:	f0 e0       	ldi	r31, 0x00	; 0
    2386:	80 81       	ld	r24, Z
    2388:	8b 7f       	andi	r24, 0xFB	; 251
    238a:	8c 93       	st	X, r24
    238c:	fe 01       	movw	r30, r28
    238e:	e1 5a       	subi	r30, 0xA1	; 161
    2390:	ff 4f       	sbci	r31, 0xFF	; 255
    2392:	80 e0       	ldi	r24, 0x00	; 0
    2394:	90 e0       	ldi	r25, 0x00	; 0
    2396:	a0 e8       	ldi	r26, 0x80	; 128
    2398:	bf e3       	ldi	r27, 0x3F	; 63
    239a:	80 83       	st	Z, r24
    239c:	91 83       	std	Z+1, r25	; 0x01
    239e:	a2 83       	std	Z+2, r26	; 0x02
    23a0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23a2:	8e 01       	movw	r16, r28
    23a4:	05 5a       	subi	r16, 0xA5	; 165
    23a6:	1f 4f       	sbci	r17, 0xFF	; 255
    23a8:	fe 01       	movw	r30, r28
    23aa:	e1 5a       	subi	r30, 0xA1	; 161
    23ac:	ff 4f       	sbci	r31, 0xFF	; 255
    23ae:	60 81       	ld	r22, Z
    23b0:	71 81       	ldd	r23, Z+1	; 0x01
    23b2:	82 81       	ldd	r24, Z+2	; 0x02
    23b4:	93 81       	ldd	r25, Z+3	; 0x03
    23b6:	20 e0       	ldi	r18, 0x00	; 0
    23b8:	30 e0       	ldi	r19, 0x00	; 0
    23ba:	4a ef       	ldi	r20, 0xFA	; 250
    23bc:	54 e4       	ldi	r21, 0x44	; 68
    23be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23c2:	dc 01       	movw	r26, r24
    23c4:	cb 01       	movw	r24, r22
    23c6:	f8 01       	movw	r30, r16
    23c8:	80 83       	st	Z, r24
    23ca:	91 83       	std	Z+1, r25	; 0x01
    23cc:	a2 83       	std	Z+2, r26	; 0x02
    23ce:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    23d0:	fe 01       	movw	r30, r28
    23d2:	e5 5a       	subi	r30, 0xA5	; 165
    23d4:	ff 4f       	sbci	r31, 0xFF	; 255
    23d6:	60 81       	ld	r22, Z
    23d8:	71 81       	ldd	r23, Z+1	; 0x01
    23da:	82 81       	ldd	r24, Z+2	; 0x02
    23dc:	93 81       	ldd	r25, Z+3	; 0x03
    23de:	20 e0       	ldi	r18, 0x00	; 0
    23e0:	30 e0       	ldi	r19, 0x00	; 0
    23e2:	40 e8       	ldi	r20, 0x80	; 128
    23e4:	5f e3       	ldi	r21, 0x3F	; 63
    23e6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23ea:	88 23       	and	r24, r24
    23ec:	44 f4       	brge	.+16     	; 0x23fe <LCD_displayCharacter+0xb0>
		__ticks = 1;
    23ee:	fe 01       	movw	r30, r28
    23f0:	e7 5a       	subi	r30, 0xA7	; 167
    23f2:	ff 4f       	sbci	r31, 0xFF	; 255
    23f4:	81 e0       	ldi	r24, 0x01	; 1
    23f6:	90 e0       	ldi	r25, 0x00	; 0
    23f8:	91 83       	std	Z+1, r25	; 0x01
    23fa:	80 83       	st	Z, r24
    23fc:	64 c0       	rjmp	.+200    	; 0x24c6 <LCD_displayCharacter+0x178>
	else if (__tmp > 65535)
    23fe:	fe 01       	movw	r30, r28
    2400:	e5 5a       	subi	r30, 0xA5	; 165
    2402:	ff 4f       	sbci	r31, 0xFF	; 255
    2404:	60 81       	ld	r22, Z
    2406:	71 81       	ldd	r23, Z+1	; 0x01
    2408:	82 81       	ldd	r24, Z+2	; 0x02
    240a:	93 81       	ldd	r25, Z+3	; 0x03
    240c:	20 e0       	ldi	r18, 0x00	; 0
    240e:	3f ef       	ldi	r19, 0xFF	; 255
    2410:	4f e7       	ldi	r20, 0x7F	; 127
    2412:	57 e4       	ldi	r21, 0x47	; 71
    2414:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2418:	18 16       	cp	r1, r24
    241a:	0c f0       	brlt	.+2      	; 0x241e <LCD_displayCharacter+0xd0>
    241c:	43 c0       	rjmp	.+134    	; 0x24a4 <LCD_displayCharacter+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    241e:	fe 01       	movw	r30, r28
    2420:	e1 5a       	subi	r30, 0xA1	; 161
    2422:	ff 4f       	sbci	r31, 0xFF	; 255
    2424:	60 81       	ld	r22, Z
    2426:	71 81       	ldd	r23, Z+1	; 0x01
    2428:	82 81       	ldd	r24, Z+2	; 0x02
    242a:	93 81       	ldd	r25, Z+3	; 0x03
    242c:	20 e0       	ldi	r18, 0x00	; 0
    242e:	30 e0       	ldi	r19, 0x00	; 0
    2430:	40 e2       	ldi	r20, 0x20	; 32
    2432:	51 e4       	ldi	r21, 0x41	; 65
    2434:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2438:	dc 01       	movw	r26, r24
    243a:	cb 01       	movw	r24, r22
    243c:	8e 01       	movw	r16, r28
    243e:	07 5a       	subi	r16, 0xA7	; 167
    2440:	1f 4f       	sbci	r17, 0xFF	; 255
    2442:	bc 01       	movw	r22, r24
    2444:	cd 01       	movw	r24, r26
    2446:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    244a:	dc 01       	movw	r26, r24
    244c:	cb 01       	movw	r24, r22
    244e:	f8 01       	movw	r30, r16
    2450:	91 83       	std	Z+1, r25	; 0x01
    2452:	80 83       	st	Z, r24
    2454:	1f c0       	rjmp	.+62     	; 0x2494 <LCD_displayCharacter+0x146>
    2456:	fe 01       	movw	r30, r28
    2458:	e9 5a       	subi	r30, 0xA9	; 169
    245a:	ff 4f       	sbci	r31, 0xFF	; 255
    245c:	88 ec       	ldi	r24, 0xC8	; 200
    245e:	90 e0       	ldi	r25, 0x00	; 0
    2460:	91 83       	std	Z+1, r25	; 0x01
    2462:	80 83       	st	Z, r24
    2464:	fe 01       	movw	r30, r28
    2466:	e9 5a       	subi	r30, 0xA9	; 169
    2468:	ff 4f       	sbci	r31, 0xFF	; 255
    246a:	80 81       	ld	r24, Z
    246c:	91 81       	ldd	r25, Z+1	; 0x01
    246e:	01 97       	sbiw	r24, 0x01	; 1
    2470:	f1 f7       	brne	.-4      	; 0x246e <LCD_displayCharacter+0x120>
    2472:	fe 01       	movw	r30, r28
    2474:	e9 5a       	subi	r30, 0xA9	; 169
    2476:	ff 4f       	sbci	r31, 0xFF	; 255
    2478:	91 83       	std	Z+1, r25	; 0x01
    247a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    247c:	de 01       	movw	r26, r28
    247e:	a7 5a       	subi	r26, 0xA7	; 167
    2480:	bf 4f       	sbci	r27, 0xFF	; 255
    2482:	fe 01       	movw	r30, r28
    2484:	e7 5a       	subi	r30, 0xA7	; 167
    2486:	ff 4f       	sbci	r31, 0xFF	; 255
    2488:	80 81       	ld	r24, Z
    248a:	91 81       	ldd	r25, Z+1	; 0x01
    248c:	01 97       	sbiw	r24, 0x01	; 1
    248e:	11 96       	adiw	r26, 0x01	; 1
    2490:	9c 93       	st	X, r25
    2492:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2494:	fe 01       	movw	r30, r28
    2496:	e7 5a       	subi	r30, 0xA7	; 167
    2498:	ff 4f       	sbci	r31, 0xFF	; 255
    249a:	80 81       	ld	r24, Z
    249c:	91 81       	ldd	r25, Z+1	; 0x01
    249e:	00 97       	sbiw	r24, 0x00	; 0
    24a0:	d1 f6       	brne	.-76     	; 0x2456 <LCD_displayCharacter+0x108>
    24a2:	27 c0       	rjmp	.+78     	; 0x24f2 <LCD_displayCharacter+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24a4:	8e 01       	movw	r16, r28
    24a6:	07 5a       	subi	r16, 0xA7	; 167
    24a8:	1f 4f       	sbci	r17, 0xFF	; 255
    24aa:	fe 01       	movw	r30, r28
    24ac:	e5 5a       	subi	r30, 0xA5	; 165
    24ae:	ff 4f       	sbci	r31, 0xFF	; 255
    24b0:	60 81       	ld	r22, Z
    24b2:	71 81       	ldd	r23, Z+1	; 0x01
    24b4:	82 81       	ldd	r24, Z+2	; 0x02
    24b6:	93 81       	ldd	r25, Z+3	; 0x03
    24b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24bc:	dc 01       	movw	r26, r24
    24be:	cb 01       	movw	r24, r22
    24c0:	f8 01       	movw	r30, r16
    24c2:	91 83       	std	Z+1, r25	; 0x01
    24c4:	80 83       	st	Z, r24
    24c6:	de 01       	movw	r26, r28
    24c8:	ab 5a       	subi	r26, 0xAB	; 171
    24ca:	bf 4f       	sbci	r27, 0xFF	; 255
    24cc:	fe 01       	movw	r30, r28
    24ce:	e7 5a       	subi	r30, 0xA7	; 167
    24d0:	ff 4f       	sbci	r31, 0xFF	; 255
    24d2:	80 81       	ld	r24, Z
    24d4:	91 81       	ldd	r25, Z+1	; 0x01
    24d6:	8d 93       	st	X+, r24
    24d8:	9c 93       	st	X, r25
    24da:	fe 01       	movw	r30, r28
    24dc:	eb 5a       	subi	r30, 0xAB	; 171
    24de:	ff 4f       	sbci	r31, 0xFF	; 255
    24e0:	80 81       	ld	r24, Z
    24e2:	91 81       	ldd	r25, Z+1	; 0x01
    24e4:	01 97       	sbiw	r24, 0x01	; 1
    24e6:	f1 f7       	brne	.-4      	; 0x24e4 <LCD_displayCharacter+0x196>
    24e8:	fe 01       	movw	r30, r28
    24ea:	eb 5a       	subi	r30, 0xAB	; 171
    24ec:	ff 4f       	sbci	r31, 0xFF	; 255
    24ee:	91 83       	std	Z+1, r25	; 0x01
    24f0:	80 83       	st	Z, r24
	_delay_ms(1); /* Delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E = 1 */
    24f2:	ab e3       	ldi	r26, 0x3B	; 59
    24f4:	b0 e0       	ldi	r27, 0x00	; 0
    24f6:	eb e3       	ldi	r30, 0x3B	; 59
    24f8:	f0 e0       	ldi	r31, 0x00	; 0
    24fa:	80 81       	ld	r24, Z
    24fc:	88 60       	ori	r24, 0x08	; 8
    24fe:	8c 93       	st	X, r24
    2500:	fe 01       	movw	r30, r28
    2502:	ef 5a       	subi	r30, 0xAF	; 175
    2504:	ff 4f       	sbci	r31, 0xFF	; 255
    2506:	80 e0       	ldi	r24, 0x00	; 0
    2508:	90 e0       	ldi	r25, 0x00	; 0
    250a:	a0 e8       	ldi	r26, 0x80	; 128
    250c:	bf e3       	ldi	r27, 0x3F	; 63
    250e:	80 83       	st	Z, r24
    2510:	91 83       	std	Z+1, r25	; 0x01
    2512:	a2 83       	std	Z+2, r26	; 0x02
    2514:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2516:	8e 01       	movw	r16, r28
    2518:	03 5b       	subi	r16, 0xB3	; 179
    251a:	1f 4f       	sbci	r17, 0xFF	; 255
    251c:	fe 01       	movw	r30, r28
    251e:	ef 5a       	subi	r30, 0xAF	; 175
    2520:	ff 4f       	sbci	r31, 0xFF	; 255
    2522:	60 81       	ld	r22, Z
    2524:	71 81       	ldd	r23, Z+1	; 0x01
    2526:	82 81       	ldd	r24, Z+2	; 0x02
    2528:	93 81       	ldd	r25, Z+3	; 0x03
    252a:	20 e0       	ldi	r18, 0x00	; 0
    252c:	30 e0       	ldi	r19, 0x00	; 0
    252e:	4a ef       	ldi	r20, 0xFA	; 250
    2530:	54 e4       	ldi	r21, 0x44	; 68
    2532:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2536:	dc 01       	movw	r26, r24
    2538:	cb 01       	movw	r24, r22
    253a:	f8 01       	movw	r30, r16
    253c:	80 83       	st	Z, r24
    253e:	91 83       	std	Z+1, r25	; 0x01
    2540:	a2 83       	std	Z+2, r26	; 0x02
    2542:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2544:	fe 01       	movw	r30, r28
    2546:	e3 5b       	subi	r30, 0xB3	; 179
    2548:	ff 4f       	sbci	r31, 0xFF	; 255
    254a:	60 81       	ld	r22, Z
    254c:	71 81       	ldd	r23, Z+1	; 0x01
    254e:	82 81       	ldd	r24, Z+2	; 0x02
    2550:	93 81       	ldd	r25, Z+3	; 0x03
    2552:	20 e0       	ldi	r18, 0x00	; 0
    2554:	30 e0       	ldi	r19, 0x00	; 0
    2556:	40 e8       	ldi	r20, 0x80	; 128
    2558:	5f e3       	ldi	r21, 0x3F	; 63
    255a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    255e:	88 23       	and	r24, r24
    2560:	44 f4       	brge	.+16     	; 0x2572 <LCD_displayCharacter+0x224>
		__ticks = 1;
    2562:	fe 01       	movw	r30, r28
    2564:	e5 5b       	subi	r30, 0xB5	; 181
    2566:	ff 4f       	sbci	r31, 0xFF	; 255
    2568:	81 e0       	ldi	r24, 0x01	; 1
    256a:	90 e0       	ldi	r25, 0x00	; 0
    256c:	91 83       	std	Z+1, r25	; 0x01
    256e:	80 83       	st	Z, r24
    2570:	64 c0       	rjmp	.+200    	; 0x263a <LCD_displayCharacter+0x2ec>
	else if (__tmp > 65535)
    2572:	fe 01       	movw	r30, r28
    2574:	e3 5b       	subi	r30, 0xB3	; 179
    2576:	ff 4f       	sbci	r31, 0xFF	; 255
    2578:	60 81       	ld	r22, Z
    257a:	71 81       	ldd	r23, Z+1	; 0x01
    257c:	82 81       	ldd	r24, Z+2	; 0x02
    257e:	93 81       	ldd	r25, Z+3	; 0x03
    2580:	20 e0       	ldi	r18, 0x00	; 0
    2582:	3f ef       	ldi	r19, 0xFF	; 255
    2584:	4f e7       	ldi	r20, 0x7F	; 127
    2586:	57 e4       	ldi	r21, 0x47	; 71
    2588:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    258c:	18 16       	cp	r1, r24
    258e:	0c f0       	brlt	.+2      	; 0x2592 <LCD_displayCharacter+0x244>
    2590:	43 c0       	rjmp	.+134    	; 0x2618 <LCD_displayCharacter+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2592:	fe 01       	movw	r30, r28
    2594:	ef 5a       	subi	r30, 0xAF	; 175
    2596:	ff 4f       	sbci	r31, 0xFF	; 255
    2598:	60 81       	ld	r22, Z
    259a:	71 81       	ldd	r23, Z+1	; 0x01
    259c:	82 81       	ldd	r24, Z+2	; 0x02
    259e:	93 81       	ldd	r25, Z+3	; 0x03
    25a0:	20 e0       	ldi	r18, 0x00	; 0
    25a2:	30 e0       	ldi	r19, 0x00	; 0
    25a4:	40 e2       	ldi	r20, 0x20	; 32
    25a6:	51 e4       	ldi	r21, 0x41	; 65
    25a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25ac:	dc 01       	movw	r26, r24
    25ae:	cb 01       	movw	r24, r22
    25b0:	8e 01       	movw	r16, r28
    25b2:	05 5b       	subi	r16, 0xB5	; 181
    25b4:	1f 4f       	sbci	r17, 0xFF	; 255
    25b6:	bc 01       	movw	r22, r24
    25b8:	cd 01       	movw	r24, r26
    25ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25be:	dc 01       	movw	r26, r24
    25c0:	cb 01       	movw	r24, r22
    25c2:	f8 01       	movw	r30, r16
    25c4:	91 83       	std	Z+1, r25	; 0x01
    25c6:	80 83       	st	Z, r24
    25c8:	1f c0       	rjmp	.+62     	; 0x2608 <LCD_displayCharacter+0x2ba>
    25ca:	fe 01       	movw	r30, r28
    25cc:	e7 5b       	subi	r30, 0xB7	; 183
    25ce:	ff 4f       	sbci	r31, 0xFF	; 255
    25d0:	88 ec       	ldi	r24, 0xC8	; 200
    25d2:	90 e0       	ldi	r25, 0x00	; 0
    25d4:	91 83       	std	Z+1, r25	; 0x01
    25d6:	80 83       	st	Z, r24
    25d8:	fe 01       	movw	r30, r28
    25da:	e7 5b       	subi	r30, 0xB7	; 183
    25dc:	ff 4f       	sbci	r31, 0xFF	; 255
    25de:	80 81       	ld	r24, Z
    25e0:	91 81       	ldd	r25, Z+1	; 0x01
    25e2:	01 97       	sbiw	r24, 0x01	; 1
    25e4:	f1 f7       	brne	.-4      	; 0x25e2 <LCD_displayCharacter+0x294>
    25e6:	fe 01       	movw	r30, r28
    25e8:	e7 5b       	subi	r30, 0xB7	; 183
    25ea:	ff 4f       	sbci	r31, 0xFF	; 255
    25ec:	91 83       	std	Z+1, r25	; 0x01
    25ee:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25f0:	de 01       	movw	r26, r28
    25f2:	a5 5b       	subi	r26, 0xB5	; 181
    25f4:	bf 4f       	sbci	r27, 0xFF	; 255
    25f6:	fe 01       	movw	r30, r28
    25f8:	e5 5b       	subi	r30, 0xB5	; 181
    25fa:	ff 4f       	sbci	r31, 0xFF	; 255
    25fc:	80 81       	ld	r24, Z
    25fe:	91 81       	ldd	r25, Z+1	; 0x01
    2600:	01 97       	sbiw	r24, 0x01	; 1
    2602:	11 96       	adiw	r26, 0x01	; 1
    2604:	9c 93       	st	X, r25
    2606:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2608:	fe 01       	movw	r30, r28
    260a:	e5 5b       	subi	r30, 0xB5	; 181
    260c:	ff 4f       	sbci	r31, 0xFF	; 255
    260e:	80 81       	ld	r24, Z
    2610:	91 81       	ldd	r25, Z+1	; 0x01
    2612:	00 97       	sbiw	r24, 0x00	; 0
    2614:	d1 f6       	brne	.-76     	; 0x25ca <LCD_displayCharacter+0x27c>
    2616:	27 c0       	rjmp	.+78     	; 0x2666 <LCD_displayCharacter+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2618:	8e 01       	movw	r16, r28
    261a:	05 5b       	subi	r16, 0xB5	; 181
    261c:	1f 4f       	sbci	r17, 0xFF	; 255
    261e:	fe 01       	movw	r30, r28
    2620:	e3 5b       	subi	r30, 0xB3	; 179
    2622:	ff 4f       	sbci	r31, 0xFF	; 255
    2624:	60 81       	ld	r22, Z
    2626:	71 81       	ldd	r23, Z+1	; 0x01
    2628:	82 81       	ldd	r24, Z+2	; 0x02
    262a:	93 81       	ldd	r25, Z+3	; 0x03
    262c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2630:	dc 01       	movw	r26, r24
    2632:	cb 01       	movw	r24, r22
    2634:	f8 01       	movw	r30, r16
    2636:	91 83       	std	Z+1, r25	; 0x01
    2638:	80 83       	st	Z, r24
    263a:	de 01       	movw	r26, r28
    263c:	a9 5b       	subi	r26, 0xB9	; 185
    263e:	bf 4f       	sbci	r27, 0xFF	; 255
    2640:	fe 01       	movw	r30, r28
    2642:	e5 5b       	subi	r30, 0xB5	; 181
    2644:	ff 4f       	sbci	r31, 0xFF	; 255
    2646:	80 81       	ld	r24, Z
    2648:	91 81       	ldd	r25, Z+1	; 0x01
    264a:	8d 93       	st	X+, r24
    264c:	9c 93       	st	X, r25
    264e:	fe 01       	movw	r30, r28
    2650:	e9 5b       	subi	r30, 0xB9	; 185
    2652:	ff 4f       	sbci	r31, 0xFF	; 255
    2654:	80 81       	ld	r24, Z
    2656:	91 81       	ldd	r25, Z+1	; 0x01
    2658:	01 97       	sbiw	r24, 0x01	; 1
    265a:	f1 f7       	brne	.-4      	; 0x2658 <LCD_displayCharacter+0x30a>
    265c:	fe 01       	movw	r30, r28
    265e:	e9 5b       	subi	r30, 0xB9	; 185
    2660:	ff 4f       	sbci	r31, 0xFF	; 255
    2662:	91 83       	std	Z+1, r25	; 0x01
    2664:	80 83       	st	Z, r24
	_delay_ms(1); /* Delay for processing Tpw - Tdws = 190ns */
#if (DATA_BITS_MODE == 4)
	/* Out the highest 4 bits of the required data to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (data & 0xF0);
    2666:	ab e3       	ldi	r26, 0x3B	; 59
    2668:	b0 e0       	ldi	r27, 0x00	; 0
    266a:	eb e3       	ldi	r30, 0x3B	; 59
    266c:	f0 e0       	ldi	r31, 0x00	; 0
    266e:	80 81       	ld	r24, Z
    2670:	98 2f       	mov	r25, r24
    2672:	9f 70       	andi	r25, 0x0F	; 15
    2674:	fe 01       	movw	r30, r28
    2676:	ed 59       	subi	r30, 0x9D	; 157
    2678:	ff 4f       	sbci	r31, 0xFF	; 255
    267a:	80 81       	ld	r24, Z
    267c:	80 7f       	andi	r24, 0xF0	; 240
    267e:	89 2b       	or	r24, r25
    2680:	8c 93       	st	X, r24
    2682:	fe 01       	movw	r30, r28
    2684:	ed 5b       	subi	r30, 0xBD	; 189
    2686:	ff 4f       	sbci	r31, 0xFF	; 255
    2688:	80 e0       	ldi	r24, 0x00	; 0
    268a:	90 e0       	ldi	r25, 0x00	; 0
    268c:	a0 e8       	ldi	r26, 0x80	; 128
    268e:	bf e3       	ldi	r27, 0x3F	; 63
    2690:	80 83       	st	Z, r24
    2692:	91 83       	std	Z+1, r25	; 0x01
    2694:	a2 83       	std	Z+2, r26	; 0x02
    2696:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2698:	8e 01       	movw	r16, r28
    269a:	01 5c       	subi	r16, 0xC1	; 193
    269c:	1f 4f       	sbci	r17, 0xFF	; 255
    269e:	fe 01       	movw	r30, r28
    26a0:	ed 5b       	subi	r30, 0xBD	; 189
    26a2:	ff 4f       	sbci	r31, 0xFF	; 255
    26a4:	60 81       	ld	r22, Z
    26a6:	71 81       	ldd	r23, Z+1	; 0x01
    26a8:	82 81       	ldd	r24, Z+2	; 0x02
    26aa:	93 81       	ldd	r25, Z+3	; 0x03
    26ac:	20 e0       	ldi	r18, 0x00	; 0
    26ae:	30 e0       	ldi	r19, 0x00	; 0
    26b0:	4a ef       	ldi	r20, 0xFA	; 250
    26b2:	54 e4       	ldi	r21, 0x44	; 68
    26b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26b8:	dc 01       	movw	r26, r24
    26ba:	cb 01       	movw	r24, r22
    26bc:	f8 01       	movw	r30, r16
    26be:	80 83       	st	Z, r24
    26c0:	91 83       	std	Z+1, r25	; 0x01
    26c2:	a2 83       	std	Z+2, r26	; 0x02
    26c4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    26c6:	fe 01       	movw	r30, r28
    26c8:	ff 96       	adiw	r30, 0x3f	; 63
    26ca:	60 81       	ld	r22, Z
    26cc:	71 81       	ldd	r23, Z+1	; 0x01
    26ce:	82 81       	ldd	r24, Z+2	; 0x02
    26d0:	93 81       	ldd	r25, Z+3	; 0x03
    26d2:	20 e0       	ldi	r18, 0x00	; 0
    26d4:	30 e0       	ldi	r19, 0x00	; 0
    26d6:	40 e8       	ldi	r20, 0x80	; 128
    26d8:	5f e3       	ldi	r21, 0x3F	; 63
    26da:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26de:	88 23       	and	r24, r24
    26e0:	2c f4       	brge	.+10     	; 0x26ec <LCD_displayCharacter+0x39e>
		__ticks = 1;
    26e2:	81 e0       	ldi	r24, 0x01	; 1
    26e4:	90 e0       	ldi	r25, 0x00	; 0
    26e6:	9e af       	std	Y+62, r25	; 0x3e
    26e8:	8d af       	std	Y+61, r24	; 0x3d
    26ea:	46 c0       	rjmp	.+140    	; 0x2778 <LCD_displayCharacter+0x42a>
	else if (__tmp > 65535)
    26ec:	fe 01       	movw	r30, r28
    26ee:	ff 96       	adiw	r30, 0x3f	; 63
    26f0:	60 81       	ld	r22, Z
    26f2:	71 81       	ldd	r23, Z+1	; 0x01
    26f4:	82 81       	ldd	r24, Z+2	; 0x02
    26f6:	93 81       	ldd	r25, Z+3	; 0x03
    26f8:	20 e0       	ldi	r18, 0x00	; 0
    26fa:	3f ef       	ldi	r19, 0xFF	; 255
    26fc:	4f e7       	ldi	r20, 0x7F	; 127
    26fe:	57 e4       	ldi	r21, 0x47	; 71
    2700:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2704:	18 16       	cp	r1, r24
    2706:	64 f5       	brge	.+88     	; 0x2760 <LCD_displayCharacter+0x412>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2708:	fe 01       	movw	r30, r28
    270a:	ed 5b       	subi	r30, 0xBD	; 189
    270c:	ff 4f       	sbci	r31, 0xFF	; 255
    270e:	60 81       	ld	r22, Z
    2710:	71 81       	ldd	r23, Z+1	; 0x01
    2712:	82 81       	ldd	r24, Z+2	; 0x02
    2714:	93 81       	ldd	r25, Z+3	; 0x03
    2716:	20 e0       	ldi	r18, 0x00	; 0
    2718:	30 e0       	ldi	r19, 0x00	; 0
    271a:	40 e2       	ldi	r20, 0x20	; 32
    271c:	51 e4       	ldi	r21, 0x41	; 65
    271e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2722:	dc 01       	movw	r26, r24
    2724:	cb 01       	movw	r24, r22
    2726:	bc 01       	movw	r22, r24
    2728:	cd 01       	movw	r24, r26
    272a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    272e:	dc 01       	movw	r26, r24
    2730:	cb 01       	movw	r24, r22
    2732:	9e af       	std	Y+62, r25	; 0x3e
    2734:	8d af       	std	Y+61, r24	; 0x3d
    2736:	0f c0       	rjmp	.+30     	; 0x2756 <LCD_displayCharacter+0x408>
    2738:	88 ec       	ldi	r24, 0xC8	; 200
    273a:	90 e0       	ldi	r25, 0x00	; 0
    273c:	9c af       	std	Y+60, r25	; 0x3c
    273e:	8b af       	std	Y+59, r24	; 0x3b
    2740:	8b ad       	ldd	r24, Y+59	; 0x3b
    2742:	9c ad       	ldd	r25, Y+60	; 0x3c
    2744:	01 97       	sbiw	r24, 0x01	; 1
    2746:	f1 f7       	brne	.-4      	; 0x2744 <LCD_displayCharacter+0x3f6>
    2748:	9c af       	std	Y+60, r25	; 0x3c
    274a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    274c:	8d ad       	ldd	r24, Y+61	; 0x3d
    274e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2750:	01 97       	sbiw	r24, 0x01	; 1
    2752:	9e af       	std	Y+62, r25	; 0x3e
    2754:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2756:	8d ad       	ldd	r24, Y+61	; 0x3d
    2758:	9e ad       	ldd	r25, Y+62	; 0x3e
    275a:	00 97       	sbiw	r24, 0x00	; 0
    275c:	69 f7       	brne	.-38     	; 0x2738 <LCD_displayCharacter+0x3ea>
    275e:	16 c0       	rjmp	.+44     	; 0x278c <LCD_displayCharacter+0x43e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2760:	fe 01       	movw	r30, r28
    2762:	ff 96       	adiw	r30, 0x3f	; 63
    2764:	60 81       	ld	r22, Z
    2766:	71 81       	ldd	r23, Z+1	; 0x01
    2768:	82 81       	ldd	r24, Z+2	; 0x02
    276a:	93 81       	ldd	r25, Z+3	; 0x03
    276c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2770:	dc 01       	movw	r26, r24
    2772:	cb 01       	movw	r24, r22
    2774:	9e af       	std	Y+62, r25	; 0x3e
    2776:	8d af       	std	Y+61, r24	; 0x3d
    2778:	8d ad       	ldd	r24, Y+61	; 0x3d
    277a:	9e ad       	ldd	r25, Y+62	; 0x3e
    277c:	9a af       	std	Y+58, r25	; 0x3a
    277e:	89 af       	std	Y+57, r24	; 0x39
    2780:	89 ad       	ldd	r24, Y+57	; 0x39
    2782:	9a ad       	ldd	r25, Y+58	; 0x3a
    2784:	01 97       	sbiw	r24, 0x01	; 1
    2786:	f1 f7       	brne	.-4      	; 0x2784 <LCD_displayCharacter+0x436>
    2788:	9a af       	std	Y+58, r25	; 0x3a
    278a:	89 af       	std	Y+57, r24	; 0x39
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | ((data & 0xF0) >> 4);
#endif

	_delay_ms(1); /* Delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* Disable LCD E = 0 */
    278c:	ab e3       	ldi	r26, 0x3B	; 59
    278e:	b0 e0       	ldi	r27, 0x00	; 0
    2790:	eb e3       	ldi	r30, 0x3B	; 59
    2792:	f0 e0       	ldi	r31, 0x00	; 0
    2794:	80 81       	ld	r24, Z
    2796:	87 7f       	andi	r24, 0xF7	; 247
    2798:	8c 93       	st	X, r24
    279a:	80 e0       	ldi	r24, 0x00	; 0
    279c:	90 e0       	ldi	r25, 0x00	; 0
    279e:	a0 e8       	ldi	r26, 0x80	; 128
    27a0:	bf e3       	ldi	r27, 0x3F	; 63
    27a2:	8d ab       	std	Y+53, r24	; 0x35
    27a4:	9e ab       	std	Y+54, r25	; 0x36
    27a6:	af ab       	std	Y+55, r26	; 0x37
    27a8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27aa:	6d a9       	ldd	r22, Y+53	; 0x35
    27ac:	7e a9       	ldd	r23, Y+54	; 0x36
    27ae:	8f a9       	ldd	r24, Y+55	; 0x37
    27b0:	98 ad       	ldd	r25, Y+56	; 0x38
    27b2:	20 e0       	ldi	r18, 0x00	; 0
    27b4:	30 e0       	ldi	r19, 0x00	; 0
    27b6:	4a ef       	ldi	r20, 0xFA	; 250
    27b8:	54 e4       	ldi	r21, 0x44	; 68
    27ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27be:	dc 01       	movw	r26, r24
    27c0:	cb 01       	movw	r24, r22
    27c2:	89 ab       	std	Y+49, r24	; 0x31
    27c4:	9a ab       	std	Y+50, r25	; 0x32
    27c6:	ab ab       	std	Y+51, r26	; 0x33
    27c8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    27ca:	69 a9       	ldd	r22, Y+49	; 0x31
    27cc:	7a a9       	ldd	r23, Y+50	; 0x32
    27ce:	8b a9       	ldd	r24, Y+51	; 0x33
    27d0:	9c a9       	ldd	r25, Y+52	; 0x34
    27d2:	20 e0       	ldi	r18, 0x00	; 0
    27d4:	30 e0       	ldi	r19, 0x00	; 0
    27d6:	40 e8       	ldi	r20, 0x80	; 128
    27d8:	5f e3       	ldi	r21, 0x3F	; 63
    27da:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27de:	88 23       	and	r24, r24
    27e0:	2c f4       	brge	.+10     	; 0x27ec <LCD_displayCharacter+0x49e>
		__ticks = 1;
    27e2:	81 e0       	ldi	r24, 0x01	; 1
    27e4:	90 e0       	ldi	r25, 0x00	; 0
    27e6:	98 ab       	std	Y+48, r25	; 0x30
    27e8:	8f a7       	std	Y+47, r24	; 0x2f
    27ea:	3f c0       	rjmp	.+126    	; 0x286a <LCD_displayCharacter+0x51c>
	else if (__tmp > 65535)
    27ec:	69 a9       	ldd	r22, Y+49	; 0x31
    27ee:	7a a9       	ldd	r23, Y+50	; 0x32
    27f0:	8b a9       	ldd	r24, Y+51	; 0x33
    27f2:	9c a9       	ldd	r25, Y+52	; 0x34
    27f4:	20 e0       	ldi	r18, 0x00	; 0
    27f6:	3f ef       	ldi	r19, 0xFF	; 255
    27f8:	4f e7       	ldi	r20, 0x7F	; 127
    27fa:	57 e4       	ldi	r21, 0x47	; 71
    27fc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2800:	18 16       	cp	r1, r24
    2802:	4c f5       	brge	.+82     	; 0x2856 <LCD_displayCharacter+0x508>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2804:	6d a9       	ldd	r22, Y+53	; 0x35
    2806:	7e a9       	ldd	r23, Y+54	; 0x36
    2808:	8f a9       	ldd	r24, Y+55	; 0x37
    280a:	98 ad       	ldd	r25, Y+56	; 0x38
    280c:	20 e0       	ldi	r18, 0x00	; 0
    280e:	30 e0       	ldi	r19, 0x00	; 0
    2810:	40 e2       	ldi	r20, 0x20	; 32
    2812:	51 e4       	ldi	r21, 0x41	; 65
    2814:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2818:	dc 01       	movw	r26, r24
    281a:	cb 01       	movw	r24, r22
    281c:	bc 01       	movw	r22, r24
    281e:	cd 01       	movw	r24, r26
    2820:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2824:	dc 01       	movw	r26, r24
    2826:	cb 01       	movw	r24, r22
    2828:	98 ab       	std	Y+48, r25	; 0x30
    282a:	8f a7       	std	Y+47, r24	; 0x2f
    282c:	0f c0       	rjmp	.+30     	; 0x284c <LCD_displayCharacter+0x4fe>
    282e:	88 ec       	ldi	r24, 0xC8	; 200
    2830:	90 e0       	ldi	r25, 0x00	; 0
    2832:	9e a7       	std	Y+46, r25	; 0x2e
    2834:	8d a7       	std	Y+45, r24	; 0x2d
    2836:	8d a5       	ldd	r24, Y+45	; 0x2d
    2838:	9e a5       	ldd	r25, Y+46	; 0x2e
    283a:	01 97       	sbiw	r24, 0x01	; 1
    283c:	f1 f7       	brne	.-4      	; 0x283a <LCD_displayCharacter+0x4ec>
    283e:	9e a7       	std	Y+46, r25	; 0x2e
    2840:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2842:	8f a5       	ldd	r24, Y+47	; 0x2f
    2844:	98 a9       	ldd	r25, Y+48	; 0x30
    2846:	01 97       	sbiw	r24, 0x01	; 1
    2848:	98 ab       	std	Y+48, r25	; 0x30
    284a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    284c:	8f a5       	ldd	r24, Y+47	; 0x2f
    284e:	98 a9       	ldd	r25, Y+48	; 0x30
    2850:	00 97       	sbiw	r24, 0x00	; 0
    2852:	69 f7       	brne	.-38     	; 0x282e <LCD_displayCharacter+0x4e0>
    2854:	14 c0       	rjmp	.+40     	; 0x287e <LCD_displayCharacter+0x530>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2856:	69 a9       	ldd	r22, Y+49	; 0x31
    2858:	7a a9       	ldd	r23, Y+50	; 0x32
    285a:	8b a9       	ldd	r24, Y+51	; 0x33
    285c:	9c a9       	ldd	r25, Y+52	; 0x34
    285e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2862:	dc 01       	movw	r26, r24
    2864:	cb 01       	movw	r24, r22
    2866:	98 ab       	std	Y+48, r25	; 0x30
    2868:	8f a7       	std	Y+47, r24	; 0x2f
    286a:	8f a5       	ldd	r24, Y+47	; 0x2f
    286c:	98 a9       	ldd	r25, Y+48	; 0x30
    286e:	9c a7       	std	Y+44, r25	; 0x2c
    2870:	8b a7       	std	Y+43, r24	; 0x2b
    2872:	8b a5       	ldd	r24, Y+43	; 0x2b
    2874:	9c a5       	ldd	r25, Y+44	; 0x2c
    2876:	01 97       	sbiw	r24, 0x01	; 1
    2878:	f1 f7       	brne	.-4      	; 0x2876 <LCD_displayCharacter+0x528>
    287a:	9c a7       	std	Y+44, r25	; 0x2c
    287c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* Delay for processing Th = 13ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    287e:	ab e3       	ldi	r26, 0x3B	; 59
    2880:	b0 e0       	ldi	r27, 0x00	; 0
    2882:	eb e3       	ldi	r30, 0x3B	; 59
    2884:	f0 e0       	ldi	r31, 0x00	; 0
    2886:	80 81       	ld	r24, Z
    2888:	88 60       	ori	r24, 0x08	; 8
    288a:	8c 93       	st	X, r24
    288c:	80 e0       	ldi	r24, 0x00	; 0
    288e:	90 e0       	ldi	r25, 0x00	; 0
    2890:	a0 e8       	ldi	r26, 0x80	; 128
    2892:	bf e3       	ldi	r27, 0x3F	; 63
    2894:	8f a3       	std	Y+39, r24	; 0x27
    2896:	98 a7       	std	Y+40, r25	; 0x28
    2898:	a9 a7       	std	Y+41, r26	; 0x29
    289a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    289c:	6f a1       	ldd	r22, Y+39	; 0x27
    289e:	78 a5       	ldd	r23, Y+40	; 0x28
    28a0:	89 a5       	ldd	r24, Y+41	; 0x29
    28a2:	9a a5       	ldd	r25, Y+42	; 0x2a
    28a4:	20 e0       	ldi	r18, 0x00	; 0
    28a6:	30 e0       	ldi	r19, 0x00	; 0
    28a8:	4a ef       	ldi	r20, 0xFA	; 250
    28aa:	54 e4       	ldi	r21, 0x44	; 68
    28ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28b0:	dc 01       	movw	r26, r24
    28b2:	cb 01       	movw	r24, r22
    28b4:	8b a3       	std	Y+35, r24	; 0x23
    28b6:	9c a3       	std	Y+36, r25	; 0x24
    28b8:	ad a3       	std	Y+37, r26	; 0x25
    28ba:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    28bc:	6b a1       	ldd	r22, Y+35	; 0x23
    28be:	7c a1       	ldd	r23, Y+36	; 0x24
    28c0:	8d a1       	ldd	r24, Y+37	; 0x25
    28c2:	9e a1       	ldd	r25, Y+38	; 0x26
    28c4:	20 e0       	ldi	r18, 0x00	; 0
    28c6:	30 e0       	ldi	r19, 0x00	; 0
    28c8:	40 e8       	ldi	r20, 0x80	; 128
    28ca:	5f e3       	ldi	r21, 0x3F	; 63
    28cc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28d0:	88 23       	and	r24, r24
    28d2:	2c f4       	brge	.+10     	; 0x28de <LCD_displayCharacter+0x590>
		__ticks = 1;
    28d4:	81 e0       	ldi	r24, 0x01	; 1
    28d6:	90 e0       	ldi	r25, 0x00	; 0
    28d8:	9a a3       	std	Y+34, r25	; 0x22
    28da:	89 a3       	std	Y+33, r24	; 0x21
    28dc:	3f c0       	rjmp	.+126    	; 0x295c <LCD_displayCharacter+0x60e>
	else if (__tmp > 65535)
    28de:	6b a1       	ldd	r22, Y+35	; 0x23
    28e0:	7c a1       	ldd	r23, Y+36	; 0x24
    28e2:	8d a1       	ldd	r24, Y+37	; 0x25
    28e4:	9e a1       	ldd	r25, Y+38	; 0x26
    28e6:	20 e0       	ldi	r18, 0x00	; 0
    28e8:	3f ef       	ldi	r19, 0xFF	; 255
    28ea:	4f e7       	ldi	r20, 0x7F	; 127
    28ec:	57 e4       	ldi	r21, 0x47	; 71
    28ee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28f2:	18 16       	cp	r1, r24
    28f4:	4c f5       	brge	.+82     	; 0x2948 <LCD_displayCharacter+0x5fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28f6:	6f a1       	ldd	r22, Y+39	; 0x27
    28f8:	78 a5       	ldd	r23, Y+40	; 0x28
    28fa:	89 a5       	ldd	r24, Y+41	; 0x29
    28fc:	9a a5       	ldd	r25, Y+42	; 0x2a
    28fe:	20 e0       	ldi	r18, 0x00	; 0
    2900:	30 e0       	ldi	r19, 0x00	; 0
    2902:	40 e2       	ldi	r20, 0x20	; 32
    2904:	51 e4       	ldi	r21, 0x41	; 65
    2906:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    290a:	dc 01       	movw	r26, r24
    290c:	cb 01       	movw	r24, r22
    290e:	bc 01       	movw	r22, r24
    2910:	cd 01       	movw	r24, r26
    2912:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2916:	dc 01       	movw	r26, r24
    2918:	cb 01       	movw	r24, r22
    291a:	9a a3       	std	Y+34, r25	; 0x22
    291c:	89 a3       	std	Y+33, r24	; 0x21
    291e:	0f c0       	rjmp	.+30     	; 0x293e <LCD_displayCharacter+0x5f0>
    2920:	88 ec       	ldi	r24, 0xC8	; 200
    2922:	90 e0       	ldi	r25, 0x00	; 0
    2924:	98 a3       	std	Y+32, r25	; 0x20
    2926:	8f 8f       	std	Y+31, r24	; 0x1f
    2928:	8f 8d       	ldd	r24, Y+31	; 0x1f
    292a:	98 a1       	ldd	r25, Y+32	; 0x20
    292c:	01 97       	sbiw	r24, 0x01	; 1
    292e:	f1 f7       	brne	.-4      	; 0x292c <LCD_displayCharacter+0x5de>
    2930:	98 a3       	std	Y+32, r25	; 0x20
    2932:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2934:	89 a1       	ldd	r24, Y+33	; 0x21
    2936:	9a a1       	ldd	r25, Y+34	; 0x22
    2938:	01 97       	sbiw	r24, 0x01	; 1
    293a:	9a a3       	std	Y+34, r25	; 0x22
    293c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    293e:	89 a1       	ldd	r24, Y+33	; 0x21
    2940:	9a a1       	ldd	r25, Y+34	; 0x22
    2942:	00 97       	sbiw	r24, 0x00	; 0
    2944:	69 f7       	brne	.-38     	; 0x2920 <LCD_displayCharacter+0x5d2>
    2946:	14 c0       	rjmp	.+40     	; 0x2970 <LCD_displayCharacter+0x622>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2948:	6b a1       	ldd	r22, Y+35	; 0x23
    294a:	7c a1       	ldd	r23, Y+36	; 0x24
    294c:	8d a1       	ldd	r24, Y+37	; 0x25
    294e:	9e a1       	ldd	r25, Y+38	; 0x26
    2950:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2954:	dc 01       	movw	r26, r24
    2956:	cb 01       	movw	r24, r22
    2958:	9a a3       	std	Y+34, r25	; 0x22
    295a:	89 a3       	std	Y+33, r24	; 0x21
    295c:	89 a1       	ldd	r24, Y+33	; 0x21
    295e:	9a a1       	ldd	r25, Y+34	; 0x22
    2960:	9e 8f       	std	Y+30, r25	; 0x1e
    2962:	8d 8f       	std	Y+29, r24	; 0x1d
    2964:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2966:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2968:	01 97       	sbiw	r24, 0x01	; 1
    296a:	f1 f7       	brne	.-4      	; 0x2968 <LCD_displayCharacter+0x61a>
    296c:	9e 8f       	std	Y+30, r25	; 0x1e
    296e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* Delay for processing Tpw - Tdws = 190ns */

	/* Out the lowest 4 bits of the required data to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | ((data & 0x0F) << 4);
    2970:	ab e3       	ldi	r26, 0x3B	; 59
    2972:	b0 e0       	ldi	r27, 0x00	; 0
    2974:	eb e3       	ldi	r30, 0x3B	; 59
    2976:	f0 e0       	ldi	r31, 0x00	; 0
    2978:	80 81       	ld	r24, Z
    297a:	28 2f       	mov	r18, r24
    297c:	2f 70       	andi	r18, 0x0F	; 15
    297e:	fe 01       	movw	r30, r28
    2980:	ed 59       	subi	r30, 0x9D	; 157
    2982:	ff 4f       	sbci	r31, 0xFF	; 255
    2984:	80 81       	ld	r24, Z
    2986:	88 2f       	mov	r24, r24
    2988:	90 e0       	ldi	r25, 0x00	; 0
    298a:	82 95       	swap	r24
    298c:	92 95       	swap	r25
    298e:	90 7f       	andi	r25, 0xF0	; 240
    2990:	98 27       	eor	r25, r24
    2992:	80 7f       	andi	r24, 0xF0	; 240
    2994:	98 27       	eor	r25, r24
    2996:	82 2b       	or	r24, r18
    2998:	8c 93       	st	X, r24
    299a:	80 e0       	ldi	r24, 0x00	; 0
    299c:	90 e0       	ldi	r25, 0x00	; 0
    299e:	a0 e8       	ldi	r26, 0x80	; 128
    29a0:	bf e3       	ldi	r27, 0x3F	; 63
    29a2:	89 8f       	std	Y+25, r24	; 0x19
    29a4:	9a 8f       	std	Y+26, r25	; 0x1a
    29a6:	ab 8f       	std	Y+27, r26	; 0x1b
    29a8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29aa:	69 8d       	ldd	r22, Y+25	; 0x19
    29ac:	7a 8d       	ldd	r23, Y+26	; 0x1a
    29ae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    29b0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    29b2:	20 e0       	ldi	r18, 0x00	; 0
    29b4:	30 e0       	ldi	r19, 0x00	; 0
    29b6:	4a ef       	ldi	r20, 0xFA	; 250
    29b8:	54 e4       	ldi	r21, 0x44	; 68
    29ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29be:	dc 01       	movw	r26, r24
    29c0:	cb 01       	movw	r24, r22
    29c2:	8d 8b       	std	Y+21, r24	; 0x15
    29c4:	9e 8b       	std	Y+22, r25	; 0x16
    29c6:	af 8b       	std	Y+23, r26	; 0x17
    29c8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    29ca:	6d 89       	ldd	r22, Y+21	; 0x15
    29cc:	7e 89       	ldd	r23, Y+22	; 0x16
    29ce:	8f 89       	ldd	r24, Y+23	; 0x17
    29d0:	98 8d       	ldd	r25, Y+24	; 0x18
    29d2:	20 e0       	ldi	r18, 0x00	; 0
    29d4:	30 e0       	ldi	r19, 0x00	; 0
    29d6:	40 e8       	ldi	r20, 0x80	; 128
    29d8:	5f e3       	ldi	r21, 0x3F	; 63
    29da:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29de:	88 23       	and	r24, r24
    29e0:	2c f4       	brge	.+10     	; 0x29ec <LCD_displayCharacter+0x69e>
		__ticks = 1;
    29e2:	81 e0       	ldi	r24, 0x01	; 1
    29e4:	90 e0       	ldi	r25, 0x00	; 0
    29e6:	9c 8b       	std	Y+20, r25	; 0x14
    29e8:	8b 8b       	std	Y+19, r24	; 0x13
    29ea:	3f c0       	rjmp	.+126    	; 0x2a6a <LCD_displayCharacter+0x71c>
	else if (__tmp > 65535)
    29ec:	6d 89       	ldd	r22, Y+21	; 0x15
    29ee:	7e 89       	ldd	r23, Y+22	; 0x16
    29f0:	8f 89       	ldd	r24, Y+23	; 0x17
    29f2:	98 8d       	ldd	r25, Y+24	; 0x18
    29f4:	20 e0       	ldi	r18, 0x00	; 0
    29f6:	3f ef       	ldi	r19, 0xFF	; 255
    29f8:	4f e7       	ldi	r20, 0x7F	; 127
    29fa:	57 e4       	ldi	r21, 0x47	; 71
    29fc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a00:	18 16       	cp	r1, r24
    2a02:	4c f5       	brge	.+82     	; 0x2a56 <LCD_displayCharacter+0x708>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a04:	69 8d       	ldd	r22, Y+25	; 0x19
    2a06:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a08:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a0a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a0c:	20 e0       	ldi	r18, 0x00	; 0
    2a0e:	30 e0       	ldi	r19, 0x00	; 0
    2a10:	40 e2       	ldi	r20, 0x20	; 32
    2a12:	51 e4       	ldi	r21, 0x41	; 65
    2a14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a18:	dc 01       	movw	r26, r24
    2a1a:	cb 01       	movw	r24, r22
    2a1c:	bc 01       	movw	r22, r24
    2a1e:	cd 01       	movw	r24, r26
    2a20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a24:	dc 01       	movw	r26, r24
    2a26:	cb 01       	movw	r24, r22
    2a28:	9c 8b       	std	Y+20, r25	; 0x14
    2a2a:	8b 8b       	std	Y+19, r24	; 0x13
    2a2c:	0f c0       	rjmp	.+30     	; 0x2a4c <LCD_displayCharacter+0x6fe>
    2a2e:	88 ec       	ldi	r24, 0xC8	; 200
    2a30:	90 e0       	ldi	r25, 0x00	; 0
    2a32:	9a 8b       	std	Y+18, r25	; 0x12
    2a34:	89 8b       	std	Y+17, r24	; 0x11
    2a36:	89 89       	ldd	r24, Y+17	; 0x11
    2a38:	9a 89       	ldd	r25, Y+18	; 0x12
    2a3a:	01 97       	sbiw	r24, 0x01	; 1
    2a3c:	f1 f7       	brne	.-4      	; 0x2a3a <LCD_displayCharacter+0x6ec>
    2a3e:	9a 8b       	std	Y+18, r25	; 0x12
    2a40:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a42:	8b 89       	ldd	r24, Y+19	; 0x13
    2a44:	9c 89       	ldd	r25, Y+20	; 0x14
    2a46:	01 97       	sbiw	r24, 0x01	; 1
    2a48:	9c 8b       	std	Y+20, r25	; 0x14
    2a4a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a4c:	8b 89       	ldd	r24, Y+19	; 0x13
    2a4e:	9c 89       	ldd	r25, Y+20	; 0x14
    2a50:	00 97       	sbiw	r24, 0x00	; 0
    2a52:	69 f7       	brne	.-38     	; 0x2a2e <LCD_displayCharacter+0x6e0>
    2a54:	14 c0       	rjmp	.+40     	; 0x2a7e <LCD_displayCharacter+0x730>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a56:	6d 89       	ldd	r22, Y+21	; 0x15
    2a58:	7e 89       	ldd	r23, Y+22	; 0x16
    2a5a:	8f 89       	ldd	r24, Y+23	; 0x17
    2a5c:	98 8d       	ldd	r25, Y+24	; 0x18
    2a5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a62:	dc 01       	movw	r26, r24
    2a64:	cb 01       	movw	r24, r22
    2a66:	9c 8b       	std	Y+20, r25	; 0x14
    2a68:	8b 8b       	std	Y+19, r24	; 0x13
    2a6a:	8b 89       	ldd	r24, Y+19	; 0x13
    2a6c:	9c 89       	ldd	r25, Y+20	; 0x14
    2a6e:	98 8b       	std	Y+16, r25	; 0x10
    2a70:	8f 87       	std	Y+15, r24	; 0x0f
    2a72:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a74:	98 89       	ldd	r25, Y+16	; 0x10
    2a76:	01 97       	sbiw	r24, 0x01	; 1
    2a78:	f1 f7       	brne	.-4      	; 0x2a76 <LCD_displayCharacter+0x728>
    2a7a:	98 8b       	std	Y+16, r25	; 0x10
    2a7c:	8f 87       	std	Y+15, r24	; 0x0f
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | (data & 0x0F);
#endif

	_delay_ms(1); /* Delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E = 0 */
    2a7e:	ab e3       	ldi	r26, 0x3B	; 59
    2a80:	b0 e0       	ldi	r27, 0x00	; 0
    2a82:	eb e3       	ldi	r30, 0x3B	; 59
    2a84:	f0 e0       	ldi	r31, 0x00	; 0
    2a86:	80 81       	ld	r24, Z
    2a88:	87 7f       	andi	r24, 0xF7	; 247
    2a8a:	8c 93       	st	X, r24
    2a8c:	80 e0       	ldi	r24, 0x00	; 0
    2a8e:	90 e0       	ldi	r25, 0x00	; 0
    2a90:	a0 e8       	ldi	r26, 0x80	; 128
    2a92:	bf e3       	ldi	r27, 0x3F	; 63
    2a94:	8b 87       	std	Y+11, r24	; 0x0b
    2a96:	9c 87       	std	Y+12, r25	; 0x0c
    2a98:	ad 87       	std	Y+13, r26	; 0x0d
    2a9a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a9c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a9e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2aa0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2aa2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2aa4:	20 e0       	ldi	r18, 0x00	; 0
    2aa6:	30 e0       	ldi	r19, 0x00	; 0
    2aa8:	4a ef       	ldi	r20, 0xFA	; 250
    2aaa:	54 e4       	ldi	r21, 0x44	; 68
    2aac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ab0:	dc 01       	movw	r26, r24
    2ab2:	cb 01       	movw	r24, r22
    2ab4:	8f 83       	std	Y+7, r24	; 0x07
    2ab6:	98 87       	std	Y+8, r25	; 0x08
    2ab8:	a9 87       	std	Y+9, r26	; 0x09
    2aba:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2abc:	6f 81       	ldd	r22, Y+7	; 0x07
    2abe:	78 85       	ldd	r23, Y+8	; 0x08
    2ac0:	89 85       	ldd	r24, Y+9	; 0x09
    2ac2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ac4:	20 e0       	ldi	r18, 0x00	; 0
    2ac6:	30 e0       	ldi	r19, 0x00	; 0
    2ac8:	40 e8       	ldi	r20, 0x80	; 128
    2aca:	5f e3       	ldi	r21, 0x3F	; 63
    2acc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ad0:	88 23       	and	r24, r24
    2ad2:	2c f4       	brge	.+10     	; 0x2ade <LCD_displayCharacter+0x790>
		__ticks = 1;
    2ad4:	81 e0       	ldi	r24, 0x01	; 1
    2ad6:	90 e0       	ldi	r25, 0x00	; 0
    2ad8:	9e 83       	std	Y+6, r25	; 0x06
    2ada:	8d 83       	std	Y+5, r24	; 0x05
    2adc:	3f c0       	rjmp	.+126    	; 0x2b5c <LCD_displayCharacter+0x80e>
	else if (__tmp > 65535)
    2ade:	6f 81       	ldd	r22, Y+7	; 0x07
    2ae0:	78 85       	ldd	r23, Y+8	; 0x08
    2ae2:	89 85       	ldd	r24, Y+9	; 0x09
    2ae4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ae6:	20 e0       	ldi	r18, 0x00	; 0
    2ae8:	3f ef       	ldi	r19, 0xFF	; 255
    2aea:	4f e7       	ldi	r20, 0x7F	; 127
    2aec:	57 e4       	ldi	r21, 0x47	; 71
    2aee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2af2:	18 16       	cp	r1, r24
    2af4:	4c f5       	brge	.+82     	; 0x2b48 <LCD_displayCharacter+0x7fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2af6:	6b 85       	ldd	r22, Y+11	; 0x0b
    2af8:	7c 85       	ldd	r23, Y+12	; 0x0c
    2afa:	8d 85       	ldd	r24, Y+13	; 0x0d
    2afc:	9e 85       	ldd	r25, Y+14	; 0x0e
    2afe:	20 e0       	ldi	r18, 0x00	; 0
    2b00:	30 e0       	ldi	r19, 0x00	; 0
    2b02:	40 e2       	ldi	r20, 0x20	; 32
    2b04:	51 e4       	ldi	r21, 0x41	; 65
    2b06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b0a:	dc 01       	movw	r26, r24
    2b0c:	cb 01       	movw	r24, r22
    2b0e:	bc 01       	movw	r22, r24
    2b10:	cd 01       	movw	r24, r26
    2b12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b16:	dc 01       	movw	r26, r24
    2b18:	cb 01       	movw	r24, r22
    2b1a:	9e 83       	std	Y+6, r25	; 0x06
    2b1c:	8d 83       	std	Y+5, r24	; 0x05
    2b1e:	0f c0       	rjmp	.+30     	; 0x2b3e <LCD_displayCharacter+0x7f0>
    2b20:	88 ec       	ldi	r24, 0xC8	; 200
    2b22:	90 e0       	ldi	r25, 0x00	; 0
    2b24:	9c 83       	std	Y+4, r25	; 0x04
    2b26:	8b 83       	std	Y+3, r24	; 0x03
    2b28:	8b 81       	ldd	r24, Y+3	; 0x03
    2b2a:	9c 81       	ldd	r25, Y+4	; 0x04
    2b2c:	01 97       	sbiw	r24, 0x01	; 1
    2b2e:	f1 f7       	brne	.-4      	; 0x2b2c <LCD_displayCharacter+0x7de>
    2b30:	9c 83       	std	Y+4, r25	; 0x04
    2b32:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b34:	8d 81       	ldd	r24, Y+5	; 0x05
    2b36:	9e 81       	ldd	r25, Y+6	; 0x06
    2b38:	01 97       	sbiw	r24, 0x01	; 1
    2b3a:	9e 83       	std	Y+6, r25	; 0x06
    2b3c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b3e:	8d 81       	ldd	r24, Y+5	; 0x05
    2b40:	9e 81       	ldd	r25, Y+6	; 0x06
    2b42:	00 97       	sbiw	r24, 0x00	; 0
    2b44:	69 f7       	brne	.-38     	; 0x2b20 <LCD_displayCharacter+0x7d2>
    2b46:	14 c0       	rjmp	.+40     	; 0x2b70 <LCD_displayCharacter+0x822>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b48:	6f 81       	ldd	r22, Y+7	; 0x07
    2b4a:	78 85       	ldd	r23, Y+8	; 0x08
    2b4c:	89 85       	ldd	r24, Y+9	; 0x09
    2b4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b54:	dc 01       	movw	r26, r24
    2b56:	cb 01       	movw	r24, r22
    2b58:	9e 83       	std	Y+6, r25	; 0x06
    2b5a:	8d 83       	std	Y+5, r24	; 0x05
    2b5c:	8d 81       	ldd	r24, Y+5	; 0x05
    2b5e:	9e 81       	ldd	r25, Y+6	; 0x06
    2b60:	9a 83       	std	Y+2, r25	; 0x02
    2b62:	89 83       	std	Y+1, r24	; 0x01
    2b64:	89 81       	ldd	r24, Y+1	; 0x01
    2b66:	9a 81       	ldd	r25, Y+2	; 0x02
    2b68:	01 97       	sbiw	r24, 0x01	; 1
    2b6a:	f1 f7       	brne	.-4      	; 0x2b68 <LCD_displayCharacter+0x81a>
    2b6c:	9a 83       	std	Y+2, r25	; 0x02
    2b6e:	89 83       	std	Y+1, r24	; 0x01
	LCD_DATA_PORT = data; /* Out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* Delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* Disable LCD E = 0 */
	_delay_ms(1); /* Delay for processing Th = 13ns */
#endif
}
    2b70:	cd 59       	subi	r28, 0x9D	; 157
    2b72:	df 4f       	sbci	r29, 0xFF	; 255
    2b74:	0f b6       	in	r0, 0x3f	; 63
    2b76:	f8 94       	cli
    2b78:	de bf       	out	0x3e, r29	; 62
    2b7a:	0f be       	out	0x3f, r0	; 63
    2b7c:	cd bf       	out	0x3d, r28	; 61
    2b7e:	cf 91       	pop	r28
    2b80:	df 91       	pop	r29
    2b82:	1f 91       	pop	r17
    2b84:	0f 91       	pop	r16
    2b86:	08 95       	ret

00002b88 <LCD_displayString>:

void LCD_displayString(const uint8_t * Str)
{
    2b88:	df 93       	push	r29
    2b8a:	cf 93       	push	r28
    2b8c:	00 d0       	rcall	.+0      	; 0x2b8e <LCD_displayString+0x6>
    2b8e:	0f 92       	push	r0
    2b90:	cd b7       	in	r28, 0x3d	; 61
    2b92:	de b7       	in	r29, 0x3e	; 62
    2b94:	9b 83       	std	Y+3, r25	; 0x03
    2b96:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t i = 0;
    2b98:	19 82       	std	Y+1, r1	; 0x01
    2b9a:	0e c0       	rjmp	.+28     	; 0x2bb8 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2b9c:	89 81       	ldd	r24, Y+1	; 0x01
    2b9e:	28 2f       	mov	r18, r24
    2ba0:	30 e0       	ldi	r19, 0x00	; 0
    2ba2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ba4:	9b 81       	ldd	r25, Y+3	; 0x03
    2ba6:	fc 01       	movw	r30, r24
    2ba8:	e2 0f       	add	r30, r18
    2baa:	f3 1f       	adc	r31, r19
    2bac:	80 81       	ld	r24, Z
    2bae:	0e 94 a7 11 	call	0x234e	; 0x234e <LCD_displayCharacter>
		i++;
    2bb2:	89 81       	ldd	r24, Y+1	; 0x01
    2bb4:	8f 5f       	subi	r24, 0xFF	; 255
    2bb6:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const uint8_t * Str)
{
	uint8_t i = 0;
	while(Str[i] != '\0')
    2bb8:	89 81       	ldd	r24, Y+1	; 0x01
    2bba:	28 2f       	mov	r18, r24
    2bbc:	30 e0       	ldi	r19, 0x00	; 0
    2bbe:	8a 81       	ldd	r24, Y+2	; 0x02
    2bc0:	9b 81       	ldd	r25, Y+3	; 0x03
    2bc2:	fc 01       	movw	r30, r24
    2bc4:	e2 0f       	add	r30, r18
    2bc6:	f3 1f       	adc	r31, r19
    2bc8:	80 81       	ld	r24, Z
    2bca:	88 23       	and	r24, r24
    2bcc:	39 f7       	brne	.-50     	; 0x2b9c <LCD_displayString+0x14>
	{
		LCD_displayCharacter(Str[i]);
		i++;
	}
}
    2bce:	0f 90       	pop	r0
    2bd0:	0f 90       	pop	r0
    2bd2:	0f 90       	pop	r0
    2bd4:	cf 91       	pop	r28
    2bd6:	df 91       	pop	r29
    2bd8:	08 95       	ret

00002bda <LCD_goToRowColumn>:

void LCD_goToRowColumn(uint8_t row, uint8_t col)
{
    2bda:	df 93       	push	r29
    2bdc:	cf 93       	push	r28
    2bde:	00 d0       	rcall	.+0      	; 0x2be0 <LCD_goToRowColumn+0x6>
    2be0:	00 d0       	rcall	.+0      	; 0x2be2 <LCD_goToRowColumn+0x8>
    2be2:	0f 92       	push	r0
    2be4:	cd b7       	in	r28, 0x3d	; 61
    2be6:	de b7       	in	r29, 0x3e	; 62
    2be8:	8a 83       	std	Y+2, r24	; 0x02
    2bea:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t Address;
	
	/* First of all calculate the required address */
	switch(row)
    2bec:	8a 81       	ldd	r24, Y+2	; 0x02
    2bee:	28 2f       	mov	r18, r24
    2bf0:	30 e0       	ldi	r19, 0x00	; 0
    2bf2:	3d 83       	std	Y+5, r19	; 0x05
    2bf4:	2c 83       	std	Y+4, r18	; 0x04
    2bf6:	8c 81       	ldd	r24, Y+4	; 0x04
    2bf8:	9d 81       	ldd	r25, Y+5	; 0x05
    2bfa:	81 30       	cpi	r24, 0x01	; 1
    2bfc:	91 05       	cpc	r25, r1
    2bfe:	c1 f0       	breq	.+48     	; 0x2c30 <LCD_goToRowColumn+0x56>
    2c00:	2c 81       	ldd	r18, Y+4	; 0x04
    2c02:	3d 81       	ldd	r19, Y+5	; 0x05
    2c04:	22 30       	cpi	r18, 0x02	; 2
    2c06:	31 05       	cpc	r19, r1
    2c08:	2c f4       	brge	.+10     	; 0x2c14 <LCD_goToRowColumn+0x3a>
    2c0a:	8c 81       	ldd	r24, Y+4	; 0x04
    2c0c:	9d 81       	ldd	r25, Y+5	; 0x05
    2c0e:	00 97       	sbiw	r24, 0x00	; 0
    2c10:	61 f0       	breq	.+24     	; 0x2c2a <LCD_goToRowColumn+0x50>
    2c12:	19 c0       	rjmp	.+50     	; 0x2c46 <LCD_goToRowColumn+0x6c>
    2c14:	2c 81       	ldd	r18, Y+4	; 0x04
    2c16:	3d 81       	ldd	r19, Y+5	; 0x05
    2c18:	22 30       	cpi	r18, 0x02	; 2
    2c1a:	31 05       	cpc	r19, r1
    2c1c:	69 f0       	breq	.+26     	; 0x2c38 <LCD_goToRowColumn+0x5e>
    2c1e:	8c 81       	ldd	r24, Y+4	; 0x04
    2c20:	9d 81       	ldd	r25, Y+5	; 0x05
    2c22:	83 30       	cpi	r24, 0x03	; 3
    2c24:	91 05       	cpc	r25, r1
    2c26:	61 f0       	breq	.+24     	; 0x2c40 <LCD_goToRowColumn+0x66>
    2c28:	0e c0       	rjmp	.+28     	; 0x2c46 <LCD_goToRowColumn+0x6c>
	{
		case 0:
				Address=col;
    2c2a:	8b 81       	ldd	r24, Y+3	; 0x03
    2c2c:	89 83       	std	Y+1, r24	; 0x01
    2c2e:	0b c0       	rjmp	.+22     	; 0x2c46 <LCD_goToRowColumn+0x6c>
				break;
		case 1:
				Address=col+0x40;
    2c30:	8b 81       	ldd	r24, Y+3	; 0x03
    2c32:	80 5c       	subi	r24, 0xC0	; 192
    2c34:	89 83       	std	Y+1, r24	; 0x01
    2c36:	07 c0       	rjmp	.+14     	; 0x2c46 <LCD_goToRowColumn+0x6c>
				break;
		case 2:
				Address=col+0x10;
    2c38:	8b 81       	ldd	r24, Y+3	; 0x03
    2c3a:	80 5f       	subi	r24, 0xF0	; 240
    2c3c:	89 83       	std	Y+1, r24	; 0x01
    2c3e:	03 c0       	rjmp	.+6      	; 0x2c46 <LCD_goToRowColumn+0x6c>
				break;
		case 3:
				Address=col+0x50;
    2c40:	8b 81       	ldd	r24, Y+3	; 0x03
    2c42:	80 5b       	subi	r24, 0xB0	; 176
    2c44:	89 83       	std	Y+1, r24	; 0x01
	}					
	/* 
	 * To write to a specific address in the LCD 
	 * we need to apply the corresponding command 0b10000000+Address 
	 */
	LCD_sendCommand(Address | SET_CURSOR_LOCATION); 
    2c46:	89 81       	ldd	r24, Y+1	; 0x01
    2c48:	80 68       	ori	r24, 0x80	; 128
    2c4a:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <LCD_sendCommand>
}
    2c4e:	0f 90       	pop	r0
    2c50:	0f 90       	pop	r0
    2c52:	0f 90       	pop	r0
    2c54:	0f 90       	pop	r0
    2c56:	0f 90       	pop	r0
    2c58:	cf 91       	pop	r28
    2c5a:	df 91       	pop	r29
    2c5c:	08 95       	ret

00002c5e <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8_t row, uint8_t col, const char * Str)
{
    2c5e:	df 93       	push	r29
    2c60:	cf 93       	push	r28
    2c62:	00 d0       	rcall	.+0      	; 0x2c64 <LCD_displayStringRowColumn+0x6>
    2c64:	00 d0       	rcall	.+0      	; 0x2c66 <LCD_displayStringRowColumn+0x8>
    2c66:	cd b7       	in	r28, 0x3d	; 61
    2c68:	de b7       	in	r29, 0x3e	; 62
    2c6a:	89 83       	std	Y+1, r24	; 0x01
    2c6c:	6a 83       	std	Y+2, r22	; 0x02
    2c6e:	5c 83       	std	Y+4, r21	; 0x04
    2c70:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(row, col); /* Go to to the required LCD position */
    2c72:	89 81       	ldd	r24, Y+1	; 0x01
    2c74:	6a 81       	ldd	r22, Y+2	; 0x02
    2c76:	0e 94 ed 15 	call	0x2bda	; 0x2bda <LCD_goToRowColumn>
	LCD_displayString(Str); /* Display the string */
    2c7a:	8b 81       	ldd	r24, Y+3	; 0x03
    2c7c:	9c 81       	ldd	r25, Y+4	; 0x04
    2c7e:	0e 94 c4 15 	call	0x2b88	; 0x2b88 <LCD_displayString>
}
    2c82:	0f 90       	pop	r0
    2c84:	0f 90       	pop	r0
    2c86:	0f 90       	pop	r0
    2c88:	0f 90       	pop	r0
    2c8a:	cf 91       	pop	r28
    2c8c:	df 91       	pop	r29
    2c8e:	08 95       	ret

00002c90 <LCD_intgerToString>:

void LCD_intgerToString(uint32_t data)
{
    2c90:	df 93       	push	r29
    2c92:	cf 93       	push	r28
    2c94:	cd b7       	in	r28, 0x3d	; 61
    2c96:	de b7       	in	r29, 0x3e	; 62
    2c98:	64 97       	sbiw	r28, 0x14	; 20
    2c9a:	0f b6       	in	r0, 0x3f	; 63
    2c9c:	f8 94       	cli
    2c9e:	de bf       	out	0x3e, r29	; 62
    2ca0:	0f be       	out	0x3f, r0	; 63
    2ca2:	cd bf       	out	0x3d, r28	; 61
    2ca4:	69 8b       	std	Y+17, r22	; 0x11
    2ca6:	7a 8b       	std	Y+18, r23	; 0x12
    2ca8:	8b 8b       	std	Y+19, r24	; 0x13
    2caa:	9c 8b       	std	Y+20, r25	; 0x14
   char buff[16]; /* String to hold the ASCII result */
   itoa(data, buff, 10); /* 10 for decimal */
    2cac:	89 89       	ldd	r24, Y+17	; 0x11
    2cae:	9a 89       	ldd	r25, Y+18	; 0x12
    2cb0:	9e 01       	movw	r18, r28
    2cb2:	2f 5f       	subi	r18, 0xFF	; 255
    2cb4:	3f 4f       	sbci	r19, 0xFF	; 255
    2cb6:	b9 01       	movw	r22, r18
    2cb8:	4a e0       	ldi	r20, 0x0A	; 10
    2cba:	50 e0       	ldi	r21, 0x00	; 0
    2cbc:	0e 94 28 17 	call	0x2e50	; 0x2e50 <itoa>
   LCD_displayString(buff);
    2cc0:	ce 01       	movw	r24, r28
    2cc2:	01 96       	adiw	r24, 0x01	; 1
    2cc4:	0e 94 c4 15 	call	0x2b88	; 0x2b88 <LCD_displayString>
}
    2cc8:	64 96       	adiw	r28, 0x14	; 20
    2cca:	0f b6       	in	r0, 0x3f	; 63
    2ccc:	f8 94       	cli
    2cce:	de bf       	out	0x3e, r29	; 62
    2cd0:	0f be       	out	0x3f, r0	; 63
    2cd2:	cd bf       	out	0x3d, r28	; 61
    2cd4:	cf 91       	pop	r28
    2cd6:	df 91       	pop	r29
    2cd8:	08 95       	ret

00002cda <LCD_clearScreen>:

void LCD_clearScreen(void)
{
    2cda:	df 93       	push	r29
    2cdc:	cf 93       	push	r28
    2cde:	cd b7       	in	r28, 0x3d	; 61
    2ce0:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND); /* Clear display */
    2ce2:	81 e0       	ldi	r24, 0x01	; 1
    2ce4:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <LCD_sendCommand>
}
    2ce8:	cf 91       	pop	r28
    2cea:	df 91       	pop	r29
    2cec:	08 95       	ret

00002cee <App_init>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 *******************************************************************************/
void App_init(void)
{
    2cee:	df 93       	push	r29
    2cf0:	cf 93       	push	r28
    2cf2:	cd b7       	in	r28, 0x3d	; 61
    2cf4:	de b7       	in	r29, 0x3e	; 62
    2cf6:	2d 97       	sbiw	r28, 0x0d	; 13
    2cf8:	0f b6       	in	r0, 0x3f	; 63
    2cfa:	f8 94       	cli
    2cfc:	de bf       	out	0x3e, r29	; 62
    2cfe:	0f be       	out	0x3f, r0	; 63
    2d00:	cd bf       	out	0x3d, r28	; 61
	UART_ConfigType uart_config = {BPS_9600, NORMAL_SPEED, EIGHT_BITS, DISABLED, ONE_BIT};
    2d02:	ce 01       	movw	r24, r28
    2d04:	01 96       	adiw	r24, 0x01	; 1
    2d06:	9a 87       	std	Y+10, r25	; 0x0a
    2d08:	89 87       	std	Y+9, r24	; 0x09
    2d0a:	e8 e6       	ldi	r30, 0x68	; 104
    2d0c:	f0 e0       	ldi	r31, 0x00	; 0
    2d0e:	fc 87       	std	Y+12, r31	; 0x0c
    2d10:	eb 87       	std	Y+11, r30	; 0x0b
    2d12:	f8 e0       	ldi	r31, 0x08	; 8
    2d14:	fd 87       	std	Y+13, r31	; 0x0d
    2d16:	eb 85       	ldd	r30, Y+11	; 0x0b
    2d18:	fc 85       	ldd	r31, Y+12	; 0x0c
    2d1a:	00 80       	ld	r0, Z
    2d1c:	8b 85       	ldd	r24, Y+11	; 0x0b
    2d1e:	9c 85       	ldd	r25, Y+12	; 0x0c
    2d20:	01 96       	adiw	r24, 0x01	; 1
    2d22:	9c 87       	std	Y+12, r25	; 0x0c
    2d24:	8b 87       	std	Y+11, r24	; 0x0b
    2d26:	e9 85       	ldd	r30, Y+9	; 0x09
    2d28:	fa 85       	ldd	r31, Y+10	; 0x0a
    2d2a:	00 82       	st	Z, r0
    2d2c:	89 85       	ldd	r24, Y+9	; 0x09
    2d2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d30:	01 96       	adiw	r24, 0x01	; 1
    2d32:	9a 87       	std	Y+10, r25	; 0x0a
    2d34:	89 87       	std	Y+9, r24	; 0x09
    2d36:	9d 85       	ldd	r25, Y+13	; 0x0d
    2d38:	91 50       	subi	r25, 0x01	; 1
    2d3a:	9d 87       	std	Y+13, r25	; 0x0d
    2d3c:	ed 85       	ldd	r30, Y+13	; 0x0d
    2d3e:	ee 23       	and	r30, r30
    2d40:	51 f7       	brne	.-44     	; 0x2d16 <App_init+0x28>
	UART_init(&uart_config);
    2d42:	ce 01       	movw	r24, r28
    2d44:	01 96       	adiw	r24, 0x01	; 1
    2d46:	0e 94 a3 05 	call	0xb46	; 0xb46 <UART_init>

	SPI_initSlave();	/* Initialize Slave SPI */
    2d4a:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <SPI_initSlave>
}
    2d4e:	2d 96       	adiw	r28, 0x0d	; 13
    2d50:	0f b6       	in	r0, 0x3f	; 63
    2d52:	f8 94       	cli
    2d54:	de bf       	out	0x3e, r29	; 62
    2d56:	0f be       	out	0x3f, r0	; 63
    2d58:	cd bf       	out	0x3d, r28	; 61
    2d5a:	cf 91       	pop	r28
    2d5c:	df 91       	pop	r29
    2d5e:	08 95       	ret

00002d60 <App_Update>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 *******************************************************************************/
void App_Update(void)
{
    2d60:	df 93       	push	r29
    2d62:	cf 93       	push	r28
    2d64:	cd b7       	in	r28, 0x3d	; 61
    2d66:	de b7       	in	r29, 0x3e	; 62
	while(SPI_receiveByte() != M2_READY){}
    2d68:	0e 94 1a 08 	call	0x1034	; 0x1034 <SPI_receiveByte>
    2d6c:	80 31       	cpi	r24, 0x10	; 16
    2d6e:	e1 f7       	brne	.-8      	; 0x2d68 <App_Update+0x8>

	SPI_receiveString(gStr_message);	/* Receive string from Master MCU */
    2d70:	80 e7       	ldi	r24, 0x70	; 112
    2d72:	90 e0       	ldi	r25, 0x00	; 0
    2d74:	0e 94 52 08 	call	0x10a4	; 0x10a4 <SPI_receiveString>

	UART_sendString(gStr_message);		/* Send string to the terminal */
    2d78:	80 e7       	ldi	r24, 0x70	; 112
    2d7a:	90 e0       	ldi	r25, 0x00	; 0
    2d7c:	0e 94 00 07 	call	0xe00	; 0xe00 <UART_sendString>

	UART_sendByte('\r');				/* Send new line to the terminal */
    2d80:	8d e0       	ldi	r24, 0x0D	; 13
    2d82:	0e 94 da 06 	call	0xdb4	; 0xdb4 <UART_sendByte>
}
    2d86:	cf 91       	pop	r28
    2d88:	df 91       	pop	r29
    2d8a:	08 95       	ret

00002d8c <main>:
/*****************************************************************************************
 *                                MAIN FUNCTION                                          *
 *****************************************************************************************/

int main(void)
{
    2d8c:	df 93       	push	r29
    2d8e:	cf 93       	push	r28
    2d90:	cd b7       	in	r28, 0x3d	; 61
    2d92:	de b7       	in	r29, 0x3e	; 62
	/********************************************************************************
	 *                           SYSTEM INITIALIZATION                              *
	 ********************************************************************************/

	App_init();	/* Initialize the application */
    2d94:	0e 94 77 16 	call	0x2cee	; 0x2cee <App_init>
	 *                        APPLICATION	(SUPER LOOP)						    *
	 ********************************************************************************/

	while(1)
	{
		App_Update();
    2d98:	0e 94 b0 16 	call	0x2d60	; 0x2d60 <App_Update>
    2d9c:	fd cf       	rjmp	.-6      	; 0x2d98 <main+0xc>

00002d9e <__udivmodsi4>:
    2d9e:	a1 e2       	ldi	r26, 0x21	; 33
    2da0:	1a 2e       	mov	r1, r26
    2da2:	aa 1b       	sub	r26, r26
    2da4:	bb 1b       	sub	r27, r27
    2da6:	fd 01       	movw	r30, r26
    2da8:	0d c0       	rjmp	.+26     	; 0x2dc4 <__udivmodsi4_ep>

00002daa <__udivmodsi4_loop>:
    2daa:	aa 1f       	adc	r26, r26
    2dac:	bb 1f       	adc	r27, r27
    2dae:	ee 1f       	adc	r30, r30
    2db0:	ff 1f       	adc	r31, r31
    2db2:	a2 17       	cp	r26, r18
    2db4:	b3 07       	cpc	r27, r19
    2db6:	e4 07       	cpc	r30, r20
    2db8:	f5 07       	cpc	r31, r21
    2dba:	20 f0       	brcs	.+8      	; 0x2dc4 <__udivmodsi4_ep>
    2dbc:	a2 1b       	sub	r26, r18
    2dbe:	b3 0b       	sbc	r27, r19
    2dc0:	e4 0b       	sbc	r30, r20
    2dc2:	f5 0b       	sbc	r31, r21

00002dc4 <__udivmodsi4_ep>:
    2dc4:	66 1f       	adc	r22, r22
    2dc6:	77 1f       	adc	r23, r23
    2dc8:	88 1f       	adc	r24, r24
    2dca:	99 1f       	adc	r25, r25
    2dcc:	1a 94       	dec	r1
    2dce:	69 f7       	brne	.-38     	; 0x2daa <__udivmodsi4_loop>
    2dd0:	60 95       	com	r22
    2dd2:	70 95       	com	r23
    2dd4:	80 95       	com	r24
    2dd6:	90 95       	com	r25
    2dd8:	9b 01       	movw	r18, r22
    2dda:	ac 01       	movw	r20, r24
    2ddc:	bd 01       	movw	r22, r26
    2dde:	cf 01       	movw	r24, r30
    2de0:	08 95       	ret

00002de2 <__prologue_saves__>:
    2de2:	2f 92       	push	r2
    2de4:	3f 92       	push	r3
    2de6:	4f 92       	push	r4
    2de8:	5f 92       	push	r5
    2dea:	6f 92       	push	r6
    2dec:	7f 92       	push	r7
    2dee:	8f 92       	push	r8
    2df0:	9f 92       	push	r9
    2df2:	af 92       	push	r10
    2df4:	bf 92       	push	r11
    2df6:	cf 92       	push	r12
    2df8:	df 92       	push	r13
    2dfa:	ef 92       	push	r14
    2dfc:	ff 92       	push	r15
    2dfe:	0f 93       	push	r16
    2e00:	1f 93       	push	r17
    2e02:	cf 93       	push	r28
    2e04:	df 93       	push	r29
    2e06:	cd b7       	in	r28, 0x3d	; 61
    2e08:	de b7       	in	r29, 0x3e	; 62
    2e0a:	ca 1b       	sub	r28, r26
    2e0c:	db 0b       	sbc	r29, r27
    2e0e:	0f b6       	in	r0, 0x3f	; 63
    2e10:	f8 94       	cli
    2e12:	de bf       	out	0x3e, r29	; 62
    2e14:	0f be       	out	0x3f, r0	; 63
    2e16:	cd bf       	out	0x3d, r28	; 61
    2e18:	09 94       	ijmp

00002e1a <__epilogue_restores__>:
    2e1a:	2a 88       	ldd	r2, Y+18	; 0x12
    2e1c:	39 88       	ldd	r3, Y+17	; 0x11
    2e1e:	48 88       	ldd	r4, Y+16	; 0x10
    2e20:	5f 84       	ldd	r5, Y+15	; 0x0f
    2e22:	6e 84       	ldd	r6, Y+14	; 0x0e
    2e24:	7d 84       	ldd	r7, Y+13	; 0x0d
    2e26:	8c 84       	ldd	r8, Y+12	; 0x0c
    2e28:	9b 84       	ldd	r9, Y+11	; 0x0b
    2e2a:	aa 84       	ldd	r10, Y+10	; 0x0a
    2e2c:	b9 84       	ldd	r11, Y+9	; 0x09
    2e2e:	c8 84       	ldd	r12, Y+8	; 0x08
    2e30:	df 80       	ldd	r13, Y+7	; 0x07
    2e32:	ee 80       	ldd	r14, Y+6	; 0x06
    2e34:	fd 80       	ldd	r15, Y+5	; 0x05
    2e36:	0c 81       	ldd	r16, Y+4	; 0x04
    2e38:	1b 81       	ldd	r17, Y+3	; 0x03
    2e3a:	aa 81       	ldd	r26, Y+2	; 0x02
    2e3c:	b9 81       	ldd	r27, Y+1	; 0x01
    2e3e:	ce 0f       	add	r28, r30
    2e40:	d1 1d       	adc	r29, r1
    2e42:	0f b6       	in	r0, 0x3f	; 63
    2e44:	f8 94       	cli
    2e46:	de bf       	out	0x3e, r29	; 62
    2e48:	0f be       	out	0x3f, r0	; 63
    2e4a:	cd bf       	out	0x3d, r28	; 61
    2e4c:	ed 01       	movw	r28, r26
    2e4e:	08 95       	ret

00002e50 <itoa>:
    2e50:	fb 01       	movw	r30, r22
    2e52:	9f 01       	movw	r18, r30
    2e54:	e8 94       	clt
    2e56:	42 30       	cpi	r20, 0x02	; 2
    2e58:	c4 f0       	brlt	.+48     	; 0x2e8a <itoa+0x3a>
    2e5a:	45 32       	cpi	r20, 0x25	; 37
    2e5c:	b4 f4       	brge	.+44     	; 0x2e8a <itoa+0x3a>
    2e5e:	4a 30       	cpi	r20, 0x0A	; 10
    2e60:	29 f4       	brne	.+10     	; 0x2e6c <itoa+0x1c>
    2e62:	97 fb       	bst	r25, 7
    2e64:	1e f4       	brtc	.+6      	; 0x2e6c <itoa+0x1c>
    2e66:	90 95       	com	r25
    2e68:	81 95       	neg	r24
    2e6a:	9f 4f       	sbci	r25, 0xFF	; 255
    2e6c:	64 2f       	mov	r22, r20
    2e6e:	77 27       	eor	r23, r23
    2e70:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <__udivmodhi4>
    2e74:	80 5d       	subi	r24, 0xD0	; 208
    2e76:	8a 33       	cpi	r24, 0x3A	; 58
    2e78:	0c f0       	brlt	.+2      	; 0x2e7c <itoa+0x2c>
    2e7a:	89 5d       	subi	r24, 0xD9	; 217
    2e7c:	81 93       	st	Z+, r24
    2e7e:	cb 01       	movw	r24, r22
    2e80:	00 97       	sbiw	r24, 0x00	; 0
    2e82:	a1 f7       	brne	.-24     	; 0x2e6c <itoa+0x1c>
    2e84:	16 f4       	brtc	.+4      	; 0x2e8a <itoa+0x3a>
    2e86:	5d e2       	ldi	r21, 0x2D	; 45
    2e88:	51 93       	st	Z+, r21
    2e8a:	10 82       	st	Z, r1
    2e8c:	c9 01       	movw	r24, r18
    2e8e:	0c 94 49 17 	jmp	0x2e92	; 0x2e92 <strrev>

00002e92 <strrev>:
    2e92:	dc 01       	movw	r26, r24
    2e94:	fc 01       	movw	r30, r24
    2e96:	67 2f       	mov	r22, r23
    2e98:	71 91       	ld	r23, Z+
    2e9a:	77 23       	and	r23, r23
    2e9c:	e1 f7       	brne	.-8      	; 0x2e96 <strrev+0x4>
    2e9e:	32 97       	sbiw	r30, 0x02	; 2
    2ea0:	04 c0       	rjmp	.+8      	; 0x2eaa <strrev+0x18>
    2ea2:	7c 91       	ld	r23, X
    2ea4:	6d 93       	st	X+, r22
    2ea6:	70 83       	st	Z, r23
    2ea8:	62 91       	ld	r22, -Z
    2eaa:	ae 17       	cp	r26, r30
    2eac:	bf 07       	cpc	r27, r31
    2eae:	c8 f3       	brcs	.-14     	; 0x2ea2 <strrev+0x10>
    2eb0:	08 95       	ret

00002eb2 <__udivmodhi4>:
    2eb2:	aa 1b       	sub	r26, r26
    2eb4:	bb 1b       	sub	r27, r27
    2eb6:	51 e1       	ldi	r21, 0x11	; 17
    2eb8:	07 c0       	rjmp	.+14     	; 0x2ec8 <__udivmodhi4_ep>

00002eba <__udivmodhi4_loop>:
    2eba:	aa 1f       	adc	r26, r26
    2ebc:	bb 1f       	adc	r27, r27
    2ebe:	a6 17       	cp	r26, r22
    2ec0:	b7 07       	cpc	r27, r23
    2ec2:	10 f0       	brcs	.+4      	; 0x2ec8 <__udivmodhi4_ep>
    2ec4:	a6 1b       	sub	r26, r22
    2ec6:	b7 0b       	sbc	r27, r23

00002ec8 <__udivmodhi4_ep>:
    2ec8:	88 1f       	adc	r24, r24
    2eca:	99 1f       	adc	r25, r25
    2ecc:	5a 95       	dec	r21
    2ece:	a9 f7       	brne	.-22     	; 0x2eba <__udivmodhi4_loop>
    2ed0:	80 95       	com	r24
    2ed2:	90 95       	com	r25
    2ed4:	bc 01       	movw	r22, r24
    2ed6:	cd 01       	movw	r24, r26
    2ed8:	08 95       	ret

00002eda <_exit>:
    2eda:	f8 94       	cli

00002edc <__stop_program>:
    2edc:	ff cf       	rjmp	.-2      	; 0x2edc <__stop_program>
