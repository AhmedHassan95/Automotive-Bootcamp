
LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001786  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000028  00800060  00001786  0000181a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  00800088  00800088  00001842  2**0
                  ALLOC
  3 .stab         00002718  00000000  00000000  00001844  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001eba  00000000  00000000  00003f5c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 48 01 	jmp	0x290	; 0x290 <__vector_4>
      14:	0c 94 15 01 	jmp	0x22a	; 0x22a <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 af 00 	jmp	0x15e	; 0x15e <__vector_9>
      28:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__vector_10>
      2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e8       	ldi	r30, 0x86	; 134
      68:	f7 e1       	ldi	r31, 0x17	; 23
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 38       	cpi	r26, 0x88	; 136
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a8 e8       	ldi	r26, 0x88	; 136
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 39       	cpi	r26, 0x92	; 146
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <main>
      8a:	0c 94 c1 0b 	jmp	0x1782	; 0x1782 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_11>:
/************************************************************************************
 *                                     TIMER0                                       *
 ************************************************************************************/

ISR(TIMER0_OVF_vect)
{
      92:	1f 92       	push	r1
      94:	0f 92       	push	r0
      96:	0f b6       	in	r0, 0x3f	; 63
      98:	0f 92       	push	r0
      9a:	11 24       	eor	r1, r1
      9c:	2f 93       	push	r18
      9e:	3f 93       	push	r19
      a0:	4f 93       	push	r20
      a2:	5f 93       	push	r21
      a4:	6f 93       	push	r22
      a6:	7f 93       	push	r23
      a8:	8f 93       	push	r24
      aa:	9f 93       	push	r25
      ac:	af 93       	push	r26
      ae:	bf 93       	push	r27
      b0:	ef 93       	push	r30
      b2:	ff 93       	push	r31
      b4:	df 93       	push	r29
      b6:	cf 93       	push	r28
      b8:	cd b7       	in	r28, 0x3d	; 61
      ba:	de b7       	in	r29, 0x3e	; 62
	/* Check if Pointer is not a NULL one, to avoid Segmentation fault */
	if(g_callBackPtrTimer0 != NULL_PTR)
      bc:	80 91 88 00 	lds	r24, 0x0088
      c0:	90 91 89 00 	lds	r25, 0x0089
      c4:	00 97       	sbiw	r24, 0x00	; 0
      c6:	29 f0       	breq	.+10     	; 0xd2 <__vector_11+0x40>
	{
		/*
		 * Call the callback function in the application after the overflow has
		 * occurred in TIMER0 (NORMAL MODE)
		 */
		(*g_callBackPtrTimer0)();
      c8:	e0 91 88 00 	lds	r30, 0x0088
      cc:	f0 91 89 00 	lds	r31, 0x0089
      d0:	09 95       	icall
	}
}
      d2:	cf 91       	pop	r28
      d4:	df 91       	pop	r29
      d6:	ff 91       	pop	r31
      d8:	ef 91       	pop	r30
      da:	bf 91       	pop	r27
      dc:	af 91       	pop	r26
      de:	9f 91       	pop	r25
      e0:	8f 91       	pop	r24
      e2:	7f 91       	pop	r23
      e4:	6f 91       	pop	r22
      e6:	5f 91       	pop	r21
      e8:	4f 91       	pop	r20
      ea:	3f 91       	pop	r19
      ec:	2f 91       	pop	r18
      ee:	0f 90       	pop	r0
      f0:	0f be       	out	0x3f, r0	; 63
      f2:	0f 90       	pop	r0
      f4:	1f 90       	pop	r1
      f6:	18 95       	reti

000000f8 <__vector_10>:

ISR(TIMER0_COMP_vect)
{
      f8:	1f 92       	push	r1
      fa:	0f 92       	push	r0
      fc:	0f b6       	in	r0, 0x3f	; 63
      fe:	0f 92       	push	r0
     100:	11 24       	eor	r1, r1
     102:	2f 93       	push	r18
     104:	3f 93       	push	r19
     106:	4f 93       	push	r20
     108:	5f 93       	push	r21
     10a:	6f 93       	push	r22
     10c:	7f 93       	push	r23
     10e:	8f 93       	push	r24
     110:	9f 93       	push	r25
     112:	af 93       	push	r26
     114:	bf 93       	push	r27
     116:	ef 93       	push	r30
     118:	ff 93       	push	r31
     11a:	df 93       	push	r29
     11c:	cf 93       	push	r28
     11e:	cd b7       	in	r28, 0x3d	; 61
     120:	de b7       	in	r29, 0x3e	; 62
	/* Check if Pointer is not a NULL one, to avoid Segmentation fault */
	if(g_callBackPtrTimer0 != NULL_PTR)
     122:	80 91 88 00 	lds	r24, 0x0088
     126:	90 91 89 00 	lds	r25, 0x0089
     12a:	00 97       	sbiw	r24, 0x00	; 0
     12c:	29 f0       	breq	.+10     	; 0x138 <__vector_10+0x40>
	{
		/*
		 * Call the callback function in the application after the compare match has
		 * occurred in TIMER0 (COMPARE MODE)
		 */
		(*g_callBackPtrTimer0)();
     12e:	e0 91 88 00 	lds	r30, 0x0088
     132:	f0 91 89 00 	lds	r31, 0x0089
     136:	09 95       	icall
	}
}
     138:	cf 91       	pop	r28
     13a:	df 91       	pop	r29
     13c:	ff 91       	pop	r31
     13e:	ef 91       	pop	r30
     140:	bf 91       	pop	r27
     142:	af 91       	pop	r26
     144:	9f 91       	pop	r25
     146:	8f 91       	pop	r24
     148:	7f 91       	pop	r23
     14a:	6f 91       	pop	r22
     14c:	5f 91       	pop	r21
     14e:	4f 91       	pop	r20
     150:	3f 91       	pop	r19
     152:	2f 91       	pop	r18
     154:	0f 90       	pop	r0
     156:	0f be       	out	0x3f, r0	; 63
     158:	0f 90       	pop	r0
     15a:	1f 90       	pop	r1
     15c:	18 95       	reti

0000015e <__vector_9>:
/************************************************************************************
 *                                       TIMER1                                     *
 ************************************************************************************/

ISR(TIMER1_OVF_vect)
{
     15e:	1f 92       	push	r1
     160:	0f 92       	push	r0
     162:	0f b6       	in	r0, 0x3f	; 63
     164:	0f 92       	push	r0
     166:	11 24       	eor	r1, r1
     168:	2f 93       	push	r18
     16a:	3f 93       	push	r19
     16c:	4f 93       	push	r20
     16e:	5f 93       	push	r21
     170:	6f 93       	push	r22
     172:	7f 93       	push	r23
     174:	8f 93       	push	r24
     176:	9f 93       	push	r25
     178:	af 93       	push	r26
     17a:	bf 93       	push	r27
     17c:	ef 93       	push	r30
     17e:	ff 93       	push	r31
     180:	df 93       	push	r29
     182:	cf 93       	push	r28
     184:	cd b7       	in	r28, 0x3d	; 61
     186:	de b7       	in	r29, 0x3e	; 62
	/* Check if Pointer is not a NULL one, to avoid Segmentation fault */
	if(g_callBackPtrTimer1 != NULL_PTR)
     188:	80 91 8a 00 	lds	r24, 0x008A
     18c:	90 91 8b 00 	lds	r25, 0x008B
     190:	00 97       	sbiw	r24, 0x00	; 0
     192:	29 f0       	breq	.+10     	; 0x19e <__vector_9+0x40>
	{
		/*
		 * Call the callback function in the application after the overflow has
		 * occurred in TIMER1 (NORMAL MODE)
		 */
		(*g_callBackPtrTimer1)();
     194:	e0 91 8a 00 	lds	r30, 0x008A
     198:	f0 91 8b 00 	lds	r31, 0x008B
     19c:	09 95       	icall
	}
}
     19e:	cf 91       	pop	r28
     1a0:	df 91       	pop	r29
     1a2:	ff 91       	pop	r31
     1a4:	ef 91       	pop	r30
     1a6:	bf 91       	pop	r27
     1a8:	af 91       	pop	r26
     1aa:	9f 91       	pop	r25
     1ac:	8f 91       	pop	r24
     1ae:	7f 91       	pop	r23
     1b0:	6f 91       	pop	r22
     1b2:	5f 91       	pop	r21
     1b4:	4f 91       	pop	r20
     1b6:	3f 91       	pop	r19
     1b8:	2f 91       	pop	r18
     1ba:	0f 90       	pop	r0
     1bc:	0f be       	out	0x3f, r0	; 63
     1be:	0f 90       	pop	r0
     1c0:	1f 90       	pop	r1
     1c2:	18 95       	reti

000001c4 <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
     1c4:	1f 92       	push	r1
     1c6:	0f 92       	push	r0
     1c8:	0f b6       	in	r0, 0x3f	; 63
     1ca:	0f 92       	push	r0
     1cc:	11 24       	eor	r1, r1
     1ce:	2f 93       	push	r18
     1d0:	3f 93       	push	r19
     1d2:	4f 93       	push	r20
     1d4:	5f 93       	push	r21
     1d6:	6f 93       	push	r22
     1d8:	7f 93       	push	r23
     1da:	8f 93       	push	r24
     1dc:	9f 93       	push	r25
     1de:	af 93       	push	r26
     1e0:	bf 93       	push	r27
     1e2:	ef 93       	push	r30
     1e4:	ff 93       	push	r31
     1e6:	df 93       	push	r29
     1e8:	cf 93       	push	r28
     1ea:	cd b7       	in	r28, 0x3d	; 61
     1ec:	de b7       	in	r29, 0x3e	; 62
	/* Check if Pointer is not a NULL one, to avoid Segmentation fault */
	if(g_callBackPtrTimer1 != NULL_PTR)
     1ee:	80 91 8a 00 	lds	r24, 0x008A
     1f2:	90 91 8b 00 	lds	r25, 0x008B
     1f6:	00 97       	sbiw	r24, 0x00	; 0
     1f8:	29 f0       	breq	.+10     	; 0x204 <__vector_7+0x40>
	{
		/*
		 * Call the callback function in the application after the compare match has
		 * occurred in TIMER1 Channel A (COMPARE MODE)
		 */
		(*g_callBackPtrTimer1)();
     1fa:	e0 91 8a 00 	lds	r30, 0x008A
     1fe:	f0 91 8b 00 	lds	r31, 0x008B
     202:	09 95       	icall
	}
}
     204:	cf 91       	pop	r28
     206:	df 91       	pop	r29
     208:	ff 91       	pop	r31
     20a:	ef 91       	pop	r30
     20c:	bf 91       	pop	r27
     20e:	af 91       	pop	r26
     210:	9f 91       	pop	r25
     212:	8f 91       	pop	r24
     214:	7f 91       	pop	r23
     216:	6f 91       	pop	r22
     218:	5f 91       	pop	r21
     21a:	4f 91       	pop	r20
     21c:	3f 91       	pop	r19
     21e:	2f 91       	pop	r18
     220:	0f 90       	pop	r0
     222:	0f be       	out	0x3f, r0	; 63
     224:	0f 90       	pop	r0
     226:	1f 90       	pop	r1
     228:	18 95       	reti

0000022a <__vector_5>:
/************************************************************************************
 *                                       TIMER2                                     *
 ************************************************************************************/

ISR(TIMER2_OVF_vect)
{
     22a:	1f 92       	push	r1
     22c:	0f 92       	push	r0
     22e:	0f b6       	in	r0, 0x3f	; 63
     230:	0f 92       	push	r0
     232:	11 24       	eor	r1, r1
     234:	2f 93       	push	r18
     236:	3f 93       	push	r19
     238:	4f 93       	push	r20
     23a:	5f 93       	push	r21
     23c:	6f 93       	push	r22
     23e:	7f 93       	push	r23
     240:	8f 93       	push	r24
     242:	9f 93       	push	r25
     244:	af 93       	push	r26
     246:	bf 93       	push	r27
     248:	ef 93       	push	r30
     24a:	ff 93       	push	r31
     24c:	df 93       	push	r29
     24e:	cf 93       	push	r28
     250:	cd b7       	in	r28, 0x3d	; 61
     252:	de b7       	in	r29, 0x3e	; 62
	/* Check if Pointer is not a NULL one, to avoid Segmentation fault */
	if(g_callBackPtrTimer2 != NULL_PTR)
     254:	80 91 8c 00 	lds	r24, 0x008C
     258:	90 91 8d 00 	lds	r25, 0x008D
     25c:	00 97       	sbiw	r24, 0x00	; 0
     25e:	29 f0       	breq	.+10     	; 0x26a <__vector_5+0x40>
	{
		/*
		 * Call the callback function in the application after the overflow has
		 * occurred in TIMER2 (NORMAL MODE)
		 */
		(*g_callBackPtrTimer2)();
     260:	e0 91 8c 00 	lds	r30, 0x008C
     264:	f0 91 8d 00 	lds	r31, 0x008D
     268:	09 95       	icall
	}
}
     26a:	cf 91       	pop	r28
     26c:	df 91       	pop	r29
     26e:	ff 91       	pop	r31
     270:	ef 91       	pop	r30
     272:	bf 91       	pop	r27
     274:	af 91       	pop	r26
     276:	9f 91       	pop	r25
     278:	8f 91       	pop	r24
     27a:	7f 91       	pop	r23
     27c:	6f 91       	pop	r22
     27e:	5f 91       	pop	r21
     280:	4f 91       	pop	r20
     282:	3f 91       	pop	r19
     284:	2f 91       	pop	r18
     286:	0f 90       	pop	r0
     288:	0f be       	out	0x3f, r0	; 63
     28a:	0f 90       	pop	r0
     28c:	1f 90       	pop	r1
     28e:	18 95       	reti

00000290 <__vector_4>:

ISR(TIMER2_COMP_vect)
{
     290:	1f 92       	push	r1
     292:	0f 92       	push	r0
     294:	0f b6       	in	r0, 0x3f	; 63
     296:	0f 92       	push	r0
     298:	11 24       	eor	r1, r1
     29a:	2f 93       	push	r18
     29c:	3f 93       	push	r19
     29e:	4f 93       	push	r20
     2a0:	5f 93       	push	r21
     2a2:	6f 93       	push	r22
     2a4:	7f 93       	push	r23
     2a6:	8f 93       	push	r24
     2a8:	9f 93       	push	r25
     2aa:	af 93       	push	r26
     2ac:	bf 93       	push	r27
     2ae:	ef 93       	push	r30
     2b0:	ff 93       	push	r31
     2b2:	df 93       	push	r29
     2b4:	cf 93       	push	r28
     2b6:	cd b7       	in	r28, 0x3d	; 61
     2b8:	de b7       	in	r29, 0x3e	; 62
	/* Check if Pointer is not a NULL one, to avoid Segmentation fault */
	if(g_callBackPtrTimer2 != NULL_PTR)
     2ba:	80 91 8c 00 	lds	r24, 0x008C
     2be:	90 91 8d 00 	lds	r25, 0x008D
     2c2:	00 97       	sbiw	r24, 0x00	; 0
     2c4:	29 f0       	breq	.+10     	; 0x2d0 <__vector_4+0x40>
	{
		/*
		 * Call the callback function in the application after the compare match has
		 * occurred in TIMER2 (COMPARE MODE)
		 */
		(*g_callBackPtrTimer2)();
     2c6:	e0 91 8c 00 	lds	r30, 0x008C
     2ca:	f0 91 8d 00 	lds	r31, 0x008D
     2ce:	09 95       	icall
	}
}
     2d0:	cf 91       	pop	r28
     2d2:	df 91       	pop	r29
     2d4:	ff 91       	pop	r31
     2d6:	ef 91       	pop	r30
     2d8:	bf 91       	pop	r27
     2da:	af 91       	pop	r26
     2dc:	9f 91       	pop	r25
     2de:	8f 91       	pop	r24
     2e0:	7f 91       	pop	r23
     2e2:	6f 91       	pop	r22
     2e4:	5f 91       	pop	r21
     2e6:	4f 91       	pop	r20
     2e8:	3f 91       	pop	r19
     2ea:	2f 91       	pop	r18
     2ec:	0f 90       	pop	r0
     2ee:	0f be       	out	0x3f, r0	; 63
     2f0:	0f 90       	pop	r0
     2f2:	1f 90       	pop	r1
     2f4:	18 95       	reti

000002f6 <TIMER_init>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 *************************************************************************************/
enuTIMER_E_STATE_t TIMER_init(const strTIMER_ConfigType_t * Config_Ptr)
{
     2f6:	df 93       	push	r29
     2f8:	cf 93       	push	r28
     2fa:	cd b7       	in	r28, 0x3d	; 61
     2fc:	de b7       	in	r29, 0x3e	; 62
     2fe:	2b 97       	sbiw	r28, 0x0b	; 11
     300:	0f b6       	in	r0, 0x3f	; 63
     302:	f8 94       	cli
     304:	de bf       	out	0x3e, r29	; 62
     306:	0f be       	out	0x3f, r0	; 63
     308:	cd bf       	out	0x3d, r28	; 61
     30a:	9b 83       	std	Y+3, r25	; 0x03
     30c:	8a 83       	std	Y+2, r24	; 0x02
	enuTIMER_E_STATE_t enu_ErrorState = E_NOT_OK;
     30e:	81 e0       	ldi	r24, 0x01	; 1
     310:	89 83       	std	Y+1, r24	; 0x01

	switch(Config_Ptr -> timer_ID)
     312:	ea 81       	ldd	r30, Y+2	; 0x02
     314:	fb 81       	ldd	r31, Y+3	; 0x03
     316:	84 81       	ldd	r24, Z+4	; 0x04
     318:	28 2f       	mov	r18, r24
     31a:	30 e0       	ldi	r19, 0x00	; 0
     31c:	3b 87       	std	Y+11, r19	; 0x0b
     31e:	2a 87       	std	Y+10, r18	; 0x0a
     320:	8a 85       	ldd	r24, Y+10	; 0x0a
     322:	9b 85       	ldd	r25, Y+11	; 0x0b
     324:	81 30       	cpi	r24, 0x01	; 1
     326:	91 05       	cpc	r25, r1
     328:	09 f4       	brne	.+2      	; 0x32c <TIMER_init+0x36>
     32a:	50 c0       	rjmp	.+160    	; 0x3cc <TIMER_init+0xd6>
     32c:	2a 85       	ldd	r18, Y+10	; 0x0a
     32e:	3b 85       	ldd	r19, Y+11	; 0x0b
     330:	22 30       	cpi	r18, 0x02	; 2
     332:	31 05       	cpc	r19, r1
     334:	09 f4       	brne	.+2      	; 0x338 <TIMER_init+0x42>
     336:	9f c0       	rjmp	.+318    	; 0x476 <TIMER_init+0x180>
     338:	8a 85       	ldd	r24, Y+10	; 0x0a
     33a:	9b 85       	ldd	r25, Y+11	; 0x0b
     33c:	00 97       	sbiw	r24, 0x00	; 0
     33e:	09 f0       	breq	.+2      	; 0x342 <TIMER_init+0x4c>
     340:	df c0       	rjmp	.+446    	; 0x500 <TIMER_init+0x20a>

		/*
		 * Clear All timer register before doing any operation,
		 * to ensure that timer will work correctly
		 */
		TCNT0_R = 0x00;
     342:	e2 e5       	ldi	r30, 0x52	; 82
     344:	f0 e0       	ldi	r31, 0x00	; 0
     346:	10 82       	st	Z, r1
		TCCR0_R = 0x00;
     348:	e3 e5       	ldi	r30, 0x53	; 83
     34a:	f0 e0       	ldi	r31, 0x00	; 0
     34c:	10 82       	st	Z, r1
		OCR0_R  = 0x00;
     34e:	ec e5       	ldi	r30, 0x5C	; 92
     350:	f0 e0       	ldi	r31, 0x00	; 0
     352:	10 82       	st	Z, r1
		/*
		 * Insert the required initial value in the TCNT0 register
		 * TIMER0 is (8-bit), so mask the initial value with 0xFF to ensure that it
		 * does not exceed 255
		 */
		TCNT0_R = ( (Config_Ptr -> intialValue) & 0xFF);
     354:	a2 e5       	ldi	r26, 0x52	; 82
     356:	b0 e0       	ldi	r27, 0x00	; 0
     358:	ea 81       	ldd	r30, Y+2	; 0x02
     35a:	fb 81       	ldd	r31, Y+3	; 0x03
     35c:	80 81       	ld	r24, Z
     35e:	91 81       	ldd	r25, Z+1	; 0x01
     360:	8c 93       	st	X, r24

		switch(Config_Ptr -> timer_Mode)
     362:	ea 81       	ldd	r30, Y+2	; 0x02
     364:	fb 81       	ldd	r31, Y+3	; 0x03
     366:	85 81       	ldd	r24, Z+5	; 0x05
     368:	28 2f       	mov	r18, r24
     36a:	30 e0       	ldi	r19, 0x00	; 0
     36c:	39 87       	std	Y+9, r19	; 0x09
     36e:	28 87       	std	Y+8, r18	; 0x08
     370:	88 85       	ldd	r24, Y+8	; 0x08
     372:	99 85       	ldd	r25, Y+9	; 0x09
     374:	00 97       	sbiw	r24, 0x00	; 0
     376:	31 f0       	breq	.+12     	; 0x384 <TIMER_init+0x8e>
     378:	28 85       	ldd	r18, Y+8	; 0x08
     37a:	39 85       	ldd	r19, Y+9	; 0x09
     37c:	21 30       	cpi	r18, 0x01	; 1
     37e:	31 05       	cpc	r19, r1
     380:	71 f0       	breq	.+28     	; 0x39e <TIMER_init+0xa8>
     382:	21 c0       	rjmp	.+66     	; 0x3c6 <TIMER_init+0xd0>
		 * 	- Normal Mode  (COM01 = 0 & COM00 = 0) in TCCR0 register
		 * 	- Enable TIMER0 Overflow Interrupt (TOIE0) bit in TIMSK register
		 */
		case NORMAL:

			TCCR0_R  = (1 << FOC0_BIT);
     384:	e3 e5       	ldi	r30, 0x53	; 83
     386:	f0 e0       	ldi	r31, 0x00	; 0
     388:	80 e8       	ldi	r24, 0x80	; 128
     38a:	80 83       	st	Z, r24
			TIMSK_R |= (1 << TOIE0_BIT);
     38c:	a9 e5       	ldi	r26, 0x59	; 89
     38e:	b0 e0       	ldi	r27, 0x00	; 0
     390:	e9 e5       	ldi	r30, 0x59	; 89
     392:	f0 e0       	ldi	r31, 0x00	; 0
     394:	80 81       	ld	r24, Z
     396:	81 60       	ori	r24, 0x01	; 1
     398:	8c 93       	st	X, r24
			enu_ErrorState = TIMER_E_PARAM_VALID;
     39a:	19 82       	std	Y+1, r1	; 0x01
     39c:	b3 c0       	rjmp	.+358    	; 0x504 <TIMER_init+0x20e>
		 * 	- Normal  Mode (COM01 = 0 & COM00 = 0) in TCCR0 register
		 * 	- Enable TIMER0 Compare Match Interrupt (OCIE0) bit in TIMSK register
		 */
		case COMPARE:

			OCR0_R   = ( (Config_Ptr -> compareValue) & 0xFF);
     39e:	ac e5       	ldi	r26, 0x5C	; 92
     3a0:	b0 e0       	ldi	r27, 0x00	; 0
     3a2:	ea 81       	ldd	r30, Y+2	; 0x02
     3a4:	fb 81       	ldd	r31, Y+3	; 0x03
     3a6:	82 81       	ldd	r24, Z+2	; 0x02
     3a8:	93 81       	ldd	r25, Z+3	; 0x03
     3aa:	8c 93       	st	X, r24
			TCCR0_R  = (1 << FOC0_BIT) | (1 << WGM01_BIT);
     3ac:	e3 e5       	ldi	r30, 0x53	; 83
     3ae:	f0 e0       	ldi	r31, 0x00	; 0
     3b0:	88 e8       	ldi	r24, 0x88	; 136
     3b2:	80 83       	st	Z, r24
			TIMSK_R |= (1 << OCIE0_BIT);
     3b4:	a9 e5       	ldi	r26, 0x59	; 89
     3b6:	b0 e0       	ldi	r27, 0x00	; 0
     3b8:	e9 e5       	ldi	r30, 0x59	; 89
     3ba:	f0 e0       	ldi	r31, 0x00	; 0
     3bc:	80 81       	ld	r24, Z
     3be:	82 60       	ori	r24, 0x02	; 2
     3c0:	8c 93       	st	X, r24
			enu_ErrorState = TIMER_E_PARAM_VALID;
     3c2:	19 82       	std	Y+1, r1	; 0x01
     3c4:	9f c0       	rjmp	.+318    	; 0x504 <TIMER_init+0x20e>
			break;

		default:

			enu_ErrorState = TIMER_E_PARAM_INVALID_MODE;
     3c6:	82 e0       	ldi	r24, 0x02	; 2
     3c8:	89 83       	std	Y+1, r24	; 0x01
     3ca:	9c c0       	rjmp	.+312    	; 0x504 <TIMER_init+0x20e>

		/*
		 * Clear All timer register before doing any operation,
		 * to ensure that timer will work correctly
		 */
		TCNT1_R  = 0x0000;
     3cc:	ec e4       	ldi	r30, 0x4C	; 76
     3ce:	f0 e0       	ldi	r31, 0x00	; 0
     3d0:	11 82       	std	Z+1, r1	; 0x01
     3d2:	10 82       	st	Z, r1
		OCR1A_R  = 0x0000;
     3d4:	ea e4       	ldi	r30, 0x4A	; 74
     3d6:	f0 e0       	ldi	r31, 0x00	; 0
     3d8:	11 82       	std	Z+1, r1	; 0x01
     3da:	10 82       	st	Z, r1
		TCCR1A_R = 0x00;
     3dc:	ef e4       	ldi	r30, 0x4F	; 79
     3de:	f0 e0       	ldi	r31, 0x00	; 0
     3e0:	10 82       	st	Z, r1
		TCCR1B_R = 0x00;
     3e2:	ee e4       	ldi	r30, 0x4E	; 78
     3e4:	f0 e0       	ldi	r31, 0x00	; 0
     3e6:	10 82       	st	Z, r1
		/*
		 * Insert the required initial value in the TCNT1 register
		 * TIMER1 is (16-bit), so mask the initial value with 0xFFFF to ensure that it
		 * does not exceed 65535
		 */
		TCNT1_R = ( (Config_Ptr -> intialValue) & 0xFFFF);
     3e8:	ac e4       	ldi	r26, 0x4C	; 76
     3ea:	b0 e0       	ldi	r27, 0x00	; 0
     3ec:	ea 81       	ldd	r30, Y+2	; 0x02
     3ee:	fb 81       	ldd	r31, Y+3	; 0x03
     3f0:	80 81       	ld	r24, Z
     3f2:	91 81       	ldd	r25, Z+1	; 0x01
     3f4:	11 96       	adiw	r26, 0x01	; 1
     3f6:	9c 93       	st	X, r25
     3f8:	8e 93       	st	-X, r24

		switch(Config_Ptr -> timer_Mode)
     3fa:	ea 81       	ldd	r30, Y+2	; 0x02
     3fc:	fb 81       	ldd	r31, Y+3	; 0x03
     3fe:	85 81       	ldd	r24, Z+5	; 0x05
     400:	28 2f       	mov	r18, r24
     402:	30 e0       	ldi	r19, 0x00	; 0
     404:	3f 83       	std	Y+7, r19	; 0x07
     406:	2e 83       	std	Y+6, r18	; 0x06
     408:	8e 81       	ldd	r24, Y+6	; 0x06
     40a:	9f 81       	ldd	r25, Y+7	; 0x07
     40c:	00 97       	sbiw	r24, 0x00	; 0
     40e:	31 f0       	breq	.+12     	; 0x41c <TIMER_init+0x126>
     410:	2e 81       	ldd	r18, Y+6	; 0x06
     412:	3f 81       	ldd	r19, Y+7	; 0x07
     414:	21 30       	cpi	r18, 0x01	; 1
     416:	31 05       	cpc	r19, r1
     418:	71 f0       	breq	.+28     	; 0x436 <TIMER_init+0x140>
     41a:	2a c0       	rjmp	.+84     	; 0x470 <TIMER_init+0x17a>
		 * 	- Normal  Mode (WGM10 = 0 & WGM11 = 0 & WGM12 = 0 & WGM13 = 0)
		 * 	- Enable TIMER1 Overflow Interrupt (TOIE1) bit in TIMSK register
		 */
		case NORMAL:

			TCCR1A_R = (1 << FOC1A_BIT)  | (1 << FOC1B_BIT);
     41c:	ef e4       	ldi	r30, 0x4F	; 79
     41e:	f0 e0       	ldi	r31, 0x00	; 0
     420:	8c e0       	ldi	r24, 0x0C	; 12
     422:	80 83       	st	Z, r24
			TIMSK_R |= (1 << TOIE1_BIT);
     424:	a9 e5       	ldi	r26, 0x59	; 89
     426:	b0 e0       	ldi	r27, 0x00	; 0
     428:	e9 e5       	ldi	r30, 0x59	; 89
     42a:	f0 e0       	ldi	r31, 0x00	; 0
     42c:	80 81       	ld	r24, Z
     42e:	84 60       	ori	r24, 0x04	; 4
     430:	8c 93       	st	X, r24
			enu_ErrorState = TIMER_E_PARAM_VALID;
     432:	19 82       	std	Y+1, r1	; 0x01
     434:	67 c0       	rjmp	.+206    	; 0x504 <TIMER_init+0x20e>
		 *	- Compare Mode (WGM10 = 0 & WGM11 = 0 & WGM12 = 1 & WGM13 = 0)
		 * 	- Enable TIMER2 Compare Match Interrupt (OCIE1A) bit in TIMSK register
		 */
		case COMPARE:

			OCR1A_R   = ( (Config_Ptr -> compareValue) & 0xFFFF);
     436:	aa e4       	ldi	r26, 0x4A	; 74
     438:	b0 e0       	ldi	r27, 0x00	; 0
     43a:	ea 81       	ldd	r30, Y+2	; 0x02
     43c:	fb 81       	ldd	r31, Y+3	; 0x03
     43e:	82 81       	ldd	r24, Z+2	; 0x02
     440:	93 81       	ldd	r25, Z+3	; 0x03
     442:	11 96       	adiw	r26, 0x01	; 1
     444:	9c 93       	st	X, r25
     446:	8e 93       	st	-X, r24
			TCCR1A_R  = (1 << FOC1A_BIT) | (1 << FOC1B_BIT);
     448:	ef e4       	ldi	r30, 0x4F	; 79
     44a:	f0 e0       	ldi	r31, 0x00	; 0
     44c:	8c e0       	ldi	r24, 0x0C	; 12
     44e:	80 83       	st	Z, r24
			TCCR1B_R |= (1 << WGM12_BIT);
     450:	ae e4       	ldi	r26, 0x4E	; 78
     452:	b0 e0       	ldi	r27, 0x00	; 0
     454:	ee e4       	ldi	r30, 0x4E	; 78
     456:	f0 e0       	ldi	r31, 0x00	; 0
     458:	80 81       	ld	r24, Z
     45a:	88 60       	ori	r24, 0x08	; 8
     45c:	8c 93       	st	X, r24
			TIMSK_R  |= (1 << OCIE1A_BIT);
     45e:	a9 e5       	ldi	r26, 0x59	; 89
     460:	b0 e0       	ldi	r27, 0x00	; 0
     462:	e9 e5       	ldi	r30, 0x59	; 89
     464:	f0 e0       	ldi	r31, 0x00	; 0
     466:	80 81       	ld	r24, Z
     468:	80 61       	ori	r24, 0x10	; 16
     46a:	8c 93       	st	X, r24
			enu_ErrorState = TIMER_E_PARAM_VALID;
     46c:	19 82       	std	Y+1, r1	; 0x01
     46e:	4a c0       	rjmp	.+148    	; 0x504 <TIMER_init+0x20e>
			break;

		default:
			enu_ErrorState = TIMER_E_PARAM_INVALID_MODE;
     470:	82 e0       	ldi	r24, 0x02	; 2
     472:	89 83       	std	Y+1, r24	; 0x01
     474:	47 c0       	rjmp	.+142    	; 0x504 <TIMER_init+0x20e>

		/*
		 * Clear All timer register before doing any operation,
		 * to ensure that timer will work correctly
		 */
		TCNT2_R = 0x00;
     476:	e4 e4       	ldi	r30, 0x44	; 68
     478:	f0 e0       	ldi	r31, 0x00	; 0
     47a:	10 82       	st	Z, r1
		TCCR2_R = 0x00;
     47c:	e5 e4       	ldi	r30, 0x45	; 69
     47e:	f0 e0       	ldi	r31, 0x00	; 0
     480:	10 82       	st	Z, r1
		OCR2_R  = 0x00;
     482:	e3 e4       	ldi	r30, 0x43	; 67
     484:	f0 e0       	ldi	r31, 0x00	; 0
     486:	10 82       	st	Z, r1
		/*
		 * Insert the required initial value in the TCNT2 register
		 * TIMER2 is (8-bit), so mask the initial value with 0xFF to ensure that it
	     * does not exceed 255
		 */
		TCNT2_R = ( (Config_Ptr -> intialValue) & 0xFF);
     488:	a4 e4       	ldi	r26, 0x44	; 68
     48a:	b0 e0       	ldi	r27, 0x00	; 0
     48c:	ea 81       	ldd	r30, Y+2	; 0x02
     48e:	fb 81       	ldd	r31, Y+3	; 0x03
     490:	80 81       	ld	r24, Z
     492:	91 81       	ldd	r25, Z+1	; 0x01
     494:	8c 93       	st	X, r24

		switch(Config_Ptr -> timer_Mode)
     496:	ea 81       	ldd	r30, Y+2	; 0x02
     498:	fb 81       	ldd	r31, Y+3	; 0x03
     49a:	85 81       	ldd	r24, Z+5	; 0x05
     49c:	28 2f       	mov	r18, r24
     49e:	30 e0       	ldi	r19, 0x00	; 0
     4a0:	3d 83       	std	Y+5, r19	; 0x05
     4a2:	2c 83       	std	Y+4, r18	; 0x04
     4a4:	8c 81       	ldd	r24, Y+4	; 0x04
     4a6:	9d 81       	ldd	r25, Y+5	; 0x05
     4a8:	00 97       	sbiw	r24, 0x00	; 0
     4aa:	31 f0       	breq	.+12     	; 0x4b8 <TIMER_init+0x1c2>
     4ac:	2c 81       	ldd	r18, Y+4	; 0x04
     4ae:	3d 81       	ldd	r19, Y+5	; 0x05
     4b0:	21 30       	cpi	r18, 0x01	; 1
     4b2:	31 05       	cpc	r19, r1
     4b4:	71 f0       	breq	.+28     	; 0x4d2 <TIMER_init+0x1dc>
     4b6:	21 c0       	rjmp	.+66     	; 0x4fa <TIMER_init+0x204>
		 * 	- Normal  Mode (COM21 = 0 & COM20 = 0) in TCCR2 register
		 * 	- Enable TIMER2 Overflow Interrupt (TOIE2) bit in TIMSK register
		 */
		case NORMAL:

			TCCR2_R  = (1 << FOC2_BIT);
     4b8:	e5 e4       	ldi	r30, 0x45	; 69
     4ba:	f0 e0       	ldi	r31, 0x00	; 0
     4bc:	80 e8       	ldi	r24, 0x80	; 128
     4be:	80 83       	st	Z, r24
			TIMSK_R |= (1 << TOIE2_BIT);
     4c0:	a9 e5       	ldi	r26, 0x59	; 89
     4c2:	b0 e0       	ldi	r27, 0x00	; 0
     4c4:	e9 e5       	ldi	r30, 0x59	; 89
     4c6:	f0 e0       	ldi	r31, 0x00	; 0
     4c8:	80 81       	ld	r24, Z
     4ca:	80 64       	ori	r24, 0x40	; 64
     4cc:	8c 93       	st	X, r24
			enu_ErrorState = TIMER_E_PARAM_VALID;
     4ce:	19 82       	std	Y+1, r1	; 0x01
     4d0:	19 c0       	rjmp	.+50     	; 0x504 <TIMER_init+0x20e>
		 * 	- Normal  Mode (COM21 = 0 & COM20 = 0) in TCCR2 register
		 * 	- Enable TIMER2 Compare Match Interrupt (OCIE2) bit in TIMSK register
		 */
		case COMPARE:

			OCR2_R   = ( (Config_Ptr -> compareValue) & 0xFF);
     4d2:	a3 e4       	ldi	r26, 0x43	; 67
     4d4:	b0 e0       	ldi	r27, 0x00	; 0
     4d6:	ea 81       	ldd	r30, Y+2	; 0x02
     4d8:	fb 81       	ldd	r31, Y+3	; 0x03
     4da:	82 81       	ldd	r24, Z+2	; 0x02
     4dc:	93 81       	ldd	r25, Z+3	; 0x03
     4de:	8c 93       	st	X, r24
			TCCR2_R  = (1 << FOC2_BIT) | (1 << WGM21_BIT);
     4e0:	e5 e4       	ldi	r30, 0x45	; 69
     4e2:	f0 e0       	ldi	r31, 0x00	; 0
     4e4:	88 e8       	ldi	r24, 0x88	; 136
     4e6:	80 83       	st	Z, r24
			TIMSK_R |= (1 << OCIE2_BIT);
     4e8:	a9 e5       	ldi	r26, 0x59	; 89
     4ea:	b0 e0       	ldi	r27, 0x00	; 0
     4ec:	e9 e5       	ldi	r30, 0x59	; 89
     4ee:	f0 e0       	ldi	r31, 0x00	; 0
     4f0:	80 81       	ld	r24, Z
     4f2:	80 68       	ori	r24, 0x80	; 128
     4f4:	8c 93       	st	X, r24
			enu_ErrorState = TIMER_E_PARAM_VALID;
     4f6:	19 82       	std	Y+1, r1	; 0x01
     4f8:	05 c0       	rjmp	.+10     	; 0x504 <TIMER_init+0x20e>
			break;

		default:

			enu_ErrorState = TIMER_E_PARAM_INVALID_MODE;
     4fa:	82 e0       	ldi	r24, 0x02	; 2
     4fc:	89 83       	std	Y+1, r24	; 0x01
     4fe:	02 c0       	rjmp	.+4      	; 0x504 <TIMER_init+0x20e>
			break;
		}	/* END CASE OF TIMER2 */
		break;

	default:
		enu_ErrorState = TIMER_E_PARAM_INVALID_ID;	/* Invalid timer id */
     500:	81 e0       	ldi	r24, 0x01	; 1
     502:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return enu_ErrorState;
     504:	89 81       	ldd	r24, Y+1	; 0x01
}
     506:	2b 96       	adiw	r28, 0x0b	; 11
     508:	0f b6       	in	r0, 0x3f	; 63
     50a:	f8 94       	cli
     50c:	de bf       	out	0x3e, r29	; 62
     50e:	0f be       	out	0x3f, r0	; 63
     510:	cd bf       	out	0x3d, r28	; 61
     512:	cf 91       	pop	r28
     514:	df 91       	pop	r29
     516:	08 95       	ret

00000518 <TIMER_setCallBack>:
 * [in/out]		 	None
 *
 * [Returns]:       Error State
 ******************************************************************************/
enuTIMER_E_STATE_t TIMER_setCallBack(void(*a_ptr)(void), const enuTIMER_ID_t enu_timerID)
{
     518:	df 93       	push	r29
     51a:	cf 93       	push	r28
     51c:	00 d0       	rcall	.+0      	; 0x51e <TIMER_setCallBack+0x6>
     51e:	00 d0       	rcall	.+0      	; 0x520 <TIMER_setCallBack+0x8>
     520:	00 d0       	rcall	.+0      	; 0x522 <TIMER_setCallBack+0xa>
     522:	cd b7       	in	r28, 0x3d	; 61
     524:	de b7       	in	r29, 0x3e	; 62
     526:	9b 83       	std	Y+3, r25	; 0x03
     528:	8a 83       	std	Y+2, r24	; 0x02
     52a:	6c 83       	std	Y+4, r22	; 0x04
	enuTIMER_E_STATE_t enu_ErrorState = E_NOT_OK;
     52c:	81 e0       	ldi	r24, 0x01	; 1
     52e:	89 83       	std	Y+1, r24	; 0x01

	if(a_ptr == NULL_PTR)
     530:	8a 81       	ldd	r24, Y+2	; 0x02
     532:	9b 81       	ldd	r25, Y+3	; 0x03
     534:	00 97       	sbiw	r24, 0x00	; 0
     536:	19 f4       	brne	.+6      	; 0x53e <TIMER_setCallBack+0x26>
	{
		enu_ErrorState = TIMER_E_PARAM_POINTER;	/* Invalid pointer "NULL" */
     538:	83 e0       	ldi	r24, 0x03	; 3
     53a:	89 83       	std	Y+1, r24	; 0x01
     53c:	2a c0       	rjmp	.+84     	; 0x592 <TIMER_setCallBack+0x7a>
	}
	else
	{
		switch(enu_timerID)
     53e:	8c 81       	ldd	r24, Y+4	; 0x04
     540:	28 2f       	mov	r18, r24
     542:	30 e0       	ldi	r19, 0x00	; 0
     544:	3e 83       	std	Y+6, r19	; 0x06
     546:	2d 83       	std	Y+5, r18	; 0x05
     548:	8d 81       	ldd	r24, Y+5	; 0x05
     54a:	9e 81       	ldd	r25, Y+6	; 0x06
     54c:	81 30       	cpi	r24, 0x01	; 1
     54e:	91 05       	cpc	r25, r1
     550:	89 f0       	breq	.+34     	; 0x574 <TIMER_setCallBack+0x5c>
     552:	2d 81       	ldd	r18, Y+5	; 0x05
     554:	3e 81       	ldd	r19, Y+6	; 0x06
     556:	22 30       	cpi	r18, 0x02	; 2
     558:	31 05       	cpc	r19, r1
     55a:	a1 f0       	breq	.+40     	; 0x584 <TIMER_setCallBack+0x6c>
     55c:	8d 81       	ldd	r24, Y+5	; 0x05
     55e:	9e 81       	ldd	r25, Y+6	; 0x06
     560:	00 97       	sbiw	r24, 0x00	; 0
     562:	b9 f4       	brne	.+46     	; 0x592 <TIMER_setCallBack+0x7a>
		{

		case TIMER_0:

			/* Save the address of the Call back function of TIMER0 in a global variable */
			g_callBackPtrTimer0 = a_ptr;
     564:	8a 81       	ldd	r24, Y+2	; 0x02
     566:	9b 81       	ldd	r25, Y+3	; 0x03
     568:	90 93 89 00 	sts	0x0089, r25
     56c:	80 93 88 00 	sts	0x0088, r24
			enu_ErrorState = TIMER_E_PARAM_VALID;
     570:	19 82       	std	Y+1, r1	; 0x01
     572:	0f c0       	rjmp	.+30     	; 0x592 <TIMER_setCallBack+0x7a>
			break;

		case TIMER_1:

			/* Save the address of the Call back function of TIMER1 in a global variable */
			g_callBackPtrTimer1 = a_ptr;
     574:	8a 81       	ldd	r24, Y+2	; 0x02
     576:	9b 81       	ldd	r25, Y+3	; 0x03
     578:	90 93 8b 00 	sts	0x008B, r25
     57c:	80 93 8a 00 	sts	0x008A, r24
			enu_ErrorState = TIMER_E_PARAM_VALID;
     580:	19 82       	std	Y+1, r1	; 0x01
     582:	07 c0       	rjmp	.+14     	; 0x592 <TIMER_setCallBack+0x7a>
			break;

		case TIMER_2:

			/* Save the address of the Call back function of TIMER2 in a global variable */
			g_callBackPtrTimer2 = a_ptr;
     584:	8a 81       	ldd	r24, Y+2	; 0x02
     586:	9b 81       	ldd	r25, Y+3	; 0x03
     588:	90 93 8d 00 	sts	0x008D, r25
     58c:	80 93 8c 00 	sts	0x008C, r24
			enu_ErrorState = TIMER_E_PARAM_VALID;
     590:	19 82       	std	Y+1, r1	; 0x01
		default:
			break;
			enu_ErrorState = TIMER_E_PARAM_INVALID_ID;	/* Invalid timer id */
		}
	}
	return enu_ErrorState;
     592:	89 81       	ldd	r24, Y+1	; 0x01
}
     594:	26 96       	adiw	r28, 0x06	; 6
     596:	0f b6       	in	r0, 0x3f	; 63
     598:	f8 94       	cli
     59a:	de bf       	out	0x3e, r29	; 62
     59c:	0f be       	out	0x3f, r0	; 63
     59e:	cd bf       	out	0x3d, r28	; 61
     5a0:	cf 91       	pop	r28
     5a2:	df 91       	pop	r29
     5a4:	08 95       	ret

000005a6 <TIMER_start>:
 * [in/out]		 	None
 *
 * [Returns]:       Error state
 ******************************************************************************/
enuTIMER_E_STATE_t TIMER_start(const enuTIMER_ID_t enu_timerID, const enuTIMER_Clock_t enu_timerClock)
{
     5a6:	df 93       	push	r29
     5a8:	cf 93       	push	r28
     5aa:	00 d0       	rcall	.+0      	; 0x5ac <TIMER_start+0x6>
     5ac:	00 d0       	rcall	.+0      	; 0x5ae <TIMER_start+0x8>
     5ae:	0f 92       	push	r0
     5b0:	cd b7       	in	r28, 0x3d	; 61
     5b2:	de b7       	in	r29, 0x3e	; 62
     5b4:	8a 83       	std	Y+2, r24	; 0x02
     5b6:	6b 83       	std	Y+3, r22	; 0x03
	enuTIMER_E_STATE_t enu_ErrorState = E_NOT_OK;
     5b8:	81 e0       	ldi	r24, 0x01	; 1
     5ba:	89 83       	std	Y+1, r24	; 0x01

	switch(enu_timerID)
     5bc:	8a 81       	ldd	r24, Y+2	; 0x02
     5be:	28 2f       	mov	r18, r24
     5c0:	30 e0       	ldi	r19, 0x00	; 0
     5c2:	3d 83       	std	Y+5, r19	; 0x05
     5c4:	2c 83       	std	Y+4, r18	; 0x04
     5c6:	8c 81       	ldd	r24, Y+4	; 0x04
     5c8:	9d 81       	ldd	r25, Y+5	; 0x05
     5ca:	81 30       	cpi	r24, 0x01	; 1
     5cc:	91 05       	cpc	r25, r1
     5ce:	a9 f0       	breq	.+42     	; 0x5fa <TIMER_start+0x54>
     5d0:	2c 81       	ldd	r18, Y+4	; 0x04
     5d2:	3d 81       	ldd	r19, Y+5	; 0x05
     5d4:	22 30       	cpi	r18, 0x02	; 2
     5d6:	31 05       	cpc	r19, r1
     5d8:	e1 f0       	breq	.+56     	; 0x612 <TIMER_start+0x6c>
     5da:	8c 81       	ldd	r24, Y+4	; 0x04
     5dc:	9d 81       	ldd	r25, Y+5	; 0x05
     5de:	00 97       	sbiw	r24, 0x00	; 0
     5e0:	21 f5       	brne	.+72     	; 0x62a <TIMER_start+0x84>
	{

	 /* Insert the required Clock in the First three bits (CS02, CS01, CS00) in TCCR0 register */
	case TIMER_0:
		TCCR0_R  = (TCCR0_R & 0xF8) | (enu_timerClock);
     5e2:	a3 e5       	ldi	r26, 0x53	; 83
     5e4:	b0 e0       	ldi	r27, 0x00	; 0
     5e6:	e3 e5       	ldi	r30, 0x53	; 83
     5e8:	f0 e0       	ldi	r31, 0x00	; 0
     5ea:	80 81       	ld	r24, Z
     5ec:	98 2f       	mov	r25, r24
     5ee:	98 7f       	andi	r25, 0xF8	; 248
     5f0:	8b 81       	ldd	r24, Y+3	; 0x03
     5f2:	89 2b       	or	r24, r25
     5f4:	8c 93       	st	X, r24
		enu_ErrorState = TIMER_E_PARAM_VALID;	/* Update the error state with no error */
     5f6:	19 82       	std	Y+1, r1	; 0x01
     5f8:	1a c0       	rjmp	.+52     	; 0x62e <TIMER_start+0x88>
		break;

	/* Insert the required Clock in the First three bits (CS12, CS11, CS10) in TCCR1B register */
	case TIMER_1:
		TCCR1B_R  = (TCCR1B_R & 0xF8) | (enu_timerClock);
     5fa:	ae e4       	ldi	r26, 0x4E	; 78
     5fc:	b0 e0       	ldi	r27, 0x00	; 0
     5fe:	ee e4       	ldi	r30, 0x4E	; 78
     600:	f0 e0       	ldi	r31, 0x00	; 0
     602:	80 81       	ld	r24, Z
     604:	98 2f       	mov	r25, r24
     606:	98 7f       	andi	r25, 0xF8	; 248
     608:	8b 81       	ldd	r24, Y+3	; 0x03
     60a:	89 2b       	or	r24, r25
     60c:	8c 93       	st	X, r24
		enu_ErrorState = TIMER_E_PARAM_VALID;	/* Update the error state with no error */
     60e:	19 82       	std	Y+1, r1	; 0x01
     610:	0e c0       	rjmp	.+28     	; 0x62e <TIMER_start+0x88>
		break;

	/* Insert the required Clock in the First three bits (CS22, CS21, CS20) in TCCR2 register */
	case TIMER_2:
		TCCR2_R  = (TCCR2_R & 0xF8) | (enu_timerClock);
     612:	a5 e4       	ldi	r26, 0x45	; 69
     614:	b0 e0       	ldi	r27, 0x00	; 0
     616:	e5 e4       	ldi	r30, 0x45	; 69
     618:	f0 e0       	ldi	r31, 0x00	; 0
     61a:	80 81       	ld	r24, Z
     61c:	98 2f       	mov	r25, r24
     61e:	98 7f       	andi	r25, 0xF8	; 248
     620:	8b 81       	ldd	r24, Y+3	; 0x03
     622:	89 2b       	or	r24, r25
     624:	8c 93       	st	X, r24
		enu_ErrorState = TIMER_E_PARAM_VALID;	/* Update the error state with no error */
     626:	19 82       	std	Y+1, r1	; 0x01
     628:	02 c0       	rjmp	.+4      	; 0x62e <TIMER_start+0x88>
		break;

	default:
		enu_ErrorState = TIMER_E_PARAM_INVALID_ID;	/* Invalid timer id */
     62a:	81 e0       	ldi	r24, 0x01	; 1
     62c:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return enu_ErrorState;
     62e:	89 81       	ldd	r24, Y+1	; 0x01
}
     630:	0f 90       	pop	r0
     632:	0f 90       	pop	r0
     634:	0f 90       	pop	r0
     636:	0f 90       	pop	r0
     638:	0f 90       	pop	r0
     63a:	cf 91       	pop	r28
     63c:	df 91       	pop	r29
     63e:	08 95       	ret

00000640 <TIMER_stop>:
 * [in/out]		 	None
 *
 * [Returns]:       Error state
 ******************************************************************************/
enuTIMER_E_STATE_t TIMER_stop(const enuTIMER_ID_t enu_timerID)
{
     640:	df 93       	push	r29
     642:	cf 93       	push	r28
     644:	00 d0       	rcall	.+0      	; 0x646 <TIMER_stop+0x6>
     646:	00 d0       	rcall	.+0      	; 0x648 <TIMER_stop+0x8>
     648:	cd b7       	in	r28, 0x3d	; 61
     64a:	de b7       	in	r29, 0x3e	; 62
     64c:	8a 83       	std	Y+2, r24	; 0x02
	enuTIMER_E_STATE_t enu_ErrorState = E_NOT_OK;
     64e:	81 e0       	ldi	r24, 0x01	; 1
     650:	89 83       	std	Y+1, r24	; 0x01

	switch(enu_timerID)
     652:	8a 81       	ldd	r24, Y+2	; 0x02
     654:	28 2f       	mov	r18, r24
     656:	30 e0       	ldi	r19, 0x00	; 0
     658:	3c 83       	std	Y+4, r19	; 0x04
     65a:	2b 83       	std	Y+3, r18	; 0x03
     65c:	8b 81       	ldd	r24, Y+3	; 0x03
     65e:	9c 81       	ldd	r25, Y+4	; 0x04
     660:	81 30       	cpi	r24, 0x01	; 1
     662:	91 05       	cpc	r25, r1
     664:	91 f0       	breq	.+36     	; 0x68a <TIMER_stop+0x4a>
     666:	2b 81       	ldd	r18, Y+3	; 0x03
     668:	3c 81       	ldd	r19, Y+4	; 0x04
     66a:	22 30       	cpi	r18, 0x02	; 2
     66c:	31 05       	cpc	r19, r1
     66e:	b1 f0       	breq	.+44     	; 0x69c <TIMER_stop+0x5c>
     670:	8b 81       	ldd	r24, Y+3	; 0x03
     672:	9c 81       	ldd	r25, Y+4	; 0x04
     674:	00 97       	sbiw	r24, 0x00	; 0
     676:	d9 f4       	brne	.+54     	; 0x6ae <TIMER_stop+0x6e>
	{

	case TIMER_0:

		TCCR0_R  = (TCCR0_R & 0xF8);	/* Clear Clock bits in TIMER0 */
     678:	a3 e5       	ldi	r26, 0x53	; 83
     67a:	b0 e0       	ldi	r27, 0x00	; 0
     67c:	e3 e5       	ldi	r30, 0x53	; 83
     67e:	f0 e0       	ldi	r31, 0x00	; 0
     680:	80 81       	ld	r24, Z
     682:	88 7f       	andi	r24, 0xF8	; 248
     684:	8c 93       	st	X, r24
		enu_ErrorState = TIMER_E_PARAM_VALID;	/* Update the error state with no error */
     686:	19 82       	std	Y+1, r1	; 0x01
     688:	14 c0       	rjmp	.+40     	; 0x6b2 <TIMER_stop+0x72>
		break;

	case TIMER_1:

		TCCR1B_R = (TCCR1B_R & 0xF8);	/* Clear Clock bits in TIMER1 */
     68a:	ae e4       	ldi	r26, 0x4E	; 78
     68c:	b0 e0       	ldi	r27, 0x00	; 0
     68e:	ee e4       	ldi	r30, 0x4E	; 78
     690:	f0 e0       	ldi	r31, 0x00	; 0
     692:	80 81       	ld	r24, Z
     694:	88 7f       	andi	r24, 0xF8	; 248
     696:	8c 93       	st	X, r24
		enu_ErrorState = TIMER_E_PARAM_VALID;	/* Update the error state with no error */
     698:	19 82       	std	Y+1, r1	; 0x01
     69a:	0b c0       	rjmp	.+22     	; 0x6b2 <TIMER_stop+0x72>
		break;

	case TIMER_2:

		TCCR2_R  = (TCCR2_R & 0xF8);	/* Clear Clock bits in TIMER2 */
     69c:	a5 e4       	ldi	r26, 0x45	; 69
     69e:	b0 e0       	ldi	r27, 0x00	; 0
     6a0:	e5 e4       	ldi	r30, 0x45	; 69
     6a2:	f0 e0       	ldi	r31, 0x00	; 0
     6a4:	80 81       	ld	r24, Z
     6a6:	88 7f       	andi	r24, 0xF8	; 248
     6a8:	8c 93       	st	X, r24
		enu_ErrorState = TIMER_E_PARAM_VALID;	/* Update the error state with no error */
     6aa:	19 82       	std	Y+1, r1	; 0x01
     6ac:	02 c0       	rjmp	.+4      	; 0x6b2 <TIMER_stop+0x72>
		break;

	default:
		enu_ErrorState = TIMER_E_PARAM_INVALID_ID;	/* Invalid timer id */
     6ae:	81 e0       	ldi	r24, 0x01	; 1
     6b0:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return enu_ErrorState;
     6b2:	89 81       	ldd	r24, Y+1	; 0x01
}
     6b4:	0f 90       	pop	r0
     6b6:	0f 90       	pop	r0
     6b8:	0f 90       	pop	r0
     6ba:	0f 90       	pop	r0
     6bc:	cf 91       	pop	r28
     6be:	df 91       	pop	r29
     6c0:	08 95       	ret

000006c2 <TIMER_DeInit>:
 * [in/out]		 	None
 *
 * [Returns]:       Error state
 ******************************************************************************/
enuTIMER_E_STATE_t TIMER_DeInit(const enuTIMER_ID_t enu_timerID)
{
     6c2:	df 93       	push	r29
     6c4:	cf 93       	push	r28
     6c6:	00 d0       	rcall	.+0      	; 0x6c8 <TIMER_DeInit+0x6>
     6c8:	00 d0       	rcall	.+0      	; 0x6ca <TIMER_DeInit+0x8>
     6ca:	cd b7       	in	r28, 0x3d	; 61
     6cc:	de b7       	in	r29, 0x3e	; 62
     6ce:	8a 83       	std	Y+2, r24	; 0x02
	enuTIMER_E_STATE_t enu_ErrorState = E_NOT_OK;
     6d0:	81 e0       	ldi	r24, 0x01	; 1
     6d2:	89 83       	std	Y+1, r24	; 0x01

	switch(enu_timerID)
     6d4:	8a 81       	ldd	r24, Y+2	; 0x02
     6d6:	28 2f       	mov	r18, r24
     6d8:	30 e0       	ldi	r19, 0x00	; 0
     6da:	3c 83       	std	Y+4, r19	; 0x04
     6dc:	2b 83       	std	Y+3, r18	; 0x03
     6de:	8b 81       	ldd	r24, Y+3	; 0x03
     6e0:	9c 81       	ldd	r25, Y+4	; 0x04
     6e2:	81 30       	cpi	r24, 0x01	; 1
     6e4:	91 05       	cpc	r25, r1
     6e6:	19 f1       	breq	.+70     	; 0x72e <TIMER_DeInit+0x6c>
     6e8:	2b 81       	ldd	r18, Y+3	; 0x03
     6ea:	3c 81       	ldd	r19, Y+4	; 0x04
     6ec:	22 30       	cpi	r18, 0x02	; 2
     6ee:	31 05       	cpc	r19, r1
     6f0:	e1 f1       	breq	.+120    	; 0x76a <TIMER_DeInit+0xa8>
     6f2:	8b 81       	ldd	r24, Y+3	; 0x03
     6f4:	9c 81       	ldd	r25, Y+4	; 0x04
     6f6:	00 97       	sbiw	r24, 0x00	; 0
     6f8:	09 f0       	breq	.+2      	; 0x6fc <TIMER_DeInit+0x3a>
     6fa:	50 c0       	rjmp	.+160    	; 0x79c <TIMER_DeInit+0xda>
	{

	case TIMER_0:

		/* Clear All TIMER0 Register */
		TCNT0_R = 0x00;
     6fc:	e2 e5       	ldi	r30, 0x52	; 82
     6fe:	f0 e0       	ldi	r31, 0x00	; 0
     700:	10 82       	st	Z, r1
		TCCR0_R = 0x00;
     702:	e3 e5       	ldi	r30, 0x53	; 83
     704:	f0 e0       	ldi	r31, 0x00	; 0
     706:	10 82       	st	Z, r1
		OCR0_R  = 0x00;
     708:	ec e5       	ldi	r30, 0x5C	; 92
     70a:	f0 e0       	ldi	r31, 0x00	; 0
     70c:	10 82       	st	Z, r1

		/* Disable TIMER0 Interrupt Enable */
		TIMSK_R &= ~(1 << TOIE0_BIT) & ~(1 << OCIE0_BIT);
     70e:	a9 e5       	ldi	r26, 0x59	; 89
     710:	b0 e0       	ldi	r27, 0x00	; 0
     712:	e9 e5       	ldi	r30, 0x59	; 89
     714:	f0 e0       	ldi	r31, 0x00	; 0
     716:	80 81       	ld	r24, Z
     718:	8c 7f       	andi	r24, 0xFC	; 252
     71a:	8c 93       	st	X, r24

		/* Disable TIMER0 Interrupt Flag, by writing a logic one */
		TIFR_R |= (1 << OCF0_BIT) | (1 << TOV0_BIT);
     71c:	a8 e5       	ldi	r26, 0x58	; 88
     71e:	b0 e0       	ldi	r27, 0x00	; 0
     720:	e8 e5       	ldi	r30, 0x58	; 88
     722:	f0 e0       	ldi	r31, 0x00	; 0
     724:	80 81       	ld	r24, Z
     726:	83 60       	ori	r24, 0x03	; 3
     728:	8c 93       	st	X, r24

		/* Update the error state with no error */
		enu_ErrorState = TIMER_E_PARAM_VALID;
     72a:	19 82       	std	Y+1, r1	; 0x01
     72c:	39 c0       	rjmp	.+114    	; 0x7a0 <TIMER_DeInit+0xde>
		break;

	case TIMER_1:

		/* Clear All TIMER1 Register */
		TCNT1_R  = 0x0000;
     72e:	ec e4       	ldi	r30, 0x4C	; 76
     730:	f0 e0       	ldi	r31, 0x00	; 0
     732:	11 82       	std	Z+1, r1	; 0x01
     734:	10 82       	st	Z, r1
		OCR1A_R  = 0x0000;
     736:	ea e4       	ldi	r30, 0x4A	; 74
     738:	f0 e0       	ldi	r31, 0x00	; 0
     73a:	11 82       	std	Z+1, r1	; 0x01
     73c:	10 82       	st	Z, r1
		TCCR1A_R = 0x00;
     73e:	ef e4       	ldi	r30, 0x4F	; 79
     740:	f0 e0       	ldi	r31, 0x00	; 0
     742:	10 82       	st	Z, r1
		TCCR1B_R = 0x00;
     744:	ee e4       	ldi	r30, 0x4E	; 78
     746:	f0 e0       	ldi	r31, 0x00	; 0
     748:	10 82       	st	Z, r1

		/* Disable TIMER1 Interrupt Enable */
		TIMSK_R &= ~(1 << TOIE1_BIT) & ~(1 << OCIE1A_BIT);
     74a:	a9 e5       	ldi	r26, 0x59	; 89
     74c:	b0 e0       	ldi	r27, 0x00	; 0
     74e:	e9 e5       	ldi	r30, 0x59	; 89
     750:	f0 e0       	ldi	r31, 0x00	; 0
     752:	80 81       	ld	r24, Z
     754:	8b 7e       	andi	r24, 0xEB	; 235
     756:	8c 93       	st	X, r24

		/* Disable TIMER1 Interrupt Flag, by writing a logic one */
		TIFR_R |= (1 << OCF1A_BIT) | (1 << OCF1B_BIT) | (1 << TOV1_BIT);
     758:	a8 e5       	ldi	r26, 0x58	; 88
     75a:	b0 e0       	ldi	r27, 0x00	; 0
     75c:	e8 e5       	ldi	r30, 0x58	; 88
     75e:	f0 e0       	ldi	r31, 0x00	; 0
     760:	80 81       	ld	r24, Z
     762:	8c 61       	ori	r24, 0x1C	; 28
     764:	8c 93       	st	X, r24

		/* Update the error state with no error */
		enu_ErrorState = TIMER_E_PARAM_VALID;
     766:	19 82       	std	Y+1, r1	; 0x01
     768:	1b c0       	rjmp	.+54     	; 0x7a0 <TIMER_DeInit+0xde>
		break;

	case TIMER_2:

		/* Clear All TIMER2 Register */
		TCNT2_R = 0x00;
     76a:	e4 e4       	ldi	r30, 0x44	; 68
     76c:	f0 e0       	ldi	r31, 0x00	; 0
     76e:	10 82       	st	Z, r1
		TCCR2_R = 0x00;
     770:	e5 e4       	ldi	r30, 0x45	; 69
     772:	f0 e0       	ldi	r31, 0x00	; 0
     774:	10 82       	st	Z, r1
		OCR2_R  = 0x00;
     776:	e3 e4       	ldi	r30, 0x43	; 67
     778:	f0 e0       	ldi	r31, 0x00	; 0
     77a:	10 82       	st	Z, r1

		/* Disable TIMER2 Interrupt Flags */
		TIMSK_R &= ~(1 << TOIE2_BIT) & ~(1 << OCIE2_BIT);
     77c:	a9 e5       	ldi	r26, 0x59	; 89
     77e:	b0 e0       	ldi	r27, 0x00	; 0
     780:	e9 e5       	ldi	r30, 0x59	; 89
     782:	f0 e0       	ldi	r31, 0x00	; 0
     784:	80 81       	ld	r24, Z
     786:	8f 73       	andi	r24, 0x3F	; 63
     788:	8c 93       	st	X, r24

		/* Disable TIMER2 Interrupt Flag, by writing a logic one */
		TIFR_R |= (1 << OCF2_BIT) | (1 << TOV2_BIT);
     78a:	a8 e5       	ldi	r26, 0x58	; 88
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	e8 e5       	ldi	r30, 0x58	; 88
     790:	f0 e0       	ldi	r31, 0x00	; 0
     792:	80 81       	ld	r24, Z
     794:	80 6c       	ori	r24, 0xC0	; 192
     796:	8c 93       	st	X, r24

		/* Update the error state with no error */
		enu_ErrorState = TIMER_E_PARAM_VALID;
     798:	19 82       	std	Y+1, r1	; 0x01
     79a:	02 c0       	rjmp	.+4      	; 0x7a0 <TIMER_DeInit+0xde>
		break;

	default:

		/* Update the error state with error */
		enu_ErrorState = TIMER_E_PARAM_INVALID_ID;
     79c:	81 e0       	ldi	r24, 0x01	; 1
     79e:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return enu_ErrorState;
     7a0:	89 81       	ldd	r24, Y+1	; 0x01
}
     7a2:	0f 90       	pop	r0
     7a4:	0f 90       	pop	r0
     7a6:	0f 90       	pop	r0
     7a8:	0f 90       	pop	r0
     7aa:	cf 91       	pop	r28
     7ac:	df 91       	pop	r29
     7ae:	08 95       	ret

000007b0 <DIO_setPortDirection>:
 * [in/out]		 	None
 *
 * [Returns]:       Error state
 ******************************************************************************/
enuDIO_E_STATE_t DIO_setPortDirection(enuDIO_PortId_t enu_portID, enuDIO_DirectionType_t enu_portDirection)
{
     7b0:	df 93       	push	r29
     7b2:	cf 93       	push	r28
     7b4:	cd b7       	in	r28, 0x3d	; 61
     7b6:	de b7       	in	r29, 0x3e	; 62
     7b8:	27 97       	sbiw	r28, 0x07	; 7
     7ba:	0f b6       	in	r0, 0x3f	; 63
     7bc:	f8 94       	cli
     7be:	de bf       	out	0x3e, r29	; 62
     7c0:	0f be       	out	0x3f, r0	; 63
     7c2:	cd bf       	out	0x3d, r28	; 61
     7c4:	8a 83       	std	Y+2, r24	; 0x02
     7c6:	6b 83       	std	Y+3, r22	; 0x03
	enuDIO_E_STATE_t enu_ErrorState = E_NOT_OK;
     7c8:	81 e0       	ldi	r24, 0x01	; 1
     7ca:	89 83       	std	Y+1, r24	; 0x01

	/* Check if the PORT is input or output */
    if(enu_portDirection == HIGH)
     7cc:	8b 81       	ldd	r24, Y+3	; 0x03
     7ce:	81 30       	cpi	r24, 0x01	; 1
     7d0:	d1 f5       	brne	.+116    	; 0x846 <DIO_setPortDirection+0x96>
    {
    	switch (enu_portID)
     7d2:	8a 81       	ldd	r24, Y+2	; 0x02
     7d4:	28 2f       	mov	r18, r24
     7d6:	30 e0       	ldi	r19, 0x00	; 0
     7d8:	3f 83       	std	Y+7, r19	; 0x07
     7da:	2e 83       	std	Y+6, r18	; 0x06
     7dc:	8e 81       	ldd	r24, Y+6	; 0x06
     7de:	9f 81       	ldd	r25, Y+7	; 0x07
     7e0:	81 30       	cpi	r24, 0x01	; 1
     7e2:	91 05       	cpc	r25, r1
     7e4:	d9 f0       	breq	.+54     	; 0x81c <DIO_setPortDirection+0x6c>
     7e6:	2e 81       	ldd	r18, Y+6	; 0x06
     7e8:	3f 81       	ldd	r19, Y+7	; 0x07
     7ea:	22 30       	cpi	r18, 0x02	; 2
     7ec:	31 05       	cpc	r19, r1
     7ee:	2c f4       	brge	.+10     	; 0x7fa <DIO_setPortDirection+0x4a>
     7f0:	8e 81       	ldd	r24, Y+6	; 0x06
     7f2:	9f 81       	ldd	r25, Y+7	; 0x07
     7f4:	00 97       	sbiw	r24, 0x00	; 0
     7f6:	61 f0       	breq	.+24     	; 0x810 <DIO_setPortDirection+0x60>
     7f8:	23 c0       	rjmp	.+70     	; 0x840 <DIO_setPortDirection+0x90>
     7fa:	2e 81       	ldd	r18, Y+6	; 0x06
     7fc:	3f 81       	ldd	r19, Y+7	; 0x07
     7fe:	22 30       	cpi	r18, 0x02	; 2
     800:	31 05       	cpc	r19, r1
     802:	91 f0       	breq	.+36     	; 0x828 <DIO_setPortDirection+0x78>
     804:	8e 81       	ldd	r24, Y+6	; 0x06
     806:	9f 81       	ldd	r25, Y+7	; 0x07
     808:	83 30       	cpi	r24, 0x03	; 3
     80a:	91 05       	cpc	r25, r1
     80c:	99 f0       	breq	.+38     	; 0x834 <DIO_setPortDirection+0x84>
     80e:	18 c0       	rjmp	.+48     	; 0x840 <DIO_setPortDirection+0x90>
		{
		case DIO_PORTA:
			DDRA_DIR_R = OUTPUT_PORT;
     810:	ea e3       	ldi	r30, 0x3A	; 58
     812:	f0 e0       	ldi	r31, 0x00	; 0
     814:	8f ef       	ldi	r24, 0xFF	; 255
     816:	80 83       	st	Z, r24
			enu_ErrorState = DIO_E_PARAM_VALID;
     818:	19 82       	std	Y+1, r1	; 0x01
     81a:	50 c0       	rjmp	.+160    	; 0x8bc <__stack+0x5d>
			break;
		case DIO_PORTB:
			DDRB_DIR_R = OUTPUT_PORT;
     81c:	e7 e3       	ldi	r30, 0x37	; 55
     81e:	f0 e0       	ldi	r31, 0x00	; 0
     820:	8f ef       	ldi	r24, 0xFF	; 255
     822:	80 83       	st	Z, r24
			enu_ErrorState = DIO_E_PARAM_VALID;
     824:	19 82       	std	Y+1, r1	; 0x01
     826:	4a c0       	rjmp	.+148    	; 0x8bc <__stack+0x5d>
			break;
		case DIO_PORTC:
			DDRC_DIR_R = OUTPUT_PORT;
     828:	e4 e3       	ldi	r30, 0x34	; 52
     82a:	f0 e0       	ldi	r31, 0x00	; 0
     82c:	8f ef       	ldi	r24, 0xFF	; 255
     82e:	80 83       	st	Z, r24
			enu_ErrorState = DIO_E_PARAM_VALID;
     830:	19 82       	std	Y+1, r1	; 0x01
     832:	44 c0       	rjmp	.+136    	; 0x8bc <__stack+0x5d>
			break;
		case DIO_PORTD:
			DDRD_DIR_R = OUTPUT_PORT;
     834:	e1 e3       	ldi	r30, 0x31	; 49
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	8f ef       	ldi	r24, 0xFF	; 255
     83a:	80 83       	st	Z, r24
			enu_ErrorState = DIO_E_PARAM_VALID;
     83c:	19 82       	std	Y+1, r1	; 0x01
     83e:	3e c0       	rjmp	.+124    	; 0x8bc <__stack+0x5d>
			break;
		default:
			enu_ErrorState = DIO_E_PARAM_INVALID_PORT_ID;
     840:	81 e0       	ldi	r24, 0x01	; 1
     842:	89 83       	std	Y+1, r24	; 0x01
     844:	3b c0       	rjmp	.+118    	; 0x8bc <__stack+0x5d>
			break;
		}
    }
    else if(enu_portDirection == LOW)
     846:	8b 81       	ldd	r24, Y+3	; 0x03
     848:	88 23       	and	r24, r24
     84a:	b1 f5       	brne	.+108    	; 0x8b8 <__stack+0x59>
    {
		switch (enu_portID)
     84c:	8a 81       	ldd	r24, Y+2	; 0x02
     84e:	28 2f       	mov	r18, r24
     850:	30 e0       	ldi	r19, 0x00	; 0
     852:	3d 83       	std	Y+5, r19	; 0x05
     854:	2c 83       	std	Y+4, r18	; 0x04
     856:	8c 81       	ldd	r24, Y+4	; 0x04
     858:	9d 81       	ldd	r25, Y+5	; 0x05
     85a:	81 30       	cpi	r24, 0x01	; 1
     85c:	91 05       	cpc	r25, r1
     85e:	d1 f0       	breq	.+52     	; 0x894 <__stack+0x35>
     860:	2c 81       	ldd	r18, Y+4	; 0x04
     862:	3d 81       	ldd	r19, Y+5	; 0x05
     864:	22 30       	cpi	r18, 0x02	; 2
     866:	31 05       	cpc	r19, r1
     868:	2c f4       	brge	.+10     	; 0x874 <__stack+0x15>
     86a:	8c 81       	ldd	r24, Y+4	; 0x04
     86c:	9d 81       	ldd	r25, Y+5	; 0x05
     86e:	00 97       	sbiw	r24, 0x00	; 0
     870:	61 f0       	breq	.+24     	; 0x88a <__stack+0x2b>
     872:	1f c0       	rjmp	.+62     	; 0x8b2 <__stack+0x53>
     874:	2c 81       	ldd	r18, Y+4	; 0x04
     876:	3d 81       	ldd	r19, Y+5	; 0x05
     878:	22 30       	cpi	r18, 0x02	; 2
     87a:	31 05       	cpc	r19, r1
     87c:	81 f0       	breq	.+32     	; 0x89e <__stack+0x3f>
     87e:	8c 81       	ldd	r24, Y+4	; 0x04
     880:	9d 81       	ldd	r25, Y+5	; 0x05
     882:	83 30       	cpi	r24, 0x03	; 3
     884:	91 05       	cpc	r25, r1
     886:	81 f0       	breq	.+32     	; 0x8a8 <__stack+0x49>
     888:	14 c0       	rjmp	.+40     	; 0x8b2 <__stack+0x53>
		{
		case DIO_PORTA:
			DDRA_DIR_R = INPUT_PORT;
     88a:	ea e3       	ldi	r30, 0x3A	; 58
     88c:	f0 e0       	ldi	r31, 0x00	; 0
     88e:	10 82       	st	Z, r1
			enu_ErrorState = DIO_E_PARAM_VALID;
     890:	19 82       	std	Y+1, r1	; 0x01
     892:	14 c0       	rjmp	.+40     	; 0x8bc <__stack+0x5d>
			break;
		case DIO_PORTB:
			DDRB_DIR_R = INPUT_PORT;
     894:	e7 e3       	ldi	r30, 0x37	; 55
     896:	f0 e0       	ldi	r31, 0x00	; 0
     898:	10 82       	st	Z, r1
			enu_ErrorState = DIO_E_PARAM_VALID;
     89a:	19 82       	std	Y+1, r1	; 0x01
     89c:	0f c0       	rjmp	.+30     	; 0x8bc <__stack+0x5d>
			break;
		case DIO_PORTC:
			DDRC_DIR_R = INPUT_PORT;
     89e:	e4 e3       	ldi	r30, 0x34	; 52
     8a0:	f0 e0       	ldi	r31, 0x00	; 0
     8a2:	10 82       	st	Z, r1
			enu_ErrorState = DIO_E_PARAM_VALID;
     8a4:	19 82       	std	Y+1, r1	; 0x01
     8a6:	0a c0       	rjmp	.+20     	; 0x8bc <__stack+0x5d>
			break;
		case DIO_PORTD:
			DDRD_DIR_R = INPUT_PORT;
     8a8:	e1 e3       	ldi	r30, 0x31	; 49
     8aa:	f0 e0       	ldi	r31, 0x00	; 0
     8ac:	10 82       	st	Z, r1
			enu_ErrorState = DIO_E_PARAM_VALID;
     8ae:	19 82       	std	Y+1, r1	; 0x01
     8b0:	05 c0       	rjmp	.+10     	; 0x8bc <__stack+0x5d>
			break;
		default:
			enu_ErrorState = DIO_E_PARAM_INVALID_PORT_ID;
     8b2:	81 e0       	ldi	r24, 0x01	; 1
     8b4:	89 83       	std	Y+1, r24	; 0x01
     8b6:	02 c0       	rjmp	.+4      	; 0x8bc <__stack+0x5d>
			break;
		}
    }
    else
    {
    	enu_ErrorState = DIO_E_PARAM_INVALID_PORT_DIR;	/* Invalid port direction */
     8b8:	84 e0       	ldi	r24, 0x04	; 4
     8ba:	89 83       	std	Y+1, r24	; 0x01
    }
    return enu_ErrorState;
     8bc:	89 81       	ldd	r24, Y+1	; 0x01
}
     8be:	27 96       	adiw	r28, 0x07	; 7
     8c0:	0f b6       	in	r0, 0x3f	; 63
     8c2:	f8 94       	cli
     8c4:	de bf       	out	0x3e, r29	; 62
     8c6:	0f be       	out	0x3f, r0	; 63
     8c8:	cd bf       	out	0x3d, r28	; 61
     8ca:	cf 91       	pop	r28
     8cc:	df 91       	pop	r29
     8ce:	08 95       	ret

000008d0 <DIO_setPinDirection>:
 *
 * [Returns]:       Error State
 ******************************************************************************/
enuDIO_E_STATE_t DIO_setPinDirection(enuDIO_PortId_t enu_portID , enuDIO_PinId_t enu_pinID,
								     enuDIO_DirectionType_t enu_pinDirection)
{
     8d0:	df 93       	push	r29
     8d2:	cf 93       	push	r28
     8d4:	cd b7       	in	r28, 0x3d	; 61
     8d6:	de b7       	in	r29, 0x3e	; 62
     8d8:	28 97       	sbiw	r28, 0x08	; 8
     8da:	0f b6       	in	r0, 0x3f	; 63
     8dc:	f8 94       	cli
     8de:	de bf       	out	0x3e, r29	; 62
     8e0:	0f be       	out	0x3f, r0	; 63
     8e2:	cd bf       	out	0x3d, r28	; 61
     8e4:	8a 83       	std	Y+2, r24	; 0x02
     8e6:	6b 83       	std	Y+3, r22	; 0x03
     8e8:	4c 83       	std	Y+4, r20	; 0x04
	enuDIO_E_STATE_t enu_ErrorState = E_NOT_OK;
     8ea:	81 e0       	ldi	r24, 0x01	; 1
     8ec:	89 83       	std	Y+1, r24	; 0x01

	/* Check if the pin id is one of the existed pin or not */
	if ((enu_pinID >= PIN_0) && (enu_pinID <= PIN_7))
     8ee:	8b 81       	ldd	r24, Y+3	; 0x03
     8f0:	88 30       	cpi	r24, 0x08	; 8
     8f2:	08 f0       	brcs	.+2      	; 0x8f6 <DIO_setPinDirection+0x26>
     8f4:	fd c0       	rjmp	.+506    	; 0xaf0 <DIO_setPinDirection+0x220>
	{
		if (enu_pinDirection == OUTPUT)
     8f6:	8c 81       	ldd	r24, Y+4	; 0x04
     8f8:	81 30       	cpi	r24, 0x01	; 1
     8fa:	09 f0       	breq	.+2      	; 0x8fe <DIO_setPinDirection+0x2e>
     8fc:	77 c0       	rjmp	.+238    	; 0x9ec <DIO_setPinDirection+0x11c>
		{
			switch (enu_portID)
     8fe:	8a 81       	ldd	r24, Y+2	; 0x02
     900:	28 2f       	mov	r18, r24
     902:	30 e0       	ldi	r19, 0x00	; 0
     904:	38 87       	std	Y+8, r19	; 0x08
     906:	2f 83       	std	Y+7, r18	; 0x07
     908:	8f 81       	ldd	r24, Y+7	; 0x07
     90a:	98 85       	ldd	r25, Y+8	; 0x08
     90c:	81 30       	cpi	r24, 0x01	; 1
     90e:	91 05       	cpc	r25, r1
     910:	59 f1       	breq	.+86     	; 0x968 <DIO_setPinDirection+0x98>
     912:	2f 81       	ldd	r18, Y+7	; 0x07
     914:	38 85       	ldd	r19, Y+8	; 0x08
     916:	22 30       	cpi	r18, 0x02	; 2
     918:	31 05       	cpc	r19, r1
     91a:	2c f4       	brge	.+10     	; 0x926 <DIO_setPinDirection+0x56>
     91c:	8f 81       	ldd	r24, Y+7	; 0x07
     91e:	98 85       	ldd	r25, Y+8	; 0x08
     920:	00 97       	sbiw	r24, 0x00	; 0
     922:	69 f0       	breq	.+26     	; 0x93e <DIO_setPinDirection+0x6e>
     924:	60 c0       	rjmp	.+192    	; 0x9e6 <DIO_setPinDirection+0x116>
     926:	2f 81       	ldd	r18, Y+7	; 0x07
     928:	38 85       	ldd	r19, Y+8	; 0x08
     92a:	22 30       	cpi	r18, 0x02	; 2
     92c:	31 05       	cpc	r19, r1
     92e:	89 f1       	breq	.+98     	; 0x992 <DIO_setPinDirection+0xc2>
     930:	8f 81       	ldd	r24, Y+7	; 0x07
     932:	98 85       	ldd	r25, Y+8	; 0x08
     934:	83 30       	cpi	r24, 0x03	; 3
     936:	91 05       	cpc	r25, r1
     938:	09 f4       	brne	.+2      	; 0x93c <DIO_setPinDirection+0x6c>
     93a:	40 c0       	rjmp	.+128    	; 0x9bc <DIO_setPinDirection+0xec>
     93c:	54 c0       	rjmp	.+168    	; 0x9e6 <DIO_setPinDirection+0x116>
			{
			case DIO_PORTA:
				SET_BIT(DDRA_DIR_R, enu_pinID);
     93e:	aa e3       	ldi	r26, 0x3A	; 58
     940:	b0 e0       	ldi	r27, 0x00	; 0
     942:	ea e3       	ldi	r30, 0x3A	; 58
     944:	f0 e0       	ldi	r31, 0x00	; 0
     946:	80 81       	ld	r24, Z
     948:	48 2f       	mov	r20, r24
     94a:	8b 81       	ldd	r24, Y+3	; 0x03
     94c:	28 2f       	mov	r18, r24
     94e:	30 e0       	ldi	r19, 0x00	; 0
     950:	81 e0       	ldi	r24, 0x01	; 1
     952:	90 e0       	ldi	r25, 0x00	; 0
     954:	02 2e       	mov	r0, r18
     956:	02 c0       	rjmp	.+4      	; 0x95c <DIO_setPinDirection+0x8c>
     958:	88 0f       	add	r24, r24
     95a:	99 1f       	adc	r25, r25
     95c:	0a 94       	dec	r0
     95e:	e2 f7       	brpl	.-8      	; 0x958 <DIO_setPinDirection+0x88>
     960:	84 2b       	or	r24, r20
     962:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
     964:	19 82       	std	Y+1, r1	; 0x01
     966:	c6 c0       	rjmp	.+396    	; 0xaf4 <DIO_setPinDirection+0x224>
				break;
			case DIO_PORTB:
				SET_BIT(DDRB_DIR_R, enu_pinID);
     968:	a7 e3       	ldi	r26, 0x37	; 55
     96a:	b0 e0       	ldi	r27, 0x00	; 0
     96c:	e7 e3       	ldi	r30, 0x37	; 55
     96e:	f0 e0       	ldi	r31, 0x00	; 0
     970:	80 81       	ld	r24, Z
     972:	48 2f       	mov	r20, r24
     974:	8b 81       	ldd	r24, Y+3	; 0x03
     976:	28 2f       	mov	r18, r24
     978:	30 e0       	ldi	r19, 0x00	; 0
     97a:	81 e0       	ldi	r24, 0x01	; 1
     97c:	90 e0       	ldi	r25, 0x00	; 0
     97e:	02 2e       	mov	r0, r18
     980:	02 c0       	rjmp	.+4      	; 0x986 <DIO_setPinDirection+0xb6>
     982:	88 0f       	add	r24, r24
     984:	99 1f       	adc	r25, r25
     986:	0a 94       	dec	r0
     988:	e2 f7       	brpl	.-8      	; 0x982 <DIO_setPinDirection+0xb2>
     98a:	84 2b       	or	r24, r20
     98c:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
     98e:	19 82       	std	Y+1, r1	; 0x01
     990:	b1 c0       	rjmp	.+354    	; 0xaf4 <DIO_setPinDirection+0x224>
				break;
			case DIO_PORTC:
				SET_BIT(DDRC_DIR_R, enu_pinID);
     992:	a4 e3       	ldi	r26, 0x34	; 52
     994:	b0 e0       	ldi	r27, 0x00	; 0
     996:	e4 e3       	ldi	r30, 0x34	; 52
     998:	f0 e0       	ldi	r31, 0x00	; 0
     99a:	80 81       	ld	r24, Z
     99c:	48 2f       	mov	r20, r24
     99e:	8b 81       	ldd	r24, Y+3	; 0x03
     9a0:	28 2f       	mov	r18, r24
     9a2:	30 e0       	ldi	r19, 0x00	; 0
     9a4:	81 e0       	ldi	r24, 0x01	; 1
     9a6:	90 e0       	ldi	r25, 0x00	; 0
     9a8:	02 2e       	mov	r0, r18
     9aa:	02 c0       	rjmp	.+4      	; 0x9b0 <DIO_setPinDirection+0xe0>
     9ac:	88 0f       	add	r24, r24
     9ae:	99 1f       	adc	r25, r25
     9b0:	0a 94       	dec	r0
     9b2:	e2 f7       	brpl	.-8      	; 0x9ac <DIO_setPinDirection+0xdc>
     9b4:	84 2b       	or	r24, r20
     9b6:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
     9b8:	19 82       	std	Y+1, r1	; 0x01
     9ba:	9c c0       	rjmp	.+312    	; 0xaf4 <DIO_setPinDirection+0x224>
				break;
			case DIO_PORTD:
				SET_BIT(DDRD_DIR_R, enu_pinID);
     9bc:	a1 e3       	ldi	r26, 0x31	; 49
     9be:	b0 e0       	ldi	r27, 0x00	; 0
     9c0:	e1 e3       	ldi	r30, 0x31	; 49
     9c2:	f0 e0       	ldi	r31, 0x00	; 0
     9c4:	80 81       	ld	r24, Z
     9c6:	48 2f       	mov	r20, r24
     9c8:	8b 81       	ldd	r24, Y+3	; 0x03
     9ca:	28 2f       	mov	r18, r24
     9cc:	30 e0       	ldi	r19, 0x00	; 0
     9ce:	81 e0       	ldi	r24, 0x01	; 1
     9d0:	90 e0       	ldi	r25, 0x00	; 0
     9d2:	02 2e       	mov	r0, r18
     9d4:	02 c0       	rjmp	.+4      	; 0x9da <DIO_setPinDirection+0x10a>
     9d6:	88 0f       	add	r24, r24
     9d8:	99 1f       	adc	r25, r25
     9da:	0a 94       	dec	r0
     9dc:	e2 f7       	brpl	.-8      	; 0x9d6 <DIO_setPinDirection+0x106>
     9de:	84 2b       	or	r24, r20
     9e0:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
     9e2:	19 82       	std	Y+1, r1	; 0x01
     9e4:	87 c0       	rjmp	.+270    	; 0xaf4 <DIO_setPinDirection+0x224>
				break;
            default:
            	enu_ErrorState = DIO_E_PARAM_INVALID_PORT_ID;	/* Invalid port id */
     9e6:	81 e0       	ldi	r24, 0x01	; 1
     9e8:	89 83       	std	Y+1, r24	; 0x01
     9ea:	84 c0       	rjmp	.+264    	; 0xaf4 <DIO_setPinDirection+0x224>
                break;
			}
		}
		else if (enu_pinDirection == INPUT)
     9ec:	8c 81       	ldd	r24, Y+4	; 0x04
     9ee:	88 23       	and	r24, r24
     9f0:	09 f0       	breq	.+2      	; 0x9f4 <DIO_setPinDirection+0x124>
     9f2:	7b c0       	rjmp	.+246    	; 0xaea <DIO_setPinDirection+0x21a>
		{
			switch (enu_portID)
     9f4:	8a 81       	ldd	r24, Y+2	; 0x02
     9f6:	28 2f       	mov	r18, r24
     9f8:	30 e0       	ldi	r19, 0x00	; 0
     9fa:	3e 83       	std	Y+6, r19	; 0x06
     9fc:	2d 83       	std	Y+5, r18	; 0x05
     9fe:	8d 81       	ldd	r24, Y+5	; 0x05
     a00:	9e 81       	ldd	r25, Y+6	; 0x06
     a02:	81 30       	cpi	r24, 0x01	; 1
     a04:	91 05       	cpc	r25, r1
     a06:	61 f1       	breq	.+88     	; 0xa60 <DIO_setPinDirection+0x190>
     a08:	2d 81       	ldd	r18, Y+5	; 0x05
     a0a:	3e 81       	ldd	r19, Y+6	; 0x06
     a0c:	22 30       	cpi	r18, 0x02	; 2
     a0e:	31 05       	cpc	r19, r1
     a10:	2c f4       	brge	.+10     	; 0xa1c <DIO_setPinDirection+0x14c>
     a12:	8d 81       	ldd	r24, Y+5	; 0x05
     a14:	9e 81       	ldd	r25, Y+6	; 0x06
     a16:	00 97       	sbiw	r24, 0x00	; 0
     a18:	69 f0       	breq	.+26     	; 0xa34 <DIO_setPinDirection+0x164>
     a1a:	64 c0       	rjmp	.+200    	; 0xae4 <DIO_setPinDirection+0x214>
     a1c:	2d 81       	ldd	r18, Y+5	; 0x05
     a1e:	3e 81       	ldd	r19, Y+6	; 0x06
     a20:	22 30       	cpi	r18, 0x02	; 2
     a22:	31 05       	cpc	r19, r1
     a24:	99 f1       	breq	.+102    	; 0xa8c <DIO_setPinDirection+0x1bc>
     a26:	8d 81       	ldd	r24, Y+5	; 0x05
     a28:	9e 81       	ldd	r25, Y+6	; 0x06
     a2a:	83 30       	cpi	r24, 0x03	; 3
     a2c:	91 05       	cpc	r25, r1
     a2e:	09 f4       	brne	.+2      	; 0xa32 <DIO_setPinDirection+0x162>
     a30:	43 c0       	rjmp	.+134    	; 0xab8 <DIO_setPinDirection+0x1e8>
     a32:	58 c0       	rjmp	.+176    	; 0xae4 <DIO_setPinDirection+0x214>
			{
			case DIO_PORTA:
				CLEAR_BIT(DDRA_DIR_R, enu_pinID);
     a34:	aa e3       	ldi	r26, 0x3A	; 58
     a36:	b0 e0       	ldi	r27, 0x00	; 0
     a38:	ea e3       	ldi	r30, 0x3A	; 58
     a3a:	f0 e0       	ldi	r31, 0x00	; 0
     a3c:	80 81       	ld	r24, Z
     a3e:	48 2f       	mov	r20, r24
     a40:	8b 81       	ldd	r24, Y+3	; 0x03
     a42:	28 2f       	mov	r18, r24
     a44:	30 e0       	ldi	r19, 0x00	; 0
     a46:	81 e0       	ldi	r24, 0x01	; 1
     a48:	90 e0       	ldi	r25, 0x00	; 0
     a4a:	02 2e       	mov	r0, r18
     a4c:	02 c0       	rjmp	.+4      	; 0xa52 <DIO_setPinDirection+0x182>
     a4e:	88 0f       	add	r24, r24
     a50:	99 1f       	adc	r25, r25
     a52:	0a 94       	dec	r0
     a54:	e2 f7       	brpl	.-8      	; 0xa4e <DIO_setPinDirection+0x17e>
     a56:	80 95       	com	r24
     a58:	84 23       	and	r24, r20
     a5a:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
     a5c:	19 82       	std	Y+1, r1	; 0x01
     a5e:	4a c0       	rjmp	.+148    	; 0xaf4 <DIO_setPinDirection+0x224>
				break;
			case DIO_PORTB:
				CLEAR_BIT(DDRB_DIR_R, enu_pinID);
     a60:	a7 e3       	ldi	r26, 0x37	; 55
     a62:	b0 e0       	ldi	r27, 0x00	; 0
     a64:	e7 e3       	ldi	r30, 0x37	; 55
     a66:	f0 e0       	ldi	r31, 0x00	; 0
     a68:	80 81       	ld	r24, Z
     a6a:	48 2f       	mov	r20, r24
     a6c:	8b 81       	ldd	r24, Y+3	; 0x03
     a6e:	28 2f       	mov	r18, r24
     a70:	30 e0       	ldi	r19, 0x00	; 0
     a72:	81 e0       	ldi	r24, 0x01	; 1
     a74:	90 e0       	ldi	r25, 0x00	; 0
     a76:	02 2e       	mov	r0, r18
     a78:	02 c0       	rjmp	.+4      	; 0xa7e <DIO_setPinDirection+0x1ae>
     a7a:	88 0f       	add	r24, r24
     a7c:	99 1f       	adc	r25, r25
     a7e:	0a 94       	dec	r0
     a80:	e2 f7       	brpl	.-8      	; 0xa7a <DIO_setPinDirection+0x1aa>
     a82:	80 95       	com	r24
     a84:	84 23       	and	r24, r20
     a86:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
     a88:	19 82       	std	Y+1, r1	; 0x01
     a8a:	34 c0       	rjmp	.+104    	; 0xaf4 <DIO_setPinDirection+0x224>
				break;
			case DIO_PORTC:
				CLEAR_BIT(DDRC_DIR_R, enu_pinID);
     a8c:	a4 e3       	ldi	r26, 0x34	; 52
     a8e:	b0 e0       	ldi	r27, 0x00	; 0
     a90:	e4 e3       	ldi	r30, 0x34	; 52
     a92:	f0 e0       	ldi	r31, 0x00	; 0
     a94:	80 81       	ld	r24, Z
     a96:	48 2f       	mov	r20, r24
     a98:	8b 81       	ldd	r24, Y+3	; 0x03
     a9a:	28 2f       	mov	r18, r24
     a9c:	30 e0       	ldi	r19, 0x00	; 0
     a9e:	81 e0       	ldi	r24, 0x01	; 1
     aa0:	90 e0       	ldi	r25, 0x00	; 0
     aa2:	02 2e       	mov	r0, r18
     aa4:	02 c0       	rjmp	.+4      	; 0xaaa <DIO_setPinDirection+0x1da>
     aa6:	88 0f       	add	r24, r24
     aa8:	99 1f       	adc	r25, r25
     aaa:	0a 94       	dec	r0
     aac:	e2 f7       	brpl	.-8      	; 0xaa6 <DIO_setPinDirection+0x1d6>
     aae:	80 95       	com	r24
     ab0:	84 23       	and	r24, r20
     ab2:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
     ab4:	19 82       	std	Y+1, r1	; 0x01
     ab6:	1e c0       	rjmp	.+60     	; 0xaf4 <DIO_setPinDirection+0x224>
				break;
			case DIO_PORTD:
				CLEAR_BIT(DDRD_DIR_R, enu_pinID);
     ab8:	a1 e3       	ldi	r26, 0x31	; 49
     aba:	b0 e0       	ldi	r27, 0x00	; 0
     abc:	e1 e3       	ldi	r30, 0x31	; 49
     abe:	f0 e0       	ldi	r31, 0x00	; 0
     ac0:	80 81       	ld	r24, Z
     ac2:	48 2f       	mov	r20, r24
     ac4:	8b 81       	ldd	r24, Y+3	; 0x03
     ac6:	28 2f       	mov	r18, r24
     ac8:	30 e0       	ldi	r19, 0x00	; 0
     aca:	81 e0       	ldi	r24, 0x01	; 1
     acc:	90 e0       	ldi	r25, 0x00	; 0
     ace:	02 2e       	mov	r0, r18
     ad0:	02 c0       	rjmp	.+4      	; 0xad6 <DIO_setPinDirection+0x206>
     ad2:	88 0f       	add	r24, r24
     ad4:	99 1f       	adc	r25, r25
     ad6:	0a 94       	dec	r0
     ad8:	e2 f7       	brpl	.-8      	; 0xad2 <DIO_setPinDirection+0x202>
     ada:	80 95       	com	r24
     adc:	84 23       	and	r24, r20
     ade:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
     ae0:	19 82       	std	Y+1, r1	; 0x01
     ae2:	08 c0       	rjmp	.+16     	; 0xaf4 <DIO_setPinDirection+0x224>
				break;
            default:
            	enu_ErrorState = DIO_E_PARAM_INVALID_PORT_ID;	/* Invalid port id */
     ae4:	81 e0       	ldi	r24, 0x01	; 1
     ae6:	89 83       	std	Y+1, r24	; 0x01
     ae8:	05 c0       	rjmp	.+10     	; 0xaf4 <DIO_setPinDirection+0x224>
                break;
			}
		}
		else
		{
			enu_ErrorState = DIO_E_PARAM_INVALID_PORT_DIR;	/* Invalid port direction */
     aea:	84 e0       	ldi	r24, 0x04	; 4
     aec:	89 83       	std	Y+1, r24	; 0x01
     aee:	02 c0       	rjmp	.+4      	; 0xaf4 <DIO_setPinDirection+0x224>
		}
	}
	else
	{
		enu_ErrorState = DIO_E_PARAM_INVALID_PIN_ID;	/* Invalid pin id */
     af0:	82 e0       	ldi	r24, 0x02	; 2
     af2:	89 83       	std	Y+1, r24	; 0x01
	}
	return enu_ErrorState;
     af4:	89 81       	ldd	r24, Y+1	; 0x01
}
     af6:	28 96       	adiw	r28, 0x08	; 8
     af8:	0f b6       	in	r0, 0x3f	; 63
     afa:	f8 94       	cli
     afc:	de bf       	out	0x3e, r29	; 62
     afe:	0f be       	out	0x3f, r0	; 63
     b00:	cd bf       	out	0x3d, r28	; 61
     b02:	cf 91       	pop	r28
     b04:	df 91       	pop	r29
     b06:	08 95       	ret

00000b08 <DIO_writePort>:
 * [in/out]		 	None
 *
 * [Returns]:       Error State
 ******************************************************************************/
enuDIO_E_STATE_t DIO_writePort(enuDIO_PortId_t enu_portID, uint8_t au8_portValue)
{
     b08:	df 93       	push	r29
     b0a:	cf 93       	push	r28
     b0c:	00 d0       	rcall	.+0      	; 0xb0e <DIO_writePort+0x6>
     b0e:	00 d0       	rcall	.+0      	; 0xb10 <DIO_writePort+0x8>
     b10:	0f 92       	push	r0
     b12:	cd b7       	in	r28, 0x3d	; 61
     b14:	de b7       	in	r29, 0x3e	; 62
     b16:	8a 83       	std	Y+2, r24	; 0x02
     b18:	6b 83       	std	Y+3, r22	; 0x03
	enuDIO_E_STATE_t enu_ErrorState = E_NOT_OK;
     b1a:	81 e0       	ldi	r24, 0x01	; 1
     b1c:	89 83       	std	Y+1, r24	; 0x01

    switch (enu_portID)
     b1e:	8a 81       	ldd	r24, Y+2	; 0x02
     b20:	28 2f       	mov	r18, r24
     b22:	30 e0       	ldi	r19, 0x00	; 0
     b24:	3d 83       	std	Y+5, r19	; 0x05
     b26:	2c 83       	std	Y+4, r18	; 0x04
     b28:	8c 81       	ldd	r24, Y+4	; 0x04
     b2a:	9d 81       	ldd	r25, Y+5	; 0x05
     b2c:	81 30       	cpi	r24, 0x01	; 1
     b2e:	91 05       	cpc	r25, r1
     b30:	d9 f0       	breq	.+54     	; 0xb68 <DIO_writePort+0x60>
     b32:	2c 81       	ldd	r18, Y+4	; 0x04
     b34:	3d 81       	ldd	r19, Y+5	; 0x05
     b36:	22 30       	cpi	r18, 0x02	; 2
     b38:	31 05       	cpc	r19, r1
     b3a:	2c f4       	brge	.+10     	; 0xb46 <DIO_writePort+0x3e>
     b3c:	8c 81       	ldd	r24, Y+4	; 0x04
     b3e:	9d 81       	ldd	r25, Y+5	; 0x05
     b40:	00 97       	sbiw	r24, 0x00	; 0
     b42:	61 f0       	breq	.+24     	; 0xb5c <DIO_writePort+0x54>
     b44:	23 c0       	rjmp	.+70     	; 0xb8c <DIO_writePort+0x84>
     b46:	2c 81       	ldd	r18, Y+4	; 0x04
     b48:	3d 81       	ldd	r19, Y+5	; 0x05
     b4a:	22 30       	cpi	r18, 0x02	; 2
     b4c:	31 05       	cpc	r19, r1
     b4e:	91 f0       	breq	.+36     	; 0xb74 <DIO_writePort+0x6c>
     b50:	8c 81       	ldd	r24, Y+4	; 0x04
     b52:	9d 81       	ldd	r25, Y+5	; 0x05
     b54:	83 30       	cpi	r24, 0x03	; 3
     b56:	91 05       	cpc	r25, r1
     b58:	99 f0       	breq	.+38     	; 0xb80 <DIO_writePort+0x78>
     b5a:	18 c0       	rjmp	.+48     	; 0xb8c <DIO_writePort+0x84>
    {
    case DIO_PORTA:
        PORTA_DATA_R = au8_portValue;
     b5c:	eb e3       	ldi	r30, 0x3B	; 59
     b5e:	f0 e0       	ldi	r31, 0x00	; 0
     b60:	8b 81       	ldd	r24, Y+3	; 0x03
     b62:	80 83       	st	Z, r24
        enu_ErrorState = DIO_E_PARAM_VALID;
     b64:	19 82       	std	Y+1, r1	; 0x01
     b66:	14 c0       	rjmp	.+40     	; 0xb90 <DIO_writePort+0x88>
        break;
    case DIO_PORTB:
        PORTB_DATA_R = au8_portValue;
     b68:	e8 e3       	ldi	r30, 0x38	; 56
     b6a:	f0 e0       	ldi	r31, 0x00	; 0
     b6c:	8b 81       	ldd	r24, Y+3	; 0x03
     b6e:	80 83       	st	Z, r24
        enu_ErrorState = DIO_E_PARAM_VALID;
     b70:	19 82       	std	Y+1, r1	; 0x01
     b72:	0e c0       	rjmp	.+28     	; 0xb90 <DIO_writePort+0x88>
        break;
    case DIO_PORTC:
        PORTC_DATA_R = au8_portValue;
     b74:	e5 e3       	ldi	r30, 0x35	; 53
     b76:	f0 e0       	ldi	r31, 0x00	; 0
     b78:	8b 81       	ldd	r24, Y+3	; 0x03
     b7a:	80 83       	st	Z, r24
        enu_ErrorState = DIO_E_PARAM_VALID;
     b7c:	19 82       	std	Y+1, r1	; 0x01
     b7e:	08 c0       	rjmp	.+16     	; 0xb90 <DIO_writePort+0x88>
        break;
    case DIO_PORTD:
        PORTD_DATA_R = au8_portValue;
     b80:	e2 e3       	ldi	r30, 0x32	; 50
     b82:	f0 e0       	ldi	r31, 0x00	; 0
     b84:	8b 81       	ldd	r24, Y+3	; 0x03
     b86:	80 83       	st	Z, r24
        enu_ErrorState = DIO_E_PARAM_VALID;
     b88:	19 82       	std	Y+1, r1	; 0x01
     b8a:	02 c0       	rjmp	.+4      	; 0xb90 <DIO_writePort+0x88>
        break;
    default:
    	enu_ErrorState = DIO_E_PARAM_INVALID_PORT_ID;	/* Invalid port id */
     b8c:	81 e0       	ldi	r24, 0x01	; 1
     b8e:	89 83       	std	Y+1, r24	; 0x01
        break;
    }
    return enu_ErrorState;
     b90:	89 81       	ldd	r24, Y+1	; 0x01
}
     b92:	0f 90       	pop	r0
     b94:	0f 90       	pop	r0
     b96:	0f 90       	pop	r0
     b98:	0f 90       	pop	r0
     b9a:	0f 90       	pop	r0
     b9c:	cf 91       	pop	r28
     b9e:	df 91       	pop	r29
     ba0:	08 95       	ret

00000ba2 <DIO_writePin>:
 * [in/out]		 	None
 *
 * [Returns]:       Error State
 ******************************************************************************/
enuDIO_E_STATE_t DIO_writePin(enuDIO_PortId_t enu_portID, enuDIO_PinId_t enu_pinID, uint8_t au8_pinValue)
{
     ba2:	df 93       	push	r29
     ba4:	cf 93       	push	r28
     ba6:	cd b7       	in	r28, 0x3d	; 61
     ba8:	de b7       	in	r29, 0x3e	; 62
     baa:	28 97       	sbiw	r28, 0x08	; 8
     bac:	0f b6       	in	r0, 0x3f	; 63
     bae:	f8 94       	cli
     bb0:	de bf       	out	0x3e, r29	; 62
     bb2:	0f be       	out	0x3f, r0	; 63
     bb4:	cd bf       	out	0x3d, r28	; 61
     bb6:	8a 83       	std	Y+2, r24	; 0x02
     bb8:	6b 83       	std	Y+3, r22	; 0x03
     bba:	4c 83       	std	Y+4, r20	; 0x04
	enuDIO_E_STATE_t enu_ErrorState = E_NOT_OK;
     bbc:	81 e0       	ldi	r24, 0x01	; 1
     bbe:	89 83       	std	Y+1, r24	; 0x01

	/* Check if the pin id is one of the existed pin or not */
	if ((enu_pinID >= PIN_0) && (enu_pinID <= PIN_7))
     bc0:	8b 81       	ldd	r24, Y+3	; 0x03
     bc2:	88 30       	cpi	r24, 0x08	; 8
     bc4:	08 f0       	brcs	.+2      	; 0xbc8 <DIO_writePin+0x26>
     bc6:	fd c0       	rjmp	.+506    	; 0xdc2 <DIO_writePin+0x220>
	{
		if (au8_pinValue == HIGH)
     bc8:	8c 81       	ldd	r24, Y+4	; 0x04
     bca:	81 30       	cpi	r24, 0x01	; 1
     bcc:	09 f0       	breq	.+2      	; 0xbd0 <DIO_writePin+0x2e>
     bce:	77 c0       	rjmp	.+238    	; 0xcbe <DIO_writePin+0x11c>
		{
			switch (enu_portID)
     bd0:	8a 81       	ldd	r24, Y+2	; 0x02
     bd2:	28 2f       	mov	r18, r24
     bd4:	30 e0       	ldi	r19, 0x00	; 0
     bd6:	38 87       	std	Y+8, r19	; 0x08
     bd8:	2f 83       	std	Y+7, r18	; 0x07
     bda:	8f 81       	ldd	r24, Y+7	; 0x07
     bdc:	98 85       	ldd	r25, Y+8	; 0x08
     bde:	81 30       	cpi	r24, 0x01	; 1
     be0:	91 05       	cpc	r25, r1
     be2:	59 f1       	breq	.+86     	; 0xc3a <DIO_writePin+0x98>
     be4:	2f 81       	ldd	r18, Y+7	; 0x07
     be6:	38 85       	ldd	r19, Y+8	; 0x08
     be8:	22 30       	cpi	r18, 0x02	; 2
     bea:	31 05       	cpc	r19, r1
     bec:	2c f4       	brge	.+10     	; 0xbf8 <DIO_writePin+0x56>
     bee:	8f 81       	ldd	r24, Y+7	; 0x07
     bf0:	98 85       	ldd	r25, Y+8	; 0x08
     bf2:	00 97       	sbiw	r24, 0x00	; 0
     bf4:	69 f0       	breq	.+26     	; 0xc10 <DIO_writePin+0x6e>
     bf6:	60 c0       	rjmp	.+192    	; 0xcb8 <DIO_writePin+0x116>
     bf8:	2f 81       	ldd	r18, Y+7	; 0x07
     bfa:	38 85       	ldd	r19, Y+8	; 0x08
     bfc:	22 30       	cpi	r18, 0x02	; 2
     bfe:	31 05       	cpc	r19, r1
     c00:	89 f1       	breq	.+98     	; 0xc64 <DIO_writePin+0xc2>
     c02:	8f 81       	ldd	r24, Y+7	; 0x07
     c04:	98 85       	ldd	r25, Y+8	; 0x08
     c06:	83 30       	cpi	r24, 0x03	; 3
     c08:	91 05       	cpc	r25, r1
     c0a:	09 f4       	brne	.+2      	; 0xc0e <DIO_writePin+0x6c>
     c0c:	40 c0       	rjmp	.+128    	; 0xc8e <DIO_writePin+0xec>
     c0e:	54 c0       	rjmp	.+168    	; 0xcb8 <DIO_writePin+0x116>
			{
			case DIO_PORTA:
				SET_BIT(PORTA_DATA_R, enu_pinID);
     c10:	ab e3       	ldi	r26, 0x3B	; 59
     c12:	b0 e0       	ldi	r27, 0x00	; 0
     c14:	eb e3       	ldi	r30, 0x3B	; 59
     c16:	f0 e0       	ldi	r31, 0x00	; 0
     c18:	80 81       	ld	r24, Z
     c1a:	48 2f       	mov	r20, r24
     c1c:	8b 81       	ldd	r24, Y+3	; 0x03
     c1e:	28 2f       	mov	r18, r24
     c20:	30 e0       	ldi	r19, 0x00	; 0
     c22:	81 e0       	ldi	r24, 0x01	; 1
     c24:	90 e0       	ldi	r25, 0x00	; 0
     c26:	02 2e       	mov	r0, r18
     c28:	02 c0       	rjmp	.+4      	; 0xc2e <DIO_writePin+0x8c>
     c2a:	88 0f       	add	r24, r24
     c2c:	99 1f       	adc	r25, r25
     c2e:	0a 94       	dec	r0
     c30:	e2 f7       	brpl	.-8      	; 0xc2a <DIO_writePin+0x88>
     c32:	84 2b       	or	r24, r20
     c34:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
     c36:	19 82       	std	Y+1, r1	; 0x01
     c38:	c6 c0       	rjmp	.+396    	; 0xdc6 <DIO_writePin+0x224>
				break;
			case DIO_PORTB:
				SET_BIT(PORTB_DATA_R, enu_pinID);
     c3a:	a8 e3       	ldi	r26, 0x38	; 56
     c3c:	b0 e0       	ldi	r27, 0x00	; 0
     c3e:	e8 e3       	ldi	r30, 0x38	; 56
     c40:	f0 e0       	ldi	r31, 0x00	; 0
     c42:	80 81       	ld	r24, Z
     c44:	48 2f       	mov	r20, r24
     c46:	8b 81       	ldd	r24, Y+3	; 0x03
     c48:	28 2f       	mov	r18, r24
     c4a:	30 e0       	ldi	r19, 0x00	; 0
     c4c:	81 e0       	ldi	r24, 0x01	; 1
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	02 2e       	mov	r0, r18
     c52:	02 c0       	rjmp	.+4      	; 0xc58 <DIO_writePin+0xb6>
     c54:	88 0f       	add	r24, r24
     c56:	99 1f       	adc	r25, r25
     c58:	0a 94       	dec	r0
     c5a:	e2 f7       	brpl	.-8      	; 0xc54 <DIO_writePin+0xb2>
     c5c:	84 2b       	or	r24, r20
     c5e:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
     c60:	19 82       	std	Y+1, r1	; 0x01
     c62:	b1 c0       	rjmp	.+354    	; 0xdc6 <DIO_writePin+0x224>
				break;
			case DIO_PORTC:
				SET_BIT(PORTC_DATA_R, enu_pinID);
     c64:	a5 e3       	ldi	r26, 0x35	; 53
     c66:	b0 e0       	ldi	r27, 0x00	; 0
     c68:	e5 e3       	ldi	r30, 0x35	; 53
     c6a:	f0 e0       	ldi	r31, 0x00	; 0
     c6c:	80 81       	ld	r24, Z
     c6e:	48 2f       	mov	r20, r24
     c70:	8b 81       	ldd	r24, Y+3	; 0x03
     c72:	28 2f       	mov	r18, r24
     c74:	30 e0       	ldi	r19, 0x00	; 0
     c76:	81 e0       	ldi	r24, 0x01	; 1
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	02 2e       	mov	r0, r18
     c7c:	02 c0       	rjmp	.+4      	; 0xc82 <DIO_writePin+0xe0>
     c7e:	88 0f       	add	r24, r24
     c80:	99 1f       	adc	r25, r25
     c82:	0a 94       	dec	r0
     c84:	e2 f7       	brpl	.-8      	; 0xc7e <DIO_writePin+0xdc>
     c86:	84 2b       	or	r24, r20
     c88:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
     c8a:	19 82       	std	Y+1, r1	; 0x01
     c8c:	9c c0       	rjmp	.+312    	; 0xdc6 <DIO_writePin+0x224>
				break;
			case DIO_PORTD:
				SET_BIT(PORTD_DATA_R, enu_pinID);
     c8e:	a2 e3       	ldi	r26, 0x32	; 50
     c90:	b0 e0       	ldi	r27, 0x00	; 0
     c92:	e2 e3       	ldi	r30, 0x32	; 50
     c94:	f0 e0       	ldi	r31, 0x00	; 0
     c96:	80 81       	ld	r24, Z
     c98:	48 2f       	mov	r20, r24
     c9a:	8b 81       	ldd	r24, Y+3	; 0x03
     c9c:	28 2f       	mov	r18, r24
     c9e:	30 e0       	ldi	r19, 0x00	; 0
     ca0:	81 e0       	ldi	r24, 0x01	; 1
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	02 2e       	mov	r0, r18
     ca6:	02 c0       	rjmp	.+4      	; 0xcac <DIO_writePin+0x10a>
     ca8:	88 0f       	add	r24, r24
     caa:	99 1f       	adc	r25, r25
     cac:	0a 94       	dec	r0
     cae:	e2 f7       	brpl	.-8      	; 0xca8 <DIO_writePin+0x106>
     cb0:	84 2b       	or	r24, r20
     cb2:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
     cb4:	19 82       	std	Y+1, r1	; 0x01
     cb6:	87 c0       	rjmp	.+270    	; 0xdc6 <DIO_writePin+0x224>
				break;
            default:
            	enu_ErrorState = DIO_E_PARAM_INVALID_PORT_ID;	/* Invalid port id */
     cb8:	81 e0       	ldi	r24, 0x01	; 1
     cba:	89 83       	std	Y+1, r24	; 0x01
     cbc:	84 c0       	rjmp	.+264    	; 0xdc6 <DIO_writePin+0x224>
                break;
			}
		}
		else if (au8_pinValue == LOW)
     cbe:	8c 81       	ldd	r24, Y+4	; 0x04
     cc0:	88 23       	and	r24, r24
     cc2:	09 f0       	breq	.+2      	; 0xcc6 <DIO_writePin+0x124>
     cc4:	7b c0       	rjmp	.+246    	; 0xdbc <DIO_writePin+0x21a>
		{
			switch (enu_portID)
     cc6:	8a 81       	ldd	r24, Y+2	; 0x02
     cc8:	28 2f       	mov	r18, r24
     cca:	30 e0       	ldi	r19, 0x00	; 0
     ccc:	3e 83       	std	Y+6, r19	; 0x06
     cce:	2d 83       	std	Y+5, r18	; 0x05
     cd0:	8d 81       	ldd	r24, Y+5	; 0x05
     cd2:	9e 81       	ldd	r25, Y+6	; 0x06
     cd4:	81 30       	cpi	r24, 0x01	; 1
     cd6:	91 05       	cpc	r25, r1
     cd8:	61 f1       	breq	.+88     	; 0xd32 <DIO_writePin+0x190>
     cda:	2d 81       	ldd	r18, Y+5	; 0x05
     cdc:	3e 81       	ldd	r19, Y+6	; 0x06
     cde:	22 30       	cpi	r18, 0x02	; 2
     ce0:	31 05       	cpc	r19, r1
     ce2:	2c f4       	brge	.+10     	; 0xcee <DIO_writePin+0x14c>
     ce4:	8d 81       	ldd	r24, Y+5	; 0x05
     ce6:	9e 81       	ldd	r25, Y+6	; 0x06
     ce8:	00 97       	sbiw	r24, 0x00	; 0
     cea:	69 f0       	breq	.+26     	; 0xd06 <DIO_writePin+0x164>
     cec:	64 c0       	rjmp	.+200    	; 0xdb6 <DIO_writePin+0x214>
     cee:	2d 81       	ldd	r18, Y+5	; 0x05
     cf0:	3e 81       	ldd	r19, Y+6	; 0x06
     cf2:	22 30       	cpi	r18, 0x02	; 2
     cf4:	31 05       	cpc	r19, r1
     cf6:	99 f1       	breq	.+102    	; 0xd5e <DIO_writePin+0x1bc>
     cf8:	8d 81       	ldd	r24, Y+5	; 0x05
     cfa:	9e 81       	ldd	r25, Y+6	; 0x06
     cfc:	83 30       	cpi	r24, 0x03	; 3
     cfe:	91 05       	cpc	r25, r1
     d00:	09 f4       	brne	.+2      	; 0xd04 <DIO_writePin+0x162>
     d02:	43 c0       	rjmp	.+134    	; 0xd8a <DIO_writePin+0x1e8>
     d04:	58 c0       	rjmp	.+176    	; 0xdb6 <DIO_writePin+0x214>
			{
			case DIO_PORTA:
				CLEAR_BIT(PORTA_DATA_R, enu_pinID);
     d06:	ab e3       	ldi	r26, 0x3B	; 59
     d08:	b0 e0       	ldi	r27, 0x00	; 0
     d0a:	eb e3       	ldi	r30, 0x3B	; 59
     d0c:	f0 e0       	ldi	r31, 0x00	; 0
     d0e:	80 81       	ld	r24, Z
     d10:	48 2f       	mov	r20, r24
     d12:	8b 81       	ldd	r24, Y+3	; 0x03
     d14:	28 2f       	mov	r18, r24
     d16:	30 e0       	ldi	r19, 0x00	; 0
     d18:	81 e0       	ldi	r24, 0x01	; 1
     d1a:	90 e0       	ldi	r25, 0x00	; 0
     d1c:	02 2e       	mov	r0, r18
     d1e:	02 c0       	rjmp	.+4      	; 0xd24 <DIO_writePin+0x182>
     d20:	88 0f       	add	r24, r24
     d22:	99 1f       	adc	r25, r25
     d24:	0a 94       	dec	r0
     d26:	e2 f7       	brpl	.-8      	; 0xd20 <DIO_writePin+0x17e>
     d28:	80 95       	com	r24
     d2a:	84 23       	and	r24, r20
     d2c:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
     d2e:	19 82       	std	Y+1, r1	; 0x01
     d30:	4a c0       	rjmp	.+148    	; 0xdc6 <DIO_writePin+0x224>
				break;
			case DIO_PORTB:
				CLEAR_BIT(PORTB_DATA_R, enu_pinID);
     d32:	a8 e3       	ldi	r26, 0x38	; 56
     d34:	b0 e0       	ldi	r27, 0x00	; 0
     d36:	e8 e3       	ldi	r30, 0x38	; 56
     d38:	f0 e0       	ldi	r31, 0x00	; 0
     d3a:	80 81       	ld	r24, Z
     d3c:	48 2f       	mov	r20, r24
     d3e:	8b 81       	ldd	r24, Y+3	; 0x03
     d40:	28 2f       	mov	r18, r24
     d42:	30 e0       	ldi	r19, 0x00	; 0
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	90 e0       	ldi	r25, 0x00	; 0
     d48:	02 2e       	mov	r0, r18
     d4a:	02 c0       	rjmp	.+4      	; 0xd50 <DIO_writePin+0x1ae>
     d4c:	88 0f       	add	r24, r24
     d4e:	99 1f       	adc	r25, r25
     d50:	0a 94       	dec	r0
     d52:	e2 f7       	brpl	.-8      	; 0xd4c <DIO_writePin+0x1aa>
     d54:	80 95       	com	r24
     d56:	84 23       	and	r24, r20
     d58:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
     d5a:	19 82       	std	Y+1, r1	; 0x01
     d5c:	34 c0       	rjmp	.+104    	; 0xdc6 <DIO_writePin+0x224>
				break;
			case DIO_PORTC:
				CLEAR_BIT(PORTC_DATA_R, enu_pinID);
     d5e:	a5 e3       	ldi	r26, 0x35	; 53
     d60:	b0 e0       	ldi	r27, 0x00	; 0
     d62:	e5 e3       	ldi	r30, 0x35	; 53
     d64:	f0 e0       	ldi	r31, 0x00	; 0
     d66:	80 81       	ld	r24, Z
     d68:	48 2f       	mov	r20, r24
     d6a:	8b 81       	ldd	r24, Y+3	; 0x03
     d6c:	28 2f       	mov	r18, r24
     d6e:	30 e0       	ldi	r19, 0x00	; 0
     d70:	81 e0       	ldi	r24, 0x01	; 1
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	02 2e       	mov	r0, r18
     d76:	02 c0       	rjmp	.+4      	; 0xd7c <DIO_writePin+0x1da>
     d78:	88 0f       	add	r24, r24
     d7a:	99 1f       	adc	r25, r25
     d7c:	0a 94       	dec	r0
     d7e:	e2 f7       	brpl	.-8      	; 0xd78 <DIO_writePin+0x1d6>
     d80:	80 95       	com	r24
     d82:	84 23       	and	r24, r20
     d84:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
     d86:	19 82       	std	Y+1, r1	; 0x01
     d88:	1e c0       	rjmp	.+60     	; 0xdc6 <DIO_writePin+0x224>
				break;
			case DIO_PORTD:
				CLEAR_BIT(PORTD_DATA_R, enu_pinID);
     d8a:	a2 e3       	ldi	r26, 0x32	; 50
     d8c:	b0 e0       	ldi	r27, 0x00	; 0
     d8e:	e2 e3       	ldi	r30, 0x32	; 50
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	80 81       	ld	r24, Z
     d94:	48 2f       	mov	r20, r24
     d96:	8b 81       	ldd	r24, Y+3	; 0x03
     d98:	28 2f       	mov	r18, r24
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	81 e0       	ldi	r24, 0x01	; 1
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	02 2e       	mov	r0, r18
     da2:	02 c0       	rjmp	.+4      	; 0xda8 <DIO_writePin+0x206>
     da4:	88 0f       	add	r24, r24
     da6:	99 1f       	adc	r25, r25
     da8:	0a 94       	dec	r0
     daa:	e2 f7       	brpl	.-8      	; 0xda4 <DIO_writePin+0x202>
     dac:	80 95       	com	r24
     dae:	84 23       	and	r24, r20
     db0:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
     db2:	19 82       	std	Y+1, r1	; 0x01
     db4:	08 c0       	rjmp	.+16     	; 0xdc6 <DIO_writePin+0x224>
				break;
            default:
            	enu_ErrorState = DIO_E_PARAM_INVALID_PORT_ID;	/* Invalid port id */
     db6:	81 e0       	ldi	r24, 0x01	; 1
     db8:	89 83       	std	Y+1, r24	; 0x01
     dba:	05 c0       	rjmp	.+10     	; 0xdc6 <DIO_writePin+0x224>
                break;
			}
		}
		else
        {
			enu_ErrorState = DIO_E_PARAM_INVALID_PORT_DIR;	/* Invalid port direction */
     dbc:	84 e0       	ldi	r24, 0x04	; 4
     dbe:	89 83       	std	Y+1, r24	; 0x01
     dc0:	02 c0       	rjmp	.+4      	; 0xdc6 <DIO_writePin+0x224>
		}
	}
	else
	{
		enu_ErrorState = DIO_E_PARAM_INVALID_PIN_ID;	/* Invalid pin id */
     dc2:	82 e0       	ldi	r24, 0x02	; 2
     dc4:	89 83       	std	Y+1, r24	; 0x01
	}
	return enu_ErrorState;
     dc6:	89 81       	ldd	r24, Y+1	; 0x01
}
     dc8:	28 96       	adiw	r28, 0x08	; 8
     dca:	0f b6       	in	r0, 0x3f	; 63
     dcc:	f8 94       	cli
     dce:	de bf       	out	0x3e, r29	; 62
     dd0:	0f be       	out	0x3f, r0	; 63
     dd2:	cd bf       	out	0x3d, r28	; 61
     dd4:	cf 91       	pop	r28
     dd6:	df 91       	pop	r29
     dd8:	08 95       	ret

00000dda <DIO_readPort>:
 * [in/out]		 	None
 *
 * [Returns]:       Error State
 ******************************************************************************/
enuDIO_E_STATE_t DIO_readPort(enuDIO_PortId_t enu_portID, uint8_t * ptr_portState)
{
     dda:	df 93       	push	r29
     ddc:	cf 93       	push	r28
     dde:	00 d0       	rcall	.+0      	; 0xde0 <DIO_readPort+0x6>
     de0:	00 d0       	rcall	.+0      	; 0xde2 <DIO_readPort+0x8>
     de2:	00 d0       	rcall	.+0      	; 0xde4 <DIO_readPort+0xa>
     de4:	cd b7       	in	r28, 0x3d	; 61
     de6:	de b7       	in	r29, 0x3e	; 62
     de8:	8a 83       	std	Y+2, r24	; 0x02
     dea:	7c 83       	std	Y+4, r23	; 0x04
     dec:	6b 83       	std	Y+3, r22	; 0x03
	enuDIO_E_STATE_t enu_ErrorState = E_NOT_OK;
     dee:	81 e0       	ldi	r24, 0x01	; 1
     df0:	89 83       	std	Y+1, r24	; 0x01

	/* Check if the pointer is NULL pointer or not */
	if(ptr_portState == NULL_PTR)
     df2:	8b 81       	ldd	r24, Y+3	; 0x03
     df4:	9c 81       	ldd	r25, Y+4	; 0x04
     df6:	00 97       	sbiw	r24, 0x00	; 0
     df8:	19 f4       	brne	.+6      	; 0xe00 <DIO_readPort+0x26>
    {
		enu_ErrorState = DIO_E_PARAM_POINTER;	/* Invalid pointer */
     dfa:	85 e0       	ldi	r24, 0x05	; 5
     dfc:	89 83       	std	Y+1, r24	; 0x01
     dfe:	41 c0       	rjmp	.+130    	; 0xe82 <DIO_readPort+0xa8>
	}
	else
	{
		switch (enu_portID)
     e00:	8a 81       	ldd	r24, Y+2	; 0x02
     e02:	28 2f       	mov	r18, r24
     e04:	30 e0       	ldi	r19, 0x00	; 0
     e06:	3e 83       	std	Y+6, r19	; 0x06
     e08:	2d 83       	std	Y+5, r18	; 0x05
     e0a:	8d 81       	ldd	r24, Y+5	; 0x05
     e0c:	9e 81       	ldd	r25, Y+6	; 0x06
     e0e:	81 30       	cpi	r24, 0x01	; 1
     e10:	91 05       	cpc	r25, r1
     e12:	e9 f0       	breq	.+58     	; 0xe4e <DIO_readPort+0x74>
     e14:	2d 81       	ldd	r18, Y+5	; 0x05
     e16:	3e 81       	ldd	r19, Y+6	; 0x06
     e18:	22 30       	cpi	r18, 0x02	; 2
     e1a:	31 05       	cpc	r19, r1
     e1c:	2c f4       	brge	.+10     	; 0xe28 <DIO_readPort+0x4e>
     e1e:	8d 81       	ldd	r24, Y+5	; 0x05
     e20:	9e 81       	ldd	r25, Y+6	; 0x06
     e22:	00 97       	sbiw	r24, 0x00	; 0
     e24:	61 f0       	breq	.+24     	; 0xe3e <DIO_readPort+0x64>
     e26:	2b c0       	rjmp	.+86     	; 0xe7e <DIO_readPort+0xa4>
     e28:	2d 81       	ldd	r18, Y+5	; 0x05
     e2a:	3e 81       	ldd	r19, Y+6	; 0x06
     e2c:	22 30       	cpi	r18, 0x02	; 2
     e2e:	31 05       	cpc	r19, r1
     e30:	b1 f0       	breq	.+44     	; 0xe5e <DIO_readPort+0x84>
     e32:	8d 81       	ldd	r24, Y+5	; 0x05
     e34:	9e 81       	ldd	r25, Y+6	; 0x06
     e36:	83 30       	cpi	r24, 0x03	; 3
     e38:	91 05       	cpc	r25, r1
     e3a:	c9 f0       	breq	.+50     	; 0xe6e <DIO_readPort+0x94>
     e3c:	20 c0       	rjmp	.+64     	; 0xe7e <DIO_readPort+0xa4>
		{
		case DIO_PORTA:
			*ptr_portState = PINA_INPUT_R;
     e3e:	e9 e3       	ldi	r30, 0x39	; 57
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	80 81       	ld	r24, Z
     e44:	eb 81       	ldd	r30, Y+3	; 0x03
     e46:	fc 81       	ldd	r31, Y+4	; 0x04
     e48:	80 83       	st	Z, r24
			enu_ErrorState = DIO_E_PARAM_VALID;
     e4a:	19 82       	std	Y+1, r1	; 0x01
     e4c:	1a c0       	rjmp	.+52     	; 0xe82 <DIO_readPort+0xa8>
			break;
		case DIO_PORTB:
			*ptr_portState = PINB_INPUT_R;
     e4e:	e6 e3       	ldi	r30, 0x36	; 54
     e50:	f0 e0       	ldi	r31, 0x00	; 0
     e52:	80 81       	ld	r24, Z
     e54:	eb 81       	ldd	r30, Y+3	; 0x03
     e56:	fc 81       	ldd	r31, Y+4	; 0x04
     e58:	80 83       	st	Z, r24
			enu_ErrorState = DIO_E_PARAM_VALID;;
     e5a:	19 82       	std	Y+1, r1	; 0x01
     e5c:	12 c0       	rjmp	.+36     	; 0xe82 <DIO_readPort+0xa8>
			break;
		case DIO_PORTC:
			*ptr_portState = PINC_INPUT_R;
     e5e:	e3 e3       	ldi	r30, 0x33	; 51
     e60:	f0 e0       	ldi	r31, 0x00	; 0
     e62:	80 81       	ld	r24, Z
     e64:	eb 81       	ldd	r30, Y+3	; 0x03
     e66:	fc 81       	ldd	r31, Y+4	; 0x04
     e68:	80 83       	st	Z, r24
			enu_ErrorState = DIO_E_PARAM_VALID;
     e6a:	19 82       	std	Y+1, r1	; 0x01
     e6c:	0a c0       	rjmp	.+20     	; 0xe82 <DIO_readPort+0xa8>
			break;
		case DIO_PORTD:
			*ptr_portState = PIND_INPUT_R;
     e6e:	e0 e3       	ldi	r30, 0x30	; 48
     e70:	f0 e0       	ldi	r31, 0x00	; 0
     e72:	80 81       	ld	r24, Z
     e74:	eb 81       	ldd	r30, Y+3	; 0x03
     e76:	fc 81       	ldd	r31, Y+4	; 0x04
     e78:	80 83       	st	Z, r24
			enu_ErrorState = DIO_E_PARAM_VALID;
     e7a:	19 82       	std	Y+1, r1	; 0x01
     e7c:	02 c0       	rjmp	.+4      	; 0xe82 <DIO_readPort+0xa8>
			break;
		default:
			enu_ErrorState = DIO_E_PARAM_INVALID_PORT_ID;	/* Invalid port id */
     e7e:	81 e0       	ldi	r24, 0x01	; 1
     e80:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return enu_ErrorState;
     e82:	89 81       	ldd	r24, Y+1	; 0x01
}
     e84:	26 96       	adiw	r28, 0x06	; 6
     e86:	0f b6       	in	r0, 0x3f	; 63
     e88:	f8 94       	cli
     e8a:	de bf       	out	0x3e, r29	; 62
     e8c:	0f be       	out	0x3f, r0	; 63
     e8e:	cd bf       	out	0x3d, r28	; 61
     e90:	cf 91       	pop	r28
     e92:	df 91       	pop	r29
     e94:	08 95       	ret

00000e96 <DIO_readPin>:
 * [in/out]		 	None
 *
 * [Returns]:       Error State
 ******************************************************************************/
enuDIO_E_STATE_t DIO_readPin(enuDIO_PortId_t enu_portID, enuDIO_PinId_t enu_pinID, uint8_t * ptr_pinState)
{
     e96:	df 93       	push	r29
     e98:	cf 93       	push	r28
     e9a:	cd b7       	in	r28, 0x3d	; 61
     e9c:	de b7       	in	r29, 0x3e	; 62
     e9e:	27 97       	sbiw	r28, 0x07	; 7
     ea0:	0f b6       	in	r0, 0x3f	; 63
     ea2:	f8 94       	cli
     ea4:	de bf       	out	0x3e, r29	; 62
     ea6:	0f be       	out	0x3f, r0	; 63
     ea8:	cd bf       	out	0x3d, r28	; 61
     eaa:	8a 83       	std	Y+2, r24	; 0x02
     eac:	6b 83       	std	Y+3, r22	; 0x03
     eae:	5d 83       	std	Y+5, r21	; 0x05
     eb0:	4c 83       	std	Y+4, r20	; 0x04
	enuDIO_E_STATE_t enu_ErrorState = E_NOT_OK;
     eb2:	81 e0       	ldi	r24, 0x01	; 1
     eb4:	89 83       	std	Y+1, r24	; 0x01

	/* Check if the pointer is NULL pointer or not */
	if(ptr_pinState == NULL_PTR)
     eb6:	8c 81       	ldd	r24, Y+4	; 0x04
     eb8:	9d 81       	ldd	r25, Y+5	; 0x05
     eba:	00 97       	sbiw	r24, 0x00	; 0
     ebc:	19 f4       	brne	.+6      	; 0xec4 <DIO_readPin+0x2e>
    {
		enu_ErrorState = DIO_E_PARAM_POINTER;
     ebe:	85 e0       	ldi	r24, 0x05	; 5
     ec0:	89 83       	std	Y+1, r24	; 0x01
     ec2:	af c0       	rjmp	.+350    	; 0x1022 <DIO_readPin+0x18c>
	}
	else
	{
        if((enu_pinID >= PIN_0) && (enu_pinID <= PIN_7))
     ec4:	8b 81       	ldd	r24, Y+3	; 0x03
     ec6:	88 30       	cpi	r24, 0x08	; 8
     ec8:	08 f0       	brcs	.+2      	; 0xecc <DIO_readPin+0x36>
     eca:	a9 c0       	rjmp	.+338    	; 0x101e <DIO_readPin+0x188>
        {
            switch (enu_portID)
     ecc:	8a 81       	ldd	r24, Y+2	; 0x02
     ece:	28 2f       	mov	r18, r24
     ed0:	30 e0       	ldi	r19, 0x00	; 0
     ed2:	3f 83       	std	Y+7, r19	; 0x07
     ed4:	2e 83       	std	Y+6, r18	; 0x06
     ed6:	4e 81       	ldd	r20, Y+6	; 0x06
     ed8:	5f 81       	ldd	r21, Y+7	; 0x07
     eda:	41 30       	cpi	r20, 0x01	; 1
     edc:	51 05       	cpc	r21, r1
     ede:	c9 f1       	breq	.+114    	; 0xf52 <DIO_readPin+0xbc>
     ee0:	8e 81       	ldd	r24, Y+6	; 0x06
     ee2:	9f 81       	ldd	r25, Y+7	; 0x07
     ee4:	82 30       	cpi	r24, 0x02	; 2
     ee6:	91 05       	cpc	r25, r1
     ee8:	34 f4       	brge	.+12     	; 0xef6 <DIO_readPin+0x60>
     eea:	2e 81       	ldd	r18, Y+6	; 0x06
     eec:	3f 81       	ldd	r19, Y+7	; 0x07
     eee:	21 15       	cp	r18, r1
     ef0:	31 05       	cpc	r19, r1
     ef2:	71 f0       	breq	.+28     	; 0xf10 <DIO_readPin+0x7a>
     ef4:	91 c0       	rjmp	.+290    	; 0x1018 <DIO_readPin+0x182>
     ef6:	4e 81       	ldd	r20, Y+6	; 0x06
     ef8:	5f 81       	ldd	r21, Y+7	; 0x07
     efa:	42 30       	cpi	r20, 0x02	; 2
     efc:	51 05       	cpc	r21, r1
     efe:	09 f4       	brne	.+2      	; 0xf02 <DIO_readPin+0x6c>
     f00:	49 c0       	rjmp	.+146    	; 0xf94 <DIO_readPin+0xfe>
     f02:	8e 81       	ldd	r24, Y+6	; 0x06
     f04:	9f 81       	ldd	r25, Y+7	; 0x07
     f06:	83 30       	cpi	r24, 0x03	; 3
     f08:	91 05       	cpc	r25, r1
     f0a:	09 f4       	brne	.+2      	; 0xf0e <DIO_readPin+0x78>
     f0c:	64 c0       	rjmp	.+200    	; 0xfd6 <DIO_readPin+0x140>
     f0e:	84 c0       	rjmp	.+264    	; 0x1018 <DIO_readPin+0x182>
            {
            case DIO_PORTA:
                *ptr_pinState = READ_BIT(PINA_INPUT_R, enu_pinID);
     f10:	e9 e3       	ldi	r30, 0x39	; 57
     f12:	f0 e0       	ldi	r31, 0x00	; 0
     f14:	80 81       	ld	r24, Z
     f16:	48 2f       	mov	r20, r24
     f18:	50 e0       	ldi	r21, 0x00	; 0
     f1a:	8b 81       	ldd	r24, Y+3	; 0x03
     f1c:	28 2f       	mov	r18, r24
     f1e:	30 e0       	ldi	r19, 0x00	; 0
     f20:	81 e0       	ldi	r24, 0x01	; 1
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	02 c0       	rjmp	.+4      	; 0xf2a <DIO_readPin+0x94>
     f26:	88 0f       	add	r24, r24
     f28:	99 1f       	adc	r25, r25
     f2a:	2a 95       	dec	r18
     f2c:	e2 f7       	brpl	.-8      	; 0xf26 <DIO_readPin+0x90>
     f2e:	9a 01       	movw	r18, r20
     f30:	28 23       	and	r18, r24
     f32:	39 23       	and	r19, r25
     f34:	8b 81       	ldd	r24, Y+3	; 0x03
     f36:	88 2f       	mov	r24, r24
     f38:	90 e0       	ldi	r25, 0x00	; 0
     f3a:	a9 01       	movw	r20, r18
     f3c:	02 c0       	rjmp	.+4      	; 0xf42 <DIO_readPin+0xac>
     f3e:	55 95       	asr	r21
     f40:	47 95       	ror	r20
     f42:	8a 95       	dec	r24
     f44:	e2 f7       	brpl	.-8      	; 0xf3e <DIO_readPin+0xa8>
     f46:	ca 01       	movw	r24, r20
     f48:	ec 81       	ldd	r30, Y+4	; 0x04
     f4a:	fd 81       	ldd	r31, Y+5	; 0x05
     f4c:	80 83       	st	Z, r24
                enu_ErrorState = DIO_E_PARAM_VALID;
     f4e:	19 82       	std	Y+1, r1	; 0x01
     f50:	68 c0       	rjmp	.+208    	; 0x1022 <DIO_readPin+0x18c>
                break;
            case DIO_PORTB:
                *ptr_pinState = READ_BIT(PINB_INPUT_R, enu_pinID);
     f52:	e6 e3       	ldi	r30, 0x36	; 54
     f54:	f0 e0       	ldi	r31, 0x00	; 0
     f56:	80 81       	ld	r24, Z
     f58:	48 2f       	mov	r20, r24
     f5a:	50 e0       	ldi	r21, 0x00	; 0
     f5c:	8b 81       	ldd	r24, Y+3	; 0x03
     f5e:	28 2f       	mov	r18, r24
     f60:	30 e0       	ldi	r19, 0x00	; 0
     f62:	81 e0       	ldi	r24, 0x01	; 1
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	02 c0       	rjmp	.+4      	; 0xf6c <DIO_readPin+0xd6>
     f68:	88 0f       	add	r24, r24
     f6a:	99 1f       	adc	r25, r25
     f6c:	2a 95       	dec	r18
     f6e:	e2 f7       	brpl	.-8      	; 0xf68 <DIO_readPin+0xd2>
     f70:	9a 01       	movw	r18, r20
     f72:	28 23       	and	r18, r24
     f74:	39 23       	and	r19, r25
     f76:	8b 81       	ldd	r24, Y+3	; 0x03
     f78:	88 2f       	mov	r24, r24
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	a9 01       	movw	r20, r18
     f7e:	02 c0       	rjmp	.+4      	; 0xf84 <DIO_readPin+0xee>
     f80:	55 95       	asr	r21
     f82:	47 95       	ror	r20
     f84:	8a 95       	dec	r24
     f86:	e2 f7       	brpl	.-8      	; 0xf80 <DIO_readPin+0xea>
     f88:	ca 01       	movw	r24, r20
     f8a:	ec 81       	ldd	r30, Y+4	; 0x04
     f8c:	fd 81       	ldd	r31, Y+5	; 0x05
     f8e:	80 83       	st	Z, r24
                enu_ErrorState = DIO_E_PARAM_VALID;
     f90:	19 82       	std	Y+1, r1	; 0x01
     f92:	47 c0       	rjmp	.+142    	; 0x1022 <DIO_readPin+0x18c>
                break;
            case DIO_PORTC:
                *ptr_pinState = READ_BIT(PINC_INPUT_R, enu_pinID);
     f94:	e3 e3       	ldi	r30, 0x33	; 51
     f96:	f0 e0       	ldi	r31, 0x00	; 0
     f98:	80 81       	ld	r24, Z
     f9a:	48 2f       	mov	r20, r24
     f9c:	50 e0       	ldi	r21, 0x00	; 0
     f9e:	8b 81       	ldd	r24, Y+3	; 0x03
     fa0:	28 2f       	mov	r18, r24
     fa2:	30 e0       	ldi	r19, 0x00	; 0
     fa4:	81 e0       	ldi	r24, 0x01	; 1
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	02 c0       	rjmp	.+4      	; 0xfae <DIO_readPin+0x118>
     faa:	88 0f       	add	r24, r24
     fac:	99 1f       	adc	r25, r25
     fae:	2a 95       	dec	r18
     fb0:	e2 f7       	brpl	.-8      	; 0xfaa <DIO_readPin+0x114>
     fb2:	9a 01       	movw	r18, r20
     fb4:	28 23       	and	r18, r24
     fb6:	39 23       	and	r19, r25
     fb8:	8b 81       	ldd	r24, Y+3	; 0x03
     fba:	88 2f       	mov	r24, r24
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	a9 01       	movw	r20, r18
     fc0:	02 c0       	rjmp	.+4      	; 0xfc6 <DIO_readPin+0x130>
     fc2:	55 95       	asr	r21
     fc4:	47 95       	ror	r20
     fc6:	8a 95       	dec	r24
     fc8:	e2 f7       	brpl	.-8      	; 0xfc2 <DIO_readPin+0x12c>
     fca:	ca 01       	movw	r24, r20
     fcc:	ec 81       	ldd	r30, Y+4	; 0x04
     fce:	fd 81       	ldd	r31, Y+5	; 0x05
     fd0:	80 83       	st	Z, r24
                enu_ErrorState = DIO_E_PARAM_VALID;
     fd2:	19 82       	std	Y+1, r1	; 0x01
     fd4:	26 c0       	rjmp	.+76     	; 0x1022 <DIO_readPin+0x18c>
                break;
            case DIO_PORTD:
                *ptr_pinState = READ_BIT(PIND_INPUT_R, enu_pinID);
     fd6:	e0 e3       	ldi	r30, 0x30	; 48
     fd8:	f0 e0       	ldi	r31, 0x00	; 0
     fda:	80 81       	ld	r24, Z
     fdc:	48 2f       	mov	r20, r24
     fde:	50 e0       	ldi	r21, 0x00	; 0
     fe0:	8b 81       	ldd	r24, Y+3	; 0x03
     fe2:	28 2f       	mov	r18, r24
     fe4:	30 e0       	ldi	r19, 0x00	; 0
     fe6:	81 e0       	ldi	r24, 0x01	; 1
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	02 c0       	rjmp	.+4      	; 0xff0 <DIO_readPin+0x15a>
     fec:	88 0f       	add	r24, r24
     fee:	99 1f       	adc	r25, r25
     ff0:	2a 95       	dec	r18
     ff2:	e2 f7       	brpl	.-8      	; 0xfec <DIO_readPin+0x156>
     ff4:	9a 01       	movw	r18, r20
     ff6:	28 23       	and	r18, r24
     ff8:	39 23       	and	r19, r25
     ffa:	8b 81       	ldd	r24, Y+3	; 0x03
     ffc:	88 2f       	mov	r24, r24
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	a9 01       	movw	r20, r18
    1002:	02 c0       	rjmp	.+4      	; 0x1008 <DIO_readPin+0x172>
    1004:	55 95       	asr	r21
    1006:	47 95       	ror	r20
    1008:	8a 95       	dec	r24
    100a:	e2 f7       	brpl	.-8      	; 0x1004 <DIO_readPin+0x16e>
    100c:	ca 01       	movw	r24, r20
    100e:	ec 81       	ldd	r30, Y+4	; 0x04
    1010:	fd 81       	ldd	r31, Y+5	; 0x05
    1012:	80 83       	st	Z, r24
                enu_ErrorState = DIO_E_PARAM_VALID;
    1014:	19 82       	std	Y+1, r1	; 0x01
    1016:	05 c0       	rjmp	.+10     	; 0x1022 <DIO_readPin+0x18c>
                break;
            default:
            	enu_ErrorState = DIO_E_PARAM_INVALID_PORT_ID;	/* Invalid port id */
    1018:	81 e0       	ldi	r24, 0x01	; 1
    101a:	89 83       	std	Y+1, r24	; 0x01
    101c:	02 c0       	rjmp	.+4      	; 0x1022 <DIO_readPin+0x18c>
                break;
            }
        }
        else
        {
        	enu_ErrorState = DIO_E_PARAM_INVALID_PIN_ID;	/* Invalid pin id */
    101e:	82 e0       	ldi	r24, 0x02	; 2
    1020:	89 83       	std	Y+1, r24	; 0x01
        }
	}
    return enu_ErrorState;
    1022:	89 81       	ldd	r24, Y+1	; 0x01
}
    1024:	27 96       	adiw	r28, 0x07	; 7
    1026:	0f b6       	in	r0, 0x3f	; 63
    1028:	f8 94       	cli
    102a:	de bf       	out	0x3e, r29	; 62
    102c:	0f be       	out	0x3f, r0	; 63
    102e:	cd bf       	out	0x3d, r28	; 61
    1030:	cf 91       	pop	r28
    1032:	df 91       	pop	r29
    1034:	08 95       	ret

00001036 <DIO_TogglePin>:
 * [in/out]		 	None
 *
 * [Returns]:       Error State
 ******************************************************************************/
enuDIO_E_STATE_t DIO_TogglePin(enuDIO_PortId_t enu_portID, enuDIO_PinId_t enu_pinID)
{
    1036:	df 93       	push	r29
    1038:	cf 93       	push	r28
    103a:	00 d0       	rcall	.+0      	; 0x103c <DIO_TogglePin+0x6>
    103c:	00 d0       	rcall	.+0      	; 0x103e <DIO_TogglePin+0x8>
    103e:	0f 92       	push	r0
    1040:	cd b7       	in	r28, 0x3d	; 61
    1042:	de b7       	in	r29, 0x3e	; 62
    1044:	8a 83       	std	Y+2, r24	; 0x02
    1046:	6b 83       	std	Y+3, r22	; 0x03
	enuDIO_E_STATE_t enu_ErrorState = E_NOT_OK;
    1048:	81 e0       	ldi	r24, 0x01	; 1
    104a:	89 83       	std	Y+1, r24	; 0x01

	/* Check if the pointer is NULL pointer or not */
    if ((enu_pinID >= PIN_0) && (enu_pinID <= PIN_7))
    104c:	8b 81       	ldd	r24, Y+3	; 0x03
    104e:	88 30       	cpi	r24, 0x08	; 8
    1050:	08 f0       	brcs	.+2      	; 0x1054 <DIO_TogglePin+0x1e>
    1052:	77 c0       	rjmp	.+238    	; 0x1142 <DIO_TogglePin+0x10c>
    {
        switch (enu_portID)
    1054:	8a 81       	ldd	r24, Y+2	; 0x02
    1056:	28 2f       	mov	r18, r24
    1058:	30 e0       	ldi	r19, 0x00	; 0
    105a:	3d 83       	std	Y+5, r19	; 0x05
    105c:	2c 83       	std	Y+4, r18	; 0x04
    105e:	8c 81       	ldd	r24, Y+4	; 0x04
    1060:	9d 81       	ldd	r25, Y+5	; 0x05
    1062:	81 30       	cpi	r24, 0x01	; 1
    1064:	91 05       	cpc	r25, r1
    1066:	59 f1       	breq	.+86     	; 0x10be <DIO_TogglePin+0x88>
    1068:	2c 81       	ldd	r18, Y+4	; 0x04
    106a:	3d 81       	ldd	r19, Y+5	; 0x05
    106c:	22 30       	cpi	r18, 0x02	; 2
    106e:	31 05       	cpc	r19, r1
    1070:	2c f4       	brge	.+10     	; 0x107c <DIO_TogglePin+0x46>
    1072:	8c 81       	ldd	r24, Y+4	; 0x04
    1074:	9d 81       	ldd	r25, Y+5	; 0x05
    1076:	00 97       	sbiw	r24, 0x00	; 0
    1078:	69 f0       	breq	.+26     	; 0x1094 <DIO_TogglePin+0x5e>
    107a:	60 c0       	rjmp	.+192    	; 0x113c <DIO_TogglePin+0x106>
    107c:	2c 81       	ldd	r18, Y+4	; 0x04
    107e:	3d 81       	ldd	r19, Y+5	; 0x05
    1080:	22 30       	cpi	r18, 0x02	; 2
    1082:	31 05       	cpc	r19, r1
    1084:	89 f1       	breq	.+98     	; 0x10e8 <DIO_TogglePin+0xb2>
    1086:	8c 81       	ldd	r24, Y+4	; 0x04
    1088:	9d 81       	ldd	r25, Y+5	; 0x05
    108a:	83 30       	cpi	r24, 0x03	; 3
    108c:	91 05       	cpc	r25, r1
    108e:	09 f4       	brne	.+2      	; 0x1092 <DIO_TogglePin+0x5c>
    1090:	40 c0       	rjmp	.+128    	; 0x1112 <DIO_TogglePin+0xdc>
    1092:	54 c0       	rjmp	.+168    	; 0x113c <DIO_TogglePin+0x106>
        {
        case DIO_PORTA:
            TOGGLE_BIT(PORTA_DATA_R, enu_pinID);
    1094:	ab e3       	ldi	r26, 0x3B	; 59
    1096:	b0 e0       	ldi	r27, 0x00	; 0
    1098:	eb e3       	ldi	r30, 0x3B	; 59
    109a:	f0 e0       	ldi	r31, 0x00	; 0
    109c:	80 81       	ld	r24, Z
    109e:	48 2f       	mov	r20, r24
    10a0:	8b 81       	ldd	r24, Y+3	; 0x03
    10a2:	28 2f       	mov	r18, r24
    10a4:	30 e0       	ldi	r19, 0x00	; 0
    10a6:	81 e0       	ldi	r24, 0x01	; 1
    10a8:	90 e0       	ldi	r25, 0x00	; 0
    10aa:	02 2e       	mov	r0, r18
    10ac:	02 c0       	rjmp	.+4      	; 0x10b2 <DIO_TogglePin+0x7c>
    10ae:	88 0f       	add	r24, r24
    10b0:	99 1f       	adc	r25, r25
    10b2:	0a 94       	dec	r0
    10b4:	e2 f7       	brpl	.-8      	; 0x10ae <DIO_TogglePin+0x78>
    10b6:	84 27       	eor	r24, r20
    10b8:	8c 93       	st	X, r24
            enu_ErrorState = DIO_E_PARAM_VALID;
    10ba:	19 82       	std	Y+1, r1	; 0x01
    10bc:	44 c0       	rjmp	.+136    	; 0x1146 <DIO_TogglePin+0x110>
            break;
        case DIO_PORTB:
        	TOGGLE_BIT(PORTB_DATA_R, enu_pinID);
    10be:	a8 e3       	ldi	r26, 0x38	; 56
    10c0:	b0 e0       	ldi	r27, 0x00	; 0
    10c2:	e8 e3       	ldi	r30, 0x38	; 56
    10c4:	f0 e0       	ldi	r31, 0x00	; 0
    10c6:	80 81       	ld	r24, Z
    10c8:	48 2f       	mov	r20, r24
    10ca:	8b 81       	ldd	r24, Y+3	; 0x03
    10cc:	28 2f       	mov	r18, r24
    10ce:	30 e0       	ldi	r19, 0x00	; 0
    10d0:	81 e0       	ldi	r24, 0x01	; 1
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	02 2e       	mov	r0, r18
    10d6:	02 c0       	rjmp	.+4      	; 0x10dc <DIO_TogglePin+0xa6>
    10d8:	88 0f       	add	r24, r24
    10da:	99 1f       	adc	r25, r25
    10dc:	0a 94       	dec	r0
    10de:	e2 f7       	brpl	.-8      	; 0x10d8 <DIO_TogglePin+0xa2>
    10e0:	84 27       	eor	r24, r20
    10e2:	8c 93       	st	X, r24
            enu_ErrorState = DIO_E_PARAM_VALID;
    10e4:	19 82       	std	Y+1, r1	; 0x01
    10e6:	2f c0       	rjmp	.+94     	; 0x1146 <DIO_TogglePin+0x110>
            break;
        case DIO_PORTC:
        	TOGGLE_BIT(PORTC_DATA_R, enu_pinID);
    10e8:	a5 e3       	ldi	r26, 0x35	; 53
    10ea:	b0 e0       	ldi	r27, 0x00	; 0
    10ec:	e5 e3       	ldi	r30, 0x35	; 53
    10ee:	f0 e0       	ldi	r31, 0x00	; 0
    10f0:	80 81       	ld	r24, Z
    10f2:	48 2f       	mov	r20, r24
    10f4:	8b 81       	ldd	r24, Y+3	; 0x03
    10f6:	28 2f       	mov	r18, r24
    10f8:	30 e0       	ldi	r19, 0x00	; 0
    10fa:	81 e0       	ldi	r24, 0x01	; 1
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	02 2e       	mov	r0, r18
    1100:	02 c0       	rjmp	.+4      	; 0x1106 <DIO_TogglePin+0xd0>
    1102:	88 0f       	add	r24, r24
    1104:	99 1f       	adc	r25, r25
    1106:	0a 94       	dec	r0
    1108:	e2 f7       	brpl	.-8      	; 0x1102 <DIO_TogglePin+0xcc>
    110a:	84 27       	eor	r24, r20
    110c:	8c 93       	st	X, r24
            enu_ErrorState = DIO_E_PARAM_VALID;
    110e:	19 82       	std	Y+1, r1	; 0x01
    1110:	1a c0       	rjmp	.+52     	; 0x1146 <DIO_TogglePin+0x110>
            break;
        case DIO_PORTD:
        	TOGGLE_BIT(PORTD_DATA_R, enu_pinID);
    1112:	a2 e3       	ldi	r26, 0x32	; 50
    1114:	b0 e0       	ldi	r27, 0x00	; 0
    1116:	e2 e3       	ldi	r30, 0x32	; 50
    1118:	f0 e0       	ldi	r31, 0x00	; 0
    111a:	80 81       	ld	r24, Z
    111c:	48 2f       	mov	r20, r24
    111e:	8b 81       	ldd	r24, Y+3	; 0x03
    1120:	28 2f       	mov	r18, r24
    1122:	30 e0       	ldi	r19, 0x00	; 0
    1124:	81 e0       	ldi	r24, 0x01	; 1
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	02 2e       	mov	r0, r18
    112a:	02 c0       	rjmp	.+4      	; 0x1130 <DIO_TogglePin+0xfa>
    112c:	88 0f       	add	r24, r24
    112e:	99 1f       	adc	r25, r25
    1130:	0a 94       	dec	r0
    1132:	e2 f7       	brpl	.-8      	; 0x112c <DIO_TogglePin+0xf6>
    1134:	84 27       	eor	r24, r20
    1136:	8c 93       	st	X, r24
            enu_ErrorState = DIO_E_PARAM_VALID;
    1138:	19 82       	std	Y+1, r1	; 0x01
    113a:	05 c0       	rjmp	.+10     	; 0x1146 <DIO_TogglePin+0x110>
            break;
        default:
        	enu_ErrorState = E_NOT_OK;	/* Invalid port id */
    113c:	81 e0       	ldi	r24, 0x01	; 1
    113e:	89 83       	std	Y+1, r24	; 0x01
    1140:	02 c0       	rjmp	.+4      	; 0x1146 <DIO_TogglePin+0x110>
            break;
        }
    }
    else
    {
    	enu_ErrorState = DIO_E_PARAM_INVALID_PIN_ID;	/* Invalid pin id */
    1142:	82 e0       	ldi	r24, 0x02	; 2
    1144:	89 83       	std	Y+1, r24	; 0x01
    }
    return enu_ErrorState;
    1146:	89 81       	ldd	r24, Y+1	; 0x01
}
    1148:	0f 90       	pop	r0
    114a:	0f 90       	pop	r0
    114c:	0f 90       	pop	r0
    114e:	0f 90       	pop	r0
    1150:	0f 90       	pop	r0
    1152:	cf 91       	pop	r28
    1154:	df 91       	pop	r29
    1156:	08 95       	ret

00001158 <LCD_CheckStatus>:
/*******************************************************************************
 *                      Interrupt Service Routines                             *
 *******************************************************************************/

void LCD_CheckStatus(void)
{
    1158:	df 93       	push	r29
    115a:	cf 93       	push	r28
    115c:	cd b7       	in	r28, 0x3d	; 61
    115e:	de b7       	in	r29, 0x3e	; 62
	gu8_lcdStatus = TRUE;	/* Rise the LCD Status Flag */
    1160:	81 e0       	ldi	r24, 0x01	; 1
    1162:	80 93 8e 00 	sts	0x008E, r24

	TIMER_stop(TIMER_0);	/* Stop the timer for the next time */
    1166:	80 e0       	ldi	r24, 0x00	; 0
    1168:	0e 94 20 03 	call	0x640	; 0x640 <TIMER_stop>
}
    116c:	cf 91       	pop	r28
    116e:	df 91       	pop	r29
    1170:	08 95       	ret

00001172 <LCD_Init>:
* Parameters (out): None
* Return value: Std_ReturnType (E_OK ,E_NOT_OK)
* Description: Function to Initialize the LCD module
*********************************************************************************/
Std_ReturnType LCD_Init(void)
{
    1172:	df 93       	push	r29
    1174:	cf 93       	push	r28
    1176:	00 d0       	rcall	.+0      	; 0x1178 <LCD_Init+0x6>
    1178:	0f 92       	push	r0
    117a:	cd b7       	in	r28, 0x3d	; 61
    117c:	de b7       	in	r29, 0x3e	; 62
	static uint8_t au8_lcdState = LCD_NOT_INIT;
	uint8_t au8_retValue = E_NOT_OK;
    117e:	81 e0       	ldi	r24, 0x01	; 1
    1180:	89 83       	std	Y+1, r24	; 0x01

	switch(au8_lcdState)
    1182:	80 91 8f 00 	lds	r24, 0x008F
    1186:	28 2f       	mov	r18, r24
    1188:	30 e0       	ldi	r19, 0x00	; 0
    118a:	3b 83       	std	Y+3, r19	; 0x03
    118c:	2a 83       	std	Y+2, r18	; 0x02
    118e:	8a 81       	ldd	r24, Y+2	; 0x02
    1190:	9b 81       	ldd	r25, Y+3	; 0x03
    1192:	82 30       	cpi	r24, 0x02	; 2
    1194:	91 05       	cpc	r25, r1
    1196:	09 f4       	brne	.+2      	; 0x119a <LCD_Init+0x28>
    1198:	4b c0       	rjmp	.+150    	; 0x1230 <LCD_Init+0xbe>
    119a:	2a 81       	ldd	r18, Y+2	; 0x02
    119c:	3b 81       	ldd	r19, Y+3	; 0x03
    119e:	23 30       	cpi	r18, 0x03	; 3
    11a0:	31 05       	cpc	r19, r1
    11a2:	54 f4       	brge	.+20     	; 0x11b8 <LCD_Init+0x46>
    11a4:	8a 81       	ldd	r24, Y+2	; 0x02
    11a6:	9b 81       	ldd	r25, Y+3	; 0x03
    11a8:	00 97       	sbiw	r24, 0x00	; 0
    11aa:	99 f0       	breq	.+38     	; 0x11d2 <LCD_Init+0x60>
    11ac:	2a 81       	ldd	r18, Y+2	; 0x02
    11ae:	3b 81       	ldd	r19, Y+3	; 0x03
    11b0:	21 30       	cpi	r18, 0x01	; 1
    11b2:	31 05       	cpc	r19, r1
    11b4:	81 f1       	breq	.+96     	; 0x1216 <LCD_Init+0xa4>
    11b6:	59 c0       	rjmp	.+178    	; 0x126a <LCD_Init+0xf8>
    11b8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ba:	9b 81       	ldd	r25, Y+3	; 0x03
    11bc:	83 30       	cpi	r24, 0x03	; 3
    11be:	91 05       	cpc	r25, r1
    11c0:	09 f4       	brne	.+2      	; 0x11c4 <LCD_Init+0x52>
    11c2:	43 c0       	rjmp	.+134    	; 0x124a <LCD_Init+0xd8>
    11c4:	2a 81       	ldd	r18, Y+2	; 0x02
    11c6:	3b 81       	ldd	r19, Y+3	; 0x03
    11c8:	24 30       	cpi	r18, 0x04	; 4
    11ca:	31 05       	cpc	r19, r1
    11cc:	09 f4       	brne	.+2      	; 0x11d0 <LCD_Init+0x5e>
    11ce:	4a c0       	rjmp	.+148    	; 0x1264 <LCD_Init+0xf2>
    11d0:	4c c0       	rjmp	.+152    	; 0x126a <LCD_Init+0xf8>
	{

	case LCD_NOT_INIT:
					   TIMER_init(&timer_config);
    11d2:	8b e7       	ldi	r24, 0x7B	; 123
    11d4:	90 e0       	ldi	r25, 0x00	; 0
    11d6:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <TIMER_init>
					   TIMER_setCallBack(LCD_CheckStatus, TIMER_0);
    11da:	8c ea       	ldi	r24, 0xAC	; 172
    11dc:	98 e0       	ldi	r25, 0x08	; 8
    11de:	60 e0       	ldi	r22, 0x00	; 0
    11e0:	0e 94 8c 02 	call	0x518	; 0x518 <TIMER_setCallBack>

					   DIO_setPortDirection(LCD_DATA_PORT, OUTPUT);	/* Configure the data port as output port */
    11e4:	80 e0       	ldi	r24, 0x00	; 0
    11e6:	61 e0       	ldi	r22, 0x01	; 1
    11e8:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <DIO_setPortDirection>
					   DIO_setPinDirection(LCD_CTRL_PORT, RS, OUTPUT);	/* Configure the control pin RS as output pin */
    11ec:	81 e0       	ldi	r24, 0x01	; 1
    11ee:	60 e0       	ldi	r22, 0x00	; 0
    11f0:	41 e0       	ldi	r20, 0x01	; 1
    11f2:	0e 94 68 04 	call	0x8d0	; 0x8d0 <DIO_setPinDirection>
					   DIO_setPinDirection(LCD_CTRL_PORT, RW, OUTPUT);	/* Configure the control pin RW as output pin */
    11f6:	81 e0       	ldi	r24, 0x01	; 1
    11f8:	61 e0       	ldi	r22, 0x01	; 1
    11fa:	41 e0       	ldi	r20, 0x01	; 1
    11fc:	0e 94 68 04 	call	0x8d0	; 0x8d0 <DIO_setPinDirection>
					   DIO_setPinDirection(LCD_CTRL_PORT, E, OUTPUT);	/* Configure the control pin E as output pin  */
    1200:	81 e0       	ldi	r24, 0x01	; 1
    1202:	62 e0       	ldi	r22, 0x02	; 2
    1204:	41 e0       	ldi	r20, 0x01	; 1
    1206:	0e 94 68 04 	call	0x8d0	; 0x8d0 <DIO_setPinDirection>
					   au8_lcdState = LCD_SEND_Eight_BIT_MODE;	/* Update the LCD state */
    120a:	81 e0       	ldi	r24, 0x01	; 1
    120c:	80 93 8f 00 	sts	0x008F, r24
					   au8_retValue = E_NOT_OK;	/* Update the return value */
    1210:	81 e0       	ldi	r24, 0x01	; 1
    1212:	89 83       	std	Y+1, r24	; 0x01
    1214:	2a c0       	rjmp	.+84     	; 0x126a <LCD_Init+0xf8>
					   break;

	case LCD_SEND_Eight_BIT_MODE:

						au8_retValue = LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE);
    1216:	88 e3       	ldi	r24, 0x38	; 56
    1218:	0e 94 3c 09 	call	0x1278	; 0x1278 <LCD_sendCommand>
    121c:	89 83       	std	Y+1, r24	; 0x01
						if(au8_retValue == E_OK)
    121e:	89 81       	ldd	r24, Y+1	; 0x01
    1220:	88 23       	and	r24, r24
    1222:	19 f4       	brne	.+6      	; 0x122a <LCD_Init+0xb8>
						{
							au8_lcdState = LCD_SEND_CURSOR_OFF;	/* Update the LCD state */
    1224:	82 e0       	ldi	r24, 0x02	; 2
    1226:	80 93 8f 00 	sts	0x008F, r24
						}
						au8_retValue = E_NOT_OK; /* Update the return value */
    122a:	81 e0       	ldi	r24, 0x01	; 1
    122c:	89 83       	std	Y+1, r24	; 0x01
    122e:	1d c0       	rjmp	.+58     	; 0x126a <LCD_Init+0xf8>
						break;

	case LCD_SEND_CURSOR_OFF:

						au8_retValue = LCD_sendCommand(CURSOR_OFF);
    1230:	8c e0       	ldi	r24, 0x0C	; 12
    1232:	0e 94 3c 09 	call	0x1278	; 0x1278 <LCD_sendCommand>
    1236:	89 83       	std	Y+1, r24	; 0x01
						if(au8_retValue == E_OK)
    1238:	89 81       	ldd	r24, Y+1	; 0x01
    123a:	88 23       	and	r24, r24
    123c:	19 f4       	brne	.+6      	; 0x1244 <LCD_Init+0xd2>
						{
							au8_lcdState = LCD_SEND_CLR;	/* Update the LCD state */
    123e:	83 e0       	ldi	r24, 0x03	; 3
    1240:	80 93 8f 00 	sts	0x008F, r24
						}
						au8_retValue = E_NOT_OK; /* Update the return value */
    1244:	81 e0       	ldi	r24, 0x01	; 1
    1246:	89 83       	std	Y+1, r24	; 0x01
    1248:	10 c0       	rjmp	.+32     	; 0x126a <LCD_Init+0xf8>
						break;

	case LCD_SEND_CLR:
						au8_retValue = LCD_sendCommand(CLEAR_COMMAND);
    124a:	81 e0       	ldi	r24, 0x01	; 1
    124c:	0e 94 3c 09 	call	0x1278	; 0x1278 <LCD_sendCommand>
    1250:	89 83       	std	Y+1, r24	; 0x01
						if(au8_retValue == E_OK)
    1252:	89 81       	ldd	r24, Y+1	; 0x01
    1254:	88 23       	and	r24, r24
    1256:	19 f4       	brne	.+6      	; 0x125e <LCD_Init+0xec>
						{
							au8_lcdState = LCD_INIT;	/* Update the LCD state */
    1258:	84 e0       	ldi	r24, 0x04	; 4
    125a:	80 93 8f 00 	sts	0x008F, r24
						}
						au8_retValue = E_NOT_OK; /* Update the return value */
    125e:	81 e0       	ldi	r24, 0x01	; 1
    1260:	89 83       	std	Y+1, r24	; 0x01
    1262:	03 c0       	rjmp	.+6      	; 0x126a <LCD_Init+0xf8>
						break;

	case LCD_INIT: 		au8_lcdState = LCD_NOT_INIT;	/* Reset the LCD state */
    1264:	10 92 8f 00 	sts	0x008F, r1
						au8_retValue = E_OK; /* Update the return value */
    1268:	19 82       	std	Y+1, r1	; 0x01
						break;
	}
	return au8_retValue;	/* Return the status of the LCD (E_OK, E_NOT_OK) */
    126a:	89 81       	ldd	r24, Y+1	; 0x01
}
    126c:	0f 90       	pop	r0
    126e:	0f 90       	pop	r0
    1270:	0f 90       	pop	r0
    1272:	cf 91       	pop	r28
    1274:	df 91       	pop	r29
    1276:	08 95       	ret

00001278 <LCD_sendCommand>:
* Parameters (out): None
* Return value: Std_ReturnType (E_OK ,E_NOT_OK)
* Description: Function to send command to the LCD
************************************************************************************/
Std_ReturnType LCD_sendCommand(uint8_t au8_command)
{
    1278:	df 93       	push	r29
    127a:	cf 93       	push	r28
    127c:	00 d0       	rcall	.+0      	; 0x127e <LCD_sendCommand+0x6>
    127e:	00 d0       	rcall	.+0      	; 0x1280 <LCD_sendCommand+0x8>
    1280:	cd b7       	in	r28, 0x3d	; 61
    1282:	de b7       	in	r29, 0x3e	; 62
    1284:	8a 83       	std	Y+2, r24	; 0x02
	static uint8_t au8_lcdState = LCD_SEND_MODE;
	uint8_t au8_retValue = E_NOT_OK;
    1286:	81 e0       	ldi	r24, 0x01	; 1
    1288:	89 83       	std	Y+1, r24	; 0x01

	switch(au8_lcdState)
    128a:	80 91 90 00 	lds	r24, 0x0090
    128e:	28 2f       	mov	r18, r24
    1290:	30 e0       	ldi	r19, 0x00	; 0
    1292:	3c 83       	std	Y+4, r19	; 0x04
    1294:	2b 83       	std	Y+3, r18	; 0x03
    1296:	8b 81       	ldd	r24, Y+3	; 0x03
    1298:	9c 81       	ldd	r25, Y+4	; 0x04
    129a:	82 30       	cpi	r24, 0x02	; 2
    129c:	91 05       	cpc	r25, r1
    129e:	09 f4       	brne	.+2      	; 0x12a2 <LCD_sendCommand+0x2a>
    12a0:	41 c0       	rjmp	.+130    	; 0x1324 <LCD_sendCommand+0xac>
    12a2:	2b 81       	ldd	r18, Y+3	; 0x03
    12a4:	3c 81       	ldd	r19, Y+4	; 0x04
    12a6:	23 30       	cpi	r18, 0x03	; 3
    12a8:	31 05       	cpc	r19, r1
    12aa:	54 f4       	brge	.+20     	; 0x12c0 <LCD_sendCommand+0x48>
    12ac:	8b 81       	ldd	r24, Y+3	; 0x03
    12ae:	9c 81       	ldd	r25, Y+4	; 0x04
    12b0:	00 97       	sbiw	r24, 0x00	; 0
    12b2:	99 f0       	breq	.+38     	; 0x12da <LCD_sendCommand+0x62>
    12b4:	2b 81       	ldd	r18, Y+3	; 0x03
    12b6:	3c 81       	ldd	r19, Y+4	; 0x04
    12b8:	21 30       	cpi	r18, 0x01	; 1
    12ba:	31 05       	cpc	r19, r1
    12bc:	01 f1       	breq	.+64     	; 0x12fe <LCD_sendCommand+0x86>
    12be:	60 c0       	rjmp	.+192    	; 0x1380 <LCD_sendCommand+0x108>
    12c0:	8b 81       	ldd	r24, Y+3	; 0x03
    12c2:	9c 81       	ldd	r25, Y+4	; 0x04
    12c4:	83 30       	cpi	r24, 0x03	; 3
    12c6:	91 05       	cpc	r25, r1
    12c8:	09 f4       	brne	.+2      	; 0x12cc <LCD_sendCommand+0x54>
    12ca:	3e c0       	rjmp	.+124    	; 0x1348 <LCD_sendCommand+0xd0>
    12cc:	2b 81       	ldd	r18, Y+3	; 0x03
    12ce:	3c 81       	ldd	r19, Y+4	; 0x04
    12d0:	24 30       	cpi	r18, 0x04	; 4
    12d2:	31 05       	cpc	r19, r1
    12d4:	09 f4       	brne	.+2      	; 0x12d8 <LCD_sendCommand+0x60>
    12d6:	4b c0       	rjmp	.+150    	; 0x136e <LCD_sendCommand+0xf6>
    12d8:	53 c0       	rjmp	.+166    	; 0x1380 <LCD_sendCommand+0x108>
	{
	case LCD_SEND_MODE:
							DIO_writePin(LCD_CTRL_PORT, RS, LOW);	/* Instruction Mode RS = 0 */
    12da:	81 e0       	ldi	r24, 0x01	; 1
    12dc:	60 e0       	ldi	r22, 0x00	; 0
    12de:	40 e0       	ldi	r20, 0x00	; 0
    12e0:	0e 94 d1 05 	call	0xba2	; 0xba2 <DIO_writePin>
							DIO_writePin(LCD_CTRL_PORT, RW, LOW);	/* Write data to LCD so RW = 0 */
    12e4:	81 e0       	ldi	r24, 0x01	; 1
    12e6:	61 e0       	ldi	r22, 0x01	; 1
    12e8:	40 e0       	ldi	r20, 0x00	; 0
    12ea:	0e 94 d1 05 	call	0xba2	; 0xba2 <DIO_writePin>
							TIMER_start(TIMER_0, T0_F_CPU_1024);	/* Start timer */
    12ee:	80 e0       	ldi	r24, 0x00	; 0
    12f0:	65 e0       	ldi	r22, 0x05	; 5
    12f2:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <TIMER_start>
							au8_lcdState = LCD_WAIT_SEND_MODE;	/* Update the command state */
    12f6:	81 e0       	ldi	r24, 0x01	; 1
    12f8:	80 93 90 00 	sts	0x0090, r24
    12fc:	41 c0       	rjmp	.+130    	; 0x1380 <LCD_sendCommand+0x108>
							break;

	case LCD_WAIT_SEND_MODE:
							if(gu8_lcdStatus == TRUE)
    12fe:	80 91 8e 00 	lds	r24, 0x008E
    1302:	81 30       	cpi	r24, 0x01	; 1
    1304:	e9 f5       	brne	.+122    	; 0x1380 <LCD_sendCommand+0x108>
							{
								DIO_writePin(LCD_CTRL_PORT, E, HIGH);	/* Enable LCD E = 1 */
    1306:	81 e0       	ldi	r24, 0x01	; 1
    1308:	62 e0       	ldi	r22, 0x02	; 2
    130a:	41 e0       	ldi	r20, 0x01	; 1
    130c:	0e 94 d1 05 	call	0xba2	; 0xba2 <DIO_writePin>
								gu8_lcdStatus = FALSE;	/* Clear the status flag for the next time */
    1310:	10 92 8e 00 	sts	0x008E, r1
								TIMER_start(TIMER_0, T0_F_CPU_1024);	/* Start the timer */
    1314:	80 e0       	ldi	r24, 0x00	; 0
    1316:	65 e0       	ldi	r22, 0x05	; 5
    1318:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <TIMER_start>
								au8_lcdState = LCD_SEND_DATA;	/* Update the command state */
    131c:	82 e0       	ldi	r24, 0x02	; 2
    131e:	80 93 90 00 	sts	0x0090, r24
    1322:	2e c0       	rjmp	.+92     	; 0x1380 <LCD_sendCommand+0x108>
							}
							break;

	case LCD_SEND_DATA:
							if(gu8_lcdStatus == TRUE)
    1324:	80 91 8e 00 	lds	r24, 0x008E
    1328:	81 30       	cpi	r24, 0x01	; 1
    132a:	51 f5       	brne	.+84     	; 0x1380 <LCD_sendCommand+0x108>
							{
								LCD_DATA_OUTPUT = au8_command;	/* Out the required command to the data bus D0 --> D7 */
    132c:	eb e3       	ldi	r30, 0x3B	; 59
    132e:	f0 e0       	ldi	r31, 0x00	; 0
    1330:	8a 81       	ldd	r24, Y+2	; 0x02
    1332:	80 83       	st	Z, r24
								gu8_lcdStatus = FALSE;	/* Clear the status flag for the next time */
    1334:	10 92 8e 00 	sts	0x008E, r1
								TIMER_start(TIMER_0,T0_F_CPU_1024);	/* Start the timer */
    1338:	80 e0       	ldi	r24, 0x00	; 0
    133a:	65 e0       	ldi	r22, 0x05	; 5
    133c:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <TIMER_start>
								au8_lcdState = LCD_WAIT_SEND_DATA;	/* Update the command state */
    1340:	83 e0       	ldi	r24, 0x03	; 3
    1342:	80 93 90 00 	sts	0x0090, r24
    1346:	1c c0       	rjmp	.+56     	; 0x1380 <LCD_sendCommand+0x108>
							}
							break;

	case LCD_WAIT_SEND_DATA:
							if(gu8_lcdStatus == TRUE)
    1348:	80 91 8e 00 	lds	r24, 0x008E
    134c:	81 30       	cpi	r24, 0x01	; 1
    134e:	c1 f4       	brne	.+48     	; 0x1380 <LCD_sendCommand+0x108>
							{
								DIO_writePin(LCD_CTRL_PORT, E, LOW);
    1350:	81 e0       	ldi	r24, 0x01	; 1
    1352:	62 e0       	ldi	r22, 0x02	; 2
    1354:	40 e0       	ldi	r20, 0x00	; 0
    1356:	0e 94 d1 05 	call	0xba2	; 0xba2 <DIO_writePin>
								gu8_lcdStatus = FALSE;	/* Clear the status flag for the next time */
    135a:	10 92 8e 00 	sts	0x008E, r1
								TIMER_start(TIMER_0, T0_F_CPU_1024);	/* Start the timer */
    135e:	80 e0       	ldi	r24, 0x00	; 0
    1360:	65 e0       	ldi	r22, 0x05	; 5
    1362:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <TIMER_start>
								au8_lcdState = LCD_FINISH;	/* Update the command state */
    1366:	84 e0       	ldi	r24, 0x04	; 4
    1368:	80 93 90 00 	sts	0x0090, r24
    136c:	09 c0       	rjmp	.+18     	; 0x1380 <LCD_sendCommand+0x108>
							}
							break;

	case LCD_FINISH:
							if(gu8_lcdStatus == TRUE)
    136e:	80 91 8e 00 	lds	r24, 0x008E
    1372:	81 30       	cpi	r24, 0x01	; 1
    1374:	29 f4       	brne	.+10     	; 0x1380 <LCD_sendCommand+0x108>
							{
								gu8_lcdStatus = FALSE;	/* Clear the status flag for the next time */
    1376:	10 92 8e 00 	sts	0x008E, r1
								au8_lcdState = LCD_SEND_MODE;	/* Reset the command state */
    137a:	10 92 90 00 	sts	0x0090, r1
								au8_retValue = E_OK;	/* Update the return value */
    137e:	19 82       	std	Y+1, r1	; 0x01
							}
							break;
	}
	return au8_retValue;
    1380:	89 81       	ldd	r24, Y+1	; 0x01
}
    1382:	0f 90       	pop	r0
    1384:	0f 90       	pop	r0
    1386:	0f 90       	pop	r0
    1388:	0f 90       	pop	r0
    138a:	cf 91       	pop	r28
    138c:	df 91       	pop	r29
    138e:	08 95       	ret

00001390 <LCD_displayCharacter>:
* Parameters (out): None
* Return value: Std_ReturnType (E_OK ,E_NOT_OK)
* Description: Function to send data to the LCD
************************************************************************************/
Std_ReturnType LCD_displayCharacter(uint8_t au8_data)
{
    1390:	df 93       	push	r29
    1392:	cf 93       	push	r28
    1394:	00 d0       	rcall	.+0      	; 0x1396 <LCD_displayCharacter+0x6>
    1396:	00 d0       	rcall	.+0      	; 0x1398 <LCD_displayCharacter+0x8>
    1398:	cd b7       	in	r28, 0x3d	; 61
    139a:	de b7       	in	r29, 0x3e	; 62
    139c:	8a 83       	std	Y+2, r24	; 0x02
	static uint8_t au8_lcd_DisplayStatus = LCD_SEND_MODE;
	uint8_t au8_retValue = E_NOT_OK;
    139e:	81 e0       	ldi	r24, 0x01	; 1
    13a0:	89 83       	std	Y+1, r24	; 0x01

	switch(au8_lcd_DisplayStatus)
    13a2:	80 91 91 00 	lds	r24, 0x0091
    13a6:	28 2f       	mov	r18, r24
    13a8:	30 e0       	ldi	r19, 0x00	; 0
    13aa:	3c 83       	std	Y+4, r19	; 0x04
    13ac:	2b 83       	std	Y+3, r18	; 0x03
    13ae:	8b 81       	ldd	r24, Y+3	; 0x03
    13b0:	9c 81       	ldd	r25, Y+4	; 0x04
    13b2:	82 30       	cpi	r24, 0x02	; 2
    13b4:	91 05       	cpc	r25, r1
    13b6:	09 f4       	brne	.+2      	; 0x13ba <LCD_displayCharacter+0x2a>
    13b8:	43 c0       	rjmp	.+134    	; 0x1440 <LCD_displayCharacter+0xb0>
    13ba:	2b 81       	ldd	r18, Y+3	; 0x03
    13bc:	3c 81       	ldd	r19, Y+4	; 0x04
    13be:	23 30       	cpi	r18, 0x03	; 3
    13c0:	31 05       	cpc	r19, r1
    13c2:	54 f4       	brge	.+20     	; 0x13d8 <LCD_displayCharacter+0x48>
    13c4:	8b 81       	ldd	r24, Y+3	; 0x03
    13c6:	9c 81       	ldd	r25, Y+4	; 0x04
    13c8:	00 97       	sbiw	r24, 0x00	; 0
    13ca:	99 f0       	breq	.+38     	; 0x13f2 <LCD_displayCharacter+0x62>
    13cc:	2b 81       	ldd	r18, Y+3	; 0x03
    13ce:	3c 81       	ldd	r19, Y+4	; 0x04
    13d0:	21 30       	cpi	r18, 0x01	; 1
    13d2:	31 05       	cpc	r19, r1
    13d4:	11 f1       	breq	.+68     	; 0x141a <LCD_displayCharacter+0x8a>
    13d6:	62 c0       	rjmp	.+196    	; 0x149c <LCD_displayCharacter+0x10c>
    13d8:	8b 81       	ldd	r24, Y+3	; 0x03
    13da:	9c 81       	ldd	r25, Y+4	; 0x04
    13dc:	83 30       	cpi	r24, 0x03	; 3
    13de:	91 05       	cpc	r25, r1
    13e0:	09 f4       	brne	.+2      	; 0x13e4 <LCD_displayCharacter+0x54>
    13e2:	40 c0       	rjmp	.+128    	; 0x1464 <LCD_displayCharacter+0xd4>
    13e4:	2b 81       	ldd	r18, Y+3	; 0x03
    13e6:	3c 81       	ldd	r19, Y+4	; 0x04
    13e8:	24 30       	cpi	r18, 0x04	; 4
    13ea:	31 05       	cpc	r19, r1
    13ec:	09 f4       	brne	.+2      	; 0x13f0 <LCD_displayCharacter+0x60>
    13ee:	4d c0       	rjmp	.+154    	; 0x148a <LCD_displayCharacter+0xfa>
    13f0:	55 c0       	rjmp	.+170    	; 0x149c <LCD_displayCharacter+0x10c>
	{
	case LCD_SEND_MODE:
							DIO_writePin(LCD_CTRL_PORT, RS, HIGH);/* Data Mode RS = 1 */
    13f2:	81 e0       	ldi	r24, 0x01	; 1
    13f4:	60 e0       	ldi	r22, 0x00	; 0
    13f6:	41 e0       	ldi	r20, 0x01	; 1
    13f8:	0e 94 d1 05 	call	0xba2	; 0xba2 <DIO_writePin>
							DIO_writePin(LCD_CTRL_PORT, RW, LOW);/* Write data to LCD so RW = 0 */
    13fc:	81 e0       	ldi	r24, 0x01	; 1
    13fe:	61 e0       	ldi	r22, 0x01	; 1
    1400:	40 e0       	ldi	r20, 0x00	; 0
    1402:	0e 94 d1 05 	call	0xba2	; 0xba2 <DIO_writePin>
							gu8_lcdStatus = FALSE;	/* Clear the status flag for the next time */
    1406:	10 92 8e 00 	sts	0x008E, r1
							TIMER_start(TIMER_0, T0_F_CPU_1024);	/* Start the timer */
    140a:	80 e0       	ldi	r24, 0x00	; 0
    140c:	65 e0       	ldi	r22, 0x05	; 5
    140e:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <TIMER_start>
							au8_lcd_DisplayStatus = LCD_WAIT_SEND_MODE;/* Update the character "Data" state */
    1412:	81 e0       	ldi	r24, 0x01	; 1
    1414:	80 93 91 00 	sts	0x0091, r24
    1418:	41 c0       	rjmp	.+130    	; 0x149c <LCD_displayCharacter+0x10c>
							break;

	case LCD_WAIT_SEND_MODE:
							if(gu8_lcdStatus == TRUE)
    141a:	80 91 8e 00 	lds	r24, 0x008E
    141e:	81 30       	cpi	r24, 0x01	; 1
    1420:	e9 f5       	brne	.+122    	; 0x149c <LCD_displayCharacter+0x10c>
							{
								DIO_writePin(LCD_CTRL_PORT, E, HIGH); /* Enable LCD E = 1 */
    1422:	81 e0       	ldi	r24, 0x01	; 1
    1424:	62 e0       	ldi	r22, 0x02	; 2
    1426:	41 e0       	ldi	r20, 0x01	; 1
    1428:	0e 94 d1 05 	call	0xba2	; 0xba2 <DIO_writePin>
								gu8_lcdStatus = FALSE;	/* Clear the status flag for the next time */
    142c:	10 92 8e 00 	sts	0x008E, r1
								TIMER_start(TIMER_0, T0_F_CPU_1024);	/* Start the timer */
    1430:	80 e0       	ldi	r24, 0x00	; 0
    1432:	65 e0       	ldi	r22, 0x05	; 5
    1434:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <TIMER_start>
								au8_lcd_DisplayStatus = LCD_SEND_DATA;/* Update the character "Data" state */
    1438:	82 e0       	ldi	r24, 0x02	; 2
    143a:	80 93 91 00 	sts	0x0091, r24
    143e:	2e c0       	rjmp	.+92     	; 0x149c <LCD_displayCharacter+0x10c>
							}
							break;

	case LCD_SEND_DATA :
							if(gu8_lcdStatus == TRUE)
    1440:	80 91 8e 00 	lds	r24, 0x008E
    1444:	81 30       	cpi	r24, 0x01	; 1
    1446:	51 f5       	brne	.+84     	; 0x149c <LCD_displayCharacter+0x10c>
							{
								LCD_DATA_OUTPUT = au8_data; /* Out the required data char to the data bus D0 --> D7 */
    1448:	eb e3       	ldi	r30, 0x3B	; 59
    144a:	f0 e0       	ldi	r31, 0x00	; 0
    144c:	8a 81       	ldd	r24, Y+2	; 0x02
    144e:	80 83       	st	Z, r24
								gu8_lcdStatus = FALSE;	/* Clear the status flag for the next time */
    1450:	10 92 8e 00 	sts	0x008E, r1
								TIMER_start(TIMER_0, T0_F_CPU_1024);	/* Start the timer */
    1454:	80 e0       	ldi	r24, 0x00	; 0
    1456:	65 e0       	ldi	r22, 0x05	; 5
    1458:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <TIMER_start>
								au8_lcd_DisplayStatus = LCD_WAIT_SEND_DATA;/* Update the character "Data" state */
    145c:	83 e0       	ldi	r24, 0x03	; 3
    145e:	80 93 91 00 	sts	0x0091, r24
    1462:	1c c0       	rjmp	.+56     	; 0x149c <LCD_displayCharacter+0x10c>
							}
							break;

	case LCD_WAIT_SEND_DATA:
							if(gu8_lcdStatus == TRUE)
    1464:	80 91 8e 00 	lds	r24, 0x008E
    1468:	81 30       	cpi	r24, 0x01	; 1
    146a:	c1 f4       	brne	.+48     	; 0x149c <LCD_displayCharacter+0x10c>
							{
								DIO_writePin(LCD_CTRL_PORT, E, LOW); /* Disable LCD E = 0 */
    146c:	81 e0       	ldi	r24, 0x01	; 1
    146e:	62 e0       	ldi	r22, 0x02	; 2
    1470:	40 e0       	ldi	r20, 0x00	; 0
    1472:	0e 94 d1 05 	call	0xba2	; 0xba2 <DIO_writePin>
								gu8_lcdStatus = FALSE;	/* Clear the status flag for the next time */
    1476:	10 92 8e 00 	sts	0x008E, r1
								TIMER_start(TIMER_0, T0_F_CPU_1024);	/* Start the timer */
    147a:	80 e0       	ldi	r24, 0x00	; 0
    147c:	65 e0       	ldi	r22, 0x05	; 5
    147e:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <TIMER_start>
								au8_lcd_DisplayStatus = LCD_FINISH;/* Update the character "Data" state */
    1482:	84 e0       	ldi	r24, 0x04	; 4
    1484:	80 93 91 00 	sts	0x0091, r24
    1488:	09 c0       	rjmp	.+18     	; 0x149c <LCD_displayCharacter+0x10c>
							}
							break;

	case LCD_FINISH:
							if(gu8_lcdStatus == TRUE)
    148a:	80 91 8e 00 	lds	r24, 0x008E
    148e:	81 30       	cpi	r24, 0x01	; 1
    1490:	29 f4       	brne	.+10     	; 0x149c <LCD_displayCharacter+0x10c>
							{
								gu8_lcdStatus = FALSE;	/* Clear the status flag for the next time */
    1492:	10 92 8e 00 	sts	0x008E, r1
								au8_lcd_DisplayStatus = LCD_SEND_MODE;	/* Reset the character "Data" state */
    1496:	10 92 91 00 	sts	0x0091, r1
								au8_retValue = E_OK;
    149a:	19 82       	std	Y+1, r1	; 0x01
							}
							break;
	}
	return au8_retValue;
    149c:	89 81       	ldd	r24, Y+1	; 0x01
}
    149e:	0f 90       	pop	r0
    14a0:	0f 90       	pop	r0
    14a2:	0f 90       	pop	r0
    14a4:	0f 90       	pop	r0
    14a6:	cf 91       	pop	r28
    14a8:	df 91       	pop	r29
    14aa:	08 95       	ret

000014ac <LCD_displayString>:
* Parameters (out): None
* Return value: None
* Description: Function to display string on the LCD
************************************************************************************/
void LCD_displayString(const uint8_t * Str)
{
    14ac:	df 93       	push	r29
    14ae:	cf 93       	push	r28
    14b0:	00 d0       	rcall	.+0      	; 0x14b2 <LCD_displayString+0x6>
    14b2:	0f 92       	push	r0
    14b4:	cd b7       	in	r28, 0x3d	; 61
    14b6:	de b7       	in	r29, 0x3e	; 62
    14b8:	9b 83       	std	Y+3, r25	; 0x03
    14ba:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t au8_index = 0;
    14bc:	19 82       	std	Y+1, r1	; 0x01
    14be:	10 c0       	rjmp	.+32     	; 0x14e0 <LCD_displayString+0x34>

	while(Str[au8_index] != '\0')
	{
		if(E_OK == LCD_displayCharacter(Str[au8_index]))
    14c0:	89 81       	ldd	r24, Y+1	; 0x01
    14c2:	28 2f       	mov	r18, r24
    14c4:	30 e0       	ldi	r19, 0x00	; 0
    14c6:	8a 81       	ldd	r24, Y+2	; 0x02
    14c8:	9b 81       	ldd	r25, Y+3	; 0x03
    14ca:	fc 01       	movw	r30, r24
    14cc:	e2 0f       	add	r30, r18
    14ce:	f3 1f       	adc	r31, r19
    14d0:	80 81       	ld	r24, Z
    14d2:	0e 94 c8 09 	call	0x1390	; 0x1390 <LCD_displayCharacter>
    14d6:	88 23       	and	r24, r24
    14d8:	19 f4       	brne	.+6      	; 0x14e0 <LCD_displayString+0x34>
		{
			++au8_index;
    14da:	89 81       	ldd	r24, Y+1	; 0x01
    14dc:	8f 5f       	subi	r24, 0xFF	; 255
    14de:	89 83       	std	Y+1, r24	; 0x01
************************************************************************************/
void LCD_displayString(const uint8_t * Str)
{
	uint8_t au8_index = 0;

	while(Str[au8_index] != '\0')
    14e0:	89 81       	ldd	r24, Y+1	; 0x01
    14e2:	28 2f       	mov	r18, r24
    14e4:	30 e0       	ldi	r19, 0x00	; 0
    14e6:	8a 81       	ldd	r24, Y+2	; 0x02
    14e8:	9b 81       	ldd	r25, Y+3	; 0x03
    14ea:	fc 01       	movw	r30, r24
    14ec:	e2 0f       	add	r30, r18
    14ee:	f3 1f       	adc	r31, r19
    14f0:	80 81       	ld	r24, Z
    14f2:	88 23       	and	r24, r24
    14f4:	29 f7       	brne	.-54     	; 0x14c0 <LCD_displayString+0x14>
		if(E_OK == LCD_displayCharacter(Str[au8_index]))
		{
			++au8_index;
		}
	}
}
    14f6:	0f 90       	pop	r0
    14f8:	0f 90       	pop	r0
    14fa:	0f 90       	pop	r0
    14fc:	cf 91       	pop	r28
    14fe:	df 91       	pop	r29
    1500:	08 95       	ret

00001502 <LCD_goToRowColumn>:
* Parameters (out): None
* Return value: Std_ReturnType
* Description: Function to go to on certain column and row
************************************************************************************/
Std_ReturnType LCD_goToRowColumn(uint8_t row, uint8_t col)
{
    1502:	df 93       	push	r29
    1504:	cf 93       	push	r28
    1506:	cd b7       	in	r28, 0x3d	; 61
    1508:	de b7       	in	r29, 0x3e	; 62
    150a:	27 97       	sbiw	r28, 0x07	; 7
    150c:	0f b6       	in	r0, 0x3f	; 63
    150e:	f8 94       	cli
    1510:	de bf       	out	0x3e, r29	; 62
    1512:	0f be       	out	0x3f, r0	; 63
    1514:	cd bf       	out	0x3d, r28	; 61
    1516:	8c 83       	std	Y+4, r24	; 0x04
    1518:	6d 83       	std	Y+5, r22	; 0x05
	uint8_t Address;
	uint16_t retValue = E_NOT_OK;
    151a:	81 e0       	ldi	r24, 0x01	; 1
    151c:	90 e0       	ldi	r25, 0x00	; 0
    151e:	9a 83       	std	Y+2, r25	; 0x02
    1520:	89 83       	std	Y+1, r24	; 0x01

	/* First of all calculate the required address */
	switch(row)
    1522:	8c 81       	ldd	r24, Y+4	; 0x04
    1524:	28 2f       	mov	r18, r24
    1526:	30 e0       	ldi	r19, 0x00	; 0
    1528:	3f 83       	std	Y+7, r19	; 0x07
    152a:	2e 83       	std	Y+6, r18	; 0x06
    152c:	8e 81       	ldd	r24, Y+6	; 0x06
    152e:	9f 81       	ldd	r25, Y+7	; 0x07
    1530:	81 30       	cpi	r24, 0x01	; 1
    1532:	91 05       	cpc	r25, r1
    1534:	c1 f0       	breq	.+48     	; 0x1566 <LCD_goToRowColumn+0x64>
    1536:	2e 81       	ldd	r18, Y+6	; 0x06
    1538:	3f 81       	ldd	r19, Y+7	; 0x07
    153a:	22 30       	cpi	r18, 0x02	; 2
    153c:	31 05       	cpc	r19, r1
    153e:	2c f4       	brge	.+10     	; 0x154a <LCD_goToRowColumn+0x48>
    1540:	8e 81       	ldd	r24, Y+6	; 0x06
    1542:	9f 81       	ldd	r25, Y+7	; 0x07
    1544:	00 97       	sbiw	r24, 0x00	; 0
    1546:	61 f0       	breq	.+24     	; 0x1560 <LCD_goToRowColumn+0x5e>
    1548:	19 c0       	rjmp	.+50     	; 0x157c <LCD_goToRowColumn+0x7a>
    154a:	2e 81       	ldd	r18, Y+6	; 0x06
    154c:	3f 81       	ldd	r19, Y+7	; 0x07
    154e:	22 30       	cpi	r18, 0x02	; 2
    1550:	31 05       	cpc	r19, r1
    1552:	69 f0       	breq	.+26     	; 0x156e <LCD_goToRowColumn+0x6c>
    1554:	8e 81       	ldd	r24, Y+6	; 0x06
    1556:	9f 81       	ldd	r25, Y+7	; 0x07
    1558:	83 30       	cpi	r24, 0x03	; 3
    155a:	91 05       	cpc	r25, r1
    155c:	61 f0       	breq	.+24     	; 0x1576 <LCD_goToRowColumn+0x74>
    155e:	0e c0       	rjmp	.+28     	; 0x157c <LCD_goToRowColumn+0x7a>
	{
		case 0:
				Address = col;
    1560:	8d 81       	ldd	r24, Y+5	; 0x05
    1562:	8b 83       	std	Y+3, r24	; 0x03
    1564:	0b c0       	rjmp	.+22     	; 0x157c <LCD_goToRowColumn+0x7a>
				break;
		case 1:
				Address = col+FIRST_ROW;
    1566:	8d 81       	ldd	r24, Y+5	; 0x05
    1568:	80 5c       	subi	r24, 0xC0	; 192
    156a:	8b 83       	std	Y+3, r24	; 0x03
    156c:	07 c0       	rjmp	.+14     	; 0x157c <LCD_goToRowColumn+0x7a>
				break;
		case 2:
				Address = col+SECOND_ROW;
    156e:	8d 81       	ldd	r24, Y+5	; 0x05
    1570:	80 5f       	subi	r24, 0xF0	; 240
    1572:	8b 83       	std	Y+3, r24	; 0x03
    1574:	03 c0       	rjmp	.+6      	; 0x157c <LCD_goToRowColumn+0x7a>
				break;
		case 3:
				Address = col+THIRD_ROW;
    1576:	8d 81       	ldd	r24, Y+5	; 0x05
    1578:	80 5b       	subi	r24, 0xB0	; 176
    157a:	8b 83       	std	Y+3, r24	; 0x03
	}
	/*
	 * To write to a specific address in the LCD
	 * we need to apply the corresponding command 0b10000000+Address
	 */
	retValue = LCD_sendCommand(Address | SET_CURSOR_LOCATION);
    157c:	8b 81       	ldd	r24, Y+3	; 0x03
    157e:	80 68       	ori	r24, 0x80	; 128
    1580:	0e 94 3c 09 	call	0x1278	; 0x1278 <LCD_sendCommand>
    1584:	88 2f       	mov	r24, r24
    1586:	90 e0       	ldi	r25, 0x00	; 0
    1588:	9a 83       	std	Y+2, r25	; 0x02
    158a:	89 83       	std	Y+1, r24	; 0x01

	if(retValue == E_OK)
    158c:	89 81       	ldd	r24, Y+1	; 0x01
    158e:	9a 81       	ldd	r25, Y+2	; 0x02
    1590:	00 97       	sbiw	r24, 0x00	; 0
    1592:	11 f4       	brne	.+4      	; 0x1598 <LCD_goToRowColumn+0x96>
	{
		retValue = E_OK;
    1594:	1a 82       	std	Y+2, r1	; 0x02
    1596:	19 82       	std	Y+1, r1	; 0x01
	}

	return retValue;
    1598:	89 81       	ldd	r24, Y+1	; 0x01
}
    159a:	27 96       	adiw	r28, 0x07	; 7
    159c:	0f b6       	in	r0, 0x3f	; 63
    159e:	f8 94       	cli
    15a0:	de bf       	out	0x3e, r29	; 62
    15a2:	0f be       	out	0x3f, r0	; 63
    15a4:	cd bf       	out	0x3d, r28	; 61
    15a6:	cf 91       	pop	r28
    15a8:	df 91       	pop	r29
    15aa:	08 95       	ret

000015ac <LCD_displayStringRowColumn>:
* Parameters (out): None
* Return value: Std_ReturnType
* Description: Function to display a string on certain column and row
************************************************************************************/
Std_ReturnType LCD_displayStringRowColumn(uint8_t row, uint8_t col, const char * Str)
{
    15ac:	df 93       	push	r29
    15ae:	cf 93       	push	r28
    15b0:	00 d0       	rcall	.+0      	; 0x15b2 <LCD_displayStringRowColumn+0x6>
    15b2:	00 d0       	rcall	.+0      	; 0x15b4 <LCD_displayStringRowColumn+0x8>
    15b4:	00 d0       	rcall	.+0      	; 0x15b6 <LCD_displayStringRowColumn+0xa>
    15b6:	cd b7       	in	r28, 0x3d	; 61
    15b8:	de b7       	in	r29, 0x3e	; 62
    15ba:	8b 83       	std	Y+3, r24	; 0x03
    15bc:	6c 83       	std	Y+4, r22	; 0x04
    15be:	5e 83       	std	Y+6, r21	; 0x06
    15c0:	4d 83       	std	Y+5, r20	; 0x05
	uint16_t retValue = E_NOT_OK;
    15c2:	81 e0       	ldi	r24, 0x01	; 1
    15c4:	90 e0       	ldi	r25, 0x00	; 0
    15c6:	9a 83       	std	Y+2, r25	; 0x02
    15c8:	89 83       	std	Y+1, r24	; 0x01

	/* Go to to the required LCD position */
	retValue = LCD_goToRowColumn(row,col);
    15ca:	8b 81       	ldd	r24, Y+3	; 0x03
    15cc:	6c 81       	ldd	r22, Y+4	; 0x04
    15ce:	0e 94 81 0a 	call	0x1502	; 0x1502 <LCD_goToRowColumn>
    15d2:	88 2f       	mov	r24, r24
    15d4:	90 e0       	ldi	r25, 0x00	; 0
    15d6:	9a 83       	std	Y+2, r25	; 0x02
    15d8:	89 83       	std	Y+1, r24	; 0x01

	if(retValue == E_OK)
    15da:	89 81       	ldd	r24, Y+1	; 0x01
    15dc:	9a 81       	ldd	r25, Y+2	; 0x02
    15de:	00 97       	sbiw	r24, 0x00	; 0
    15e0:	31 f4       	brne	.+12     	; 0x15ee <LCD_displayStringRowColumn+0x42>
	{
		LCD_displayString(Str); /* Display the string */
    15e2:	8d 81       	ldd	r24, Y+5	; 0x05
    15e4:	9e 81       	ldd	r25, Y+6	; 0x06
    15e6:	0e 94 56 0a 	call	0x14ac	; 0x14ac <LCD_displayString>
		retValue = E_OK;
    15ea:	1a 82       	std	Y+2, r1	; 0x02
    15ec:	19 82       	std	Y+1, r1	; 0x01
	}

	return retValue;
    15ee:	89 81       	ldd	r24, Y+1	; 0x01
}
    15f0:	26 96       	adiw	r28, 0x06	; 6
    15f2:	0f b6       	in	r0, 0x3f	; 63
    15f4:	f8 94       	cli
    15f6:	de bf       	out	0x3e, r29	; 62
    15f8:	0f be       	out	0x3f, r0	; 63
    15fa:	cd bf       	out	0x3d, r28	; 61
    15fc:	cf 91       	pop	r28
    15fe:	df 91       	pop	r29
    1600:	08 95       	ret

00001602 <LCD_intgerToString>:
* Parameters (out): None
* Return value: None
* Description: Function to display integer on the LCD screen
************************************************************************************/
void LCD_intgerToString(int32_t as32_data)
{
    1602:	df 93       	push	r29
    1604:	cf 93       	push	r28
    1606:	cd b7       	in	r28, 0x3d	; 61
    1608:	de b7       	in	r29, 0x3e	; 62
    160a:	64 97       	sbiw	r28, 0x14	; 20
    160c:	0f b6       	in	r0, 0x3f	; 63
    160e:	f8 94       	cli
    1610:	de bf       	out	0x3e, r29	; 62
    1612:	0f be       	out	0x3f, r0	; 63
    1614:	cd bf       	out	0x3d, r28	; 61
    1616:	69 8b       	std	Y+17, r22	; 0x11
    1618:	7a 8b       	std	Y+18, r23	; 0x12
    161a:	8b 8b       	std	Y+19, r24	; 0x13
    161c:	9c 8b       	std	Y+20, r25	; 0x14
   char buff[16]; /* String to hold the ASCII result */
   itoa(as32_data, buff, 10); /* 10 for decimal */
    161e:	89 89       	ldd	r24, Y+17	; 0x11
    1620:	9a 89       	ldd	r25, Y+18	; 0x12
    1622:	9e 01       	movw	r18, r28
    1624:	2f 5f       	subi	r18, 0xFF	; 255
    1626:	3f 4f       	sbci	r19, 0xFF	; 255
    1628:	b9 01       	movw	r22, r18
    162a:	4a e0       	ldi	r20, 0x0A	; 10
    162c:	50 e0       	ldi	r21, 0x00	; 0
    162e:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <itoa>
   LCD_displayString(buff);
    1632:	ce 01       	movw	r24, r28
    1634:	01 96       	adiw	r24, 0x01	; 1
    1636:	0e 94 56 0a 	call	0x14ac	; 0x14ac <LCD_displayString>
}
    163a:	64 96       	adiw	r28, 0x14	; 20
    163c:	0f b6       	in	r0, 0x3f	; 63
    163e:	f8 94       	cli
    1640:	de bf       	out	0x3e, r29	; 62
    1642:	0f be       	out	0x3f, r0	; 63
    1644:	cd bf       	out	0x3d, r28	; 61
    1646:	cf 91       	pop	r28
    1648:	df 91       	pop	r29
    164a:	08 95       	ret

0000164c <LCD_clearScreen>:
* Parameters (out): None
* Return value: Std_ReturnType
* Description: Function to clear the LCD screen
************************************************************************************/
Std_ReturnType LCD_clearScreen(void)
{
    164c:	df 93       	push	r29
    164e:	cf 93       	push	r28
    1650:	0f 92       	push	r0
    1652:	cd b7       	in	r28, 0x3d	; 61
    1654:	de b7       	in	r29, 0x3e	; 62
	uint8_t retValue = E_NOT_OK;
    1656:	81 e0       	ldi	r24, 0x01	; 1
    1658:	89 83       	std	Y+1, r24	; 0x01

	retValue = LCD_sendCommand(CLEAR_COMMAND); /* Clear display */
    165a:	81 e0       	ldi	r24, 0x01	; 1
    165c:	0e 94 3c 09 	call	0x1278	; 0x1278 <LCD_sendCommand>
    1660:	89 83       	std	Y+1, r24	; 0x01

	if(retValue == E_OK)
    1662:	89 81       	ldd	r24, Y+1	; 0x01
    1664:	88 23       	and	r24, r24
    1666:	09 f4       	brne	.+2      	; 0x166a <LCD_clearScreen+0x1e>
	{
		retValue = E_OK;
    1668:	19 82       	std	Y+1, r1	; 0x01
	}
	return retValue;
    166a:	89 81       	ldd	r24, Y+1	; 0x01
}
    166c:	0f 90       	pop	r0
    166e:	cf 91       	pop	r28
    1670:	df 91       	pop	r29
    1672:	08 95       	ret

00001674 <App_init>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 *******************************************************************************/
void App_init(void)
{
    1674:	df 93       	push	r29
    1676:	cf 93       	push	r28
    1678:	cd b7       	in	r28, 0x3d	; 61
    167a:	de b7       	in	r29, 0x3e	; 62
	sei();	/* Enable the global Interrupt (I-bit) */
    167c:	78 94       	sei
}
    167e:	cf 91       	pop	r28
    1680:	df 91       	pop	r29
    1682:	08 95       	ret

00001684 <App_Update>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 *******************************************************************************/
void App_Update(void)
{
    1684:	df 93       	push	r29
    1686:	cf 93       	push	r28
    1688:	cd b7       	in	r28, 0x3d	; 61
    168a:	de b7       	in	r29, 0x3e	; 62
	if(gu8_lcdInit == E_NOT_OK)
    168c:	80 91 81 00 	lds	r24, 0x0081
    1690:	81 30       	cpi	r24, 0x01	; 1
    1692:	79 f4       	brne	.+30     	; 0x16b2 <App_Update+0x2e>
	{
		gu8_lcdState = LCD_Init();	/* LCD Initialization */
    1694:	0e 94 b9 08 	call	0x1172	; 0x1172 <LCD_Init>
    1698:	80 93 82 00 	sts	0x0082, r24

		if(gu8_lcdState == E_OK)
    169c:	80 91 82 00 	lds	r24, 0x0082
    16a0:	88 23       	and	r24, r24
    16a2:	f1 f4       	brne	.+60     	; 0x16e0 <App_Update+0x5c>
		{
			gu8_lcdInit = E_OK;	/* Update the LCD Flag (LCD INIT) */
    16a4:	10 92 81 00 	sts	0x0081, r1

			LCD_displayString("LCD NON-BLOCKING");
    16a8:	80 e6       	ldi	r24, 0x60	; 96
    16aa:	90 e0       	ldi	r25, 0x00	; 0
    16ac:	0e 94 56 0a 	call	0x14ac	; 0x14ac <LCD_displayString>
    16b0:	17 c0       	rjmp	.+46     	; 0x16e0 <App_Update+0x5c>
		}
	}
	else if(gu8_lcdInit == E_OK)
    16b2:	80 91 81 00 	lds	r24, 0x0081
    16b6:	88 23       	and	r24, r24
    16b8:	99 f4       	brne	.+38     	; 0x16e0 <App_Update+0x5c>
	{
		if(gu8_clrFlage == E_NOT_OK)
    16ba:	80 91 83 00 	lds	r24, 0x0083
    16be:	81 30       	cpi	r24, 0x01	; 1
    16c0:	79 f4       	brne	.+30     	; 0x16e0 <App_Update+0x5c>
		{
			gu8_clrdis  = LCD_displayStringRowColumn(1, 3 , "123456789");
    16c2:	21 e7       	ldi	r18, 0x71	; 113
    16c4:	30 e0       	ldi	r19, 0x00	; 0
    16c6:	81 e0       	ldi	r24, 0x01	; 1
    16c8:	63 e0       	ldi	r22, 0x03	; 3
    16ca:	a9 01       	movw	r20, r18
    16cc:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <LCD_displayStringRowColumn>
    16d0:	80 93 84 00 	sts	0x0084, r24

			if(gu8_clrdis  == E_OK)
    16d4:	80 91 84 00 	lds	r24, 0x0084
    16d8:	88 23       	and	r24, r24
    16da:	11 f4       	brne	.+4      	; 0x16e0 <App_Update+0x5c>
			{
				gu8_clrFlage = E_OK;
    16dc:	10 92 83 00 	sts	0x0083, r1
			}
		}
	}
}
    16e0:	cf 91       	pop	r28
    16e2:	df 91       	pop	r29
    16e4:	08 95       	ret

000016e6 <main>:
/*****************************************************************************************
 *                                MAIN FUNCTION                                          *
 *****************************************************************************************/

int main(void)
{
    16e6:	df 93       	push	r29
    16e8:	cf 93       	push	r28
    16ea:	cd b7       	in	r28, 0x3d	; 61
    16ec:	de b7       	in	r29, 0x3e	; 62
	/********************************************************************************
	 *                           SYSTEM INITIALIZATION                              *
	 ********************************************************************************/

	App_init();	/* Test LCD in simple application */
    16ee:	0e 94 3a 0b 	call	0x1674	; 0x1674 <App_init>
	 *                        APPLICATION	(SUPER LOOP)						    *
	 ********************************************************************************/

	while(1)
	{
		App_Update();
    16f2:	0e 94 42 0b 	call	0x1684	; 0x1684 <App_Update>
    16f6:	fd cf       	rjmp	.-6      	; 0x16f2 <main+0xc>

000016f8 <itoa>:
    16f8:	fb 01       	movw	r30, r22
    16fa:	9f 01       	movw	r18, r30
    16fc:	e8 94       	clt
    16fe:	42 30       	cpi	r20, 0x02	; 2
    1700:	c4 f0       	brlt	.+48     	; 0x1732 <itoa+0x3a>
    1702:	45 32       	cpi	r20, 0x25	; 37
    1704:	b4 f4       	brge	.+44     	; 0x1732 <itoa+0x3a>
    1706:	4a 30       	cpi	r20, 0x0A	; 10
    1708:	29 f4       	brne	.+10     	; 0x1714 <itoa+0x1c>
    170a:	97 fb       	bst	r25, 7
    170c:	1e f4       	brtc	.+6      	; 0x1714 <itoa+0x1c>
    170e:	90 95       	com	r25
    1710:	81 95       	neg	r24
    1712:	9f 4f       	sbci	r25, 0xFF	; 255
    1714:	64 2f       	mov	r22, r20
    1716:	77 27       	eor	r23, r23
    1718:	0e 94 ad 0b 	call	0x175a	; 0x175a <__udivmodhi4>
    171c:	80 5d       	subi	r24, 0xD0	; 208
    171e:	8a 33       	cpi	r24, 0x3A	; 58
    1720:	0c f0       	brlt	.+2      	; 0x1724 <itoa+0x2c>
    1722:	89 5d       	subi	r24, 0xD9	; 217
    1724:	81 93       	st	Z+, r24
    1726:	cb 01       	movw	r24, r22
    1728:	00 97       	sbiw	r24, 0x00	; 0
    172a:	a1 f7       	brne	.-24     	; 0x1714 <itoa+0x1c>
    172c:	16 f4       	brtc	.+4      	; 0x1732 <itoa+0x3a>
    172e:	5d e2       	ldi	r21, 0x2D	; 45
    1730:	51 93       	st	Z+, r21
    1732:	10 82       	st	Z, r1
    1734:	c9 01       	movw	r24, r18
    1736:	0c 94 9d 0b 	jmp	0x173a	; 0x173a <strrev>

0000173a <strrev>:
    173a:	dc 01       	movw	r26, r24
    173c:	fc 01       	movw	r30, r24
    173e:	67 2f       	mov	r22, r23
    1740:	71 91       	ld	r23, Z+
    1742:	77 23       	and	r23, r23
    1744:	e1 f7       	brne	.-8      	; 0x173e <strrev+0x4>
    1746:	32 97       	sbiw	r30, 0x02	; 2
    1748:	04 c0       	rjmp	.+8      	; 0x1752 <strrev+0x18>
    174a:	7c 91       	ld	r23, X
    174c:	6d 93       	st	X+, r22
    174e:	70 83       	st	Z, r23
    1750:	62 91       	ld	r22, -Z
    1752:	ae 17       	cp	r26, r30
    1754:	bf 07       	cpc	r27, r31
    1756:	c8 f3       	brcs	.-14     	; 0x174a <strrev+0x10>
    1758:	08 95       	ret

0000175a <__udivmodhi4>:
    175a:	aa 1b       	sub	r26, r26
    175c:	bb 1b       	sub	r27, r27
    175e:	51 e1       	ldi	r21, 0x11	; 17
    1760:	07 c0       	rjmp	.+14     	; 0x1770 <__udivmodhi4_ep>

00001762 <__udivmodhi4_loop>:
    1762:	aa 1f       	adc	r26, r26
    1764:	bb 1f       	adc	r27, r27
    1766:	a6 17       	cp	r26, r22
    1768:	b7 07       	cpc	r27, r23
    176a:	10 f0       	brcs	.+4      	; 0x1770 <__udivmodhi4_ep>
    176c:	a6 1b       	sub	r26, r22
    176e:	b7 0b       	sbc	r27, r23

00001770 <__udivmodhi4_ep>:
    1770:	88 1f       	adc	r24, r24
    1772:	99 1f       	adc	r25, r25
    1774:	5a 95       	dec	r21
    1776:	a9 f7       	brne	.-22     	; 0x1762 <__udivmodhi4_loop>
    1778:	80 95       	com	r24
    177a:	90 95       	com	r25
    177c:	bc 01       	movw	r22, r24
    177e:	cd 01       	movw	r24, r26
    1780:	08 95       	ret

00001782 <_exit>:
    1782:	f8 94       	cli

00001784 <__stop_program>:
    1784:	ff cf       	rjmp	.-2      	; 0x1784 <__stop_program>
