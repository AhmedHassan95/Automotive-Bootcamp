
TIMER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000012a0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  000012a0  00001334  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00800066  00800066  0000133a  2**0
                  ALLOC
  3 .stab         00001e3c  00000000  00000000  0000133c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000017aa  00000000  00000000  00003178  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 1c 06 	jmp	0xc38	; 0xc38 <__vector_4>
      14:	0c 94 e9 05 	jmp	0xbd2	; 0xbd2 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 b6 05 	jmp	0xb6c	; 0xb6c <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 83 05 	jmp	0xb06	; 0xb06 <__vector_9>
      28:	0c 94 50 05 	jmp	0xaa0	; 0xaa0 <__vector_10>
      2c:	0c 94 1d 05 	jmp	0xa3a	; 0xa3a <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 ea       	ldi	r30, 0xA0	; 160
      68:	f2 e1       	ldi	r31, 0x12	; 18
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 36       	cpi	r26, 0x66	; 102
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a6 e6       	ldi	r26, 0x66	; 102
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 36       	cpi	r26, 0x6D	; 109
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 47 09 	call	0x128e	; 0x128e <main>
      8a:	0c 94 4e 09 	jmp	0x129c	; 0x129c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_setPortDirection>:
 * [in/out]		 	None
 *
 * [Returns]:       Error state
 ******************************************************************************/
enuDIO_E_STATE_t DIO_setPortDirection(enuDIO_PortId_t enu_portID, enuDIO_DirectionType_t enu_portDirection)
{
      92:	df 93       	push	r29
      94:	cf 93       	push	r28
      96:	cd b7       	in	r28, 0x3d	; 61
      98:	de b7       	in	r29, 0x3e	; 62
      9a:	27 97       	sbiw	r28, 0x07	; 7
      9c:	0f b6       	in	r0, 0x3f	; 63
      9e:	f8 94       	cli
      a0:	de bf       	out	0x3e, r29	; 62
      a2:	0f be       	out	0x3f, r0	; 63
      a4:	cd bf       	out	0x3d, r28	; 61
      a6:	8a 83       	std	Y+2, r24	; 0x02
      a8:	6b 83       	std	Y+3, r22	; 0x03
	enuDIO_E_STATE_t enu_ErrorState = E_NOT_OK;
      aa:	81 e0       	ldi	r24, 0x01	; 1
      ac:	89 83       	std	Y+1, r24	; 0x01

	/* Check if the PORT is input or output */
    if(enu_portDirection == HIGH)
      ae:	8b 81       	ldd	r24, Y+3	; 0x03
      b0:	81 30       	cpi	r24, 0x01	; 1
      b2:	d1 f5       	brne	.+116    	; 0x128 <DIO_setPortDirection+0x96>
    {
    	switch (enu_portID)
      b4:	8a 81       	ldd	r24, Y+2	; 0x02
      b6:	28 2f       	mov	r18, r24
      b8:	30 e0       	ldi	r19, 0x00	; 0
      ba:	3f 83       	std	Y+7, r19	; 0x07
      bc:	2e 83       	std	Y+6, r18	; 0x06
      be:	8e 81       	ldd	r24, Y+6	; 0x06
      c0:	9f 81       	ldd	r25, Y+7	; 0x07
      c2:	81 30       	cpi	r24, 0x01	; 1
      c4:	91 05       	cpc	r25, r1
      c6:	d9 f0       	breq	.+54     	; 0xfe <DIO_setPortDirection+0x6c>
      c8:	2e 81       	ldd	r18, Y+6	; 0x06
      ca:	3f 81       	ldd	r19, Y+7	; 0x07
      cc:	22 30       	cpi	r18, 0x02	; 2
      ce:	31 05       	cpc	r19, r1
      d0:	2c f4       	brge	.+10     	; 0xdc <DIO_setPortDirection+0x4a>
      d2:	8e 81       	ldd	r24, Y+6	; 0x06
      d4:	9f 81       	ldd	r25, Y+7	; 0x07
      d6:	00 97       	sbiw	r24, 0x00	; 0
      d8:	61 f0       	breq	.+24     	; 0xf2 <DIO_setPortDirection+0x60>
      da:	23 c0       	rjmp	.+70     	; 0x122 <DIO_setPortDirection+0x90>
      dc:	2e 81       	ldd	r18, Y+6	; 0x06
      de:	3f 81       	ldd	r19, Y+7	; 0x07
      e0:	22 30       	cpi	r18, 0x02	; 2
      e2:	31 05       	cpc	r19, r1
      e4:	91 f0       	breq	.+36     	; 0x10a <DIO_setPortDirection+0x78>
      e6:	8e 81       	ldd	r24, Y+6	; 0x06
      e8:	9f 81       	ldd	r25, Y+7	; 0x07
      ea:	83 30       	cpi	r24, 0x03	; 3
      ec:	91 05       	cpc	r25, r1
      ee:	99 f0       	breq	.+38     	; 0x116 <DIO_setPortDirection+0x84>
      f0:	18 c0       	rjmp	.+48     	; 0x122 <DIO_setPortDirection+0x90>
		{
		case DIO_PORTA:
			DDRA_DIR_R = OUTPUT_PORT;
      f2:	ea e3       	ldi	r30, 0x3A	; 58
      f4:	f0 e0       	ldi	r31, 0x00	; 0
      f6:	8f ef       	ldi	r24, 0xFF	; 255
      f8:	80 83       	st	Z, r24
			enu_ErrorState = DIO_E_PARAM_VALID;
      fa:	19 82       	std	Y+1, r1	; 0x01
      fc:	50 c0       	rjmp	.+160    	; 0x19e <DIO_setPortDirection+0x10c>
			break;
		case DIO_PORTB:
			DDRB_DIR_R = OUTPUT_PORT;
      fe:	e7 e3       	ldi	r30, 0x37	; 55
     100:	f0 e0       	ldi	r31, 0x00	; 0
     102:	8f ef       	ldi	r24, 0xFF	; 255
     104:	80 83       	st	Z, r24
			enu_ErrorState = DIO_E_PARAM_VALID;
     106:	19 82       	std	Y+1, r1	; 0x01
     108:	4a c0       	rjmp	.+148    	; 0x19e <DIO_setPortDirection+0x10c>
			break;
		case DIO_PORTC:
			DDRC_DIR_R = OUTPUT_PORT;
     10a:	e4 e3       	ldi	r30, 0x34	; 52
     10c:	f0 e0       	ldi	r31, 0x00	; 0
     10e:	8f ef       	ldi	r24, 0xFF	; 255
     110:	80 83       	st	Z, r24
			enu_ErrorState = DIO_E_PARAM_VALID;
     112:	19 82       	std	Y+1, r1	; 0x01
     114:	44 c0       	rjmp	.+136    	; 0x19e <DIO_setPortDirection+0x10c>
			break;
		case DIO_PORTD:
			DDRD_DIR_R = OUTPUT_PORT;
     116:	e1 e3       	ldi	r30, 0x31	; 49
     118:	f0 e0       	ldi	r31, 0x00	; 0
     11a:	8f ef       	ldi	r24, 0xFF	; 255
     11c:	80 83       	st	Z, r24
			enu_ErrorState = DIO_E_PARAM_VALID;
     11e:	19 82       	std	Y+1, r1	; 0x01
     120:	3e c0       	rjmp	.+124    	; 0x19e <DIO_setPortDirection+0x10c>
			break;
		default:
			enu_ErrorState = DIO_E_PARAM_INVALID_PORT_ID;
     122:	81 e0       	ldi	r24, 0x01	; 1
     124:	89 83       	std	Y+1, r24	; 0x01
     126:	3b c0       	rjmp	.+118    	; 0x19e <DIO_setPortDirection+0x10c>
			break;
		}
    }
    else if(enu_portDirection == LOW)
     128:	8b 81       	ldd	r24, Y+3	; 0x03
     12a:	88 23       	and	r24, r24
     12c:	b1 f5       	brne	.+108    	; 0x19a <DIO_setPortDirection+0x108>
    {
		switch (enu_portID)
     12e:	8a 81       	ldd	r24, Y+2	; 0x02
     130:	28 2f       	mov	r18, r24
     132:	30 e0       	ldi	r19, 0x00	; 0
     134:	3d 83       	std	Y+5, r19	; 0x05
     136:	2c 83       	std	Y+4, r18	; 0x04
     138:	8c 81       	ldd	r24, Y+4	; 0x04
     13a:	9d 81       	ldd	r25, Y+5	; 0x05
     13c:	81 30       	cpi	r24, 0x01	; 1
     13e:	91 05       	cpc	r25, r1
     140:	d1 f0       	breq	.+52     	; 0x176 <DIO_setPortDirection+0xe4>
     142:	2c 81       	ldd	r18, Y+4	; 0x04
     144:	3d 81       	ldd	r19, Y+5	; 0x05
     146:	22 30       	cpi	r18, 0x02	; 2
     148:	31 05       	cpc	r19, r1
     14a:	2c f4       	brge	.+10     	; 0x156 <DIO_setPortDirection+0xc4>
     14c:	8c 81       	ldd	r24, Y+4	; 0x04
     14e:	9d 81       	ldd	r25, Y+5	; 0x05
     150:	00 97       	sbiw	r24, 0x00	; 0
     152:	61 f0       	breq	.+24     	; 0x16c <DIO_setPortDirection+0xda>
     154:	1f c0       	rjmp	.+62     	; 0x194 <DIO_setPortDirection+0x102>
     156:	2c 81       	ldd	r18, Y+4	; 0x04
     158:	3d 81       	ldd	r19, Y+5	; 0x05
     15a:	22 30       	cpi	r18, 0x02	; 2
     15c:	31 05       	cpc	r19, r1
     15e:	81 f0       	breq	.+32     	; 0x180 <DIO_setPortDirection+0xee>
     160:	8c 81       	ldd	r24, Y+4	; 0x04
     162:	9d 81       	ldd	r25, Y+5	; 0x05
     164:	83 30       	cpi	r24, 0x03	; 3
     166:	91 05       	cpc	r25, r1
     168:	81 f0       	breq	.+32     	; 0x18a <DIO_setPortDirection+0xf8>
     16a:	14 c0       	rjmp	.+40     	; 0x194 <DIO_setPortDirection+0x102>
		{
		case DIO_PORTA:
			DDRA_DIR_R = INPUT_PORT;
     16c:	ea e3       	ldi	r30, 0x3A	; 58
     16e:	f0 e0       	ldi	r31, 0x00	; 0
     170:	10 82       	st	Z, r1
			enu_ErrorState = DIO_E_PARAM_VALID;
     172:	19 82       	std	Y+1, r1	; 0x01
     174:	14 c0       	rjmp	.+40     	; 0x19e <DIO_setPortDirection+0x10c>
			break;
		case DIO_PORTB:
			DDRB_DIR_R = INPUT_PORT;
     176:	e7 e3       	ldi	r30, 0x37	; 55
     178:	f0 e0       	ldi	r31, 0x00	; 0
     17a:	10 82       	st	Z, r1
			enu_ErrorState = DIO_E_PARAM_VALID;
     17c:	19 82       	std	Y+1, r1	; 0x01
     17e:	0f c0       	rjmp	.+30     	; 0x19e <DIO_setPortDirection+0x10c>
			break;
		case DIO_PORTC:
			DDRC_DIR_R = INPUT_PORT;
     180:	e4 e3       	ldi	r30, 0x34	; 52
     182:	f0 e0       	ldi	r31, 0x00	; 0
     184:	10 82       	st	Z, r1
			enu_ErrorState = DIO_E_PARAM_VALID;
     186:	19 82       	std	Y+1, r1	; 0x01
     188:	0a c0       	rjmp	.+20     	; 0x19e <DIO_setPortDirection+0x10c>
			break;
		case DIO_PORTD:
			DDRD_DIR_R = INPUT_PORT;
     18a:	e1 e3       	ldi	r30, 0x31	; 49
     18c:	f0 e0       	ldi	r31, 0x00	; 0
     18e:	10 82       	st	Z, r1
			enu_ErrorState = DIO_E_PARAM_VALID;
     190:	19 82       	std	Y+1, r1	; 0x01
     192:	05 c0       	rjmp	.+10     	; 0x19e <DIO_setPortDirection+0x10c>
			break;
		default:
			enu_ErrorState = DIO_E_PARAM_INVALID_PORT_ID;
     194:	81 e0       	ldi	r24, 0x01	; 1
     196:	89 83       	std	Y+1, r24	; 0x01
     198:	02 c0       	rjmp	.+4      	; 0x19e <DIO_setPortDirection+0x10c>
			break;
		}
    }
    else
    {
    	enu_ErrorState = DIO_E_PARAM_INVALID_PORT_DIR;	/* Invalid port direction */
     19a:	84 e0       	ldi	r24, 0x04	; 4
     19c:	89 83       	std	Y+1, r24	; 0x01
    }
    return enu_ErrorState;
     19e:	89 81       	ldd	r24, Y+1	; 0x01
}
     1a0:	27 96       	adiw	r28, 0x07	; 7
     1a2:	0f b6       	in	r0, 0x3f	; 63
     1a4:	f8 94       	cli
     1a6:	de bf       	out	0x3e, r29	; 62
     1a8:	0f be       	out	0x3f, r0	; 63
     1aa:	cd bf       	out	0x3d, r28	; 61
     1ac:	cf 91       	pop	r28
     1ae:	df 91       	pop	r29
     1b0:	08 95       	ret

000001b2 <DIO_setPinDirection>:
 *
 * [Returns]:       Error State
 *******************************************************************************/
enuDIO_E_STATE_t DIO_setPinDirection(enuDIO_PortId_t enu_portID , enuDIO_PinId_t enu_pinID,
								     enuDIO_DirectionType_t enu_pinDirection)
{
     1b2:	df 93       	push	r29
     1b4:	cf 93       	push	r28
     1b6:	cd b7       	in	r28, 0x3d	; 61
     1b8:	de b7       	in	r29, 0x3e	; 62
     1ba:	28 97       	sbiw	r28, 0x08	; 8
     1bc:	0f b6       	in	r0, 0x3f	; 63
     1be:	f8 94       	cli
     1c0:	de bf       	out	0x3e, r29	; 62
     1c2:	0f be       	out	0x3f, r0	; 63
     1c4:	cd bf       	out	0x3d, r28	; 61
     1c6:	8a 83       	std	Y+2, r24	; 0x02
     1c8:	6b 83       	std	Y+3, r22	; 0x03
     1ca:	4c 83       	std	Y+4, r20	; 0x04
	enuDIO_E_STATE_t enu_ErrorState = E_NOT_OK;
     1cc:	81 e0       	ldi	r24, 0x01	; 1
     1ce:	89 83       	std	Y+1, r24	; 0x01

	/* Check if the pin id is one of the existed pin or not */
	if ((enu_pinID >= PIN_0) && (enu_pinID <= PIN_7))
     1d0:	8b 81       	ldd	r24, Y+3	; 0x03
     1d2:	88 30       	cpi	r24, 0x08	; 8
     1d4:	08 f0       	brcs	.+2      	; 0x1d8 <DIO_setPinDirection+0x26>
     1d6:	fd c0       	rjmp	.+506    	; 0x3d2 <DIO_setPinDirection+0x220>
	{
		if (enu_pinDirection == OUTPUT)
     1d8:	8c 81       	ldd	r24, Y+4	; 0x04
     1da:	81 30       	cpi	r24, 0x01	; 1
     1dc:	09 f0       	breq	.+2      	; 0x1e0 <DIO_setPinDirection+0x2e>
     1de:	77 c0       	rjmp	.+238    	; 0x2ce <DIO_setPinDirection+0x11c>
		{
			switch (enu_portID)
     1e0:	8a 81       	ldd	r24, Y+2	; 0x02
     1e2:	28 2f       	mov	r18, r24
     1e4:	30 e0       	ldi	r19, 0x00	; 0
     1e6:	38 87       	std	Y+8, r19	; 0x08
     1e8:	2f 83       	std	Y+7, r18	; 0x07
     1ea:	8f 81       	ldd	r24, Y+7	; 0x07
     1ec:	98 85       	ldd	r25, Y+8	; 0x08
     1ee:	81 30       	cpi	r24, 0x01	; 1
     1f0:	91 05       	cpc	r25, r1
     1f2:	59 f1       	breq	.+86     	; 0x24a <DIO_setPinDirection+0x98>
     1f4:	2f 81       	ldd	r18, Y+7	; 0x07
     1f6:	38 85       	ldd	r19, Y+8	; 0x08
     1f8:	22 30       	cpi	r18, 0x02	; 2
     1fa:	31 05       	cpc	r19, r1
     1fc:	2c f4       	brge	.+10     	; 0x208 <DIO_setPinDirection+0x56>
     1fe:	8f 81       	ldd	r24, Y+7	; 0x07
     200:	98 85       	ldd	r25, Y+8	; 0x08
     202:	00 97       	sbiw	r24, 0x00	; 0
     204:	69 f0       	breq	.+26     	; 0x220 <DIO_setPinDirection+0x6e>
     206:	60 c0       	rjmp	.+192    	; 0x2c8 <DIO_setPinDirection+0x116>
     208:	2f 81       	ldd	r18, Y+7	; 0x07
     20a:	38 85       	ldd	r19, Y+8	; 0x08
     20c:	22 30       	cpi	r18, 0x02	; 2
     20e:	31 05       	cpc	r19, r1
     210:	89 f1       	breq	.+98     	; 0x274 <DIO_setPinDirection+0xc2>
     212:	8f 81       	ldd	r24, Y+7	; 0x07
     214:	98 85       	ldd	r25, Y+8	; 0x08
     216:	83 30       	cpi	r24, 0x03	; 3
     218:	91 05       	cpc	r25, r1
     21a:	09 f4       	brne	.+2      	; 0x21e <DIO_setPinDirection+0x6c>
     21c:	40 c0       	rjmp	.+128    	; 0x29e <DIO_setPinDirection+0xec>
     21e:	54 c0       	rjmp	.+168    	; 0x2c8 <DIO_setPinDirection+0x116>
			{
			case DIO_PORTA:
				SET_BIT(DDRA_DIR_R, enu_pinID);
     220:	aa e3       	ldi	r26, 0x3A	; 58
     222:	b0 e0       	ldi	r27, 0x00	; 0
     224:	ea e3       	ldi	r30, 0x3A	; 58
     226:	f0 e0       	ldi	r31, 0x00	; 0
     228:	80 81       	ld	r24, Z
     22a:	48 2f       	mov	r20, r24
     22c:	8b 81       	ldd	r24, Y+3	; 0x03
     22e:	28 2f       	mov	r18, r24
     230:	30 e0       	ldi	r19, 0x00	; 0
     232:	81 e0       	ldi	r24, 0x01	; 1
     234:	90 e0       	ldi	r25, 0x00	; 0
     236:	02 2e       	mov	r0, r18
     238:	02 c0       	rjmp	.+4      	; 0x23e <DIO_setPinDirection+0x8c>
     23a:	88 0f       	add	r24, r24
     23c:	99 1f       	adc	r25, r25
     23e:	0a 94       	dec	r0
     240:	e2 f7       	brpl	.-8      	; 0x23a <DIO_setPinDirection+0x88>
     242:	84 2b       	or	r24, r20
     244:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
     246:	19 82       	std	Y+1, r1	; 0x01
     248:	c6 c0       	rjmp	.+396    	; 0x3d6 <DIO_setPinDirection+0x224>
				break;
			case DIO_PORTB:
				SET_BIT(DDRB_DIR_R, enu_pinID);
     24a:	a7 e3       	ldi	r26, 0x37	; 55
     24c:	b0 e0       	ldi	r27, 0x00	; 0
     24e:	e7 e3       	ldi	r30, 0x37	; 55
     250:	f0 e0       	ldi	r31, 0x00	; 0
     252:	80 81       	ld	r24, Z
     254:	48 2f       	mov	r20, r24
     256:	8b 81       	ldd	r24, Y+3	; 0x03
     258:	28 2f       	mov	r18, r24
     25a:	30 e0       	ldi	r19, 0x00	; 0
     25c:	81 e0       	ldi	r24, 0x01	; 1
     25e:	90 e0       	ldi	r25, 0x00	; 0
     260:	02 2e       	mov	r0, r18
     262:	02 c0       	rjmp	.+4      	; 0x268 <DIO_setPinDirection+0xb6>
     264:	88 0f       	add	r24, r24
     266:	99 1f       	adc	r25, r25
     268:	0a 94       	dec	r0
     26a:	e2 f7       	brpl	.-8      	; 0x264 <DIO_setPinDirection+0xb2>
     26c:	84 2b       	or	r24, r20
     26e:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
     270:	19 82       	std	Y+1, r1	; 0x01
     272:	b1 c0       	rjmp	.+354    	; 0x3d6 <DIO_setPinDirection+0x224>
				break;
			case DIO_PORTC:
				SET_BIT(DDRC_DIR_R, enu_pinID);
     274:	a4 e3       	ldi	r26, 0x34	; 52
     276:	b0 e0       	ldi	r27, 0x00	; 0
     278:	e4 e3       	ldi	r30, 0x34	; 52
     27a:	f0 e0       	ldi	r31, 0x00	; 0
     27c:	80 81       	ld	r24, Z
     27e:	48 2f       	mov	r20, r24
     280:	8b 81       	ldd	r24, Y+3	; 0x03
     282:	28 2f       	mov	r18, r24
     284:	30 e0       	ldi	r19, 0x00	; 0
     286:	81 e0       	ldi	r24, 0x01	; 1
     288:	90 e0       	ldi	r25, 0x00	; 0
     28a:	02 2e       	mov	r0, r18
     28c:	02 c0       	rjmp	.+4      	; 0x292 <DIO_setPinDirection+0xe0>
     28e:	88 0f       	add	r24, r24
     290:	99 1f       	adc	r25, r25
     292:	0a 94       	dec	r0
     294:	e2 f7       	brpl	.-8      	; 0x28e <DIO_setPinDirection+0xdc>
     296:	84 2b       	or	r24, r20
     298:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
     29a:	19 82       	std	Y+1, r1	; 0x01
     29c:	9c c0       	rjmp	.+312    	; 0x3d6 <DIO_setPinDirection+0x224>
				break;
			case DIO_PORTD:
				SET_BIT(DDRD_DIR_R, enu_pinID);
     29e:	a1 e3       	ldi	r26, 0x31	; 49
     2a0:	b0 e0       	ldi	r27, 0x00	; 0
     2a2:	e1 e3       	ldi	r30, 0x31	; 49
     2a4:	f0 e0       	ldi	r31, 0x00	; 0
     2a6:	80 81       	ld	r24, Z
     2a8:	48 2f       	mov	r20, r24
     2aa:	8b 81       	ldd	r24, Y+3	; 0x03
     2ac:	28 2f       	mov	r18, r24
     2ae:	30 e0       	ldi	r19, 0x00	; 0
     2b0:	81 e0       	ldi	r24, 0x01	; 1
     2b2:	90 e0       	ldi	r25, 0x00	; 0
     2b4:	02 2e       	mov	r0, r18
     2b6:	02 c0       	rjmp	.+4      	; 0x2bc <DIO_setPinDirection+0x10a>
     2b8:	88 0f       	add	r24, r24
     2ba:	99 1f       	adc	r25, r25
     2bc:	0a 94       	dec	r0
     2be:	e2 f7       	brpl	.-8      	; 0x2b8 <DIO_setPinDirection+0x106>
     2c0:	84 2b       	or	r24, r20
     2c2:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
     2c4:	19 82       	std	Y+1, r1	; 0x01
     2c6:	87 c0       	rjmp	.+270    	; 0x3d6 <DIO_setPinDirection+0x224>
				break;
            default:
            	enu_ErrorState = DIO_E_PARAM_INVALID_PORT_ID;	/* Invalid port id */
     2c8:	81 e0       	ldi	r24, 0x01	; 1
     2ca:	89 83       	std	Y+1, r24	; 0x01
     2cc:	84 c0       	rjmp	.+264    	; 0x3d6 <DIO_setPinDirection+0x224>
                break;
			}
		}
		else if (enu_pinDirection == INPUT)
     2ce:	8c 81       	ldd	r24, Y+4	; 0x04
     2d0:	88 23       	and	r24, r24
     2d2:	09 f0       	breq	.+2      	; 0x2d6 <DIO_setPinDirection+0x124>
     2d4:	7b c0       	rjmp	.+246    	; 0x3cc <DIO_setPinDirection+0x21a>
		{
			switch (enu_portID)
     2d6:	8a 81       	ldd	r24, Y+2	; 0x02
     2d8:	28 2f       	mov	r18, r24
     2da:	30 e0       	ldi	r19, 0x00	; 0
     2dc:	3e 83       	std	Y+6, r19	; 0x06
     2de:	2d 83       	std	Y+5, r18	; 0x05
     2e0:	8d 81       	ldd	r24, Y+5	; 0x05
     2e2:	9e 81       	ldd	r25, Y+6	; 0x06
     2e4:	81 30       	cpi	r24, 0x01	; 1
     2e6:	91 05       	cpc	r25, r1
     2e8:	61 f1       	breq	.+88     	; 0x342 <DIO_setPinDirection+0x190>
     2ea:	2d 81       	ldd	r18, Y+5	; 0x05
     2ec:	3e 81       	ldd	r19, Y+6	; 0x06
     2ee:	22 30       	cpi	r18, 0x02	; 2
     2f0:	31 05       	cpc	r19, r1
     2f2:	2c f4       	brge	.+10     	; 0x2fe <DIO_setPinDirection+0x14c>
     2f4:	8d 81       	ldd	r24, Y+5	; 0x05
     2f6:	9e 81       	ldd	r25, Y+6	; 0x06
     2f8:	00 97       	sbiw	r24, 0x00	; 0
     2fa:	69 f0       	breq	.+26     	; 0x316 <DIO_setPinDirection+0x164>
     2fc:	64 c0       	rjmp	.+200    	; 0x3c6 <DIO_setPinDirection+0x214>
     2fe:	2d 81       	ldd	r18, Y+5	; 0x05
     300:	3e 81       	ldd	r19, Y+6	; 0x06
     302:	22 30       	cpi	r18, 0x02	; 2
     304:	31 05       	cpc	r19, r1
     306:	99 f1       	breq	.+102    	; 0x36e <DIO_setPinDirection+0x1bc>
     308:	8d 81       	ldd	r24, Y+5	; 0x05
     30a:	9e 81       	ldd	r25, Y+6	; 0x06
     30c:	83 30       	cpi	r24, 0x03	; 3
     30e:	91 05       	cpc	r25, r1
     310:	09 f4       	brne	.+2      	; 0x314 <DIO_setPinDirection+0x162>
     312:	43 c0       	rjmp	.+134    	; 0x39a <DIO_setPinDirection+0x1e8>
     314:	58 c0       	rjmp	.+176    	; 0x3c6 <DIO_setPinDirection+0x214>
			{
			case DIO_PORTA:
				CLEAR_BIT(DDRA_DIR_R, enu_pinID);
     316:	aa e3       	ldi	r26, 0x3A	; 58
     318:	b0 e0       	ldi	r27, 0x00	; 0
     31a:	ea e3       	ldi	r30, 0x3A	; 58
     31c:	f0 e0       	ldi	r31, 0x00	; 0
     31e:	80 81       	ld	r24, Z
     320:	48 2f       	mov	r20, r24
     322:	8b 81       	ldd	r24, Y+3	; 0x03
     324:	28 2f       	mov	r18, r24
     326:	30 e0       	ldi	r19, 0x00	; 0
     328:	81 e0       	ldi	r24, 0x01	; 1
     32a:	90 e0       	ldi	r25, 0x00	; 0
     32c:	02 2e       	mov	r0, r18
     32e:	02 c0       	rjmp	.+4      	; 0x334 <DIO_setPinDirection+0x182>
     330:	88 0f       	add	r24, r24
     332:	99 1f       	adc	r25, r25
     334:	0a 94       	dec	r0
     336:	e2 f7       	brpl	.-8      	; 0x330 <DIO_setPinDirection+0x17e>
     338:	80 95       	com	r24
     33a:	84 23       	and	r24, r20
     33c:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
     33e:	19 82       	std	Y+1, r1	; 0x01
     340:	4a c0       	rjmp	.+148    	; 0x3d6 <DIO_setPinDirection+0x224>
				break;
			case DIO_PORTB:
				CLEAR_BIT(DDRB_DIR_R, enu_pinID);
     342:	a7 e3       	ldi	r26, 0x37	; 55
     344:	b0 e0       	ldi	r27, 0x00	; 0
     346:	e7 e3       	ldi	r30, 0x37	; 55
     348:	f0 e0       	ldi	r31, 0x00	; 0
     34a:	80 81       	ld	r24, Z
     34c:	48 2f       	mov	r20, r24
     34e:	8b 81       	ldd	r24, Y+3	; 0x03
     350:	28 2f       	mov	r18, r24
     352:	30 e0       	ldi	r19, 0x00	; 0
     354:	81 e0       	ldi	r24, 0x01	; 1
     356:	90 e0       	ldi	r25, 0x00	; 0
     358:	02 2e       	mov	r0, r18
     35a:	02 c0       	rjmp	.+4      	; 0x360 <DIO_setPinDirection+0x1ae>
     35c:	88 0f       	add	r24, r24
     35e:	99 1f       	adc	r25, r25
     360:	0a 94       	dec	r0
     362:	e2 f7       	brpl	.-8      	; 0x35c <DIO_setPinDirection+0x1aa>
     364:	80 95       	com	r24
     366:	84 23       	and	r24, r20
     368:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
     36a:	19 82       	std	Y+1, r1	; 0x01
     36c:	34 c0       	rjmp	.+104    	; 0x3d6 <DIO_setPinDirection+0x224>
				break;
			case DIO_PORTC:
				CLEAR_BIT(DDRC_DIR_R, enu_pinID);
     36e:	a4 e3       	ldi	r26, 0x34	; 52
     370:	b0 e0       	ldi	r27, 0x00	; 0
     372:	e4 e3       	ldi	r30, 0x34	; 52
     374:	f0 e0       	ldi	r31, 0x00	; 0
     376:	80 81       	ld	r24, Z
     378:	48 2f       	mov	r20, r24
     37a:	8b 81       	ldd	r24, Y+3	; 0x03
     37c:	28 2f       	mov	r18, r24
     37e:	30 e0       	ldi	r19, 0x00	; 0
     380:	81 e0       	ldi	r24, 0x01	; 1
     382:	90 e0       	ldi	r25, 0x00	; 0
     384:	02 2e       	mov	r0, r18
     386:	02 c0       	rjmp	.+4      	; 0x38c <DIO_setPinDirection+0x1da>
     388:	88 0f       	add	r24, r24
     38a:	99 1f       	adc	r25, r25
     38c:	0a 94       	dec	r0
     38e:	e2 f7       	brpl	.-8      	; 0x388 <DIO_setPinDirection+0x1d6>
     390:	80 95       	com	r24
     392:	84 23       	and	r24, r20
     394:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
     396:	19 82       	std	Y+1, r1	; 0x01
     398:	1e c0       	rjmp	.+60     	; 0x3d6 <DIO_setPinDirection+0x224>
				break;
			case DIO_PORTD:
				CLEAR_BIT(DDRD_DIR_R, enu_pinID);
     39a:	a1 e3       	ldi	r26, 0x31	; 49
     39c:	b0 e0       	ldi	r27, 0x00	; 0
     39e:	e1 e3       	ldi	r30, 0x31	; 49
     3a0:	f0 e0       	ldi	r31, 0x00	; 0
     3a2:	80 81       	ld	r24, Z
     3a4:	48 2f       	mov	r20, r24
     3a6:	8b 81       	ldd	r24, Y+3	; 0x03
     3a8:	28 2f       	mov	r18, r24
     3aa:	30 e0       	ldi	r19, 0x00	; 0
     3ac:	81 e0       	ldi	r24, 0x01	; 1
     3ae:	90 e0       	ldi	r25, 0x00	; 0
     3b0:	02 2e       	mov	r0, r18
     3b2:	02 c0       	rjmp	.+4      	; 0x3b8 <DIO_setPinDirection+0x206>
     3b4:	88 0f       	add	r24, r24
     3b6:	99 1f       	adc	r25, r25
     3b8:	0a 94       	dec	r0
     3ba:	e2 f7       	brpl	.-8      	; 0x3b4 <DIO_setPinDirection+0x202>
     3bc:	80 95       	com	r24
     3be:	84 23       	and	r24, r20
     3c0:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
     3c2:	19 82       	std	Y+1, r1	; 0x01
     3c4:	08 c0       	rjmp	.+16     	; 0x3d6 <DIO_setPinDirection+0x224>
				break;
            default:
            	enu_ErrorState = DIO_E_PARAM_INVALID_PORT_ID;	/* Invalid port id */
     3c6:	81 e0       	ldi	r24, 0x01	; 1
     3c8:	89 83       	std	Y+1, r24	; 0x01
     3ca:	05 c0       	rjmp	.+10     	; 0x3d6 <DIO_setPinDirection+0x224>
                break;
			}
		}
		else
		{
			enu_ErrorState = DIO_E_PARAM_INVALID_PORT_DIR;	/* Invalid port direction */
     3cc:	84 e0       	ldi	r24, 0x04	; 4
     3ce:	89 83       	std	Y+1, r24	; 0x01
     3d0:	02 c0       	rjmp	.+4      	; 0x3d6 <DIO_setPinDirection+0x224>
		}
	}
	else
	{
		enu_ErrorState = DIO_E_PARAM_INVALID_PIN_ID;	/* Invalid pin id */
     3d2:	82 e0       	ldi	r24, 0x02	; 2
     3d4:	89 83       	std	Y+1, r24	; 0x01
	}
	return enu_ErrorState;
     3d6:	89 81       	ldd	r24, Y+1	; 0x01
}
     3d8:	28 96       	adiw	r28, 0x08	; 8
     3da:	0f b6       	in	r0, 0x3f	; 63
     3dc:	f8 94       	cli
     3de:	de bf       	out	0x3e, r29	; 62
     3e0:	0f be       	out	0x3f, r0	; 63
     3e2:	cd bf       	out	0x3d, r28	; 61
     3e4:	cf 91       	pop	r28
     3e6:	df 91       	pop	r29
     3e8:	08 95       	ret

000003ea <DIO_writePort>:
 * [in/out]		 	None
 *
 * [Returns]:       Error State
 ******************************************************************************/
enuDIO_E_STATE_t DIO_writePort(enuDIO_PortId_t enu_portID, uint8_t au8_portValue)
{
     3ea:	df 93       	push	r29
     3ec:	cf 93       	push	r28
     3ee:	00 d0       	rcall	.+0      	; 0x3f0 <DIO_writePort+0x6>
     3f0:	00 d0       	rcall	.+0      	; 0x3f2 <DIO_writePort+0x8>
     3f2:	0f 92       	push	r0
     3f4:	cd b7       	in	r28, 0x3d	; 61
     3f6:	de b7       	in	r29, 0x3e	; 62
     3f8:	8a 83       	std	Y+2, r24	; 0x02
     3fa:	6b 83       	std	Y+3, r22	; 0x03
	enuDIO_E_STATE_t enu_ErrorState = E_NOT_OK;
     3fc:	81 e0       	ldi	r24, 0x01	; 1
     3fe:	89 83       	std	Y+1, r24	; 0x01

    switch (enu_portID)
     400:	8a 81       	ldd	r24, Y+2	; 0x02
     402:	28 2f       	mov	r18, r24
     404:	30 e0       	ldi	r19, 0x00	; 0
     406:	3d 83       	std	Y+5, r19	; 0x05
     408:	2c 83       	std	Y+4, r18	; 0x04
     40a:	8c 81       	ldd	r24, Y+4	; 0x04
     40c:	9d 81       	ldd	r25, Y+5	; 0x05
     40e:	81 30       	cpi	r24, 0x01	; 1
     410:	91 05       	cpc	r25, r1
     412:	d9 f0       	breq	.+54     	; 0x44a <DIO_writePort+0x60>
     414:	2c 81       	ldd	r18, Y+4	; 0x04
     416:	3d 81       	ldd	r19, Y+5	; 0x05
     418:	22 30       	cpi	r18, 0x02	; 2
     41a:	31 05       	cpc	r19, r1
     41c:	2c f4       	brge	.+10     	; 0x428 <DIO_writePort+0x3e>
     41e:	8c 81       	ldd	r24, Y+4	; 0x04
     420:	9d 81       	ldd	r25, Y+5	; 0x05
     422:	00 97       	sbiw	r24, 0x00	; 0
     424:	61 f0       	breq	.+24     	; 0x43e <DIO_writePort+0x54>
     426:	23 c0       	rjmp	.+70     	; 0x46e <DIO_writePort+0x84>
     428:	2c 81       	ldd	r18, Y+4	; 0x04
     42a:	3d 81       	ldd	r19, Y+5	; 0x05
     42c:	22 30       	cpi	r18, 0x02	; 2
     42e:	31 05       	cpc	r19, r1
     430:	91 f0       	breq	.+36     	; 0x456 <DIO_writePort+0x6c>
     432:	8c 81       	ldd	r24, Y+4	; 0x04
     434:	9d 81       	ldd	r25, Y+5	; 0x05
     436:	83 30       	cpi	r24, 0x03	; 3
     438:	91 05       	cpc	r25, r1
     43a:	99 f0       	breq	.+38     	; 0x462 <DIO_writePort+0x78>
     43c:	18 c0       	rjmp	.+48     	; 0x46e <DIO_writePort+0x84>
    {
    case DIO_PORTA:
        PORTA_DATA_R = au8_portValue;
     43e:	eb e3       	ldi	r30, 0x3B	; 59
     440:	f0 e0       	ldi	r31, 0x00	; 0
     442:	8b 81       	ldd	r24, Y+3	; 0x03
     444:	80 83       	st	Z, r24
        enu_ErrorState = DIO_E_PARAM_VALID;
     446:	19 82       	std	Y+1, r1	; 0x01
     448:	14 c0       	rjmp	.+40     	; 0x472 <DIO_writePort+0x88>
        break;
    case DIO_PORTB:
        PORTB_DATA_R = au8_portValue;
     44a:	e8 e3       	ldi	r30, 0x38	; 56
     44c:	f0 e0       	ldi	r31, 0x00	; 0
     44e:	8b 81       	ldd	r24, Y+3	; 0x03
     450:	80 83       	st	Z, r24
        enu_ErrorState = DIO_E_PARAM_VALID;
     452:	19 82       	std	Y+1, r1	; 0x01
     454:	0e c0       	rjmp	.+28     	; 0x472 <DIO_writePort+0x88>
        break;
    case DIO_PORTC:
        PORTC_DATA_R = au8_portValue;
     456:	e5 e3       	ldi	r30, 0x35	; 53
     458:	f0 e0       	ldi	r31, 0x00	; 0
     45a:	8b 81       	ldd	r24, Y+3	; 0x03
     45c:	80 83       	st	Z, r24
        enu_ErrorState = DIO_E_PARAM_VALID;
     45e:	19 82       	std	Y+1, r1	; 0x01
     460:	08 c0       	rjmp	.+16     	; 0x472 <DIO_writePort+0x88>
        break;
    case DIO_PORTD:
        PORTD_DATA_R = au8_portValue;
     462:	e2 e3       	ldi	r30, 0x32	; 50
     464:	f0 e0       	ldi	r31, 0x00	; 0
     466:	8b 81       	ldd	r24, Y+3	; 0x03
     468:	80 83       	st	Z, r24
        enu_ErrorState = DIO_E_PARAM_VALID;
     46a:	19 82       	std	Y+1, r1	; 0x01
     46c:	02 c0       	rjmp	.+4      	; 0x472 <DIO_writePort+0x88>
        break;
    default:
    	enu_ErrorState = DIO_E_PARAM_INVALID_PORT_ID;	/* Invalid port id */
     46e:	81 e0       	ldi	r24, 0x01	; 1
     470:	89 83       	std	Y+1, r24	; 0x01
        break;
    }
    return enu_ErrorState;
     472:	89 81       	ldd	r24, Y+1	; 0x01
}
     474:	0f 90       	pop	r0
     476:	0f 90       	pop	r0
     478:	0f 90       	pop	r0
     47a:	0f 90       	pop	r0
     47c:	0f 90       	pop	r0
     47e:	cf 91       	pop	r28
     480:	df 91       	pop	r29
     482:	08 95       	ret

00000484 <DIO_writePin>:
 * [in/out]		 	None
 *
 * [Returns]:       Error State
 ******************************************************************************/
enuDIO_E_STATE_t DIO_writePin(enuDIO_PortId_t enu_portID, enuDIO_PinId_t enu_pinID, uint8_t au8_pinValue)
{
     484:	df 93       	push	r29
     486:	cf 93       	push	r28
     488:	cd b7       	in	r28, 0x3d	; 61
     48a:	de b7       	in	r29, 0x3e	; 62
     48c:	28 97       	sbiw	r28, 0x08	; 8
     48e:	0f b6       	in	r0, 0x3f	; 63
     490:	f8 94       	cli
     492:	de bf       	out	0x3e, r29	; 62
     494:	0f be       	out	0x3f, r0	; 63
     496:	cd bf       	out	0x3d, r28	; 61
     498:	8a 83       	std	Y+2, r24	; 0x02
     49a:	6b 83       	std	Y+3, r22	; 0x03
     49c:	4c 83       	std	Y+4, r20	; 0x04
	enuDIO_E_STATE_t enu_ErrorState = E_NOT_OK;
     49e:	81 e0       	ldi	r24, 0x01	; 1
     4a0:	89 83       	std	Y+1, r24	; 0x01

	/* Check if the pin id is one of the existed pin or not */
	if ((enu_pinID >= PIN_0) && (enu_pinID <= PIN_7))
     4a2:	8b 81       	ldd	r24, Y+3	; 0x03
     4a4:	88 30       	cpi	r24, 0x08	; 8
     4a6:	08 f0       	brcs	.+2      	; 0x4aa <DIO_writePin+0x26>
     4a8:	fd c0       	rjmp	.+506    	; 0x6a4 <DIO_writePin+0x220>
	{
		if (au8_pinValue == HIGH)
     4aa:	8c 81       	ldd	r24, Y+4	; 0x04
     4ac:	81 30       	cpi	r24, 0x01	; 1
     4ae:	09 f0       	breq	.+2      	; 0x4b2 <DIO_writePin+0x2e>
     4b0:	77 c0       	rjmp	.+238    	; 0x5a0 <DIO_writePin+0x11c>
		{
			switch (enu_portID)
     4b2:	8a 81       	ldd	r24, Y+2	; 0x02
     4b4:	28 2f       	mov	r18, r24
     4b6:	30 e0       	ldi	r19, 0x00	; 0
     4b8:	38 87       	std	Y+8, r19	; 0x08
     4ba:	2f 83       	std	Y+7, r18	; 0x07
     4bc:	8f 81       	ldd	r24, Y+7	; 0x07
     4be:	98 85       	ldd	r25, Y+8	; 0x08
     4c0:	81 30       	cpi	r24, 0x01	; 1
     4c2:	91 05       	cpc	r25, r1
     4c4:	59 f1       	breq	.+86     	; 0x51c <DIO_writePin+0x98>
     4c6:	2f 81       	ldd	r18, Y+7	; 0x07
     4c8:	38 85       	ldd	r19, Y+8	; 0x08
     4ca:	22 30       	cpi	r18, 0x02	; 2
     4cc:	31 05       	cpc	r19, r1
     4ce:	2c f4       	brge	.+10     	; 0x4da <DIO_writePin+0x56>
     4d0:	8f 81       	ldd	r24, Y+7	; 0x07
     4d2:	98 85       	ldd	r25, Y+8	; 0x08
     4d4:	00 97       	sbiw	r24, 0x00	; 0
     4d6:	69 f0       	breq	.+26     	; 0x4f2 <DIO_writePin+0x6e>
     4d8:	60 c0       	rjmp	.+192    	; 0x59a <DIO_writePin+0x116>
     4da:	2f 81       	ldd	r18, Y+7	; 0x07
     4dc:	38 85       	ldd	r19, Y+8	; 0x08
     4de:	22 30       	cpi	r18, 0x02	; 2
     4e0:	31 05       	cpc	r19, r1
     4e2:	89 f1       	breq	.+98     	; 0x546 <DIO_writePin+0xc2>
     4e4:	8f 81       	ldd	r24, Y+7	; 0x07
     4e6:	98 85       	ldd	r25, Y+8	; 0x08
     4e8:	83 30       	cpi	r24, 0x03	; 3
     4ea:	91 05       	cpc	r25, r1
     4ec:	09 f4       	brne	.+2      	; 0x4f0 <DIO_writePin+0x6c>
     4ee:	40 c0       	rjmp	.+128    	; 0x570 <DIO_writePin+0xec>
     4f0:	54 c0       	rjmp	.+168    	; 0x59a <DIO_writePin+0x116>
			{
			case DIO_PORTA:
				SET_BIT(PORTA_DATA_R, enu_pinID);
     4f2:	ab e3       	ldi	r26, 0x3B	; 59
     4f4:	b0 e0       	ldi	r27, 0x00	; 0
     4f6:	eb e3       	ldi	r30, 0x3B	; 59
     4f8:	f0 e0       	ldi	r31, 0x00	; 0
     4fa:	80 81       	ld	r24, Z
     4fc:	48 2f       	mov	r20, r24
     4fe:	8b 81       	ldd	r24, Y+3	; 0x03
     500:	28 2f       	mov	r18, r24
     502:	30 e0       	ldi	r19, 0x00	; 0
     504:	81 e0       	ldi	r24, 0x01	; 1
     506:	90 e0       	ldi	r25, 0x00	; 0
     508:	02 2e       	mov	r0, r18
     50a:	02 c0       	rjmp	.+4      	; 0x510 <DIO_writePin+0x8c>
     50c:	88 0f       	add	r24, r24
     50e:	99 1f       	adc	r25, r25
     510:	0a 94       	dec	r0
     512:	e2 f7       	brpl	.-8      	; 0x50c <DIO_writePin+0x88>
     514:	84 2b       	or	r24, r20
     516:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
     518:	19 82       	std	Y+1, r1	; 0x01
     51a:	c6 c0       	rjmp	.+396    	; 0x6a8 <DIO_writePin+0x224>
				break;
			case DIO_PORTB:
				SET_BIT(PORTB_DATA_R, enu_pinID);
     51c:	a8 e3       	ldi	r26, 0x38	; 56
     51e:	b0 e0       	ldi	r27, 0x00	; 0
     520:	e8 e3       	ldi	r30, 0x38	; 56
     522:	f0 e0       	ldi	r31, 0x00	; 0
     524:	80 81       	ld	r24, Z
     526:	48 2f       	mov	r20, r24
     528:	8b 81       	ldd	r24, Y+3	; 0x03
     52a:	28 2f       	mov	r18, r24
     52c:	30 e0       	ldi	r19, 0x00	; 0
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	02 2e       	mov	r0, r18
     534:	02 c0       	rjmp	.+4      	; 0x53a <DIO_writePin+0xb6>
     536:	88 0f       	add	r24, r24
     538:	99 1f       	adc	r25, r25
     53a:	0a 94       	dec	r0
     53c:	e2 f7       	brpl	.-8      	; 0x536 <DIO_writePin+0xb2>
     53e:	84 2b       	or	r24, r20
     540:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
     542:	19 82       	std	Y+1, r1	; 0x01
     544:	b1 c0       	rjmp	.+354    	; 0x6a8 <DIO_writePin+0x224>
				break;
			case DIO_PORTC:
				SET_BIT(PORTC_DATA_R, enu_pinID);
     546:	a5 e3       	ldi	r26, 0x35	; 53
     548:	b0 e0       	ldi	r27, 0x00	; 0
     54a:	e5 e3       	ldi	r30, 0x35	; 53
     54c:	f0 e0       	ldi	r31, 0x00	; 0
     54e:	80 81       	ld	r24, Z
     550:	48 2f       	mov	r20, r24
     552:	8b 81       	ldd	r24, Y+3	; 0x03
     554:	28 2f       	mov	r18, r24
     556:	30 e0       	ldi	r19, 0x00	; 0
     558:	81 e0       	ldi	r24, 0x01	; 1
     55a:	90 e0       	ldi	r25, 0x00	; 0
     55c:	02 2e       	mov	r0, r18
     55e:	02 c0       	rjmp	.+4      	; 0x564 <DIO_writePin+0xe0>
     560:	88 0f       	add	r24, r24
     562:	99 1f       	adc	r25, r25
     564:	0a 94       	dec	r0
     566:	e2 f7       	brpl	.-8      	; 0x560 <DIO_writePin+0xdc>
     568:	84 2b       	or	r24, r20
     56a:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
     56c:	19 82       	std	Y+1, r1	; 0x01
     56e:	9c c0       	rjmp	.+312    	; 0x6a8 <DIO_writePin+0x224>
				break;
			case DIO_PORTD:
				SET_BIT(PORTD_DATA_R, enu_pinID);
     570:	a2 e3       	ldi	r26, 0x32	; 50
     572:	b0 e0       	ldi	r27, 0x00	; 0
     574:	e2 e3       	ldi	r30, 0x32	; 50
     576:	f0 e0       	ldi	r31, 0x00	; 0
     578:	80 81       	ld	r24, Z
     57a:	48 2f       	mov	r20, r24
     57c:	8b 81       	ldd	r24, Y+3	; 0x03
     57e:	28 2f       	mov	r18, r24
     580:	30 e0       	ldi	r19, 0x00	; 0
     582:	81 e0       	ldi	r24, 0x01	; 1
     584:	90 e0       	ldi	r25, 0x00	; 0
     586:	02 2e       	mov	r0, r18
     588:	02 c0       	rjmp	.+4      	; 0x58e <DIO_writePin+0x10a>
     58a:	88 0f       	add	r24, r24
     58c:	99 1f       	adc	r25, r25
     58e:	0a 94       	dec	r0
     590:	e2 f7       	brpl	.-8      	; 0x58a <DIO_writePin+0x106>
     592:	84 2b       	or	r24, r20
     594:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
     596:	19 82       	std	Y+1, r1	; 0x01
     598:	87 c0       	rjmp	.+270    	; 0x6a8 <DIO_writePin+0x224>
				break;
            default:
            	enu_ErrorState = DIO_E_PARAM_INVALID_PORT_ID;	/* Invalid port id */
     59a:	81 e0       	ldi	r24, 0x01	; 1
     59c:	89 83       	std	Y+1, r24	; 0x01
     59e:	84 c0       	rjmp	.+264    	; 0x6a8 <DIO_writePin+0x224>
                break;
			}
		}
		else if (au8_pinValue == LOW)
     5a0:	8c 81       	ldd	r24, Y+4	; 0x04
     5a2:	88 23       	and	r24, r24
     5a4:	09 f0       	breq	.+2      	; 0x5a8 <DIO_writePin+0x124>
     5a6:	7b c0       	rjmp	.+246    	; 0x69e <DIO_writePin+0x21a>
		{
			switch (enu_portID)
     5a8:	8a 81       	ldd	r24, Y+2	; 0x02
     5aa:	28 2f       	mov	r18, r24
     5ac:	30 e0       	ldi	r19, 0x00	; 0
     5ae:	3e 83       	std	Y+6, r19	; 0x06
     5b0:	2d 83       	std	Y+5, r18	; 0x05
     5b2:	8d 81       	ldd	r24, Y+5	; 0x05
     5b4:	9e 81       	ldd	r25, Y+6	; 0x06
     5b6:	81 30       	cpi	r24, 0x01	; 1
     5b8:	91 05       	cpc	r25, r1
     5ba:	61 f1       	breq	.+88     	; 0x614 <DIO_writePin+0x190>
     5bc:	2d 81       	ldd	r18, Y+5	; 0x05
     5be:	3e 81       	ldd	r19, Y+6	; 0x06
     5c0:	22 30       	cpi	r18, 0x02	; 2
     5c2:	31 05       	cpc	r19, r1
     5c4:	2c f4       	brge	.+10     	; 0x5d0 <DIO_writePin+0x14c>
     5c6:	8d 81       	ldd	r24, Y+5	; 0x05
     5c8:	9e 81       	ldd	r25, Y+6	; 0x06
     5ca:	00 97       	sbiw	r24, 0x00	; 0
     5cc:	69 f0       	breq	.+26     	; 0x5e8 <DIO_writePin+0x164>
     5ce:	64 c0       	rjmp	.+200    	; 0x698 <DIO_writePin+0x214>
     5d0:	2d 81       	ldd	r18, Y+5	; 0x05
     5d2:	3e 81       	ldd	r19, Y+6	; 0x06
     5d4:	22 30       	cpi	r18, 0x02	; 2
     5d6:	31 05       	cpc	r19, r1
     5d8:	99 f1       	breq	.+102    	; 0x640 <DIO_writePin+0x1bc>
     5da:	8d 81       	ldd	r24, Y+5	; 0x05
     5dc:	9e 81       	ldd	r25, Y+6	; 0x06
     5de:	83 30       	cpi	r24, 0x03	; 3
     5e0:	91 05       	cpc	r25, r1
     5e2:	09 f4       	brne	.+2      	; 0x5e6 <DIO_writePin+0x162>
     5e4:	43 c0       	rjmp	.+134    	; 0x66c <DIO_writePin+0x1e8>
     5e6:	58 c0       	rjmp	.+176    	; 0x698 <DIO_writePin+0x214>
			{
			case DIO_PORTA:
				CLEAR_BIT(PORTA_DATA_R, enu_pinID);
     5e8:	ab e3       	ldi	r26, 0x3B	; 59
     5ea:	b0 e0       	ldi	r27, 0x00	; 0
     5ec:	eb e3       	ldi	r30, 0x3B	; 59
     5ee:	f0 e0       	ldi	r31, 0x00	; 0
     5f0:	80 81       	ld	r24, Z
     5f2:	48 2f       	mov	r20, r24
     5f4:	8b 81       	ldd	r24, Y+3	; 0x03
     5f6:	28 2f       	mov	r18, r24
     5f8:	30 e0       	ldi	r19, 0x00	; 0
     5fa:	81 e0       	ldi	r24, 0x01	; 1
     5fc:	90 e0       	ldi	r25, 0x00	; 0
     5fe:	02 2e       	mov	r0, r18
     600:	02 c0       	rjmp	.+4      	; 0x606 <DIO_writePin+0x182>
     602:	88 0f       	add	r24, r24
     604:	99 1f       	adc	r25, r25
     606:	0a 94       	dec	r0
     608:	e2 f7       	brpl	.-8      	; 0x602 <DIO_writePin+0x17e>
     60a:	80 95       	com	r24
     60c:	84 23       	and	r24, r20
     60e:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
     610:	19 82       	std	Y+1, r1	; 0x01
     612:	4a c0       	rjmp	.+148    	; 0x6a8 <DIO_writePin+0x224>
				break;
			case DIO_PORTB:
				CLEAR_BIT(PORTB_DATA_R, enu_pinID);
     614:	a8 e3       	ldi	r26, 0x38	; 56
     616:	b0 e0       	ldi	r27, 0x00	; 0
     618:	e8 e3       	ldi	r30, 0x38	; 56
     61a:	f0 e0       	ldi	r31, 0x00	; 0
     61c:	80 81       	ld	r24, Z
     61e:	48 2f       	mov	r20, r24
     620:	8b 81       	ldd	r24, Y+3	; 0x03
     622:	28 2f       	mov	r18, r24
     624:	30 e0       	ldi	r19, 0x00	; 0
     626:	81 e0       	ldi	r24, 0x01	; 1
     628:	90 e0       	ldi	r25, 0x00	; 0
     62a:	02 2e       	mov	r0, r18
     62c:	02 c0       	rjmp	.+4      	; 0x632 <DIO_writePin+0x1ae>
     62e:	88 0f       	add	r24, r24
     630:	99 1f       	adc	r25, r25
     632:	0a 94       	dec	r0
     634:	e2 f7       	brpl	.-8      	; 0x62e <DIO_writePin+0x1aa>
     636:	80 95       	com	r24
     638:	84 23       	and	r24, r20
     63a:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
     63c:	19 82       	std	Y+1, r1	; 0x01
     63e:	34 c0       	rjmp	.+104    	; 0x6a8 <DIO_writePin+0x224>
				break;
			case DIO_PORTC:
				CLEAR_BIT(PORTC_DATA_R, enu_pinID);
     640:	a5 e3       	ldi	r26, 0x35	; 53
     642:	b0 e0       	ldi	r27, 0x00	; 0
     644:	e5 e3       	ldi	r30, 0x35	; 53
     646:	f0 e0       	ldi	r31, 0x00	; 0
     648:	80 81       	ld	r24, Z
     64a:	48 2f       	mov	r20, r24
     64c:	8b 81       	ldd	r24, Y+3	; 0x03
     64e:	28 2f       	mov	r18, r24
     650:	30 e0       	ldi	r19, 0x00	; 0
     652:	81 e0       	ldi	r24, 0x01	; 1
     654:	90 e0       	ldi	r25, 0x00	; 0
     656:	02 2e       	mov	r0, r18
     658:	02 c0       	rjmp	.+4      	; 0x65e <DIO_writePin+0x1da>
     65a:	88 0f       	add	r24, r24
     65c:	99 1f       	adc	r25, r25
     65e:	0a 94       	dec	r0
     660:	e2 f7       	brpl	.-8      	; 0x65a <DIO_writePin+0x1d6>
     662:	80 95       	com	r24
     664:	84 23       	and	r24, r20
     666:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
     668:	19 82       	std	Y+1, r1	; 0x01
     66a:	1e c0       	rjmp	.+60     	; 0x6a8 <DIO_writePin+0x224>
				break;
			case DIO_PORTD:
				CLEAR_BIT(PORTD_DATA_R, enu_pinID);
     66c:	a2 e3       	ldi	r26, 0x32	; 50
     66e:	b0 e0       	ldi	r27, 0x00	; 0
     670:	e2 e3       	ldi	r30, 0x32	; 50
     672:	f0 e0       	ldi	r31, 0x00	; 0
     674:	80 81       	ld	r24, Z
     676:	48 2f       	mov	r20, r24
     678:	8b 81       	ldd	r24, Y+3	; 0x03
     67a:	28 2f       	mov	r18, r24
     67c:	30 e0       	ldi	r19, 0x00	; 0
     67e:	81 e0       	ldi	r24, 0x01	; 1
     680:	90 e0       	ldi	r25, 0x00	; 0
     682:	02 2e       	mov	r0, r18
     684:	02 c0       	rjmp	.+4      	; 0x68a <DIO_writePin+0x206>
     686:	88 0f       	add	r24, r24
     688:	99 1f       	adc	r25, r25
     68a:	0a 94       	dec	r0
     68c:	e2 f7       	brpl	.-8      	; 0x686 <DIO_writePin+0x202>
     68e:	80 95       	com	r24
     690:	84 23       	and	r24, r20
     692:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
     694:	19 82       	std	Y+1, r1	; 0x01
     696:	08 c0       	rjmp	.+16     	; 0x6a8 <DIO_writePin+0x224>
				break;
            default:
            	enu_ErrorState = DIO_E_PARAM_INVALID_PORT_ID;	/* Invalid port id */
     698:	81 e0       	ldi	r24, 0x01	; 1
     69a:	89 83       	std	Y+1, r24	; 0x01
     69c:	05 c0       	rjmp	.+10     	; 0x6a8 <DIO_writePin+0x224>
                break;
			}
		}
		else
        {
			enu_ErrorState = DIO_E_PARAM_INVALID_PORT_DIR;	/* Invalid port direction */
     69e:	84 e0       	ldi	r24, 0x04	; 4
     6a0:	89 83       	std	Y+1, r24	; 0x01
     6a2:	02 c0       	rjmp	.+4      	; 0x6a8 <DIO_writePin+0x224>
		}
	}
	else
	{
		enu_ErrorState = DIO_E_PARAM_INVALID_PIN_ID;	/* Invalid pin id */
     6a4:	82 e0       	ldi	r24, 0x02	; 2
     6a6:	89 83       	std	Y+1, r24	; 0x01
	}
	return enu_ErrorState;
     6a8:	89 81       	ldd	r24, Y+1	; 0x01
}
     6aa:	28 96       	adiw	r28, 0x08	; 8
     6ac:	0f b6       	in	r0, 0x3f	; 63
     6ae:	f8 94       	cli
     6b0:	de bf       	out	0x3e, r29	; 62
     6b2:	0f be       	out	0x3f, r0	; 63
     6b4:	cd bf       	out	0x3d, r28	; 61
     6b6:	cf 91       	pop	r28
     6b8:	df 91       	pop	r29
     6ba:	08 95       	ret

000006bc <DIO_readPort>:
 * [in/out]		 	None
 *
 * [Returns]:       Error State
 ******************************************************************************/
enuDIO_E_STATE_t DIO_readPort(enuDIO_PortId_t enu_portID, uint8_t * ptr_portState)
{
     6bc:	df 93       	push	r29
     6be:	cf 93       	push	r28
     6c0:	00 d0       	rcall	.+0      	; 0x6c2 <DIO_readPort+0x6>
     6c2:	00 d0       	rcall	.+0      	; 0x6c4 <DIO_readPort+0x8>
     6c4:	00 d0       	rcall	.+0      	; 0x6c6 <DIO_readPort+0xa>
     6c6:	cd b7       	in	r28, 0x3d	; 61
     6c8:	de b7       	in	r29, 0x3e	; 62
     6ca:	8a 83       	std	Y+2, r24	; 0x02
     6cc:	7c 83       	std	Y+4, r23	; 0x04
     6ce:	6b 83       	std	Y+3, r22	; 0x03
	enuDIO_E_STATE_t enu_ErrorState = E_NOT_OK;
     6d0:	81 e0       	ldi	r24, 0x01	; 1
     6d2:	89 83       	std	Y+1, r24	; 0x01

	/* Check if the pointer is NULL pointer or not */
	if(ptr_portState == NULL_PTR)
     6d4:	8b 81       	ldd	r24, Y+3	; 0x03
     6d6:	9c 81       	ldd	r25, Y+4	; 0x04
     6d8:	00 97       	sbiw	r24, 0x00	; 0
     6da:	19 f4       	brne	.+6      	; 0x6e2 <DIO_readPort+0x26>
    {
		enu_ErrorState = DIO_E_PARAM_POINTER;	/* Invalid pointer */
     6dc:	85 e0       	ldi	r24, 0x05	; 5
     6de:	89 83       	std	Y+1, r24	; 0x01
     6e0:	41 c0       	rjmp	.+130    	; 0x764 <DIO_readPort+0xa8>
	}
	else
	{
		switch (enu_portID)
     6e2:	8a 81       	ldd	r24, Y+2	; 0x02
     6e4:	28 2f       	mov	r18, r24
     6e6:	30 e0       	ldi	r19, 0x00	; 0
     6e8:	3e 83       	std	Y+6, r19	; 0x06
     6ea:	2d 83       	std	Y+5, r18	; 0x05
     6ec:	8d 81       	ldd	r24, Y+5	; 0x05
     6ee:	9e 81       	ldd	r25, Y+6	; 0x06
     6f0:	81 30       	cpi	r24, 0x01	; 1
     6f2:	91 05       	cpc	r25, r1
     6f4:	e9 f0       	breq	.+58     	; 0x730 <DIO_readPort+0x74>
     6f6:	2d 81       	ldd	r18, Y+5	; 0x05
     6f8:	3e 81       	ldd	r19, Y+6	; 0x06
     6fa:	22 30       	cpi	r18, 0x02	; 2
     6fc:	31 05       	cpc	r19, r1
     6fe:	2c f4       	brge	.+10     	; 0x70a <DIO_readPort+0x4e>
     700:	8d 81       	ldd	r24, Y+5	; 0x05
     702:	9e 81       	ldd	r25, Y+6	; 0x06
     704:	00 97       	sbiw	r24, 0x00	; 0
     706:	61 f0       	breq	.+24     	; 0x720 <DIO_readPort+0x64>
     708:	2b c0       	rjmp	.+86     	; 0x760 <DIO_readPort+0xa4>
     70a:	2d 81       	ldd	r18, Y+5	; 0x05
     70c:	3e 81       	ldd	r19, Y+6	; 0x06
     70e:	22 30       	cpi	r18, 0x02	; 2
     710:	31 05       	cpc	r19, r1
     712:	b1 f0       	breq	.+44     	; 0x740 <DIO_readPort+0x84>
     714:	8d 81       	ldd	r24, Y+5	; 0x05
     716:	9e 81       	ldd	r25, Y+6	; 0x06
     718:	83 30       	cpi	r24, 0x03	; 3
     71a:	91 05       	cpc	r25, r1
     71c:	c9 f0       	breq	.+50     	; 0x750 <DIO_readPort+0x94>
     71e:	20 c0       	rjmp	.+64     	; 0x760 <DIO_readPort+0xa4>
		{
		case DIO_PORTA:
			*ptr_portState = PINA_INPUT_R;
     720:	e9 e3       	ldi	r30, 0x39	; 57
     722:	f0 e0       	ldi	r31, 0x00	; 0
     724:	80 81       	ld	r24, Z
     726:	eb 81       	ldd	r30, Y+3	; 0x03
     728:	fc 81       	ldd	r31, Y+4	; 0x04
     72a:	80 83       	st	Z, r24
			enu_ErrorState = DIO_E_PARAM_VALID;
     72c:	19 82       	std	Y+1, r1	; 0x01
     72e:	1a c0       	rjmp	.+52     	; 0x764 <DIO_readPort+0xa8>
			break;
		case DIO_PORTB:
			*ptr_portState = PINB_INPUT_R;
     730:	e6 e3       	ldi	r30, 0x36	; 54
     732:	f0 e0       	ldi	r31, 0x00	; 0
     734:	80 81       	ld	r24, Z
     736:	eb 81       	ldd	r30, Y+3	; 0x03
     738:	fc 81       	ldd	r31, Y+4	; 0x04
     73a:	80 83       	st	Z, r24
			enu_ErrorState = DIO_E_PARAM_VALID;;
     73c:	19 82       	std	Y+1, r1	; 0x01
     73e:	12 c0       	rjmp	.+36     	; 0x764 <DIO_readPort+0xa8>
			break;
		case DIO_PORTC:
			*ptr_portState = PINC_INPUT_R;
     740:	e3 e3       	ldi	r30, 0x33	; 51
     742:	f0 e0       	ldi	r31, 0x00	; 0
     744:	80 81       	ld	r24, Z
     746:	eb 81       	ldd	r30, Y+3	; 0x03
     748:	fc 81       	ldd	r31, Y+4	; 0x04
     74a:	80 83       	st	Z, r24
			enu_ErrorState = DIO_E_PARAM_VALID;
     74c:	19 82       	std	Y+1, r1	; 0x01
     74e:	0a c0       	rjmp	.+20     	; 0x764 <DIO_readPort+0xa8>
			break;
		case DIO_PORTD:
			*ptr_portState = PIND_INPUT_R;
     750:	e0 e3       	ldi	r30, 0x30	; 48
     752:	f0 e0       	ldi	r31, 0x00	; 0
     754:	80 81       	ld	r24, Z
     756:	eb 81       	ldd	r30, Y+3	; 0x03
     758:	fc 81       	ldd	r31, Y+4	; 0x04
     75a:	80 83       	st	Z, r24
			enu_ErrorState = DIO_E_PARAM_VALID;
     75c:	19 82       	std	Y+1, r1	; 0x01
     75e:	02 c0       	rjmp	.+4      	; 0x764 <DIO_readPort+0xa8>
			break;
		default:
			enu_ErrorState = DIO_E_PARAM_INVALID_PORT_ID;	/* Invalid port id */
     760:	81 e0       	ldi	r24, 0x01	; 1
     762:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return enu_ErrorState;
     764:	89 81       	ldd	r24, Y+1	; 0x01
}
     766:	26 96       	adiw	r28, 0x06	; 6
     768:	0f b6       	in	r0, 0x3f	; 63
     76a:	f8 94       	cli
     76c:	de bf       	out	0x3e, r29	; 62
     76e:	0f be       	out	0x3f, r0	; 63
     770:	cd bf       	out	0x3d, r28	; 61
     772:	cf 91       	pop	r28
     774:	df 91       	pop	r29
     776:	08 95       	ret

00000778 <DIO_readPin>:
 * [in/out]		 	None
 *
 * [Returns]:       Error State
 ******************************************************************************/
enuDIO_E_STATE_t DIO_readPin(enuDIO_PortId_t enu_portID, enuDIO_PinId_t enu_pinID, uint8_t * ptr_pinState)
{
     778:	df 93       	push	r29
     77a:	cf 93       	push	r28
     77c:	cd b7       	in	r28, 0x3d	; 61
     77e:	de b7       	in	r29, 0x3e	; 62
     780:	27 97       	sbiw	r28, 0x07	; 7
     782:	0f b6       	in	r0, 0x3f	; 63
     784:	f8 94       	cli
     786:	de bf       	out	0x3e, r29	; 62
     788:	0f be       	out	0x3f, r0	; 63
     78a:	cd bf       	out	0x3d, r28	; 61
     78c:	8a 83       	std	Y+2, r24	; 0x02
     78e:	6b 83       	std	Y+3, r22	; 0x03
     790:	5d 83       	std	Y+5, r21	; 0x05
     792:	4c 83       	std	Y+4, r20	; 0x04
	enuDIO_E_STATE_t enu_ErrorState = E_NOT_OK;
     794:	81 e0       	ldi	r24, 0x01	; 1
     796:	89 83       	std	Y+1, r24	; 0x01

	/* Check if the pointer is NULL pointer or not */
	if(ptr_pinState == NULL_PTR)
     798:	8c 81       	ldd	r24, Y+4	; 0x04
     79a:	9d 81       	ldd	r25, Y+5	; 0x05
     79c:	00 97       	sbiw	r24, 0x00	; 0
     79e:	19 f4       	brne	.+6      	; 0x7a6 <DIO_readPin+0x2e>
    {
		enu_ErrorState = DIO_E_PARAM_POINTER;
     7a0:	85 e0       	ldi	r24, 0x05	; 5
     7a2:	89 83       	std	Y+1, r24	; 0x01
     7a4:	af c0       	rjmp	.+350    	; 0x904 <__stack+0xa5>
	}
	else
	{
        if((enu_pinID >= PIN_0) && (enu_pinID <= PIN_7))
     7a6:	8b 81       	ldd	r24, Y+3	; 0x03
     7a8:	88 30       	cpi	r24, 0x08	; 8
     7aa:	08 f0       	brcs	.+2      	; 0x7ae <DIO_readPin+0x36>
     7ac:	a9 c0       	rjmp	.+338    	; 0x900 <__stack+0xa1>
        {
            switch (enu_portID)
     7ae:	8a 81       	ldd	r24, Y+2	; 0x02
     7b0:	28 2f       	mov	r18, r24
     7b2:	30 e0       	ldi	r19, 0x00	; 0
     7b4:	3f 83       	std	Y+7, r19	; 0x07
     7b6:	2e 83       	std	Y+6, r18	; 0x06
     7b8:	4e 81       	ldd	r20, Y+6	; 0x06
     7ba:	5f 81       	ldd	r21, Y+7	; 0x07
     7bc:	41 30       	cpi	r20, 0x01	; 1
     7be:	51 05       	cpc	r21, r1
     7c0:	c9 f1       	breq	.+114    	; 0x834 <DIO_readPin+0xbc>
     7c2:	8e 81       	ldd	r24, Y+6	; 0x06
     7c4:	9f 81       	ldd	r25, Y+7	; 0x07
     7c6:	82 30       	cpi	r24, 0x02	; 2
     7c8:	91 05       	cpc	r25, r1
     7ca:	34 f4       	brge	.+12     	; 0x7d8 <DIO_readPin+0x60>
     7cc:	2e 81       	ldd	r18, Y+6	; 0x06
     7ce:	3f 81       	ldd	r19, Y+7	; 0x07
     7d0:	21 15       	cp	r18, r1
     7d2:	31 05       	cpc	r19, r1
     7d4:	71 f0       	breq	.+28     	; 0x7f2 <DIO_readPin+0x7a>
     7d6:	91 c0       	rjmp	.+290    	; 0x8fa <__stack+0x9b>
     7d8:	4e 81       	ldd	r20, Y+6	; 0x06
     7da:	5f 81       	ldd	r21, Y+7	; 0x07
     7dc:	42 30       	cpi	r20, 0x02	; 2
     7de:	51 05       	cpc	r21, r1
     7e0:	09 f4       	brne	.+2      	; 0x7e4 <DIO_readPin+0x6c>
     7e2:	49 c0       	rjmp	.+146    	; 0x876 <__stack+0x17>
     7e4:	8e 81       	ldd	r24, Y+6	; 0x06
     7e6:	9f 81       	ldd	r25, Y+7	; 0x07
     7e8:	83 30       	cpi	r24, 0x03	; 3
     7ea:	91 05       	cpc	r25, r1
     7ec:	09 f4       	brne	.+2      	; 0x7f0 <DIO_readPin+0x78>
     7ee:	64 c0       	rjmp	.+200    	; 0x8b8 <__stack+0x59>
     7f0:	84 c0       	rjmp	.+264    	; 0x8fa <__stack+0x9b>
            {
            case DIO_PORTA:
                *ptr_pinState = READ_BIT(PINA_INPUT_R, enu_pinID);
     7f2:	e9 e3       	ldi	r30, 0x39	; 57
     7f4:	f0 e0       	ldi	r31, 0x00	; 0
     7f6:	80 81       	ld	r24, Z
     7f8:	48 2f       	mov	r20, r24
     7fa:	50 e0       	ldi	r21, 0x00	; 0
     7fc:	8b 81       	ldd	r24, Y+3	; 0x03
     7fe:	28 2f       	mov	r18, r24
     800:	30 e0       	ldi	r19, 0x00	; 0
     802:	81 e0       	ldi	r24, 0x01	; 1
     804:	90 e0       	ldi	r25, 0x00	; 0
     806:	02 c0       	rjmp	.+4      	; 0x80c <DIO_readPin+0x94>
     808:	88 0f       	add	r24, r24
     80a:	99 1f       	adc	r25, r25
     80c:	2a 95       	dec	r18
     80e:	e2 f7       	brpl	.-8      	; 0x808 <DIO_readPin+0x90>
     810:	9a 01       	movw	r18, r20
     812:	28 23       	and	r18, r24
     814:	39 23       	and	r19, r25
     816:	8b 81       	ldd	r24, Y+3	; 0x03
     818:	88 2f       	mov	r24, r24
     81a:	90 e0       	ldi	r25, 0x00	; 0
     81c:	a9 01       	movw	r20, r18
     81e:	02 c0       	rjmp	.+4      	; 0x824 <DIO_readPin+0xac>
     820:	55 95       	asr	r21
     822:	47 95       	ror	r20
     824:	8a 95       	dec	r24
     826:	e2 f7       	brpl	.-8      	; 0x820 <DIO_readPin+0xa8>
     828:	ca 01       	movw	r24, r20
     82a:	ec 81       	ldd	r30, Y+4	; 0x04
     82c:	fd 81       	ldd	r31, Y+5	; 0x05
     82e:	80 83       	st	Z, r24
                enu_ErrorState = DIO_E_PARAM_VALID;
     830:	19 82       	std	Y+1, r1	; 0x01
     832:	68 c0       	rjmp	.+208    	; 0x904 <__stack+0xa5>
                break;
            case DIO_PORTB:
                *ptr_pinState = READ_BIT(PINB_INPUT_R, enu_pinID);
     834:	e6 e3       	ldi	r30, 0x36	; 54
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	80 81       	ld	r24, Z
     83a:	48 2f       	mov	r20, r24
     83c:	50 e0       	ldi	r21, 0x00	; 0
     83e:	8b 81       	ldd	r24, Y+3	; 0x03
     840:	28 2f       	mov	r18, r24
     842:	30 e0       	ldi	r19, 0x00	; 0
     844:	81 e0       	ldi	r24, 0x01	; 1
     846:	90 e0       	ldi	r25, 0x00	; 0
     848:	02 c0       	rjmp	.+4      	; 0x84e <DIO_readPin+0xd6>
     84a:	88 0f       	add	r24, r24
     84c:	99 1f       	adc	r25, r25
     84e:	2a 95       	dec	r18
     850:	e2 f7       	brpl	.-8      	; 0x84a <DIO_readPin+0xd2>
     852:	9a 01       	movw	r18, r20
     854:	28 23       	and	r18, r24
     856:	39 23       	and	r19, r25
     858:	8b 81       	ldd	r24, Y+3	; 0x03
     85a:	88 2f       	mov	r24, r24
     85c:	90 e0       	ldi	r25, 0x00	; 0
     85e:	a9 01       	movw	r20, r18
     860:	02 c0       	rjmp	.+4      	; 0x866 <__stack+0x7>
     862:	55 95       	asr	r21
     864:	47 95       	ror	r20
     866:	8a 95       	dec	r24
     868:	e2 f7       	brpl	.-8      	; 0x862 <__stack+0x3>
     86a:	ca 01       	movw	r24, r20
     86c:	ec 81       	ldd	r30, Y+4	; 0x04
     86e:	fd 81       	ldd	r31, Y+5	; 0x05
     870:	80 83       	st	Z, r24
                enu_ErrorState = DIO_E_PARAM_VALID;
     872:	19 82       	std	Y+1, r1	; 0x01
     874:	47 c0       	rjmp	.+142    	; 0x904 <__stack+0xa5>
                break;
            case DIO_PORTC:
                *ptr_pinState = READ_BIT(PINC_INPUT_R, enu_pinID);
     876:	e3 e3       	ldi	r30, 0x33	; 51
     878:	f0 e0       	ldi	r31, 0x00	; 0
     87a:	80 81       	ld	r24, Z
     87c:	48 2f       	mov	r20, r24
     87e:	50 e0       	ldi	r21, 0x00	; 0
     880:	8b 81       	ldd	r24, Y+3	; 0x03
     882:	28 2f       	mov	r18, r24
     884:	30 e0       	ldi	r19, 0x00	; 0
     886:	81 e0       	ldi	r24, 0x01	; 1
     888:	90 e0       	ldi	r25, 0x00	; 0
     88a:	02 c0       	rjmp	.+4      	; 0x890 <__stack+0x31>
     88c:	88 0f       	add	r24, r24
     88e:	99 1f       	adc	r25, r25
     890:	2a 95       	dec	r18
     892:	e2 f7       	brpl	.-8      	; 0x88c <__stack+0x2d>
     894:	9a 01       	movw	r18, r20
     896:	28 23       	and	r18, r24
     898:	39 23       	and	r19, r25
     89a:	8b 81       	ldd	r24, Y+3	; 0x03
     89c:	88 2f       	mov	r24, r24
     89e:	90 e0       	ldi	r25, 0x00	; 0
     8a0:	a9 01       	movw	r20, r18
     8a2:	02 c0       	rjmp	.+4      	; 0x8a8 <__stack+0x49>
     8a4:	55 95       	asr	r21
     8a6:	47 95       	ror	r20
     8a8:	8a 95       	dec	r24
     8aa:	e2 f7       	brpl	.-8      	; 0x8a4 <__stack+0x45>
     8ac:	ca 01       	movw	r24, r20
     8ae:	ec 81       	ldd	r30, Y+4	; 0x04
     8b0:	fd 81       	ldd	r31, Y+5	; 0x05
     8b2:	80 83       	st	Z, r24
                enu_ErrorState = DIO_E_PARAM_VALID;
     8b4:	19 82       	std	Y+1, r1	; 0x01
     8b6:	26 c0       	rjmp	.+76     	; 0x904 <__stack+0xa5>
                break;
            case DIO_PORTD:
                *ptr_pinState = READ_BIT(PIND_INPUT_R, enu_pinID);
     8b8:	e0 e3       	ldi	r30, 0x30	; 48
     8ba:	f0 e0       	ldi	r31, 0x00	; 0
     8bc:	80 81       	ld	r24, Z
     8be:	48 2f       	mov	r20, r24
     8c0:	50 e0       	ldi	r21, 0x00	; 0
     8c2:	8b 81       	ldd	r24, Y+3	; 0x03
     8c4:	28 2f       	mov	r18, r24
     8c6:	30 e0       	ldi	r19, 0x00	; 0
     8c8:	81 e0       	ldi	r24, 0x01	; 1
     8ca:	90 e0       	ldi	r25, 0x00	; 0
     8cc:	02 c0       	rjmp	.+4      	; 0x8d2 <__stack+0x73>
     8ce:	88 0f       	add	r24, r24
     8d0:	99 1f       	adc	r25, r25
     8d2:	2a 95       	dec	r18
     8d4:	e2 f7       	brpl	.-8      	; 0x8ce <__stack+0x6f>
     8d6:	9a 01       	movw	r18, r20
     8d8:	28 23       	and	r18, r24
     8da:	39 23       	and	r19, r25
     8dc:	8b 81       	ldd	r24, Y+3	; 0x03
     8de:	88 2f       	mov	r24, r24
     8e0:	90 e0       	ldi	r25, 0x00	; 0
     8e2:	a9 01       	movw	r20, r18
     8e4:	02 c0       	rjmp	.+4      	; 0x8ea <__stack+0x8b>
     8e6:	55 95       	asr	r21
     8e8:	47 95       	ror	r20
     8ea:	8a 95       	dec	r24
     8ec:	e2 f7       	brpl	.-8      	; 0x8e6 <__stack+0x87>
     8ee:	ca 01       	movw	r24, r20
     8f0:	ec 81       	ldd	r30, Y+4	; 0x04
     8f2:	fd 81       	ldd	r31, Y+5	; 0x05
     8f4:	80 83       	st	Z, r24
                enu_ErrorState = DIO_E_PARAM_VALID;
     8f6:	19 82       	std	Y+1, r1	; 0x01
     8f8:	05 c0       	rjmp	.+10     	; 0x904 <__stack+0xa5>
                break;
            default:
            	enu_ErrorState = DIO_E_PARAM_INVALID_PORT_ID;	/* Invalid port id */
     8fa:	81 e0       	ldi	r24, 0x01	; 1
     8fc:	89 83       	std	Y+1, r24	; 0x01
     8fe:	02 c0       	rjmp	.+4      	; 0x904 <__stack+0xa5>
                break;
            }
        }
        else
        {
        	enu_ErrorState = DIO_E_PARAM_INVALID_PIN_ID;	/* Invalid pin id */
     900:	82 e0       	ldi	r24, 0x02	; 2
     902:	89 83       	std	Y+1, r24	; 0x01
        }
	}
    return enu_ErrorState;
     904:	89 81       	ldd	r24, Y+1	; 0x01
}
     906:	27 96       	adiw	r28, 0x07	; 7
     908:	0f b6       	in	r0, 0x3f	; 63
     90a:	f8 94       	cli
     90c:	de bf       	out	0x3e, r29	; 62
     90e:	0f be       	out	0x3f, r0	; 63
     910:	cd bf       	out	0x3d, r28	; 61
     912:	cf 91       	pop	r28
     914:	df 91       	pop	r29
     916:	08 95       	ret

00000918 <DIO_TogglePin>:
 * [in/out]		 	None
 *
 * [Returns]:       Error State
 ******************************************************************************/
enuDIO_E_STATE_t DIO_TogglePin(enuDIO_PortId_t enu_portID, enuDIO_PinId_t enu_pinID)
{
     918:	df 93       	push	r29
     91a:	cf 93       	push	r28
     91c:	00 d0       	rcall	.+0      	; 0x91e <DIO_TogglePin+0x6>
     91e:	00 d0       	rcall	.+0      	; 0x920 <DIO_TogglePin+0x8>
     920:	0f 92       	push	r0
     922:	cd b7       	in	r28, 0x3d	; 61
     924:	de b7       	in	r29, 0x3e	; 62
     926:	8a 83       	std	Y+2, r24	; 0x02
     928:	6b 83       	std	Y+3, r22	; 0x03
	enuDIO_E_STATE_t enu_ErrorState = E_NOT_OK;
     92a:	81 e0       	ldi	r24, 0x01	; 1
     92c:	89 83       	std	Y+1, r24	; 0x01

	/* Check if the pointer is NULL pointer or not */
    if ((enu_pinID >= PIN_0) && (enu_pinID <= PIN_7))
     92e:	8b 81       	ldd	r24, Y+3	; 0x03
     930:	88 30       	cpi	r24, 0x08	; 8
     932:	08 f0       	brcs	.+2      	; 0x936 <DIO_TogglePin+0x1e>
     934:	77 c0       	rjmp	.+238    	; 0xa24 <DIO_TogglePin+0x10c>
    {
        switch (enu_portID)
     936:	8a 81       	ldd	r24, Y+2	; 0x02
     938:	28 2f       	mov	r18, r24
     93a:	30 e0       	ldi	r19, 0x00	; 0
     93c:	3d 83       	std	Y+5, r19	; 0x05
     93e:	2c 83       	std	Y+4, r18	; 0x04
     940:	8c 81       	ldd	r24, Y+4	; 0x04
     942:	9d 81       	ldd	r25, Y+5	; 0x05
     944:	81 30       	cpi	r24, 0x01	; 1
     946:	91 05       	cpc	r25, r1
     948:	59 f1       	breq	.+86     	; 0x9a0 <DIO_TogglePin+0x88>
     94a:	2c 81       	ldd	r18, Y+4	; 0x04
     94c:	3d 81       	ldd	r19, Y+5	; 0x05
     94e:	22 30       	cpi	r18, 0x02	; 2
     950:	31 05       	cpc	r19, r1
     952:	2c f4       	brge	.+10     	; 0x95e <DIO_TogglePin+0x46>
     954:	8c 81       	ldd	r24, Y+4	; 0x04
     956:	9d 81       	ldd	r25, Y+5	; 0x05
     958:	00 97       	sbiw	r24, 0x00	; 0
     95a:	69 f0       	breq	.+26     	; 0x976 <DIO_TogglePin+0x5e>
     95c:	60 c0       	rjmp	.+192    	; 0xa1e <DIO_TogglePin+0x106>
     95e:	2c 81       	ldd	r18, Y+4	; 0x04
     960:	3d 81       	ldd	r19, Y+5	; 0x05
     962:	22 30       	cpi	r18, 0x02	; 2
     964:	31 05       	cpc	r19, r1
     966:	89 f1       	breq	.+98     	; 0x9ca <DIO_TogglePin+0xb2>
     968:	8c 81       	ldd	r24, Y+4	; 0x04
     96a:	9d 81       	ldd	r25, Y+5	; 0x05
     96c:	83 30       	cpi	r24, 0x03	; 3
     96e:	91 05       	cpc	r25, r1
     970:	09 f4       	brne	.+2      	; 0x974 <DIO_TogglePin+0x5c>
     972:	40 c0       	rjmp	.+128    	; 0x9f4 <DIO_TogglePin+0xdc>
     974:	54 c0       	rjmp	.+168    	; 0xa1e <DIO_TogglePin+0x106>
        {
        case DIO_PORTA:
            TOGGLE_BIT(PORTA_DATA_R, enu_pinID);
     976:	ab e3       	ldi	r26, 0x3B	; 59
     978:	b0 e0       	ldi	r27, 0x00	; 0
     97a:	eb e3       	ldi	r30, 0x3B	; 59
     97c:	f0 e0       	ldi	r31, 0x00	; 0
     97e:	80 81       	ld	r24, Z
     980:	48 2f       	mov	r20, r24
     982:	8b 81       	ldd	r24, Y+3	; 0x03
     984:	28 2f       	mov	r18, r24
     986:	30 e0       	ldi	r19, 0x00	; 0
     988:	81 e0       	ldi	r24, 0x01	; 1
     98a:	90 e0       	ldi	r25, 0x00	; 0
     98c:	02 2e       	mov	r0, r18
     98e:	02 c0       	rjmp	.+4      	; 0x994 <DIO_TogglePin+0x7c>
     990:	88 0f       	add	r24, r24
     992:	99 1f       	adc	r25, r25
     994:	0a 94       	dec	r0
     996:	e2 f7       	brpl	.-8      	; 0x990 <DIO_TogglePin+0x78>
     998:	84 27       	eor	r24, r20
     99a:	8c 93       	st	X, r24
            enu_ErrorState = DIO_E_PARAM_VALID;
     99c:	19 82       	std	Y+1, r1	; 0x01
     99e:	44 c0       	rjmp	.+136    	; 0xa28 <DIO_TogglePin+0x110>
            break;
        case DIO_PORTB:
        	TOGGLE_BIT(PORTB_DATA_R, enu_pinID);
     9a0:	a8 e3       	ldi	r26, 0x38	; 56
     9a2:	b0 e0       	ldi	r27, 0x00	; 0
     9a4:	e8 e3       	ldi	r30, 0x38	; 56
     9a6:	f0 e0       	ldi	r31, 0x00	; 0
     9a8:	80 81       	ld	r24, Z
     9aa:	48 2f       	mov	r20, r24
     9ac:	8b 81       	ldd	r24, Y+3	; 0x03
     9ae:	28 2f       	mov	r18, r24
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	81 e0       	ldi	r24, 0x01	; 1
     9b4:	90 e0       	ldi	r25, 0x00	; 0
     9b6:	02 2e       	mov	r0, r18
     9b8:	02 c0       	rjmp	.+4      	; 0x9be <DIO_TogglePin+0xa6>
     9ba:	88 0f       	add	r24, r24
     9bc:	99 1f       	adc	r25, r25
     9be:	0a 94       	dec	r0
     9c0:	e2 f7       	brpl	.-8      	; 0x9ba <DIO_TogglePin+0xa2>
     9c2:	84 27       	eor	r24, r20
     9c4:	8c 93       	st	X, r24
            enu_ErrorState = DIO_E_PARAM_VALID;
     9c6:	19 82       	std	Y+1, r1	; 0x01
     9c8:	2f c0       	rjmp	.+94     	; 0xa28 <DIO_TogglePin+0x110>
            break;
        case DIO_PORTC:
        	TOGGLE_BIT(PORTC_DATA_R, enu_pinID);
     9ca:	a5 e3       	ldi	r26, 0x35	; 53
     9cc:	b0 e0       	ldi	r27, 0x00	; 0
     9ce:	e5 e3       	ldi	r30, 0x35	; 53
     9d0:	f0 e0       	ldi	r31, 0x00	; 0
     9d2:	80 81       	ld	r24, Z
     9d4:	48 2f       	mov	r20, r24
     9d6:	8b 81       	ldd	r24, Y+3	; 0x03
     9d8:	28 2f       	mov	r18, r24
     9da:	30 e0       	ldi	r19, 0x00	; 0
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	02 2e       	mov	r0, r18
     9e2:	02 c0       	rjmp	.+4      	; 0x9e8 <DIO_TogglePin+0xd0>
     9e4:	88 0f       	add	r24, r24
     9e6:	99 1f       	adc	r25, r25
     9e8:	0a 94       	dec	r0
     9ea:	e2 f7       	brpl	.-8      	; 0x9e4 <DIO_TogglePin+0xcc>
     9ec:	84 27       	eor	r24, r20
     9ee:	8c 93       	st	X, r24
            enu_ErrorState = DIO_E_PARAM_VALID;
     9f0:	19 82       	std	Y+1, r1	; 0x01
     9f2:	1a c0       	rjmp	.+52     	; 0xa28 <DIO_TogglePin+0x110>
            break;
        case DIO_PORTD:
        	TOGGLE_BIT(PORTD_DATA_R, enu_pinID);
     9f4:	a2 e3       	ldi	r26, 0x32	; 50
     9f6:	b0 e0       	ldi	r27, 0x00	; 0
     9f8:	e2 e3       	ldi	r30, 0x32	; 50
     9fa:	f0 e0       	ldi	r31, 0x00	; 0
     9fc:	80 81       	ld	r24, Z
     9fe:	48 2f       	mov	r20, r24
     a00:	8b 81       	ldd	r24, Y+3	; 0x03
     a02:	28 2f       	mov	r18, r24
     a04:	30 e0       	ldi	r19, 0x00	; 0
     a06:	81 e0       	ldi	r24, 0x01	; 1
     a08:	90 e0       	ldi	r25, 0x00	; 0
     a0a:	02 2e       	mov	r0, r18
     a0c:	02 c0       	rjmp	.+4      	; 0xa12 <DIO_TogglePin+0xfa>
     a0e:	88 0f       	add	r24, r24
     a10:	99 1f       	adc	r25, r25
     a12:	0a 94       	dec	r0
     a14:	e2 f7       	brpl	.-8      	; 0xa0e <DIO_TogglePin+0xf6>
     a16:	84 27       	eor	r24, r20
     a18:	8c 93       	st	X, r24
            enu_ErrorState = DIO_E_PARAM_VALID;
     a1a:	19 82       	std	Y+1, r1	; 0x01
     a1c:	05 c0       	rjmp	.+10     	; 0xa28 <DIO_TogglePin+0x110>
            break;
        default:
        	enu_ErrorState = E_NOT_OK;	/* Invalid port id */
     a1e:	81 e0       	ldi	r24, 0x01	; 1
     a20:	89 83       	std	Y+1, r24	; 0x01
     a22:	02 c0       	rjmp	.+4      	; 0xa28 <DIO_TogglePin+0x110>
            break;
        }
    }
    else
    {
    	enu_ErrorState = DIO_E_PARAM_INVALID_PIN_ID;	/* Invalid pin id */
     a24:	82 e0       	ldi	r24, 0x02	; 2
     a26:	89 83       	std	Y+1, r24	; 0x01
    }
    return enu_ErrorState;
     a28:	89 81       	ldd	r24, Y+1	; 0x01
}
     a2a:	0f 90       	pop	r0
     a2c:	0f 90       	pop	r0
     a2e:	0f 90       	pop	r0
     a30:	0f 90       	pop	r0
     a32:	0f 90       	pop	r0
     a34:	cf 91       	pop	r28
     a36:	df 91       	pop	r29
     a38:	08 95       	ret

00000a3a <__vector_11>:
/************************************************************************************
 *                                     TIMER0                                       *
 ************************************************************************************/

ISR(TIMER0_OVF_vect)
{
     a3a:	1f 92       	push	r1
     a3c:	0f 92       	push	r0
     a3e:	0f b6       	in	r0, 0x3f	; 63
     a40:	0f 92       	push	r0
     a42:	11 24       	eor	r1, r1
     a44:	2f 93       	push	r18
     a46:	3f 93       	push	r19
     a48:	4f 93       	push	r20
     a4a:	5f 93       	push	r21
     a4c:	6f 93       	push	r22
     a4e:	7f 93       	push	r23
     a50:	8f 93       	push	r24
     a52:	9f 93       	push	r25
     a54:	af 93       	push	r26
     a56:	bf 93       	push	r27
     a58:	ef 93       	push	r30
     a5a:	ff 93       	push	r31
     a5c:	df 93       	push	r29
     a5e:	cf 93       	push	r28
     a60:	cd b7       	in	r28, 0x3d	; 61
     a62:	de b7       	in	r29, 0x3e	; 62
	/* Check if Pointer is not a NULL one, to avoid Segmentation fault */
	if(g_callBackPtrTimer0 != NULL_PTR)
     a64:	80 91 66 00 	lds	r24, 0x0066
     a68:	90 91 67 00 	lds	r25, 0x0067
     a6c:	00 97       	sbiw	r24, 0x00	; 0
     a6e:	29 f0       	breq	.+10     	; 0xa7a <__vector_11+0x40>
	{
		/*
		 * Call the callback function in the application after the overflow has
		 * occurred in TIMER0 (NORMAL MODE)
		 */
		(*g_callBackPtrTimer0)();
     a70:	e0 91 66 00 	lds	r30, 0x0066
     a74:	f0 91 67 00 	lds	r31, 0x0067
     a78:	09 95       	icall
	}
}
     a7a:	cf 91       	pop	r28
     a7c:	df 91       	pop	r29
     a7e:	ff 91       	pop	r31
     a80:	ef 91       	pop	r30
     a82:	bf 91       	pop	r27
     a84:	af 91       	pop	r26
     a86:	9f 91       	pop	r25
     a88:	8f 91       	pop	r24
     a8a:	7f 91       	pop	r23
     a8c:	6f 91       	pop	r22
     a8e:	5f 91       	pop	r21
     a90:	4f 91       	pop	r20
     a92:	3f 91       	pop	r19
     a94:	2f 91       	pop	r18
     a96:	0f 90       	pop	r0
     a98:	0f be       	out	0x3f, r0	; 63
     a9a:	0f 90       	pop	r0
     a9c:	1f 90       	pop	r1
     a9e:	18 95       	reti

00000aa0 <__vector_10>:

ISR(TIMER0_COMP_vect)
{
     aa0:	1f 92       	push	r1
     aa2:	0f 92       	push	r0
     aa4:	0f b6       	in	r0, 0x3f	; 63
     aa6:	0f 92       	push	r0
     aa8:	11 24       	eor	r1, r1
     aaa:	2f 93       	push	r18
     aac:	3f 93       	push	r19
     aae:	4f 93       	push	r20
     ab0:	5f 93       	push	r21
     ab2:	6f 93       	push	r22
     ab4:	7f 93       	push	r23
     ab6:	8f 93       	push	r24
     ab8:	9f 93       	push	r25
     aba:	af 93       	push	r26
     abc:	bf 93       	push	r27
     abe:	ef 93       	push	r30
     ac0:	ff 93       	push	r31
     ac2:	df 93       	push	r29
     ac4:	cf 93       	push	r28
     ac6:	cd b7       	in	r28, 0x3d	; 61
     ac8:	de b7       	in	r29, 0x3e	; 62
	/* Check if Pointer is not a NULL one, to avoid Segmentation fault */
	if(g_callBackPtrTimer0 != NULL_PTR)
     aca:	80 91 66 00 	lds	r24, 0x0066
     ace:	90 91 67 00 	lds	r25, 0x0067
     ad2:	00 97       	sbiw	r24, 0x00	; 0
     ad4:	29 f0       	breq	.+10     	; 0xae0 <__vector_10+0x40>
	{
		/*
		 * Call the callback function in the application after the compare match has
		 * occurred in TIMER0 (COMPARE MODE)
		 */
		(*g_callBackPtrTimer0)();
     ad6:	e0 91 66 00 	lds	r30, 0x0066
     ada:	f0 91 67 00 	lds	r31, 0x0067
     ade:	09 95       	icall
	}
}
     ae0:	cf 91       	pop	r28
     ae2:	df 91       	pop	r29
     ae4:	ff 91       	pop	r31
     ae6:	ef 91       	pop	r30
     ae8:	bf 91       	pop	r27
     aea:	af 91       	pop	r26
     aec:	9f 91       	pop	r25
     aee:	8f 91       	pop	r24
     af0:	7f 91       	pop	r23
     af2:	6f 91       	pop	r22
     af4:	5f 91       	pop	r21
     af6:	4f 91       	pop	r20
     af8:	3f 91       	pop	r19
     afa:	2f 91       	pop	r18
     afc:	0f 90       	pop	r0
     afe:	0f be       	out	0x3f, r0	; 63
     b00:	0f 90       	pop	r0
     b02:	1f 90       	pop	r1
     b04:	18 95       	reti

00000b06 <__vector_9>:
/************************************************************************************
 *                                       TIMER1                                     *
 ************************************************************************************/

ISR(TIMER1_OVF_vect)
{
     b06:	1f 92       	push	r1
     b08:	0f 92       	push	r0
     b0a:	0f b6       	in	r0, 0x3f	; 63
     b0c:	0f 92       	push	r0
     b0e:	11 24       	eor	r1, r1
     b10:	2f 93       	push	r18
     b12:	3f 93       	push	r19
     b14:	4f 93       	push	r20
     b16:	5f 93       	push	r21
     b18:	6f 93       	push	r22
     b1a:	7f 93       	push	r23
     b1c:	8f 93       	push	r24
     b1e:	9f 93       	push	r25
     b20:	af 93       	push	r26
     b22:	bf 93       	push	r27
     b24:	ef 93       	push	r30
     b26:	ff 93       	push	r31
     b28:	df 93       	push	r29
     b2a:	cf 93       	push	r28
     b2c:	cd b7       	in	r28, 0x3d	; 61
     b2e:	de b7       	in	r29, 0x3e	; 62
	/* Check if Pointer is not a NULL one, to avoid Segmentation fault */
	if(g_callBackPtrTimer1 != NULL_PTR)
     b30:	80 91 68 00 	lds	r24, 0x0068
     b34:	90 91 69 00 	lds	r25, 0x0069
     b38:	00 97       	sbiw	r24, 0x00	; 0
     b3a:	29 f0       	breq	.+10     	; 0xb46 <__vector_9+0x40>
	{
		/*
		 * Call the callback function in the application after the overflow has
		 * occurred in TIMER1 (NORMAL MODE)
		 */
		(*g_callBackPtrTimer1)();
     b3c:	e0 91 68 00 	lds	r30, 0x0068
     b40:	f0 91 69 00 	lds	r31, 0x0069
     b44:	09 95       	icall
	}
}
     b46:	cf 91       	pop	r28
     b48:	df 91       	pop	r29
     b4a:	ff 91       	pop	r31
     b4c:	ef 91       	pop	r30
     b4e:	bf 91       	pop	r27
     b50:	af 91       	pop	r26
     b52:	9f 91       	pop	r25
     b54:	8f 91       	pop	r24
     b56:	7f 91       	pop	r23
     b58:	6f 91       	pop	r22
     b5a:	5f 91       	pop	r21
     b5c:	4f 91       	pop	r20
     b5e:	3f 91       	pop	r19
     b60:	2f 91       	pop	r18
     b62:	0f 90       	pop	r0
     b64:	0f be       	out	0x3f, r0	; 63
     b66:	0f 90       	pop	r0
     b68:	1f 90       	pop	r1
     b6a:	18 95       	reti

00000b6c <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
     b6c:	1f 92       	push	r1
     b6e:	0f 92       	push	r0
     b70:	0f b6       	in	r0, 0x3f	; 63
     b72:	0f 92       	push	r0
     b74:	11 24       	eor	r1, r1
     b76:	2f 93       	push	r18
     b78:	3f 93       	push	r19
     b7a:	4f 93       	push	r20
     b7c:	5f 93       	push	r21
     b7e:	6f 93       	push	r22
     b80:	7f 93       	push	r23
     b82:	8f 93       	push	r24
     b84:	9f 93       	push	r25
     b86:	af 93       	push	r26
     b88:	bf 93       	push	r27
     b8a:	ef 93       	push	r30
     b8c:	ff 93       	push	r31
     b8e:	df 93       	push	r29
     b90:	cf 93       	push	r28
     b92:	cd b7       	in	r28, 0x3d	; 61
     b94:	de b7       	in	r29, 0x3e	; 62
	/* Check if Pointer is not a NULL one, to avoid Segmentation fault */
	if(g_callBackPtrTimer1 != NULL_PTR)
     b96:	80 91 68 00 	lds	r24, 0x0068
     b9a:	90 91 69 00 	lds	r25, 0x0069
     b9e:	00 97       	sbiw	r24, 0x00	; 0
     ba0:	29 f0       	breq	.+10     	; 0xbac <__vector_7+0x40>
	{
		/*
		 * Call the callback function in the application after the compare match has
		 * occurred in TIMER1 Channel A (COMPARE MODE)
		 */
		(*g_callBackPtrTimer1)();
     ba2:	e0 91 68 00 	lds	r30, 0x0068
     ba6:	f0 91 69 00 	lds	r31, 0x0069
     baa:	09 95       	icall
	}
}
     bac:	cf 91       	pop	r28
     bae:	df 91       	pop	r29
     bb0:	ff 91       	pop	r31
     bb2:	ef 91       	pop	r30
     bb4:	bf 91       	pop	r27
     bb6:	af 91       	pop	r26
     bb8:	9f 91       	pop	r25
     bba:	8f 91       	pop	r24
     bbc:	7f 91       	pop	r23
     bbe:	6f 91       	pop	r22
     bc0:	5f 91       	pop	r21
     bc2:	4f 91       	pop	r20
     bc4:	3f 91       	pop	r19
     bc6:	2f 91       	pop	r18
     bc8:	0f 90       	pop	r0
     bca:	0f be       	out	0x3f, r0	; 63
     bcc:	0f 90       	pop	r0
     bce:	1f 90       	pop	r1
     bd0:	18 95       	reti

00000bd2 <__vector_5>:
/************************************************************************************
 *                                       TIMER2                                     *
 ************************************************************************************/

ISR(TIMER2_OVF_vect)
{
     bd2:	1f 92       	push	r1
     bd4:	0f 92       	push	r0
     bd6:	0f b6       	in	r0, 0x3f	; 63
     bd8:	0f 92       	push	r0
     bda:	11 24       	eor	r1, r1
     bdc:	2f 93       	push	r18
     bde:	3f 93       	push	r19
     be0:	4f 93       	push	r20
     be2:	5f 93       	push	r21
     be4:	6f 93       	push	r22
     be6:	7f 93       	push	r23
     be8:	8f 93       	push	r24
     bea:	9f 93       	push	r25
     bec:	af 93       	push	r26
     bee:	bf 93       	push	r27
     bf0:	ef 93       	push	r30
     bf2:	ff 93       	push	r31
     bf4:	df 93       	push	r29
     bf6:	cf 93       	push	r28
     bf8:	cd b7       	in	r28, 0x3d	; 61
     bfa:	de b7       	in	r29, 0x3e	; 62
	/* Check if Pointer is not a NULL one, to avoid Segmentation fault */
	if(g_callBackPtrTimer2 != NULL_PTR)
     bfc:	80 91 6a 00 	lds	r24, 0x006A
     c00:	90 91 6b 00 	lds	r25, 0x006B
     c04:	00 97       	sbiw	r24, 0x00	; 0
     c06:	29 f0       	breq	.+10     	; 0xc12 <__vector_5+0x40>
	{
		/*
		 * Call the callback function in the application after the overflow has
		 * occurred in TIMER2 (NORMAL MODE)
		 */
		(*g_callBackPtrTimer2)();
     c08:	e0 91 6a 00 	lds	r30, 0x006A
     c0c:	f0 91 6b 00 	lds	r31, 0x006B
     c10:	09 95       	icall
	}
}
     c12:	cf 91       	pop	r28
     c14:	df 91       	pop	r29
     c16:	ff 91       	pop	r31
     c18:	ef 91       	pop	r30
     c1a:	bf 91       	pop	r27
     c1c:	af 91       	pop	r26
     c1e:	9f 91       	pop	r25
     c20:	8f 91       	pop	r24
     c22:	7f 91       	pop	r23
     c24:	6f 91       	pop	r22
     c26:	5f 91       	pop	r21
     c28:	4f 91       	pop	r20
     c2a:	3f 91       	pop	r19
     c2c:	2f 91       	pop	r18
     c2e:	0f 90       	pop	r0
     c30:	0f be       	out	0x3f, r0	; 63
     c32:	0f 90       	pop	r0
     c34:	1f 90       	pop	r1
     c36:	18 95       	reti

00000c38 <__vector_4>:

ISR(TIMER2_COMP_vect)
{
     c38:	1f 92       	push	r1
     c3a:	0f 92       	push	r0
     c3c:	0f b6       	in	r0, 0x3f	; 63
     c3e:	0f 92       	push	r0
     c40:	11 24       	eor	r1, r1
     c42:	2f 93       	push	r18
     c44:	3f 93       	push	r19
     c46:	4f 93       	push	r20
     c48:	5f 93       	push	r21
     c4a:	6f 93       	push	r22
     c4c:	7f 93       	push	r23
     c4e:	8f 93       	push	r24
     c50:	9f 93       	push	r25
     c52:	af 93       	push	r26
     c54:	bf 93       	push	r27
     c56:	ef 93       	push	r30
     c58:	ff 93       	push	r31
     c5a:	df 93       	push	r29
     c5c:	cf 93       	push	r28
     c5e:	cd b7       	in	r28, 0x3d	; 61
     c60:	de b7       	in	r29, 0x3e	; 62
	/* Check if Pointer is not a NULL one, to avoid Segmentation fault */
	if(g_callBackPtrTimer2 != NULL_PTR)
     c62:	80 91 6a 00 	lds	r24, 0x006A
     c66:	90 91 6b 00 	lds	r25, 0x006B
     c6a:	00 97       	sbiw	r24, 0x00	; 0
     c6c:	29 f0       	breq	.+10     	; 0xc78 <__vector_4+0x40>
	{
		/*
		 * Call the callback function in the application after the compare match has
		 * occurred in TIMER2 (COMPARE MODE)
		 */
		(*g_callBackPtrTimer2)();
     c6e:	e0 91 6a 00 	lds	r30, 0x006A
     c72:	f0 91 6b 00 	lds	r31, 0x006B
     c76:	09 95       	icall
	}
}
     c78:	cf 91       	pop	r28
     c7a:	df 91       	pop	r29
     c7c:	ff 91       	pop	r31
     c7e:	ef 91       	pop	r30
     c80:	bf 91       	pop	r27
     c82:	af 91       	pop	r26
     c84:	9f 91       	pop	r25
     c86:	8f 91       	pop	r24
     c88:	7f 91       	pop	r23
     c8a:	6f 91       	pop	r22
     c8c:	5f 91       	pop	r21
     c8e:	4f 91       	pop	r20
     c90:	3f 91       	pop	r19
     c92:	2f 91       	pop	r18
     c94:	0f 90       	pop	r0
     c96:	0f be       	out	0x3f, r0	; 63
     c98:	0f 90       	pop	r0
     c9a:	1f 90       	pop	r1
     c9c:	18 95       	reti

00000c9e <TIMER_init>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 *************************************************************************************/
enuTIMER_E_STATE_t TIMER_init(const strTIMER_ConfigType_t * Config_Ptr)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
     ca6:	2b 97       	sbiw	r28, 0x0b	; 11
     ca8:	0f b6       	in	r0, 0x3f	; 63
     caa:	f8 94       	cli
     cac:	de bf       	out	0x3e, r29	; 62
     cae:	0f be       	out	0x3f, r0	; 63
     cb0:	cd bf       	out	0x3d, r28	; 61
     cb2:	9b 83       	std	Y+3, r25	; 0x03
     cb4:	8a 83       	std	Y+2, r24	; 0x02
	enuTIMER_E_STATE_t enu_ErrorState = E_NOT_OK;
     cb6:	81 e0       	ldi	r24, 0x01	; 1
     cb8:	89 83       	std	Y+1, r24	; 0x01

	switch(Config_Ptr -> timer_ID)
     cba:	ea 81       	ldd	r30, Y+2	; 0x02
     cbc:	fb 81       	ldd	r31, Y+3	; 0x03
     cbe:	84 81       	ldd	r24, Z+4	; 0x04
     cc0:	28 2f       	mov	r18, r24
     cc2:	30 e0       	ldi	r19, 0x00	; 0
     cc4:	3b 87       	std	Y+11, r19	; 0x0b
     cc6:	2a 87       	std	Y+10, r18	; 0x0a
     cc8:	8a 85       	ldd	r24, Y+10	; 0x0a
     cca:	9b 85       	ldd	r25, Y+11	; 0x0b
     ccc:	81 30       	cpi	r24, 0x01	; 1
     cce:	91 05       	cpc	r25, r1
     cd0:	09 f4       	brne	.+2      	; 0xcd4 <TIMER_init+0x36>
     cd2:	50 c0       	rjmp	.+160    	; 0xd74 <TIMER_init+0xd6>
     cd4:	2a 85       	ldd	r18, Y+10	; 0x0a
     cd6:	3b 85       	ldd	r19, Y+11	; 0x0b
     cd8:	22 30       	cpi	r18, 0x02	; 2
     cda:	31 05       	cpc	r19, r1
     cdc:	09 f4       	brne	.+2      	; 0xce0 <TIMER_init+0x42>
     cde:	9f c0       	rjmp	.+318    	; 0xe1e <TIMER_init+0x180>
     ce0:	8a 85       	ldd	r24, Y+10	; 0x0a
     ce2:	9b 85       	ldd	r25, Y+11	; 0x0b
     ce4:	00 97       	sbiw	r24, 0x00	; 0
     ce6:	09 f0       	breq	.+2      	; 0xcea <TIMER_init+0x4c>
     ce8:	df c0       	rjmp	.+446    	; 0xea8 <TIMER_init+0x20a>

		/*
		 * Clear All timer register before doing any operation,
		 * to ensure that timer will work correctly
		 */
		TCNT0_R = 0x00;
     cea:	e2 e5       	ldi	r30, 0x52	; 82
     cec:	f0 e0       	ldi	r31, 0x00	; 0
     cee:	10 82       	st	Z, r1
		TCCR0_R = 0x00;
     cf0:	e3 e5       	ldi	r30, 0x53	; 83
     cf2:	f0 e0       	ldi	r31, 0x00	; 0
     cf4:	10 82       	st	Z, r1
		OCR0_R  = 0x00;
     cf6:	ec e5       	ldi	r30, 0x5C	; 92
     cf8:	f0 e0       	ldi	r31, 0x00	; 0
     cfa:	10 82       	st	Z, r1
		/*
		 * Insert the required initial value in the TCNT0 register
		 * TIMER0 is (8-bit), so mask the initial value with 0xFF to ensure that it
		 * does not exceed 255
		 */
		TCNT0_R = ( (Config_Ptr -> intialValue) & 0xFF);
     cfc:	a2 e5       	ldi	r26, 0x52	; 82
     cfe:	b0 e0       	ldi	r27, 0x00	; 0
     d00:	ea 81       	ldd	r30, Y+2	; 0x02
     d02:	fb 81       	ldd	r31, Y+3	; 0x03
     d04:	80 81       	ld	r24, Z
     d06:	91 81       	ldd	r25, Z+1	; 0x01
     d08:	8c 93       	st	X, r24

		switch(Config_Ptr -> timer_Mode)
     d0a:	ea 81       	ldd	r30, Y+2	; 0x02
     d0c:	fb 81       	ldd	r31, Y+3	; 0x03
     d0e:	85 81       	ldd	r24, Z+5	; 0x05
     d10:	28 2f       	mov	r18, r24
     d12:	30 e0       	ldi	r19, 0x00	; 0
     d14:	39 87       	std	Y+9, r19	; 0x09
     d16:	28 87       	std	Y+8, r18	; 0x08
     d18:	88 85       	ldd	r24, Y+8	; 0x08
     d1a:	99 85       	ldd	r25, Y+9	; 0x09
     d1c:	00 97       	sbiw	r24, 0x00	; 0
     d1e:	31 f0       	breq	.+12     	; 0xd2c <TIMER_init+0x8e>
     d20:	28 85       	ldd	r18, Y+8	; 0x08
     d22:	39 85       	ldd	r19, Y+9	; 0x09
     d24:	21 30       	cpi	r18, 0x01	; 1
     d26:	31 05       	cpc	r19, r1
     d28:	71 f0       	breq	.+28     	; 0xd46 <TIMER_init+0xa8>
     d2a:	21 c0       	rjmp	.+66     	; 0xd6e <TIMER_init+0xd0>
		 * 	- Normal Mode  (COM01 = 0 & COM00 = 0) in TCCR0 register
		 * 	- Enable TIMER0 Overflow Interrupt (TOIE0) bit in TIMSK register
		 */
		case NORMAL:

			TCCR0_R  = (1 << FOC0_BIT);
     d2c:	e3 e5       	ldi	r30, 0x53	; 83
     d2e:	f0 e0       	ldi	r31, 0x00	; 0
     d30:	80 e8       	ldi	r24, 0x80	; 128
     d32:	80 83       	st	Z, r24
			TIMSK_R |= (1 << TOIE0_BIT);
     d34:	a9 e5       	ldi	r26, 0x59	; 89
     d36:	b0 e0       	ldi	r27, 0x00	; 0
     d38:	e9 e5       	ldi	r30, 0x59	; 89
     d3a:	f0 e0       	ldi	r31, 0x00	; 0
     d3c:	80 81       	ld	r24, Z
     d3e:	81 60       	ori	r24, 0x01	; 1
     d40:	8c 93       	st	X, r24
			enu_ErrorState = TIMER_E_PARAM_VALID;
     d42:	19 82       	std	Y+1, r1	; 0x01
     d44:	b3 c0       	rjmp	.+358    	; 0xeac <TIMER_init+0x20e>
		 * 	- Normal  Mode (COM01 = 0 & COM00 = 0) in TCCR0 register
		 * 	- Enable TIMER0 Compare Match Interrupt (OCIE0) bit in TIMSK register
		 */
		case COMPARE:

			OCR0_R   = ( (Config_Ptr -> compareValue) & 0xFF);
     d46:	ac e5       	ldi	r26, 0x5C	; 92
     d48:	b0 e0       	ldi	r27, 0x00	; 0
     d4a:	ea 81       	ldd	r30, Y+2	; 0x02
     d4c:	fb 81       	ldd	r31, Y+3	; 0x03
     d4e:	82 81       	ldd	r24, Z+2	; 0x02
     d50:	93 81       	ldd	r25, Z+3	; 0x03
     d52:	8c 93       	st	X, r24
			TCCR0_R  = (1 << FOC0_BIT) | (1 << WGM01_BIT);
     d54:	e3 e5       	ldi	r30, 0x53	; 83
     d56:	f0 e0       	ldi	r31, 0x00	; 0
     d58:	88 e8       	ldi	r24, 0x88	; 136
     d5a:	80 83       	st	Z, r24
			TIMSK_R |= (1 << OCIE0_BIT);
     d5c:	a9 e5       	ldi	r26, 0x59	; 89
     d5e:	b0 e0       	ldi	r27, 0x00	; 0
     d60:	e9 e5       	ldi	r30, 0x59	; 89
     d62:	f0 e0       	ldi	r31, 0x00	; 0
     d64:	80 81       	ld	r24, Z
     d66:	82 60       	ori	r24, 0x02	; 2
     d68:	8c 93       	st	X, r24
			enu_ErrorState = TIMER_E_PARAM_VALID;
     d6a:	19 82       	std	Y+1, r1	; 0x01
     d6c:	9f c0       	rjmp	.+318    	; 0xeac <TIMER_init+0x20e>
			break;

		default:

			enu_ErrorState = TIMER_E_PARAM_INVALID_MODE;
     d6e:	82 e0       	ldi	r24, 0x02	; 2
     d70:	89 83       	std	Y+1, r24	; 0x01
     d72:	9c c0       	rjmp	.+312    	; 0xeac <TIMER_init+0x20e>

		/*
		 * Clear All timer register before doing any operation,
		 * to ensure that timer will work correctly
		 */
		TCNT1_R  = 0x0000;
     d74:	ec e4       	ldi	r30, 0x4C	; 76
     d76:	f0 e0       	ldi	r31, 0x00	; 0
     d78:	11 82       	std	Z+1, r1	; 0x01
     d7a:	10 82       	st	Z, r1
		OCR1A_R  = 0x0000;
     d7c:	ea e4       	ldi	r30, 0x4A	; 74
     d7e:	f0 e0       	ldi	r31, 0x00	; 0
     d80:	11 82       	std	Z+1, r1	; 0x01
     d82:	10 82       	st	Z, r1
		TCCR1A_R = 0x00;
     d84:	ef e4       	ldi	r30, 0x4F	; 79
     d86:	f0 e0       	ldi	r31, 0x00	; 0
     d88:	10 82       	st	Z, r1
		TCCR1B_R = 0x00;
     d8a:	ee e4       	ldi	r30, 0x4E	; 78
     d8c:	f0 e0       	ldi	r31, 0x00	; 0
     d8e:	10 82       	st	Z, r1
		/*
		 * Insert the required initial value in the TCNT1 register
		 * TIMER1 is (16-bit), so mask the initial value with 0xFFFF to ensure that it
		 * does not exceed 65535
		 */
		TCNT1_R = ( (Config_Ptr -> intialValue) & 0xFFFF);
     d90:	ac e4       	ldi	r26, 0x4C	; 76
     d92:	b0 e0       	ldi	r27, 0x00	; 0
     d94:	ea 81       	ldd	r30, Y+2	; 0x02
     d96:	fb 81       	ldd	r31, Y+3	; 0x03
     d98:	80 81       	ld	r24, Z
     d9a:	91 81       	ldd	r25, Z+1	; 0x01
     d9c:	11 96       	adiw	r26, 0x01	; 1
     d9e:	9c 93       	st	X, r25
     da0:	8e 93       	st	-X, r24

		switch(Config_Ptr -> timer_Mode)
     da2:	ea 81       	ldd	r30, Y+2	; 0x02
     da4:	fb 81       	ldd	r31, Y+3	; 0x03
     da6:	85 81       	ldd	r24, Z+5	; 0x05
     da8:	28 2f       	mov	r18, r24
     daa:	30 e0       	ldi	r19, 0x00	; 0
     dac:	3f 83       	std	Y+7, r19	; 0x07
     dae:	2e 83       	std	Y+6, r18	; 0x06
     db0:	8e 81       	ldd	r24, Y+6	; 0x06
     db2:	9f 81       	ldd	r25, Y+7	; 0x07
     db4:	00 97       	sbiw	r24, 0x00	; 0
     db6:	31 f0       	breq	.+12     	; 0xdc4 <TIMER_init+0x126>
     db8:	2e 81       	ldd	r18, Y+6	; 0x06
     dba:	3f 81       	ldd	r19, Y+7	; 0x07
     dbc:	21 30       	cpi	r18, 0x01	; 1
     dbe:	31 05       	cpc	r19, r1
     dc0:	71 f0       	breq	.+28     	; 0xdde <TIMER_init+0x140>
     dc2:	2a c0       	rjmp	.+84     	; 0xe18 <TIMER_init+0x17a>
		 * 	- Normal  Mode (WGM10 = 0 & WGM11 = 0 & WGM12 = 0 & WGM13 = 0)
		 * 	- Enable TIMER1 Overflow Interrupt (TOIE1) bit in TIMSK register
		 */
		case NORMAL:

			TCCR1A_R = (1 << FOC1A_BIT)  | (1 << FOC1B_BIT);
     dc4:	ef e4       	ldi	r30, 0x4F	; 79
     dc6:	f0 e0       	ldi	r31, 0x00	; 0
     dc8:	8c e0       	ldi	r24, 0x0C	; 12
     dca:	80 83       	st	Z, r24
			TIMSK_R |= (1 << TOIE1_BIT);
     dcc:	a9 e5       	ldi	r26, 0x59	; 89
     dce:	b0 e0       	ldi	r27, 0x00	; 0
     dd0:	e9 e5       	ldi	r30, 0x59	; 89
     dd2:	f0 e0       	ldi	r31, 0x00	; 0
     dd4:	80 81       	ld	r24, Z
     dd6:	84 60       	ori	r24, 0x04	; 4
     dd8:	8c 93       	st	X, r24
			enu_ErrorState = TIMER_E_PARAM_VALID;
     dda:	19 82       	std	Y+1, r1	; 0x01
     ddc:	67 c0       	rjmp	.+206    	; 0xeac <TIMER_init+0x20e>
		 *	- Compare Mode (WGM10 = 0 & WGM11 = 0 & WGM12 = 1 & WGM13 = 0)
		 * 	- Enable TIMER2 Compare Match Interrupt (OCIE1A) bit in TIMSK register
		 */
		case COMPARE:

			OCR1A_R   = ( (Config_Ptr -> compareValue) & 0xFFFF);
     dde:	aa e4       	ldi	r26, 0x4A	; 74
     de0:	b0 e0       	ldi	r27, 0x00	; 0
     de2:	ea 81       	ldd	r30, Y+2	; 0x02
     de4:	fb 81       	ldd	r31, Y+3	; 0x03
     de6:	82 81       	ldd	r24, Z+2	; 0x02
     de8:	93 81       	ldd	r25, Z+3	; 0x03
     dea:	11 96       	adiw	r26, 0x01	; 1
     dec:	9c 93       	st	X, r25
     dee:	8e 93       	st	-X, r24
			TCCR1A_R  = (1 << FOC1A_BIT) | (1 << FOC1B_BIT);
     df0:	ef e4       	ldi	r30, 0x4F	; 79
     df2:	f0 e0       	ldi	r31, 0x00	; 0
     df4:	8c e0       	ldi	r24, 0x0C	; 12
     df6:	80 83       	st	Z, r24
			TCCR1B_R |= (1 << WGM12_BIT);
     df8:	ae e4       	ldi	r26, 0x4E	; 78
     dfa:	b0 e0       	ldi	r27, 0x00	; 0
     dfc:	ee e4       	ldi	r30, 0x4E	; 78
     dfe:	f0 e0       	ldi	r31, 0x00	; 0
     e00:	80 81       	ld	r24, Z
     e02:	88 60       	ori	r24, 0x08	; 8
     e04:	8c 93       	st	X, r24
			TIMSK_R  |= (1 << OCIE1A_BIT);
     e06:	a9 e5       	ldi	r26, 0x59	; 89
     e08:	b0 e0       	ldi	r27, 0x00	; 0
     e0a:	e9 e5       	ldi	r30, 0x59	; 89
     e0c:	f0 e0       	ldi	r31, 0x00	; 0
     e0e:	80 81       	ld	r24, Z
     e10:	80 61       	ori	r24, 0x10	; 16
     e12:	8c 93       	st	X, r24
			enu_ErrorState = TIMER_E_PARAM_VALID;
     e14:	19 82       	std	Y+1, r1	; 0x01
     e16:	4a c0       	rjmp	.+148    	; 0xeac <TIMER_init+0x20e>
			break;

		default:
			enu_ErrorState = TIMER_E_PARAM_INVALID_MODE;
     e18:	82 e0       	ldi	r24, 0x02	; 2
     e1a:	89 83       	std	Y+1, r24	; 0x01
     e1c:	47 c0       	rjmp	.+142    	; 0xeac <TIMER_init+0x20e>

		/*
		 * Clear All timer register before doing any operation,
		 * to ensure that timer will work correctly
		 */
		TCNT2_R = 0x00;
     e1e:	e4 e4       	ldi	r30, 0x44	; 68
     e20:	f0 e0       	ldi	r31, 0x00	; 0
     e22:	10 82       	st	Z, r1
		TCCR2_R = 0x00;
     e24:	e5 e4       	ldi	r30, 0x45	; 69
     e26:	f0 e0       	ldi	r31, 0x00	; 0
     e28:	10 82       	st	Z, r1
		OCR2_R  = 0x00;
     e2a:	e3 e4       	ldi	r30, 0x43	; 67
     e2c:	f0 e0       	ldi	r31, 0x00	; 0
     e2e:	10 82       	st	Z, r1
		/*
		 * Insert the required initial value in the TCNT2 register
		 * TIMER2 is (8-bit), so mask the initial value with 0xFF to ensure that it
	     * does not exceed 255
		 */
		TCNT2_R = ( (Config_Ptr -> intialValue) & 0xFF);
     e30:	a4 e4       	ldi	r26, 0x44	; 68
     e32:	b0 e0       	ldi	r27, 0x00	; 0
     e34:	ea 81       	ldd	r30, Y+2	; 0x02
     e36:	fb 81       	ldd	r31, Y+3	; 0x03
     e38:	80 81       	ld	r24, Z
     e3a:	91 81       	ldd	r25, Z+1	; 0x01
     e3c:	8c 93       	st	X, r24

		switch(Config_Ptr -> timer_Mode)
     e3e:	ea 81       	ldd	r30, Y+2	; 0x02
     e40:	fb 81       	ldd	r31, Y+3	; 0x03
     e42:	85 81       	ldd	r24, Z+5	; 0x05
     e44:	28 2f       	mov	r18, r24
     e46:	30 e0       	ldi	r19, 0x00	; 0
     e48:	3d 83       	std	Y+5, r19	; 0x05
     e4a:	2c 83       	std	Y+4, r18	; 0x04
     e4c:	8c 81       	ldd	r24, Y+4	; 0x04
     e4e:	9d 81       	ldd	r25, Y+5	; 0x05
     e50:	00 97       	sbiw	r24, 0x00	; 0
     e52:	31 f0       	breq	.+12     	; 0xe60 <TIMER_init+0x1c2>
     e54:	2c 81       	ldd	r18, Y+4	; 0x04
     e56:	3d 81       	ldd	r19, Y+5	; 0x05
     e58:	21 30       	cpi	r18, 0x01	; 1
     e5a:	31 05       	cpc	r19, r1
     e5c:	71 f0       	breq	.+28     	; 0xe7a <TIMER_init+0x1dc>
     e5e:	21 c0       	rjmp	.+66     	; 0xea2 <TIMER_init+0x204>
		 * 	- Normal  Mode (COM21 = 0 & COM20 = 0) in TCCR2 register
		 * 	- Enable TIMER2 Overflow Interrupt (TOIE2) bit in TIMSK register
		 */
		case NORMAL:

			TCCR2_R  = (1 << FOC2_BIT);
     e60:	e5 e4       	ldi	r30, 0x45	; 69
     e62:	f0 e0       	ldi	r31, 0x00	; 0
     e64:	80 e8       	ldi	r24, 0x80	; 128
     e66:	80 83       	st	Z, r24
			TIMSK_R |= (1 << TOIE2_BIT);
     e68:	a9 e5       	ldi	r26, 0x59	; 89
     e6a:	b0 e0       	ldi	r27, 0x00	; 0
     e6c:	e9 e5       	ldi	r30, 0x59	; 89
     e6e:	f0 e0       	ldi	r31, 0x00	; 0
     e70:	80 81       	ld	r24, Z
     e72:	80 64       	ori	r24, 0x40	; 64
     e74:	8c 93       	st	X, r24
			enu_ErrorState = TIMER_E_PARAM_VALID;
     e76:	19 82       	std	Y+1, r1	; 0x01
     e78:	19 c0       	rjmp	.+50     	; 0xeac <TIMER_init+0x20e>
		 * 	- Normal  Mode (COM21 = 0 & COM20 = 0) in TCCR2 register
		 * 	- Enable TIMER2 Compare Match Interrupt (OCIE2) bit in TIMSK register
		 */
		case COMPARE:

			OCR2_R   = ( (Config_Ptr -> compareValue) & 0xFF);
     e7a:	a3 e4       	ldi	r26, 0x43	; 67
     e7c:	b0 e0       	ldi	r27, 0x00	; 0
     e7e:	ea 81       	ldd	r30, Y+2	; 0x02
     e80:	fb 81       	ldd	r31, Y+3	; 0x03
     e82:	82 81       	ldd	r24, Z+2	; 0x02
     e84:	93 81       	ldd	r25, Z+3	; 0x03
     e86:	8c 93       	st	X, r24
			TCCR2_R  = (1 << FOC2_BIT) | (1 << WGM21_BIT);
     e88:	e5 e4       	ldi	r30, 0x45	; 69
     e8a:	f0 e0       	ldi	r31, 0x00	; 0
     e8c:	88 e8       	ldi	r24, 0x88	; 136
     e8e:	80 83       	st	Z, r24
			TIMSK_R |= (1 << OCIE2_BIT);
     e90:	a9 e5       	ldi	r26, 0x59	; 89
     e92:	b0 e0       	ldi	r27, 0x00	; 0
     e94:	e9 e5       	ldi	r30, 0x59	; 89
     e96:	f0 e0       	ldi	r31, 0x00	; 0
     e98:	80 81       	ld	r24, Z
     e9a:	80 68       	ori	r24, 0x80	; 128
     e9c:	8c 93       	st	X, r24
			enu_ErrorState = TIMER_E_PARAM_VALID;
     e9e:	19 82       	std	Y+1, r1	; 0x01
     ea0:	05 c0       	rjmp	.+10     	; 0xeac <TIMER_init+0x20e>
			break;

		default:

			enu_ErrorState = TIMER_E_PARAM_INVALID_MODE;
     ea2:	82 e0       	ldi	r24, 0x02	; 2
     ea4:	89 83       	std	Y+1, r24	; 0x01
     ea6:	02 c0       	rjmp	.+4      	; 0xeac <TIMER_init+0x20e>
			break;
		}	/* END CASE OF TIMER2 */
		break;

	default:
		enu_ErrorState = TIMER_E_PARAM_INVALID_ID;	/* Invalid timer id */
     ea8:	81 e0       	ldi	r24, 0x01	; 1
     eaa:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return enu_ErrorState;
     eac:	89 81       	ldd	r24, Y+1	; 0x01
}
     eae:	2b 96       	adiw	r28, 0x0b	; 11
     eb0:	0f b6       	in	r0, 0x3f	; 63
     eb2:	f8 94       	cli
     eb4:	de bf       	out	0x3e, r29	; 62
     eb6:	0f be       	out	0x3f, r0	; 63
     eb8:	cd bf       	out	0x3d, r28	; 61
     eba:	cf 91       	pop	r28
     ebc:	df 91       	pop	r29
     ebe:	08 95       	ret

00000ec0 <TIMER_setCallBack>:
 * [in/out]		 	None
 *
 * [Returns]:       Error State
 ******************************************************************************/
enuTIMER_E_STATE_t TIMER_setCallBack(void(*a_ptr)(void), const enuTIMER_ID_t enu_timerID)
{
     ec0:	df 93       	push	r29
     ec2:	cf 93       	push	r28
     ec4:	00 d0       	rcall	.+0      	; 0xec6 <TIMER_setCallBack+0x6>
     ec6:	00 d0       	rcall	.+0      	; 0xec8 <TIMER_setCallBack+0x8>
     ec8:	00 d0       	rcall	.+0      	; 0xeca <TIMER_setCallBack+0xa>
     eca:	cd b7       	in	r28, 0x3d	; 61
     ecc:	de b7       	in	r29, 0x3e	; 62
     ece:	9b 83       	std	Y+3, r25	; 0x03
     ed0:	8a 83       	std	Y+2, r24	; 0x02
     ed2:	6c 83       	std	Y+4, r22	; 0x04
	enuTIMER_E_STATE_t enu_ErrorState = E_NOT_OK;
     ed4:	81 e0       	ldi	r24, 0x01	; 1
     ed6:	89 83       	std	Y+1, r24	; 0x01

	if(a_ptr == NULL_PTR)
     ed8:	8a 81       	ldd	r24, Y+2	; 0x02
     eda:	9b 81       	ldd	r25, Y+3	; 0x03
     edc:	00 97       	sbiw	r24, 0x00	; 0
     ede:	19 f4       	brne	.+6      	; 0xee6 <TIMER_setCallBack+0x26>
	{
		enu_ErrorState = TIMER_E_PARAM_POINTER;	/* Invalid pointer "NULL" */
     ee0:	83 e0       	ldi	r24, 0x03	; 3
     ee2:	89 83       	std	Y+1, r24	; 0x01
     ee4:	2a c0       	rjmp	.+84     	; 0xf3a <TIMER_setCallBack+0x7a>
	}
	else
	{
		switch(enu_timerID)
     ee6:	8c 81       	ldd	r24, Y+4	; 0x04
     ee8:	28 2f       	mov	r18, r24
     eea:	30 e0       	ldi	r19, 0x00	; 0
     eec:	3e 83       	std	Y+6, r19	; 0x06
     eee:	2d 83       	std	Y+5, r18	; 0x05
     ef0:	8d 81       	ldd	r24, Y+5	; 0x05
     ef2:	9e 81       	ldd	r25, Y+6	; 0x06
     ef4:	81 30       	cpi	r24, 0x01	; 1
     ef6:	91 05       	cpc	r25, r1
     ef8:	89 f0       	breq	.+34     	; 0xf1c <TIMER_setCallBack+0x5c>
     efa:	2d 81       	ldd	r18, Y+5	; 0x05
     efc:	3e 81       	ldd	r19, Y+6	; 0x06
     efe:	22 30       	cpi	r18, 0x02	; 2
     f00:	31 05       	cpc	r19, r1
     f02:	a1 f0       	breq	.+40     	; 0xf2c <TIMER_setCallBack+0x6c>
     f04:	8d 81       	ldd	r24, Y+5	; 0x05
     f06:	9e 81       	ldd	r25, Y+6	; 0x06
     f08:	00 97       	sbiw	r24, 0x00	; 0
     f0a:	b9 f4       	brne	.+46     	; 0xf3a <TIMER_setCallBack+0x7a>
		{

		case TIMER_0:

			/* Save the address of the Call back function of TIMER0 in a global variable */
			g_callBackPtrTimer0 = a_ptr;
     f0c:	8a 81       	ldd	r24, Y+2	; 0x02
     f0e:	9b 81       	ldd	r25, Y+3	; 0x03
     f10:	90 93 67 00 	sts	0x0067, r25
     f14:	80 93 66 00 	sts	0x0066, r24
			enu_ErrorState = TIMER_E_PARAM_VALID;
     f18:	19 82       	std	Y+1, r1	; 0x01
     f1a:	0f c0       	rjmp	.+30     	; 0xf3a <TIMER_setCallBack+0x7a>
			break;

		case TIMER_1:

			/* Save the address of the Call back function of TIMER1 in a global variable */
			g_callBackPtrTimer1 = a_ptr;
     f1c:	8a 81       	ldd	r24, Y+2	; 0x02
     f1e:	9b 81       	ldd	r25, Y+3	; 0x03
     f20:	90 93 69 00 	sts	0x0069, r25
     f24:	80 93 68 00 	sts	0x0068, r24
			enu_ErrorState = TIMER_E_PARAM_VALID;
     f28:	19 82       	std	Y+1, r1	; 0x01
     f2a:	07 c0       	rjmp	.+14     	; 0xf3a <TIMER_setCallBack+0x7a>
			break;

		case TIMER_2:

			/* Save the address of the Call back function of TIMER2 in a global variable */
			g_callBackPtrTimer2 = a_ptr;
     f2c:	8a 81       	ldd	r24, Y+2	; 0x02
     f2e:	9b 81       	ldd	r25, Y+3	; 0x03
     f30:	90 93 6b 00 	sts	0x006B, r25
     f34:	80 93 6a 00 	sts	0x006A, r24
			enu_ErrorState = TIMER_E_PARAM_VALID;
     f38:	19 82       	std	Y+1, r1	; 0x01
		default:
			break;
			enu_ErrorState = TIMER_E_PARAM_INVALID_ID;	/* Invalid timer id */
		}
	}
	return enu_ErrorState;
     f3a:	89 81       	ldd	r24, Y+1	; 0x01
}
     f3c:	26 96       	adiw	r28, 0x06	; 6
     f3e:	0f b6       	in	r0, 0x3f	; 63
     f40:	f8 94       	cli
     f42:	de bf       	out	0x3e, r29	; 62
     f44:	0f be       	out	0x3f, r0	; 63
     f46:	cd bf       	out	0x3d, r28	; 61
     f48:	cf 91       	pop	r28
     f4a:	df 91       	pop	r29
     f4c:	08 95       	ret

00000f4e <TIMER_start>:
 * [in/out]		 	None
 *
 * [Returns]:       Error state
 ******************************************************************************/
enuTIMER_E_STATE_t TIMER_start(const enuTIMER_ID_t enu_timerID, const enuTIMER_Clock_t enu_timerClock)
{
     f4e:	df 93       	push	r29
     f50:	cf 93       	push	r28
     f52:	00 d0       	rcall	.+0      	; 0xf54 <TIMER_start+0x6>
     f54:	00 d0       	rcall	.+0      	; 0xf56 <TIMER_start+0x8>
     f56:	0f 92       	push	r0
     f58:	cd b7       	in	r28, 0x3d	; 61
     f5a:	de b7       	in	r29, 0x3e	; 62
     f5c:	8a 83       	std	Y+2, r24	; 0x02
     f5e:	6b 83       	std	Y+3, r22	; 0x03
	enuTIMER_E_STATE_t enu_ErrorState = E_NOT_OK;
     f60:	81 e0       	ldi	r24, 0x01	; 1
     f62:	89 83       	std	Y+1, r24	; 0x01

	switch(enu_timerID)
     f64:	8a 81       	ldd	r24, Y+2	; 0x02
     f66:	28 2f       	mov	r18, r24
     f68:	30 e0       	ldi	r19, 0x00	; 0
     f6a:	3d 83       	std	Y+5, r19	; 0x05
     f6c:	2c 83       	std	Y+4, r18	; 0x04
     f6e:	8c 81       	ldd	r24, Y+4	; 0x04
     f70:	9d 81       	ldd	r25, Y+5	; 0x05
     f72:	81 30       	cpi	r24, 0x01	; 1
     f74:	91 05       	cpc	r25, r1
     f76:	a9 f0       	breq	.+42     	; 0xfa2 <TIMER_start+0x54>
     f78:	2c 81       	ldd	r18, Y+4	; 0x04
     f7a:	3d 81       	ldd	r19, Y+5	; 0x05
     f7c:	22 30       	cpi	r18, 0x02	; 2
     f7e:	31 05       	cpc	r19, r1
     f80:	e1 f0       	breq	.+56     	; 0xfba <TIMER_start+0x6c>
     f82:	8c 81       	ldd	r24, Y+4	; 0x04
     f84:	9d 81       	ldd	r25, Y+5	; 0x05
     f86:	00 97       	sbiw	r24, 0x00	; 0
     f88:	21 f5       	brne	.+72     	; 0xfd2 <TIMER_start+0x84>
	{

	 /* Insert the required Clock in the First three bits (CS02, CS01, CS00) in TCCR0 register */
	case TIMER_0:
		TCCR0_R  = (TCCR0_R & 0xF8) | (enu_timerClock);
     f8a:	a3 e5       	ldi	r26, 0x53	; 83
     f8c:	b0 e0       	ldi	r27, 0x00	; 0
     f8e:	e3 e5       	ldi	r30, 0x53	; 83
     f90:	f0 e0       	ldi	r31, 0x00	; 0
     f92:	80 81       	ld	r24, Z
     f94:	98 2f       	mov	r25, r24
     f96:	98 7f       	andi	r25, 0xF8	; 248
     f98:	8b 81       	ldd	r24, Y+3	; 0x03
     f9a:	89 2b       	or	r24, r25
     f9c:	8c 93       	st	X, r24
		enu_ErrorState = TIMER_E_PARAM_VALID;	/* Update the error state with no error */
     f9e:	19 82       	std	Y+1, r1	; 0x01
     fa0:	1a c0       	rjmp	.+52     	; 0xfd6 <TIMER_start+0x88>
		break;

	/* Insert the required Clock in the First three bits (CS12, CS11, CS10) in TCCR1B register */
	case TIMER_1:
		TCCR1B_R  = (TCCR1B_R & 0xF8) | (enu_timerClock);
     fa2:	ae e4       	ldi	r26, 0x4E	; 78
     fa4:	b0 e0       	ldi	r27, 0x00	; 0
     fa6:	ee e4       	ldi	r30, 0x4E	; 78
     fa8:	f0 e0       	ldi	r31, 0x00	; 0
     faa:	80 81       	ld	r24, Z
     fac:	98 2f       	mov	r25, r24
     fae:	98 7f       	andi	r25, 0xF8	; 248
     fb0:	8b 81       	ldd	r24, Y+3	; 0x03
     fb2:	89 2b       	or	r24, r25
     fb4:	8c 93       	st	X, r24
		enu_ErrorState = TIMER_E_PARAM_VALID;	/* Update the error state with no error */
     fb6:	19 82       	std	Y+1, r1	; 0x01
     fb8:	0e c0       	rjmp	.+28     	; 0xfd6 <TIMER_start+0x88>
		break;

	/* Insert the required Clock in the First three bits (CS22, CS21, CS20) in TCCR2 register */
	case TIMER_2:
		TCCR2_R  = (TCCR2_R & 0xF8) | (enu_timerClock);
     fba:	a5 e4       	ldi	r26, 0x45	; 69
     fbc:	b0 e0       	ldi	r27, 0x00	; 0
     fbe:	e5 e4       	ldi	r30, 0x45	; 69
     fc0:	f0 e0       	ldi	r31, 0x00	; 0
     fc2:	80 81       	ld	r24, Z
     fc4:	98 2f       	mov	r25, r24
     fc6:	98 7f       	andi	r25, 0xF8	; 248
     fc8:	8b 81       	ldd	r24, Y+3	; 0x03
     fca:	89 2b       	or	r24, r25
     fcc:	8c 93       	st	X, r24
		enu_ErrorState = TIMER_E_PARAM_VALID;	/* Update the error state with no error */
     fce:	19 82       	std	Y+1, r1	; 0x01
     fd0:	02 c0       	rjmp	.+4      	; 0xfd6 <TIMER_start+0x88>
		break;

	default:
		enu_ErrorState = TIMER_E_PARAM_INVALID_ID;	/* Invalid timer id */
     fd2:	81 e0       	ldi	r24, 0x01	; 1
     fd4:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return enu_ErrorState;
     fd6:	89 81       	ldd	r24, Y+1	; 0x01
}
     fd8:	0f 90       	pop	r0
     fda:	0f 90       	pop	r0
     fdc:	0f 90       	pop	r0
     fde:	0f 90       	pop	r0
     fe0:	0f 90       	pop	r0
     fe2:	cf 91       	pop	r28
     fe4:	df 91       	pop	r29
     fe6:	08 95       	ret

00000fe8 <TIMER_stop>:
 * [in/out]		 	None
 *
 * [Returns]:       Error state
 ******************************************************************************/
enuTIMER_E_STATE_t TIMER_stop(const enuTIMER_ID_t enu_timerID)
{
     fe8:	df 93       	push	r29
     fea:	cf 93       	push	r28
     fec:	00 d0       	rcall	.+0      	; 0xfee <TIMER_stop+0x6>
     fee:	00 d0       	rcall	.+0      	; 0xff0 <TIMER_stop+0x8>
     ff0:	cd b7       	in	r28, 0x3d	; 61
     ff2:	de b7       	in	r29, 0x3e	; 62
     ff4:	8a 83       	std	Y+2, r24	; 0x02
	enuTIMER_E_STATE_t enu_ErrorState = E_NOT_OK;
     ff6:	81 e0       	ldi	r24, 0x01	; 1
     ff8:	89 83       	std	Y+1, r24	; 0x01

	switch(enu_timerID)
     ffa:	8a 81       	ldd	r24, Y+2	; 0x02
     ffc:	28 2f       	mov	r18, r24
     ffe:	30 e0       	ldi	r19, 0x00	; 0
    1000:	3c 83       	std	Y+4, r19	; 0x04
    1002:	2b 83       	std	Y+3, r18	; 0x03
    1004:	8b 81       	ldd	r24, Y+3	; 0x03
    1006:	9c 81       	ldd	r25, Y+4	; 0x04
    1008:	81 30       	cpi	r24, 0x01	; 1
    100a:	91 05       	cpc	r25, r1
    100c:	91 f0       	breq	.+36     	; 0x1032 <TIMER_stop+0x4a>
    100e:	2b 81       	ldd	r18, Y+3	; 0x03
    1010:	3c 81       	ldd	r19, Y+4	; 0x04
    1012:	22 30       	cpi	r18, 0x02	; 2
    1014:	31 05       	cpc	r19, r1
    1016:	b1 f0       	breq	.+44     	; 0x1044 <TIMER_stop+0x5c>
    1018:	8b 81       	ldd	r24, Y+3	; 0x03
    101a:	9c 81       	ldd	r25, Y+4	; 0x04
    101c:	00 97       	sbiw	r24, 0x00	; 0
    101e:	d9 f4       	brne	.+54     	; 0x1056 <TIMER_stop+0x6e>
	{

	case TIMER_0:

		TCCR0_R  = (TCCR0_R & 0xF8);	/* Clear Clock bits in TIMER0 */
    1020:	a3 e5       	ldi	r26, 0x53	; 83
    1022:	b0 e0       	ldi	r27, 0x00	; 0
    1024:	e3 e5       	ldi	r30, 0x53	; 83
    1026:	f0 e0       	ldi	r31, 0x00	; 0
    1028:	80 81       	ld	r24, Z
    102a:	88 7f       	andi	r24, 0xF8	; 248
    102c:	8c 93       	st	X, r24
		enu_ErrorState = TIMER_E_PARAM_VALID;	/* Update the error state with no error */
    102e:	19 82       	std	Y+1, r1	; 0x01
    1030:	14 c0       	rjmp	.+40     	; 0x105a <TIMER_stop+0x72>
		break;

	case TIMER_1:

		TCCR1B_R = (TCCR1B_R & 0xF8);	/* Clear Clock bits in TIMER1 */
    1032:	ae e4       	ldi	r26, 0x4E	; 78
    1034:	b0 e0       	ldi	r27, 0x00	; 0
    1036:	ee e4       	ldi	r30, 0x4E	; 78
    1038:	f0 e0       	ldi	r31, 0x00	; 0
    103a:	80 81       	ld	r24, Z
    103c:	88 7f       	andi	r24, 0xF8	; 248
    103e:	8c 93       	st	X, r24
		enu_ErrorState = TIMER_E_PARAM_VALID;	/* Update the error state with no error */
    1040:	19 82       	std	Y+1, r1	; 0x01
    1042:	0b c0       	rjmp	.+22     	; 0x105a <TIMER_stop+0x72>
		break;

	case TIMER_2:

		TCCR2_R  = (TCCR2_R & 0xF8);	/* Clear Clock bits in TIMER2 */
    1044:	a5 e4       	ldi	r26, 0x45	; 69
    1046:	b0 e0       	ldi	r27, 0x00	; 0
    1048:	e5 e4       	ldi	r30, 0x45	; 69
    104a:	f0 e0       	ldi	r31, 0x00	; 0
    104c:	80 81       	ld	r24, Z
    104e:	88 7f       	andi	r24, 0xF8	; 248
    1050:	8c 93       	st	X, r24
		enu_ErrorState = TIMER_E_PARAM_VALID;	/* Update the error state with no error */
    1052:	19 82       	std	Y+1, r1	; 0x01
    1054:	02 c0       	rjmp	.+4      	; 0x105a <TIMER_stop+0x72>
		break;

	default:
		enu_ErrorState = TIMER_E_PARAM_INVALID_ID;	/* Invalid timer id */
    1056:	81 e0       	ldi	r24, 0x01	; 1
    1058:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return enu_ErrorState;
    105a:	89 81       	ldd	r24, Y+1	; 0x01
}
    105c:	0f 90       	pop	r0
    105e:	0f 90       	pop	r0
    1060:	0f 90       	pop	r0
    1062:	0f 90       	pop	r0
    1064:	cf 91       	pop	r28
    1066:	df 91       	pop	r29
    1068:	08 95       	ret

0000106a <TIMER_DeInit>:
 * [in/out]		 	None
 *
 * [Returns]:       Error state
 ******************************************************************************/
enuTIMER_E_STATE_t TIMER_DeInit(const enuTIMER_ID_t enu_timerID)
{
    106a:	df 93       	push	r29
    106c:	cf 93       	push	r28
    106e:	00 d0       	rcall	.+0      	; 0x1070 <TIMER_DeInit+0x6>
    1070:	00 d0       	rcall	.+0      	; 0x1072 <TIMER_DeInit+0x8>
    1072:	cd b7       	in	r28, 0x3d	; 61
    1074:	de b7       	in	r29, 0x3e	; 62
    1076:	8a 83       	std	Y+2, r24	; 0x02
	enuTIMER_E_STATE_t enu_ErrorState = E_NOT_OK;
    1078:	81 e0       	ldi	r24, 0x01	; 1
    107a:	89 83       	std	Y+1, r24	; 0x01

	switch(enu_timerID)
    107c:	8a 81       	ldd	r24, Y+2	; 0x02
    107e:	28 2f       	mov	r18, r24
    1080:	30 e0       	ldi	r19, 0x00	; 0
    1082:	3c 83       	std	Y+4, r19	; 0x04
    1084:	2b 83       	std	Y+3, r18	; 0x03
    1086:	8b 81       	ldd	r24, Y+3	; 0x03
    1088:	9c 81       	ldd	r25, Y+4	; 0x04
    108a:	81 30       	cpi	r24, 0x01	; 1
    108c:	91 05       	cpc	r25, r1
    108e:	19 f1       	breq	.+70     	; 0x10d6 <TIMER_DeInit+0x6c>
    1090:	2b 81       	ldd	r18, Y+3	; 0x03
    1092:	3c 81       	ldd	r19, Y+4	; 0x04
    1094:	22 30       	cpi	r18, 0x02	; 2
    1096:	31 05       	cpc	r19, r1
    1098:	e1 f1       	breq	.+120    	; 0x1112 <TIMER_DeInit+0xa8>
    109a:	8b 81       	ldd	r24, Y+3	; 0x03
    109c:	9c 81       	ldd	r25, Y+4	; 0x04
    109e:	00 97       	sbiw	r24, 0x00	; 0
    10a0:	09 f0       	breq	.+2      	; 0x10a4 <TIMER_DeInit+0x3a>
    10a2:	50 c0       	rjmp	.+160    	; 0x1144 <TIMER_DeInit+0xda>
	{

	case TIMER_0:

		/* Clear All TIMER0 Register */
		TCNT0_R = 0x00;
    10a4:	e2 e5       	ldi	r30, 0x52	; 82
    10a6:	f0 e0       	ldi	r31, 0x00	; 0
    10a8:	10 82       	st	Z, r1
		TCCR0_R = 0x00;
    10aa:	e3 e5       	ldi	r30, 0x53	; 83
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	10 82       	st	Z, r1
		OCR0_R  = 0x00;
    10b0:	ec e5       	ldi	r30, 0x5C	; 92
    10b2:	f0 e0       	ldi	r31, 0x00	; 0
    10b4:	10 82       	st	Z, r1

		/* Disable TIMER0 Interrupt Enable */
		TIMSK_R &= ~(1 << TOIE0_BIT) & ~(1 << OCIE0_BIT);
    10b6:	a9 e5       	ldi	r26, 0x59	; 89
    10b8:	b0 e0       	ldi	r27, 0x00	; 0
    10ba:	e9 e5       	ldi	r30, 0x59	; 89
    10bc:	f0 e0       	ldi	r31, 0x00	; 0
    10be:	80 81       	ld	r24, Z
    10c0:	8c 7f       	andi	r24, 0xFC	; 252
    10c2:	8c 93       	st	X, r24

		/* Disable TIMER0 Interrupt Flag, by writing a logic one */
		TIFR_R |= (1 << OCF0_BIT) | (1 << TOV0_BIT);
    10c4:	a8 e5       	ldi	r26, 0x58	; 88
    10c6:	b0 e0       	ldi	r27, 0x00	; 0
    10c8:	e8 e5       	ldi	r30, 0x58	; 88
    10ca:	f0 e0       	ldi	r31, 0x00	; 0
    10cc:	80 81       	ld	r24, Z
    10ce:	83 60       	ori	r24, 0x03	; 3
    10d0:	8c 93       	st	X, r24

		/* Update the error state with no error */
		enu_ErrorState = TIMER_E_PARAM_VALID;
    10d2:	19 82       	std	Y+1, r1	; 0x01
    10d4:	39 c0       	rjmp	.+114    	; 0x1148 <TIMER_DeInit+0xde>
		break;

	case TIMER_1:

		/* Clear All TIMER1 Register */
		TCNT1_R  = 0x0000;
    10d6:	ec e4       	ldi	r30, 0x4C	; 76
    10d8:	f0 e0       	ldi	r31, 0x00	; 0
    10da:	11 82       	std	Z+1, r1	; 0x01
    10dc:	10 82       	st	Z, r1
		OCR1A_R  = 0x0000;
    10de:	ea e4       	ldi	r30, 0x4A	; 74
    10e0:	f0 e0       	ldi	r31, 0x00	; 0
    10e2:	11 82       	std	Z+1, r1	; 0x01
    10e4:	10 82       	st	Z, r1
		TCCR1A_R = 0x00;
    10e6:	ef e4       	ldi	r30, 0x4F	; 79
    10e8:	f0 e0       	ldi	r31, 0x00	; 0
    10ea:	10 82       	st	Z, r1
		TCCR1B_R = 0x00;
    10ec:	ee e4       	ldi	r30, 0x4E	; 78
    10ee:	f0 e0       	ldi	r31, 0x00	; 0
    10f0:	10 82       	st	Z, r1

		/* Disable TIMER1 Interrupt Enable */
		TIMSK_R &= ~(1 << TOIE1_BIT) & ~(1 << OCIE1A_BIT);
    10f2:	a9 e5       	ldi	r26, 0x59	; 89
    10f4:	b0 e0       	ldi	r27, 0x00	; 0
    10f6:	e9 e5       	ldi	r30, 0x59	; 89
    10f8:	f0 e0       	ldi	r31, 0x00	; 0
    10fa:	80 81       	ld	r24, Z
    10fc:	8b 7e       	andi	r24, 0xEB	; 235
    10fe:	8c 93       	st	X, r24

		/* Disable TIMER1 Interrupt Flag, by writing a logic one */
		TIFR_R |= (1 << OCF1A_BIT) | (1 << OCF1B_BIT) | (1 << TOV1_BIT);
    1100:	a8 e5       	ldi	r26, 0x58	; 88
    1102:	b0 e0       	ldi	r27, 0x00	; 0
    1104:	e8 e5       	ldi	r30, 0x58	; 88
    1106:	f0 e0       	ldi	r31, 0x00	; 0
    1108:	80 81       	ld	r24, Z
    110a:	8c 61       	ori	r24, 0x1C	; 28
    110c:	8c 93       	st	X, r24

		/* Update the error state with no error */
		enu_ErrorState = TIMER_E_PARAM_VALID;
    110e:	19 82       	std	Y+1, r1	; 0x01
    1110:	1b c0       	rjmp	.+54     	; 0x1148 <TIMER_DeInit+0xde>
		break;

	case TIMER_2:

		/* Clear All TIMER2 Register */
		TCNT2_R = 0x00;
    1112:	e4 e4       	ldi	r30, 0x44	; 68
    1114:	f0 e0       	ldi	r31, 0x00	; 0
    1116:	10 82       	st	Z, r1
		TCCR2_R = 0x00;
    1118:	e5 e4       	ldi	r30, 0x45	; 69
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	10 82       	st	Z, r1
		OCR2_R  = 0x00;
    111e:	e3 e4       	ldi	r30, 0x43	; 67
    1120:	f0 e0       	ldi	r31, 0x00	; 0
    1122:	10 82       	st	Z, r1

		/* Disable TIMER2 Interrupt Flags */
		TIMSK_R &= ~(1 << TOIE2_BIT) & ~(1 << OCIE2_BIT);
    1124:	a9 e5       	ldi	r26, 0x59	; 89
    1126:	b0 e0       	ldi	r27, 0x00	; 0
    1128:	e9 e5       	ldi	r30, 0x59	; 89
    112a:	f0 e0       	ldi	r31, 0x00	; 0
    112c:	80 81       	ld	r24, Z
    112e:	8f 73       	andi	r24, 0x3F	; 63
    1130:	8c 93       	st	X, r24

		/* Disable TIMER2 Interrupt Flag, by writing a logic one */
		TIFR_R |= (1 << OCF2_BIT) | (1 << TOV2_BIT);
    1132:	a8 e5       	ldi	r26, 0x58	; 88
    1134:	b0 e0       	ldi	r27, 0x00	; 0
    1136:	e8 e5       	ldi	r30, 0x58	; 88
    1138:	f0 e0       	ldi	r31, 0x00	; 0
    113a:	80 81       	ld	r24, Z
    113c:	80 6c       	ori	r24, 0xC0	; 192
    113e:	8c 93       	st	X, r24

		/* Update the error state with no error */
		enu_ErrorState = TIMER_E_PARAM_VALID;
    1140:	19 82       	std	Y+1, r1	; 0x01
    1142:	02 c0       	rjmp	.+4      	; 0x1148 <TIMER_DeInit+0xde>
		break;

	default:

		/* Update the error state with error */
		enu_ErrorState = TIMER_E_PARAM_INVALID_ID;
    1144:	81 e0       	ldi	r24, 0x01	; 1
    1146:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return enu_ErrorState;
    1148:	89 81       	ldd	r24, Y+1	; 0x01
}
    114a:	0f 90       	pop	r0
    114c:	0f 90       	pop	r0
    114e:	0f 90       	pop	r0
    1150:	0f 90       	pop	r0
    1152:	cf 91       	pop	r28
    1154:	df 91       	pop	r29
    1156:	08 95       	ret

00001158 <LED_init>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 *******************************************************************************/
void LED_init(void)
{
    1158:	df 93       	push	r29
    115a:	cf 93       	push	r28
    115c:	cd b7       	in	r28, 0x3d	; 61
    115e:	de b7       	in	r29, 0x3e	; 62
	/* Configure LED pin as an output pin */
	DIO_setPinDirection(LED_PORT_NUM, LED_PIN_NUM, OUTPUT);
    1160:	81 e0       	ldi	r24, 0x01	; 1
    1162:	64 e0       	ldi	r22, 0x04	; 4
    1164:	41 e0       	ldi	r20, 0x01	; 1
    1166:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <DIO_setPinDirection>
	/* Turn off LED at the beginning as the initial state */
	DIO_writePin(LED_PORT_NUM, LED_PIN_NUM, HIGH);
    116a:	81 e0       	ldi	r24, 0x01	; 1
    116c:	64 e0       	ldi	r22, 0x04	; 4
    116e:	41 e0       	ldi	r20, 0x01	; 1
    1170:	0e 94 42 02 	call	0x484	; 0x484 <DIO_writePin>
}
    1174:	cf 91       	pop	r28
    1176:	df 91       	pop	r29
    1178:	08 95       	ret

0000117a <LED_turnOn>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 *******************************************************************************/
void LED_turnOn(void)
{
    117a:	df 93       	push	r29
    117c:	cf 93       	push	r28
    117e:	cd b7       	in	r28, 0x3d	; 61
    1180:	de b7       	in	r29, 0x3e	; 62
	DIO_writePin(LED_PORT_NUM, LED_PIN_NUM, HIGH);	/* Turn On LED */
    1182:	81 e0       	ldi	r24, 0x01	; 1
    1184:	64 e0       	ldi	r22, 0x04	; 4
    1186:	41 e0       	ldi	r20, 0x01	; 1
    1188:	0e 94 42 02 	call	0x484	; 0x484 <DIO_writePin>
}
    118c:	cf 91       	pop	r28
    118e:	df 91       	pop	r29
    1190:	08 95       	ret

00001192 <LED_turnOff>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 *******************************************************************************/
void LED_turnOff(void)
{
    1192:	df 93       	push	r29
    1194:	cf 93       	push	r28
    1196:	cd b7       	in	r28, 0x3d	; 61
    1198:	de b7       	in	r29, 0x3e	; 62
	DIO_writePin(LED_PORT_NUM, LED_PIN_NUM, LOW);	/* Turn Off LED */
    119a:	81 e0       	ldi	r24, 0x01	; 1
    119c:	64 e0       	ldi	r22, 0x04	; 4
    119e:	40 e0       	ldi	r20, 0x00	; 0
    11a0:	0e 94 42 02 	call	0x484	; 0x484 <DIO_writePin>
}
    11a4:	cf 91       	pop	r28
    11a6:	df 91       	pop	r29
    11a8:	08 95       	ret

000011aa <LED_toggle>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 *******************************************************************************/
void LED_toggle(void)
{
    11aa:	df 93       	push	r29
    11ac:	cf 93       	push	r28
    11ae:	cd b7       	in	r28, 0x3d	; 61
    11b0:	de b7       	in	r29, 0x3e	; 62
	DIO_TogglePin(LED_PORT_NUM, LED_PIN_NUM);	/* Toggle the LED */
    11b2:	81 e0       	ldi	r24, 0x01	; 1
    11b4:	64 e0       	ldi	r22, 0x04	; 4
    11b6:	0e 94 8c 04 	call	0x918	; 0x918 <DIO_TogglePin>
}
    11ba:	cf 91       	pop	r28
    11bc:	df 91       	pop	r29
    11be:	08 95       	ret

000011c0 <AppCompareMatch>:
/*******************************************************************************
 *                             Interrupt Service Routines                      *
 *******************************************************************************/

void AppCompareMatch(void)
{
    11c0:	df 93       	push	r29
    11c2:	cf 93       	push	r28
    11c4:	cd b7       	in	r28, 0x3d	; 61
    11c6:	de b7       	in	r29, 0x3e	; 62
	++gu8_tick;
    11c8:	80 91 6c 00 	lds	r24, 0x006C
    11cc:	8f 5f       	subi	r24, 0xFF	; 255
    11ce:	80 93 6c 00 	sts	0x006C, r24

	if(gu8_tick == TIMER_FOR_HIGH_PERIOD)
    11d2:	80 91 6c 00 	lds	r24, 0x006C
    11d6:	83 30       	cpi	r24, 0x03	; 3
    11d8:	19 f4       	brne	.+6      	; 0x11e0 <AppCompareMatch+0x20>
	{
		LED_toggle();	/* Pin Toggle to generate 37.5 % Duty Cycle */
    11da:	0e 94 d5 08 	call	0x11aa	; 0x11aa <LED_toggle>
    11de:	08 c0       	rjmp	.+16     	; 0x11f0 <AppCompareMatch+0x30>
	}
	else if(gu8_tick == TIMER_FOR_LOW_PERIOD)
    11e0:	80 91 6c 00 	lds	r24, 0x006C
    11e4:	88 30       	cpi	r24, 0x08	; 8
    11e6:	21 f4       	brne	.+8      	; 0x11f0 <AppCompareMatch+0x30>
	{
		LED_toggle();	/* Pin Toggle to generate 62.5 % Duty Cycle */
    11e8:	0e 94 d5 08 	call	0x11aa	; 0x11aa <LED_toggle>
		gu8_tick = 0;		/* Clear Global ticks for the next time */
    11ec:	10 92 6c 00 	sts	0x006C, r1
	}
}
    11f0:	cf 91       	pop	r28
    11f2:	df 91       	pop	r29
    11f4:	08 95       	ret

000011f6 <App_init>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 *******************************************************************************/
void App_init(void)
{
    11f6:	df 93       	push	r29
    11f8:	cf 93       	push	r28
    11fa:	cd b7       	in	r28, 0x3d	; 61
    11fc:	de b7       	in	r29, 0x3e	; 62
    11fe:	2b 97       	sbiw	r28, 0x0b	; 11
    1200:	0f b6       	in	r0, 0x3f	; 63
    1202:	f8 94       	cli
    1204:	de bf       	out	0x3e, r29	; 62
    1206:	0f be       	out	0x3f, r0	; 63
    1208:	cd bf       	out	0x3d, r28	; 61
	SREG_R |= (1<<7);	/* Enable Global Interrupt (I - bit) */
    120a:	af e5       	ldi	r26, 0x5F	; 95
    120c:	b0 e0       	ldi	r27, 0x00	; 0
    120e:	ef e5       	ldi	r30, 0x5F	; 95
    1210:	f0 e0       	ldi	r31, 0x00	; 0
    1212:	80 81       	ld	r24, Z
    1214:	80 68       	ori	r24, 0x80	; 128
    1216:	8c 93       	st	X, r24

	TIMER_DeInit(TIMER_1);	/* Return timer1 to it's initial value */
    1218:	81 e0       	ldi	r24, 0x01	; 1
    121a:	0e 94 35 08 	call	0x106a	; 0x106a <TIMER_DeInit>

	LED_init();		/* LED Driver Initialization */
    121e:	0e 94 ac 08 	call	0x1158	; 0x1158 <LED_init>

	/* Configure the timer1 in overflow mode */
	strTIMER_ConfigType_t timer_Config = {0, 781, TIMER_1, COMPARE};
    1222:	ce 01       	movw	r24, r28
    1224:	01 96       	adiw	r24, 0x01	; 1
    1226:	98 87       	std	Y+8, r25	; 0x08
    1228:	8f 83       	std	Y+7, r24	; 0x07
    122a:	e0 e6       	ldi	r30, 0x60	; 96
    122c:	f0 e0       	ldi	r31, 0x00	; 0
    122e:	fa 87       	std	Y+10, r31	; 0x0a
    1230:	e9 87       	std	Y+9, r30	; 0x09
    1232:	f6 e0       	ldi	r31, 0x06	; 6
    1234:	fb 87       	std	Y+11, r31	; 0x0b
    1236:	e9 85       	ldd	r30, Y+9	; 0x09
    1238:	fa 85       	ldd	r31, Y+10	; 0x0a
    123a:	00 80       	ld	r0, Z
    123c:	89 85       	ldd	r24, Y+9	; 0x09
    123e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1240:	01 96       	adiw	r24, 0x01	; 1
    1242:	9a 87       	std	Y+10, r25	; 0x0a
    1244:	89 87       	std	Y+9, r24	; 0x09
    1246:	ef 81       	ldd	r30, Y+7	; 0x07
    1248:	f8 85       	ldd	r31, Y+8	; 0x08
    124a:	00 82       	st	Z, r0
    124c:	8f 81       	ldd	r24, Y+7	; 0x07
    124e:	98 85       	ldd	r25, Y+8	; 0x08
    1250:	01 96       	adiw	r24, 0x01	; 1
    1252:	98 87       	std	Y+8, r25	; 0x08
    1254:	8f 83       	std	Y+7, r24	; 0x07
    1256:	9b 85       	ldd	r25, Y+11	; 0x0b
    1258:	91 50       	subi	r25, 0x01	; 1
    125a:	9b 87       	std	Y+11, r25	; 0x0b
    125c:	eb 85       	ldd	r30, Y+11	; 0x0b
    125e:	ee 23       	and	r30, r30
    1260:	51 f7       	brne	.-44     	; 0x1236 <App_init+0x40>

	TIMER_init(&timer_Config);	/* Initialize the timer */
    1262:	ce 01       	movw	r24, r28
    1264:	01 96       	adiw	r24, 0x01	; 1
    1266:	0e 94 4f 06 	call	0xc9e	; 0xc9e <TIMER_init>

	/* Set the function to be called when interrupt is fired */
	TIMER_setCallBack(AppCompareMatch, TIMER_1);
    126a:	80 ee       	ldi	r24, 0xE0	; 224
    126c:	98 e0       	ldi	r25, 0x08	; 8
    126e:	61 e0       	ldi	r22, 0x01	; 1
    1270:	0e 94 60 07 	call	0xec0	; 0xec0 <TIMER_setCallBack>

	/* State the timer */
	TIMER_start(TIMER_1, T1_F_CPU_1024);
    1274:	81 e0       	ldi	r24, 0x01	; 1
    1276:	65 e0       	ldi	r22, 0x05	; 5
    1278:	0e 94 a7 07 	call	0xf4e	; 0xf4e <TIMER_start>
}
    127c:	2b 96       	adiw	r28, 0x0b	; 11
    127e:	0f b6       	in	r0, 0x3f	; 63
    1280:	f8 94       	cli
    1282:	de bf       	out	0x3e, r29	; 62
    1284:	0f be       	out	0x3f, r0	; 63
    1286:	cd bf       	out	0x3d, r28	; 61
    1288:	cf 91       	pop	r28
    128a:	df 91       	pop	r29
    128c:	08 95       	ret

0000128e <main>:
/*****************************************************************************************
 *                                MAIN FUNCTION                                          *
 *****************************************************************************************/

int main(void)
{
    128e:	df 93       	push	r29
    1290:	cf 93       	push	r28
    1292:	cd b7       	in	r28, 0x3d	; 61
    1294:	de b7       	in	r29, 0x3e	; 62
	/********************************************************************************
	 *                           SYSTEM INITIALIZATION                              *
	 ********************************************************************************/

	App_init();	/* Test timer in simple application */
    1296:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <App_init>
    129a:	ff cf       	rjmp	.-2      	; 0x129a <main+0xc>

0000129c <_exit>:
    129c:	f8 94       	cli

0000129e <__stop_program>:
    129e:	ff cf       	rjmp	.-2      	; 0x129e <__stop_program>
