
Keypad.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002bb8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000042  00800060  00002bb8  00002c4c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  008000a2  008000a2  00002c8e  2**0
                  ALLOC
  3 .stab         0000252c  00000000  00000000  00002c90  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001387  00000000  00000000  000051bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006543  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006683  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000067f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000843c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009327  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a0d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a234  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a4c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ac8f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 eb       	ldi	r30, 0xB8	; 184
      68:	fb e2       	ldi	r31, 0x2B	; 43
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 3a       	cpi	r26, 0xA2	; 162
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a2 ea       	ldi	r26, 0xA2	; 162
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 3a       	cpi	r26, 0xA3	; 163
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 55 15 	call	0x2aaa	; 0x2aaa <main>
      8a:	0c 94 da 15 	jmp	0x2bb4	; 0x2bb4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 5e 15 	jmp	0x2abc	; 0x2abc <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	aa e9       	ldi	r26, 0x9A	; 154
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 7a 15 	jmp	0x2af4	; 0x2af4 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 6a 15 	jmp	0x2ad4	; 0x2ad4 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 86 15 	jmp	0x2b0c	; 0x2b0c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 6a 15 	jmp	0x2ad4	; 0x2ad4 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 86 15 	jmp	0x2b0c	; 0x2b0c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 5e 15 	jmp	0x2abc	; 0x2abc <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8a e9       	ldi	r24, 0x9A	; 154
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 7a 15 	jmp	0x2af4	; 0x2af4 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 6a 15 	jmp	0x2ad4	; 0x2ad4 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 86 15 	jmp	0x2b0c	; 0x2b0c <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 6a 15 	jmp	0x2ad4	; 0x2ad4 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 86 15 	jmp	0x2b0c	; 0x2b0c <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 6a 15 	jmp	0x2ad4	; 0x2ad4 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 86 15 	jmp	0x2b0c	; 0x2b0c <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 6e 15 	jmp	0x2adc	; 0x2adc <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 8a 15 	jmp	0x2b14	; 0x2b14 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <DIO_setPortDirection>:
 * [in/out]	  None
 *
 * [Returns]:     Error state
 ******************************************************************************/
enuDIO_E_STATE_t DIO_setPortDirection(enuDIO_PortId_t enu_portID, enuDIO_DirectionType_t enu_portDirection)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	27 97       	sbiw	r28, 0x07	; 7
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	8a 83       	std	Y+2, r24	; 0x02
     b5c:	6b 83       	std	Y+3, r22	; 0x03
	enuDIO_E_STATE_t enu_ErrorState = E_NOT_OK;
     b5e:	81 e0       	ldi	r24, 0x01	; 1
     b60:	89 83       	std	Y+1, r24	; 0x01

	/* Check if the PORT is input or output */
    if(enu_portDirection == HIGH)
     b62:	8b 81       	ldd	r24, Y+3	; 0x03
     b64:	81 30       	cpi	r24, 0x01	; 1
     b66:	d1 f5       	brne	.+116    	; 0xbdc <DIO_setPortDirection+0x96>
    {
    	switch (enu_portID)
     b68:	8a 81       	ldd	r24, Y+2	; 0x02
     b6a:	28 2f       	mov	r18, r24
     b6c:	30 e0       	ldi	r19, 0x00	; 0
     b6e:	3f 83       	std	Y+7, r19	; 0x07
     b70:	2e 83       	std	Y+6, r18	; 0x06
     b72:	8e 81       	ldd	r24, Y+6	; 0x06
     b74:	9f 81       	ldd	r25, Y+7	; 0x07
     b76:	81 30       	cpi	r24, 0x01	; 1
     b78:	91 05       	cpc	r25, r1
     b7a:	d9 f0       	breq	.+54     	; 0xbb2 <DIO_setPortDirection+0x6c>
     b7c:	2e 81       	ldd	r18, Y+6	; 0x06
     b7e:	3f 81       	ldd	r19, Y+7	; 0x07
     b80:	22 30       	cpi	r18, 0x02	; 2
     b82:	31 05       	cpc	r19, r1
     b84:	2c f4       	brge	.+10     	; 0xb90 <DIO_setPortDirection+0x4a>
     b86:	8e 81       	ldd	r24, Y+6	; 0x06
     b88:	9f 81       	ldd	r25, Y+7	; 0x07
     b8a:	00 97       	sbiw	r24, 0x00	; 0
     b8c:	61 f0       	breq	.+24     	; 0xba6 <DIO_setPortDirection+0x60>
     b8e:	23 c0       	rjmp	.+70     	; 0xbd6 <DIO_setPortDirection+0x90>
     b90:	2e 81       	ldd	r18, Y+6	; 0x06
     b92:	3f 81       	ldd	r19, Y+7	; 0x07
     b94:	22 30       	cpi	r18, 0x02	; 2
     b96:	31 05       	cpc	r19, r1
     b98:	91 f0       	breq	.+36     	; 0xbbe <DIO_setPortDirection+0x78>
     b9a:	8e 81       	ldd	r24, Y+6	; 0x06
     b9c:	9f 81       	ldd	r25, Y+7	; 0x07
     b9e:	83 30       	cpi	r24, 0x03	; 3
     ba0:	91 05       	cpc	r25, r1
     ba2:	99 f0       	breq	.+38     	; 0xbca <DIO_setPortDirection+0x84>
     ba4:	18 c0       	rjmp	.+48     	; 0xbd6 <DIO_setPortDirection+0x90>
		{
		case DIO_PORTA:
			DDRA_DIR_R = OUTPUT_PORT;
     ba6:	ea e3       	ldi	r30, 0x3A	; 58
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	8f ef       	ldi	r24, 0xFF	; 255
     bac:	80 83       	st	Z, r24
			enu_ErrorState = DIO_E_PARAM_VALID;
     bae:	19 82       	std	Y+1, r1	; 0x01
     bb0:	50 c0       	rjmp	.+160    	; 0xc52 <DIO_setPortDirection+0x10c>
			break;
		case DIO_PORTB:
			DDRB_DIR_R = OUTPUT_PORT;
     bb2:	e7 e3       	ldi	r30, 0x37	; 55
     bb4:	f0 e0       	ldi	r31, 0x00	; 0
     bb6:	8f ef       	ldi	r24, 0xFF	; 255
     bb8:	80 83       	st	Z, r24
			enu_ErrorState = DIO_E_PARAM_VALID;
     bba:	19 82       	std	Y+1, r1	; 0x01
     bbc:	4a c0       	rjmp	.+148    	; 0xc52 <DIO_setPortDirection+0x10c>
			break;
		case DIO_PORTC:
			DDRC_DIR_R = OUTPUT_PORT;
     bbe:	e4 e3       	ldi	r30, 0x34	; 52
     bc0:	f0 e0       	ldi	r31, 0x00	; 0
     bc2:	8f ef       	ldi	r24, 0xFF	; 255
     bc4:	80 83       	st	Z, r24
			enu_ErrorState = DIO_E_PARAM_VALID;
     bc6:	19 82       	std	Y+1, r1	; 0x01
     bc8:	44 c0       	rjmp	.+136    	; 0xc52 <DIO_setPortDirection+0x10c>
			break;
		case DIO_PORTD:
			DDRD_DIR_R = OUTPUT_PORT;
     bca:	e1 e3       	ldi	r30, 0x31	; 49
     bcc:	f0 e0       	ldi	r31, 0x00	; 0
     bce:	8f ef       	ldi	r24, 0xFF	; 255
     bd0:	80 83       	st	Z, r24
			enu_ErrorState = DIO_E_PARAM_VALID;
     bd2:	19 82       	std	Y+1, r1	; 0x01
     bd4:	3e c0       	rjmp	.+124    	; 0xc52 <DIO_setPortDirection+0x10c>
			break;
		default:
			enu_ErrorState = DIO_E_PARAM_INVALID_PORT_ID;
     bd6:	81 e0       	ldi	r24, 0x01	; 1
     bd8:	89 83       	std	Y+1, r24	; 0x01
     bda:	3b c0       	rjmp	.+118    	; 0xc52 <DIO_setPortDirection+0x10c>
			break;
		}
    }
    else if(enu_portDirection == LOW)
     bdc:	8b 81       	ldd	r24, Y+3	; 0x03
     bde:	88 23       	and	r24, r24
     be0:	b1 f5       	brne	.+108    	; 0xc4e <DIO_setPortDirection+0x108>
    {
		switch (enu_portID)
     be2:	8a 81       	ldd	r24, Y+2	; 0x02
     be4:	28 2f       	mov	r18, r24
     be6:	30 e0       	ldi	r19, 0x00	; 0
     be8:	3d 83       	std	Y+5, r19	; 0x05
     bea:	2c 83       	std	Y+4, r18	; 0x04
     bec:	8c 81       	ldd	r24, Y+4	; 0x04
     bee:	9d 81       	ldd	r25, Y+5	; 0x05
     bf0:	81 30       	cpi	r24, 0x01	; 1
     bf2:	91 05       	cpc	r25, r1
     bf4:	d1 f0       	breq	.+52     	; 0xc2a <DIO_setPortDirection+0xe4>
     bf6:	2c 81       	ldd	r18, Y+4	; 0x04
     bf8:	3d 81       	ldd	r19, Y+5	; 0x05
     bfa:	22 30       	cpi	r18, 0x02	; 2
     bfc:	31 05       	cpc	r19, r1
     bfe:	2c f4       	brge	.+10     	; 0xc0a <DIO_setPortDirection+0xc4>
     c00:	8c 81       	ldd	r24, Y+4	; 0x04
     c02:	9d 81       	ldd	r25, Y+5	; 0x05
     c04:	00 97       	sbiw	r24, 0x00	; 0
     c06:	61 f0       	breq	.+24     	; 0xc20 <DIO_setPortDirection+0xda>
     c08:	1f c0       	rjmp	.+62     	; 0xc48 <DIO_setPortDirection+0x102>
     c0a:	2c 81       	ldd	r18, Y+4	; 0x04
     c0c:	3d 81       	ldd	r19, Y+5	; 0x05
     c0e:	22 30       	cpi	r18, 0x02	; 2
     c10:	31 05       	cpc	r19, r1
     c12:	81 f0       	breq	.+32     	; 0xc34 <DIO_setPortDirection+0xee>
     c14:	8c 81       	ldd	r24, Y+4	; 0x04
     c16:	9d 81       	ldd	r25, Y+5	; 0x05
     c18:	83 30       	cpi	r24, 0x03	; 3
     c1a:	91 05       	cpc	r25, r1
     c1c:	81 f0       	breq	.+32     	; 0xc3e <DIO_setPortDirection+0xf8>
     c1e:	14 c0       	rjmp	.+40     	; 0xc48 <DIO_setPortDirection+0x102>
		{
		case DIO_PORTA:
			DDRA_DIR_R = INPUT_PORT;
     c20:	ea e3       	ldi	r30, 0x3A	; 58
     c22:	f0 e0       	ldi	r31, 0x00	; 0
     c24:	10 82       	st	Z, r1
			enu_ErrorState = DIO_E_PARAM_VALID;
     c26:	19 82       	std	Y+1, r1	; 0x01
     c28:	14 c0       	rjmp	.+40     	; 0xc52 <DIO_setPortDirection+0x10c>
			break;
		case DIO_PORTB:
			DDRB_DIR_R = INPUT_PORT;
     c2a:	e7 e3       	ldi	r30, 0x37	; 55
     c2c:	f0 e0       	ldi	r31, 0x00	; 0
     c2e:	10 82       	st	Z, r1
			enu_ErrorState = DIO_E_PARAM_VALID;
     c30:	19 82       	std	Y+1, r1	; 0x01
     c32:	0f c0       	rjmp	.+30     	; 0xc52 <DIO_setPortDirection+0x10c>
			break;
		case DIO_PORTC:
			DDRC_DIR_R = INPUT_PORT;
     c34:	e4 e3       	ldi	r30, 0x34	; 52
     c36:	f0 e0       	ldi	r31, 0x00	; 0
     c38:	10 82       	st	Z, r1
			enu_ErrorState = DIO_E_PARAM_VALID;
     c3a:	19 82       	std	Y+1, r1	; 0x01
     c3c:	0a c0       	rjmp	.+20     	; 0xc52 <DIO_setPortDirection+0x10c>
			break;
		case DIO_PORTD:
			DDRD_DIR_R = INPUT_PORT;
     c3e:	e1 e3       	ldi	r30, 0x31	; 49
     c40:	f0 e0       	ldi	r31, 0x00	; 0
     c42:	10 82       	st	Z, r1
			enu_ErrorState = DIO_E_PARAM_VALID;
     c44:	19 82       	std	Y+1, r1	; 0x01
     c46:	05 c0       	rjmp	.+10     	; 0xc52 <DIO_setPortDirection+0x10c>
			break;
		default:
			enu_ErrorState = DIO_E_PARAM_INVALID_PORT_ID;
     c48:	81 e0       	ldi	r24, 0x01	; 1
     c4a:	89 83       	std	Y+1, r24	; 0x01
     c4c:	02 c0       	rjmp	.+4      	; 0xc52 <DIO_setPortDirection+0x10c>
			break;
		}
    }
    else
    {
    	enu_ErrorState = DIO_E_PARAM_INVALID_PORT_DIR;	/* Invalid port direction */
     c4e:	84 e0       	ldi	r24, 0x04	; 4
     c50:	89 83       	std	Y+1, r24	; 0x01
    }
    return enu_ErrorState;
     c52:	89 81       	ldd	r24, Y+1	; 0x01
}
     c54:	27 96       	adiw	r28, 0x07	; 7
     c56:	0f b6       	in	r0, 0x3f	; 63
     c58:	f8 94       	cli
     c5a:	de bf       	out	0x3e, r29	; 62
     c5c:	0f be       	out	0x3f, r0	; 63
     c5e:	cd bf       	out	0x3d, r28	; 61
     c60:	cf 91       	pop	r28
     c62:	df 91       	pop	r29
     c64:	08 95       	ret

00000c66 <DIO_setPinDirection>:
 *
 * [Returns]:     Error State
 ******************************************************************************/
enuDIO_E_STATE_t DIO_setPinDirection(enuDIO_PortId_t enu_portID , enuDIO_PinId_t enu_pinID,
				     enuDIO_DirectionType_t enu_pinDirection)
{
     c66:	df 93       	push	r29
     c68:	cf 93       	push	r28
     c6a:	cd b7       	in	r28, 0x3d	; 61
     c6c:	de b7       	in	r29, 0x3e	; 62
     c6e:	28 97       	sbiw	r28, 0x08	; 8
     c70:	0f b6       	in	r0, 0x3f	; 63
     c72:	f8 94       	cli
     c74:	de bf       	out	0x3e, r29	; 62
     c76:	0f be       	out	0x3f, r0	; 63
     c78:	cd bf       	out	0x3d, r28	; 61
     c7a:	8a 83       	std	Y+2, r24	; 0x02
     c7c:	6b 83       	std	Y+3, r22	; 0x03
     c7e:	4c 83       	std	Y+4, r20	; 0x04
	enuDIO_E_STATE_t enu_ErrorState = E_NOT_OK;
     c80:	81 e0       	ldi	r24, 0x01	; 1
     c82:	89 83       	std	Y+1, r24	; 0x01

	/* Check if the pin id is one of the existed pin or not */
	if ((enu_pinID >= PIN_0) && (enu_pinID <= PIN_7))
     c84:	8b 81       	ldd	r24, Y+3	; 0x03
     c86:	88 30       	cpi	r24, 0x08	; 8
     c88:	08 f0       	brcs	.+2      	; 0xc8c <DIO_setPinDirection+0x26>
     c8a:	fd c0       	rjmp	.+506    	; 0xe86 <DIO_setPinDirection+0x220>
	{
		if (enu_pinDirection == OUTPUT)
     c8c:	8c 81       	ldd	r24, Y+4	; 0x04
     c8e:	81 30       	cpi	r24, 0x01	; 1
     c90:	09 f0       	breq	.+2      	; 0xc94 <DIO_setPinDirection+0x2e>
     c92:	77 c0       	rjmp	.+238    	; 0xd82 <DIO_setPinDirection+0x11c>
		{
			switch (enu_portID)
     c94:	8a 81       	ldd	r24, Y+2	; 0x02
     c96:	28 2f       	mov	r18, r24
     c98:	30 e0       	ldi	r19, 0x00	; 0
     c9a:	38 87       	std	Y+8, r19	; 0x08
     c9c:	2f 83       	std	Y+7, r18	; 0x07
     c9e:	8f 81       	ldd	r24, Y+7	; 0x07
     ca0:	98 85       	ldd	r25, Y+8	; 0x08
     ca2:	81 30       	cpi	r24, 0x01	; 1
     ca4:	91 05       	cpc	r25, r1
     ca6:	59 f1       	breq	.+86     	; 0xcfe <DIO_setPinDirection+0x98>
     ca8:	2f 81       	ldd	r18, Y+7	; 0x07
     caa:	38 85       	ldd	r19, Y+8	; 0x08
     cac:	22 30       	cpi	r18, 0x02	; 2
     cae:	31 05       	cpc	r19, r1
     cb0:	2c f4       	brge	.+10     	; 0xcbc <DIO_setPinDirection+0x56>
     cb2:	8f 81       	ldd	r24, Y+7	; 0x07
     cb4:	98 85       	ldd	r25, Y+8	; 0x08
     cb6:	00 97       	sbiw	r24, 0x00	; 0
     cb8:	69 f0       	breq	.+26     	; 0xcd4 <DIO_setPinDirection+0x6e>
     cba:	60 c0       	rjmp	.+192    	; 0xd7c <DIO_setPinDirection+0x116>
     cbc:	2f 81       	ldd	r18, Y+7	; 0x07
     cbe:	38 85       	ldd	r19, Y+8	; 0x08
     cc0:	22 30       	cpi	r18, 0x02	; 2
     cc2:	31 05       	cpc	r19, r1
     cc4:	89 f1       	breq	.+98     	; 0xd28 <DIO_setPinDirection+0xc2>
     cc6:	8f 81       	ldd	r24, Y+7	; 0x07
     cc8:	98 85       	ldd	r25, Y+8	; 0x08
     cca:	83 30       	cpi	r24, 0x03	; 3
     ccc:	91 05       	cpc	r25, r1
     cce:	09 f4       	brne	.+2      	; 0xcd2 <DIO_setPinDirection+0x6c>
     cd0:	40 c0       	rjmp	.+128    	; 0xd52 <DIO_setPinDirection+0xec>
     cd2:	54 c0       	rjmp	.+168    	; 0xd7c <DIO_setPinDirection+0x116>
			{
			case DIO_PORTA:
				SET_BIT(DDRA_DIR_R, enu_pinID);
     cd4:	aa e3       	ldi	r26, 0x3A	; 58
     cd6:	b0 e0       	ldi	r27, 0x00	; 0
     cd8:	ea e3       	ldi	r30, 0x3A	; 58
     cda:	f0 e0       	ldi	r31, 0x00	; 0
     cdc:	80 81       	ld	r24, Z
     cde:	48 2f       	mov	r20, r24
     ce0:	8b 81       	ldd	r24, Y+3	; 0x03
     ce2:	28 2f       	mov	r18, r24
     ce4:	30 e0       	ldi	r19, 0x00	; 0
     ce6:	81 e0       	ldi	r24, 0x01	; 1
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	02 2e       	mov	r0, r18
     cec:	02 c0       	rjmp	.+4      	; 0xcf2 <DIO_setPinDirection+0x8c>
     cee:	88 0f       	add	r24, r24
     cf0:	99 1f       	adc	r25, r25
     cf2:	0a 94       	dec	r0
     cf4:	e2 f7       	brpl	.-8      	; 0xcee <DIO_setPinDirection+0x88>
     cf6:	84 2b       	or	r24, r20
     cf8:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
     cfa:	19 82       	std	Y+1, r1	; 0x01
     cfc:	c6 c0       	rjmp	.+396    	; 0xe8a <DIO_setPinDirection+0x224>
				break;
			case DIO_PORTB:
				SET_BIT(DDRB_DIR_R, enu_pinID);
     cfe:	a7 e3       	ldi	r26, 0x37	; 55
     d00:	b0 e0       	ldi	r27, 0x00	; 0
     d02:	e7 e3       	ldi	r30, 0x37	; 55
     d04:	f0 e0       	ldi	r31, 0x00	; 0
     d06:	80 81       	ld	r24, Z
     d08:	48 2f       	mov	r20, r24
     d0a:	8b 81       	ldd	r24, Y+3	; 0x03
     d0c:	28 2f       	mov	r18, r24
     d0e:	30 e0       	ldi	r19, 0x00	; 0
     d10:	81 e0       	ldi	r24, 0x01	; 1
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	02 2e       	mov	r0, r18
     d16:	02 c0       	rjmp	.+4      	; 0xd1c <DIO_setPinDirection+0xb6>
     d18:	88 0f       	add	r24, r24
     d1a:	99 1f       	adc	r25, r25
     d1c:	0a 94       	dec	r0
     d1e:	e2 f7       	brpl	.-8      	; 0xd18 <DIO_setPinDirection+0xb2>
     d20:	84 2b       	or	r24, r20
     d22:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
     d24:	19 82       	std	Y+1, r1	; 0x01
     d26:	b1 c0       	rjmp	.+354    	; 0xe8a <DIO_setPinDirection+0x224>
				break;
			case DIO_PORTC:
				SET_BIT(DDRC_DIR_R, enu_pinID);
     d28:	a4 e3       	ldi	r26, 0x34	; 52
     d2a:	b0 e0       	ldi	r27, 0x00	; 0
     d2c:	e4 e3       	ldi	r30, 0x34	; 52
     d2e:	f0 e0       	ldi	r31, 0x00	; 0
     d30:	80 81       	ld	r24, Z
     d32:	48 2f       	mov	r20, r24
     d34:	8b 81       	ldd	r24, Y+3	; 0x03
     d36:	28 2f       	mov	r18, r24
     d38:	30 e0       	ldi	r19, 0x00	; 0
     d3a:	81 e0       	ldi	r24, 0x01	; 1
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	02 2e       	mov	r0, r18
     d40:	02 c0       	rjmp	.+4      	; 0xd46 <DIO_setPinDirection+0xe0>
     d42:	88 0f       	add	r24, r24
     d44:	99 1f       	adc	r25, r25
     d46:	0a 94       	dec	r0
     d48:	e2 f7       	brpl	.-8      	; 0xd42 <DIO_setPinDirection+0xdc>
     d4a:	84 2b       	or	r24, r20
     d4c:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
     d4e:	19 82       	std	Y+1, r1	; 0x01
     d50:	9c c0       	rjmp	.+312    	; 0xe8a <DIO_setPinDirection+0x224>
				break;
			case DIO_PORTD:
				SET_BIT(DDRD_DIR_R, enu_pinID);
     d52:	a1 e3       	ldi	r26, 0x31	; 49
     d54:	b0 e0       	ldi	r27, 0x00	; 0
     d56:	e1 e3       	ldi	r30, 0x31	; 49
     d58:	f0 e0       	ldi	r31, 0x00	; 0
     d5a:	80 81       	ld	r24, Z
     d5c:	48 2f       	mov	r20, r24
     d5e:	8b 81       	ldd	r24, Y+3	; 0x03
     d60:	28 2f       	mov	r18, r24
     d62:	30 e0       	ldi	r19, 0x00	; 0
     d64:	81 e0       	ldi	r24, 0x01	; 1
     d66:	90 e0       	ldi	r25, 0x00	; 0
     d68:	02 2e       	mov	r0, r18
     d6a:	02 c0       	rjmp	.+4      	; 0xd70 <DIO_setPinDirection+0x10a>
     d6c:	88 0f       	add	r24, r24
     d6e:	99 1f       	adc	r25, r25
     d70:	0a 94       	dec	r0
     d72:	e2 f7       	brpl	.-8      	; 0xd6c <DIO_setPinDirection+0x106>
     d74:	84 2b       	or	r24, r20
     d76:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
     d78:	19 82       	std	Y+1, r1	; 0x01
     d7a:	87 c0       	rjmp	.+270    	; 0xe8a <DIO_setPinDirection+0x224>
				break;
		    	default:
				enu_ErrorState = DIO_E_PARAM_INVALID_PORT_ID;	/* Invalid port id */
     d7c:	81 e0       	ldi	r24, 0x01	; 1
     d7e:	89 83       	std	Y+1, r24	; 0x01
     d80:	84 c0       	rjmp	.+264    	; 0xe8a <DIO_setPinDirection+0x224>
				break;
			}
		}
		else if (enu_pinDirection == INPUT)
     d82:	8c 81       	ldd	r24, Y+4	; 0x04
     d84:	88 23       	and	r24, r24
     d86:	09 f0       	breq	.+2      	; 0xd8a <DIO_setPinDirection+0x124>
     d88:	7b c0       	rjmp	.+246    	; 0xe80 <DIO_setPinDirection+0x21a>
		{
			switch (enu_portID)
     d8a:	8a 81       	ldd	r24, Y+2	; 0x02
     d8c:	28 2f       	mov	r18, r24
     d8e:	30 e0       	ldi	r19, 0x00	; 0
     d90:	3e 83       	std	Y+6, r19	; 0x06
     d92:	2d 83       	std	Y+5, r18	; 0x05
     d94:	8d 81       	ldd	r24, Y+5	; 0x05
     d96:	9e 81       	ldd	r25, Y+6	; 0x06
     d98:	81 30       	cpi	r24, 0x01	; 1
     d9a:	91 05       	cpc	r25, r1
     d9c:	61 f1       	breq	.+88     	; 0xdf6 <DIO_setPinDirection+0x190>
     d9e:	2d 81       	ldd	r18, Y+5	; 0x05
     da0:	3e 81       	ldd	r19, Y+6	; 0x06
     da2:	22 30       	cpi	r18, 0x02	; 2
     da4:	31 05       	cpc	r19, r1
     da6:	2c f4       	brge	.+10     	; 0xdb2 <DIO_setPinDirection+0x14c>
     da8:	8d 81       	ldd	r24, Y+5	; 0x05
     daa:	9e 81       	ldd	r25, Y+6	; 0x06
     dac:	00 97       	sbiw	r24, 0x00	; 0
     dae:	69 f0       	breq	.+26     	; 0xdca <DIO_setPinDirection+0x164>
     db0:	64 c0       	rjmp	.+200    	; 0xe7a <DIO_setPinDirection+0x214>
     db2:	2d 81       	ldd	r18, Y+5	; 0x05
     db4:	3e 81       	ldd	r19, Y+6	; 0x06
     db6:	22 30       	cpi	r18, 0x02	; 2
     db8:	31 05       	cpc	r19, r1
     dba:	99 f1       	breq	.+102    	; 0xe22 <DIO_setPinDirection+0x1bc>
     dbc:	8d 81       	ldd	r24, Y+5	; 0x05
     dbe:	9e 81       	ldd	r25, Y+6	; 0x06
     dc0:	83 30       	cpi	r24, 0x03	; 3
     dc2:	91 05       	cpc	r25, r1
     dc4:	09 f4       	brne	.+2      	; 0xdc8 <DIO_setPinDirection+0x162>
     dc6:	43 c0       	rjmp	.+134    	; 0xe4e <DIO_setPinDirection+0x1e8>
     dc8:	58 c0       	rjmp	.+176    	; 0xe7a <DIO_setPinDirection+0x214>
			{
			case DIO_PORTA:
				CLEAR_BIT(DDRA_DIR_R, enu_pinID);
     dca:	aa e3       	ldi	r26, 0x3A	; 58
     dcc:	b0 e0       	ldi	r27, 0x00	; 0
     dce:	ea e3       	ldi	r30, 0x3A	; 58
     dd0:	f0 e0       	ldi	r31, 0x00	; 0
     dd2:	80 81       	ld	r24, Z
     dd4:	48 2f       	mov	r20, r24
     dd6:	8b 81       	ldd	r24, Y+3	; 0x03
     dd8:	28 2f       	mov	r18, r24
     dda:	30 e0       	ldi	r19, 0x00	; 0
     ddc:	81 e0       	ldi	r24, 0x01	; 1
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	02 2e       	mov	r0, r18
     de2:	02 c0       	rjmp	.+4      	; 0xde8 <DIO_setPinDirection+0x182>
     de4:	88 0f       	add	r24, r24
     de6:	99 1f       	adc	r25, r25
     de8:	0a 94       	dec	r0
     dea:	e2 f7       	brpl	.-8      	; 0xde4 <DIO_setPinDirection+0x17e>
     dec:	80 95       	com	r24
     dee:	84 23       	and	r24, r20
     df0:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
     df2:	19 82       	std	Y+1, r1	; 0x01
     df4:	4a c0       	rjmp	.+148    	; 0xe8a <DIO_setPinDirection+0x224>
				break;
			case DIO_PORTB:
				CLEAR_BIT(DDRB_DIR_R, enu_pinID);
     df6:	a7 e3       	ldi	r26, 0x37	; 55
     df8:	b0 e0       	ldi	r27, 0x00	; 0
     dfa:	e7 e3       	ldi	r30, 0x37	; 55
     dfc:	f0 e0       	ldi	r31, 0x00	; 0
     dfe:	80 81       	ld	r24, Z
     e00:	48 2f       	mov	r20, r24
     e02:	8b 81       	ldd	r24, Y+3	; 0x03
     e04:	28 2f       	mov	r18, r24
     e06:	30 e0       	ldi	r19, 0x00	; 0
     e08:	81 e0       	ldi	r24, 0x01	; 1
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	02 2e       	mov	r0, r18
     e0e:	02 c0       	rjmp	.+4      	; 0xe14 <DIO_setPinDirection+0x1ae>
     e10:	88 0f       	add	r24, r24
     e12:	99 1f       	adc	r25, r25
     e14:	0a 94       	dec	r0
     e16:	e2 f7       	brpl	.-8      	; 0xe10 <DIO_setPinDirection+0x1aa>
     e18:	80 95       	com	r24
     e1a:	84 23       	and	r24, r20
     e1c:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
     e1e:	19 82       	std	Y+1, r1	; 0x01
     e20:	34 c0       	rjmp	.+104    	; 0xe8a <DIO_setPinDirection+0x224>
				break;
			case DIO_PORTC:
				CLEAR_BIT(DDRC_DIR_R, enu_pinID);
     e22:	a4 e3       	ldi	r26, 0x34	; 52
     e24:	b0 e0       	ldi	r27, 0x00	; 0
     e26:	e4 e3       	ldi	r30, 0x34	; 52
     e28:	f0 e0       	ldi	r31, 0x00	; 0
     e2a:	80 81       	ld	r24, Z
     e2c:	48 2f       	mov	r20, r24
     e2e:	8b 81       	ldd	r24, Y+3	; 0x03
     e30:	28 2f       	mov	r18, r24
     e32:	30 e0       	ldi	r19, 0x00	; 0
     e34:	81 e0       	ldi	r24, 0x01	; 1
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	02 2e       	mov	r0, r18
     e3a:	02 c0       	rjmp	.+4      	; 0xe40 <DIO_setPinDirection+0x1da>
     e3c:	88 0f       	add	r24, r24
     e3e:	99 1f       	adc	r25, r25
     e40:	0a 94       	dec	r0
     e42:	e2 f7       	brpl	.-8      	; 0xe3c <DIO_setPinDirection+0x1d6>
     e44:	80 95       	com	r24
     e46:	84 23       	and	r24, r20
     e48:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
     e4a:	19 82       	std	Y+1, r1	; 0x01
     e4c:	1e c0       	rjmp	.+60     	; 0xe8a <DIO_setPinDirection+0x224>
				break;
			case DIO_PORTD:
				CLEAR_BIT(DDRD_DIR_R, enu_pinID);
     e4e:	a1 e3       	ldi	r26, 0x31	; 49
     e50:	b0 e0       	ldi	r27, 0x00	; 0
     e52:	e1 e3       	ldi	r30, 0x31	; 49
     e54:	f0 e0       	ldi	r31, 0x00	; 0
     e56:	80 81       	ld	r24, Z
     e58:	48 2f       	mov	r20, r24
     e5a:	8b 81       	ldd	r24, Y+3	; 0x03
     e5c:	28 2f       	mov	r18, r24
     e5e:	30 e0       	ldi	r19, 0x00	; 0
     e60:	81 e0       	ldi	r24, 0x01	; 1
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	02 2e       	mov	r0, r18
     e66:	02 c0       	rjmp	.+4      	; 0xe6c <DIO_setPinDirection+0x206>
     e68:	88 0f       	add	r24, r24
     e6a:	99 1f       	adc	r25, r25
     e6c:	0a 94       	dec	r0
     e6e:	e2 f7       	brpl	.-8      	; 0xe68 <DIO_setPinDirection+0x202>
     e70:	80 95       	com	r24
     e72:	84 23       	and	r24, r20
     e74:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
     e76:	19 82       	std	Y+1, r1	; 0x01
     e78:	08 c0       	rjmp	.+16     	; 0xe8a <DIO_setPinDirection+0x224>
				break;
		        default:
				enu_ErrorState = DIO_E_PARAM_INVALID_PORT_ID;	/* Invalid port id */
     e7a:	81 e0       	ldi	r24, 0x01	; 1
     e7c:	89 83       	std	Y+1, r24	; 0x01
     e7e:	05 c0       	rjmp	.+10     	; 0xe8a <DIO_setPinDirection+0x224>
				break;
			}
		}
		else
		{
			enu_ErrorState = DIO_E_PARAM_INVALID_PORT_DIR;	/* Invalid port direction */
     e80:	84 e0       	ldi	r24, 0x04	; 4
     e82:	89 83       	std	Y+1, r24	; 0x01
     e84:	02 c0       	rjmp	.+4      	; 0xe8a <DIO_setPinDirection+0x224>
		}
	}
	else
	{
		enu_ErrorState = DIO_E_PARAM_INVALID_PIN_ID;	/* Invalid pin id */
     e86:	82 e0       	ldi	r24, 0x02	; 2
     e88:	89 83       	std	Y+1, r24	; 0x01
	}
	return enu_ErrorState;
     e8a:	89 81       	ldd	r24, Y+1	; 0x01
}
     e8c:	28 96       	adiw	r28, 0x08	; 8
     e8e:	0f b6       	in	r0, 0x3f	; 63
     e90:	f8 94       	cli
     e92:	de bf       	out	0x3e, r29	; 62
     e94:	0f be       	out	0x3f, r0	; 63
     e96:	cd bf       	out	0x3d, r28	; 61
     e98:	cf 91       	pop	r28
     e9a:	df 91       	pop	r29
     e9c:	08 95       	ret

00000e9e <DIO_writePort>:
 * [in/out]	  None
 *
 * [Returns]:     Error State
 ******************************************************************************/
enuDIO_E_STATE_t DIO_writePort(enuDIO_PortId_t enu_portID, uint8_t au8_portValue)
{
     e9e:	df 93       	push	r29
     ea0:	cf 93       	push	r28
     ea2:	00 d0       	rcall	.+0      	; 0xea4 <DIO_writePort+0x6>
     ea4:	00 d0       	rcall	.+0      	; 0xea6 <DIO_writePort+0x8>
     ea6:	0f 92       	push	r0
     ea8:	cd b7       	in	r28, 0x3d	; 61
     eaa:	de b7       	in	r29, 0x3e	; 62
     eac:	8a 83       	std	Y+2, r24	; 0x02
     eae:	6b 83       	std	Y+3, r22	; 0x03
	enuDIO_E_STATE_t enu_ErrorState = E_NOT_OK;
     eb0:	81 e0       	ldi	r24, 0x01	; 1
     eb2:	89 83       	std	Y+1, r24	; 0x01

    switch (enu_portID)
     eb4:	8a 81       	ldd	r24, Y+2	; 0x02
     eb6:	28 2f       	mov	r18, r24
     eb8:	30 e0       	ldi	r19, 0x00	; 0
     eba:	3d 83       	std	Y+5, r19	; 0x05
     ebc:	2c 83       	std	Y+4, r18	; 0x04
     ebe:	8c 81       	ldd	r24, Y+4	; 0x04
     ec0:	9d 81       	ldd	r25, Y+5	; 0x05
     ec2:	81 30       	cpi	r24, 0x01	; 1
     ec4:	91 05       	cpc	r25, r1
     ec6:	d9 f0       	breq	.+54     	; 0xefe <DIO_writePort+0x60>
     ec8:	2c 81       	ldd	r18, Y+4	; 0x04
     eca:	3d 81       	ldd	r19, Y+5	; 0x05
     ecc:	22 30       	cpi	r18, 0x02	; 2
     ece:	31 05       	cpc	r19, r1
     ed0:	2c f4       	brge	.+10     	; 0xedc <DIO_writePort+0x3e>
     ed2:	8c 81       	ldd	r24, Y+4	; 0x04
     ed4:	9d 81       	ldd	r25, Y+5	; 0x05
     ed6:	00 97       	sbiw	r24, 0x00	; 0
     ed8:	61 f0       	breq	.+24     	; 0xef2 <DIO_writePort+0x54>
     eda:	23 c0       	rjmp	.+70     	; 0xf22 <DIO_writePort+0x84>
     edc:	2c 81       	ldd	r18, Y+4	; 0x04
     ede:	3d 81       	ldd	r19, Y+5	; 0x05
     ee0:	22 30       	cpi	r18, 0x02	; 2
     ee2:	31 05       	cpc	r19, r1
     ee4:	91 f0       	breq	.+36     	; 0xf0a <DIO_writePort+0x6c>
     ee6:	8c 81       	ldd	r24, Y+4	; 0x04
     ee8:	9d 81       	ldd	r25, Y+5	; 0x05
     eea:	83 30       	cpi	r24, 0x03	; 3
     eec:	91 05       	cpc	r25, r1
     eee:	99 f0       	breq	.+38     	; 0xf16 <DIO_writePort+0x78>
     ef0:	18 c0       	rjmp	.+48     	; 0xf22 <DIO_writePort+0x84>
    {
    case DIO_PORTA:
        PORTA_DATA_R = au8_portValue;
     ef2:	eb e3       	ldi	r30, 0x3B	; 59
     ef4:	f0 e0       	ldi	r31, 0x00	; 0
     ef6:	8b 81       	ldd	r24, Y+3	; 0x03
     ef8:	80 83       	st	Z, r24
        enu_ErrorState = DIO_E_PARAM_VALID;
     efa:	19 82       	std	Y+1, r1	; 0x01
     efc:	14 c0       	rjmp	.+40     	; 0xf26 <DIO_writePort+0x88>
        break;
    case DIO_PORTB:
        PORTB_DATA_R = au8_portValue;
     efe:	e8 e3       	ldi	r30, 0x38	; 56
     f00:	f0 e0       	ldi	r31, 0x00	; 0
     f02:	8b 81       	ldd	r24, Y+3	; 0x03
     f04:	80 83       	st	Z, r24
        enu_ErrorState = DIO_E_PARAM_VALID;
     f06:	19 82       	std	Y+1, r1	; 0x01
     f08:	0e c0       	rjmp	.+28     	; 0xf26 <DIO_writePort+0x88>
        break;
    case DIO_PORTC:
        PORTC_DATA_R = au8_portValue;
     f0a:	e5 e3       	ldi	r30, 0x35	; 53
     f0c:	f0 e0       	ldi	r31, 0x00	; 0
     f0e:	8b 81       	ldd	r24, Y+3	; 0x03
     f10:	80 83       	st	Z, r24
        enu_ErrorState = DIO_E_PARAM_VALID;
     f12:	19 82       	std	Y+1, r1	; 0x01
     f14:	08 c0       	rjmp	.+16     	; 0xf26 <DIO_writePort+0x88>
        break;
    case DIO_PORTD:
        PORTD_DATA_R = au8_portValue;
     f16:	e2 e3       	ldi	r30, 0x32	; 50
     f18:	f0 e0       	ldi	r31, 0x00	; 0
     f1a:	8b 81       	ldd	r24, Y+3	; 0x03
     f1c:	80 83       	st	Z, r24
        enu_ErrorState = DIO_E_PARAM_VALID;
     f1e:	19 82       	std	Y+1, r1	; 0x01
     f20:	02 c0       	rjmp	.+4      	; 0xf26 <DIO_writePort+0x88>
        break;
    default:
    	enu_ErrorState = DIO_E_PARAM_INVALID_PORT_ID;	/* Invalid port id */
     f22:	81 e0       	ldi	r24, 0x01	; 1
     f24:	89 83       	std	Y+1, r24	; 0x01
        break;
    }
    return enu_ErrorState;
     f26:	89 81       	ldd	r24, Y+1	; 0x01
}
     f28:	0f 90       	pop	r0
     f2a:	0f 90       	pop	r0
     f2c:	0f 90       	pop	r0
     f2e:	0f 90       	pop	r0
     f30:	0f 90       	pop	r0
     f32:	cf 91       	pop	r28
     f34:	df 91       	pop	r29
     f36:	08 95       	ret

00000f38 <DIO_writePin>:
 * [in/out]	  None
 *
 * [Returns]:     Error State
 ******************************************************************************/
enuDIO_E_STATE_t DIO_writePin(enuDIO_PortId_t enu_portID, enuDIO_PinId_t enu_pinID, uint8_t au8_pinValue)
{
     f38:	df 93       	push	r29
     f3a:	cf 93       	push	r28
     f3c:	cd b7       	in	r28, 0x3d	; 61
     f3e:	de b7       	in	r29, 0x3e	; 62
     f40:	28 97       	sbiw	r28, 0x08	; 8
     f42:	0f b6       	in	r0, 0x3f	; 63
     f44:	f8 94       	cli
     f46:	de bf       	out	0x3e, r29	; 62
     f48:	0f be       	out	0x3f, r0	; 63
     f4a:	cd bf       	out	0x3d, r28	; 61
     f4c:	8a 83       	std	Y+2, r24	; 0x02
     f4e:	6b 83       	std	Y+3, r22	; 0x03
     f50:	4c 83       	std	Y+4, r20	; 0x04
	enuDIO_E_STATE_t enu_ErrorState = E_NOT_OK;
     f52:	81 e0       	ldi	r24, 0x01	; 1
     f54:	89 83       	std	Y+1, r24	; 0x01

	/* Check if the pin id is one of the existed pin or not */
	if ((enu_pinID >= PIN_0) && (enu_pinID <= PIN_7))
     f56:	8b 81       	ldd	r24, Y+3	; 0x03
     f58:	88 30       	cpi	r24, 0x08	; 8
     f5a:	08 f0       	brcs	.+2      	; 0xf5e <DIO_writePin+0x26>
     f5c:	fd c0       	rjmp	.+506    	; 0x1158 <DIO_writePin+0x220>
	{
		if (au8_pinValue == HIGH)
     f5e:	8c 81       	ldd	r24, Y+4	; 0x04
     f60:	81 30       	cpi	r24, 0x01	; 1
     f62:	09 f0       	breq	.+2      	; 0xf66 <DIO_writePin+0x2e>
     f64:	77 c0       	rjmp	.+238    	; 0x1054 <DIO_writePin+0x11c>
		{
			switch (enu_portID)
     f66:	8a 81       	ldd	r24, Y+2	; 0x02
     f68:	28 2f       	mov	r18, r24
     f6a:	30 e0       	ldi	r19, 0x00	; 0
     f6c:	38 87       	std	Y+8, r19	; 0x08
     f6e:	2f 83       	std	Y+7, r18	; 0x07
     f70:	8f 81       	ldd	r24, Y+7	; 0x07
     f72:	98 85       	ldd	r25, Y+8	; 0x08
     f74:	81 30       	cpi	r24, 0x01	; 1
     f76:	91 05       	cpc	r25, r1
     f78:	59 f1       	breq	.+86     	; 0xfd0 <DIO_writePin+0x98>
     f7a:	2f 81       	ldd	r18, Y+7	; 0x07
     f7c:	38 85       	ldd	r19, Y+8	; 0x08
     f7e:	22 30       	cpi	r18, 0x02	; 2
     f80:	31 05       	cpc	r19, r1
     f82:	2c f4       	brge	.+10     	; 0xf8e <DIO_writePin+0x56>
     f84:	8f 81       	ldd	r24, Y+7	; 0x07
     f86:	98 85       	ldd	r25, Y+8	; 0x08
     f88:	00 97       	sbiw	r24, 0x00	; 0
     f8a:	69 f0       	breq	.+26     	; 0xfa6 <DIO_writePin+0x6e>
     f8c:	60 c0       	rjmp	.+192    	; 0x104e <DIO_writePin+0x116>
     f8e:	2f 81       	ldd	r18, Y+7	; 0x07
     f90:	38 85       	ldd	r19, Y+8	; 0x08
     f92:	22 30       	cpi	r18, 0x02	; 2
     f94:	31 05       	cpc	r19, r1
     f96:	89 f1       	breq	.+98     	; 0xffa <DIO_writePin+0xc2>
     f98:	8f 81       	ldd	r24, Y+7	; 0x07
     f9a:	98 85       	ldd	r25, Y+8	; 0x08
     f9c:	83 30       	cpi	r24, 0x03	; 3
     f9e:	91 05       	cpc	r25, r1
     fa0:	09 f4       	brne	.+2      	; 0xfa4 <DIO_writePin+0x6c>
     fa2:	40 c0       	rjmp	.+128    	; 0x1024 <DIO_writePin+0xec>
     fa4:	54 c0       	rjmp	.+168    	; 0x104e <DIO_writePin+0x116>
			{
			case DIO_PORTA:
				SET_BIT(PORTA_DATA_R, enu_pinID);
     fa6:	ab e3       	ldi	r26, 0x3B	; 59
     fa8:	b0 e0       	ldi	r27, 0x00	; 0
     faa:	eb e3       	ldi	r30, 0x3B	; 59
     fac:	f0 e0       	ldi	r31, 0x00	; 0
     fae:	80 81       	ld	r24, Z
     fb0:	48 2f       	mov	r20, r24
     fb2:	8b 81       	ldd	r24, Y+3	; 0x03
     fb4:	28 2f       	mov	r18, r24
     fb6:	30 e0       	ldi	r19, 0x00	; 0
     fb8:	81 e0       	ldi	r24, 0x01	; 1
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	02 2e       	mov	r0, r18
     fbe:	02 c0       	rjmp	.+4      	; 0xfc4 <DIO_writePin+0x8c>
     fc0:	88 0f       	add	r24, r24
     fc2:	99 1f       	adc	r25, r25
     fc4:	0a 94       	dec	r0
     fc6:	e2 f7       	brpl	.-8      	; 0xfc0 <DIO_writePin+0x88>
     fc8:	84 2b       	or	r24, r20
     fca:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
     fcc:	19 82       	std	Y+1, r1	; 0x01
     fce:	c6 c0       	rjmp	.+396    	; 0x115c <DIO_writePin+0x224>
				break;
			case DIO_PORTB:
				SET_BIT(PORTB_DATA_R, enu_pinID);
     fd0:	a8 e3       	ldi	r26, 0x38	; 56
     fd2:	b0 e0       	ldi	r27, 0x00	; 0
     fd4:	e8 e3       	ldi	r30, 0x38	; 56
     fd6:	f0 e0       	ldi	r31, 0x00	; 0
     fd8:	80 81       	ld	r24, Z
     fda:	48 2f       	mov	r20, r24
     fdc:	8b 81       	ldd	r24, Y+3	; 0x03
     fde:	28 2f       	mov	r18, r24
     fe0:	30 e0       	ldi	r19, 0x00	; 0
     fe2:	81 e0       	ldi	r24, 0x01	; 1
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	02 2e       	mov	r0, r18
     fe8:	02 c0       	rjmp	.+4      	; 0xfee <DIO_writePin+0xb6>
     fea:	88 0f       	add	r24, r24
     fec:	99 1f       	adc	r25, r25
     fee:	0a 94       	dec	r0
     ff0:	e2 f7       	brpl	.-8      	; 0xfea <DIO_writePin+0xb2>
     ff2:	84 2b       	or	r24, r20
     ff4:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
     ff6:	19 82       	std	Y+1, r1	; 0x01
     ff8:	b1 c0       	rjmp	.+354    	; 0x115c <DIO_writePin+0x224>
				break;
			case DIO_PORTC:
				SET_BIT(PORTC_DATA_R, enu_pinID);
     ffa:	a5 e3       	ldi	r26, 0x35	; 53
     ffc:	b0 e0       	ldi	r27, 0x00	; 0
     ffe:	e5 e3       	ldi	r30, 0x35	; 53
    1000:	f0 e0       	ldi	r31, 0x00	; 0
    1002:	80 81       	ld	r24, Z
    1004:	48 2f       	mov	r20, r24
    1006:	8b 81       	ldd	r24, Y+3	; 0x03
    1008:	28 2f       	mov	r18, r24
    100a:	30 e0       	ldi	r19, 0x00	; 0
    100c:	81 e0       	ldi	r24, 0x01	; 1
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	02 2e       	mov	r0, r18
    1012:	02 c0       	rjmp	.+4      	; 0x1018 <DIO_writePin+0xe0>
    1014:	88 0f       	add	r24, r24
    1016:	99 1f       	adc	r25, r25
    1018:	0a 94       	dec	r0
    101a:	e2 f7       	brpl	.-8      	; 0x1014 <DIO_writePin+0xdc>
    101c:	84 2b       	or	r24, r20
    101e:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
    1020:	19 82       	std	Y+1, r1	; 0x01
    1022:	9c c0       	rjmp	.+312    	; 0x115c <DIO_writePin+0x224>
				break;
			case DIO_PORTD:
				SET_BIT(PORTD_DATA_R, enu_pinID);
    1024:	a2 e3       	ldi	r26, 0x32	; 50
    1026:	b0 e0       	ldi	r27, 0x00	; 0
    1028:	e2 e3       	ldi	r30, 0x32	; 50
    102a:	f0 e0       	ldi	r31, 0x00	; 0
    102c:	80 81       	ld	r24, Z
    102e:	48 2f       	mov	r20, r24
    1030:	8b 81       	ldd	r24, Y+3	; 0x03
    1032:	28 2f       	mov	r18, r24
    1034:	30 e0       	ldi	r19, 0x00	; 0
    1036:	81 e0       	ldi	r24, 0x01	; 1
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	02 2e       	mov	r0, r18
    103c:	02 c0       	rjmp	.+4      	; 0x1042 <DIO_writePin+0x10a>
    103e:	88 0f       	add	r24, r24
    1040:	99 1f       	adc	r25, r25
    1042:	0a 94       	dec	r0
    1044:	e2 f7       	brpl	.-8      	; 0x103e <DIO_writePin+0x106>
    1046:	84 2b       	or	r24, r20
    1048:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
    104a:	19 82       	std	Y+1, r1	; 0x01
    104c:	87 c0       	rjmp	.+270    	; 0x115c <DIO_writePin+0x224>
				break;
		    	default:
				enu_ErrorState = DIO_E_PARAM_INVALID_PORT_ID;	/* Invalid port id */
    104e:	81 e0       	ldi	r24, 0x01	; 1
    1050:	89 83       	std	Y+1, r24	; 0x01
    1052:	84 c0       	rjmp	.+264    	; 0x115c <DIO_writePin+0x224>
				break;
			}
		}
		else if (au8_pinValue == LOW)
    1054:	8c 81       	ldd	r24, Y+4	; 0x04
    1056:	88 23       	and	r24, r24
    1058:	09 f0       	breq	.+2      	; 0x105c <DIO_writePin+0x124>
    105a:	7b c0       	rjmp	.+246    	; 0x1152 <DIO_writePin+0x21a>
		{
			switch (enu_portID)
    105c:	8a 81       	ldd	r24, Y+2	; 0x02
    105e:	28 2f       	mov	r18, r24
    1060:	30 e0       	ldi	r19, 0x00	; 0
    1062:	3e 83       	std	Y+6, r19	; 0x06
    1064:	2d 83       	std	Y+5, r18	; 0x05
    1066:	8d 81       	ldd	r24, Y+5	; 0x05
    1068:	9e 81       	ldd	r25, Y+6	; 0x06
    106a:	81 30       	cpi	r24, 0x01	; 1
    106c:	91 05       	cpc	r25, r1
    106e:	61 f1       	breq	.+88     	; 0x10c8 <DIO_writePin+0x190>
    1070:	2d 81       	ldd	r18, Y+5	; 0x05
    1072:	3e 81       	ldd	r19, Y+6	; 0x06
    1074:	22 30       	cpi	r18, 0x02	; 2
    1076:	31 05       	cpc	r19, r1
    1078:	2c f4       	brge	.+10     	; 0x1084 <DIO_writePin+0x14c>
    107a:	8d 81       	ldd	r24, Y+5	; 0x05
    107c:	9e 81       	ldd	r25, Y+6	; 0x06
    107e:	00 97       	sbiw	r24, 0x00	; 0
    1080:	69 f0       	breq	.+26     	; 0x109c <DIO_writePin+0x164>
    1082:	64 c0       	rjmp	.+200    	; 0x114c <DIO_writePin+0x214>
    1084:	2d 81       	ldd	r18, Y+5	; 0x05
    1086:	3e 81       	ldd	r19, Y+6	; 0x06
    1088:	22 30       	cpi	r18, 0x02	; 2
    108a:	31 05       	cpc	r19, r1
    108c:	99 f1       	breq	.+102    	; 0x10f4 <DIO_writePin+0x1bc>
    108e:	8d 81       	ldd	r24, Y+5	; 0x05
    1090:	9e 81       	ldd	r25, Y+6	; 0x06
    1092:	83 30       	cpi	r24, 0x03	; 3
    1094:	91 05       	cpc	r25, r1
    1096:	09 f4       	brne	.+2      	; 0x109a <DIO_writePin+0x162>
    1098:	43 c0       	rjmp	.+134    	; 0x1120 <DIO_writePin+0x1e8>
    109a:	58 c0       	rjmp	.+176    	; 0x114c <DIO_writePin+0x214>
			{
			case DIO_PORTA:
				CLEAR_BIT(PORTA_DATA_R, enu_pinID);
    109c:	ab e3       	ldi	r26, 0x3B	; 59
    109e:	b0 e0       	ldi	r27, 0x00	; 0
    10a0:	eb e3       	ldi	r30, 0x3B	; 59
    10a2:	f0 e0       	ldi	r31, 0x00	; 0
    10a4:	80 81       	ld	r24, Z
    10a6:	48 2f       	mov	r20, r24
    10a8:	8b 81       	ldd	r24, Y+3	; 0x03
    10aa:	28 2f       	mov	r18, r24
    10ac:	30 e0       	ldi	r19, 0x00	; 0
    10ae:	81 e0       	ldi	r24, 0x01	; 1
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	02 2e       	mov	r0, r18
    10b4:	02 c0       	rjmp	.+4      	; 0x10ba <DIO_writePin+0x182>
    10b6:	88 0f       	add	r24, r24
    10b8:	99 1f       	adc	r25, r25
    10ba:	0a 94       	dec	r0
    10bc:	e2 f7       	brpl	.-8      	; 0x10b6 <DIO_writePin+0x17e>
    10be:	80 95       	com	r24
    10c0:	84 23       	and	r24, r20
    10c2:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
    10c4:	19 82       	std	Y+1, r1	; 0x01
    10c6:	4a c0       	rjmp	.+148    	; 0x115c <DIO_writePin+0x224>
				break;
			case DIO_PORTB:
				CLEAR_BIT(PORTB_DATA_R, enu_pinID);
    10c8:	a8 e3       	ldi	r26, 0x38	; 56
    10ca:	b0 e0       	ldi	r27, 0x00	; 0
    10cc:	e8 e3       	ldi	r30, 0x38	; 56
    10ce:	f0 e0       	ldi	r31, 0x00	; 0
    10d0:	80 81       	ld	r24, Z
    10d2:	48 2f       	mov	r20, r24
    10d4:	8b 81       	ldd	r24, Y+3	; 0x03
    10d6:	28 2f       	mov	r18, r24
    10d8:	30 e0       	ldi	r19, 0x00	; 0
    10da:	81 e0       	ldi	r24, 0x01	; 1
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	02 2e       	mov	r0, r18
    10e0:	02 c0       	rjmp	.+4      	; 0x10e6 <DIO_writePin+0x1ae>
    10e2:	88 0f       	add	r24, r24
    10e4:	99 1f       	adc	r25, r25
    10e6:	0a 94       	dec	r0
    10e8:	e2 f7       	brpl	.-8      	; 0x10e2 <DIO_writePin+0x1aa>
    10ea:	80 95       	com	r24
    10ec:	84 23       	and	r24, r20
    10ee:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
    10f0:	19 82       	std	Y+1, r1	; 0x01
    10f2:	34 c0       	rjmp	.+104    	; 0x115c <DIO_writePin+0x224>
				break;
			case DIO_PORTC:
				CLEAR_BIT(PORTC_DATA_R, enu_pinID);
    10f4:	a5 e3       	ldi	r26, 0x35	; 53
    10f6:	b0 e0       	ldi	r27, 0x00	; 0
    10f8:	e5 e3       	ldi	r30, 0x35	; 53
    10fa:	f0 e0       	ldi	r31, 0x00	; 0
    10fc:	80 81       	ld	r24, Z
    10fe:	48 2f       	mov	r20, r24
    1100:	8b 81       	ldd	r24, Y+3	; 0x03
    1102:	28 2f       	mov	r18, r24
    1104:	30 e0       	ldi	r19, 0x00	; 0
    1106:	81 e0       	ldi	r24, 0x01	; 1
    1108:	90 e0       	ldi	r25, 0x00	; 0
    110a:	02 2e       	mov	r0, r18
    110c:	02 c0       	rjmp	.+4      	; 0x1112 <DIO_writePin+0x1da>
    110e:	88 0f       	add	r24, r24
    1110:	99 1f       	adc	r25, r25
    1112:	0a 94       	dec	r0
    1114:	e2 f7       	brpl	.-8      	; 0x110e <DIO_writePin+0x1d6>
    1116:	80 95       	com	r24
    1118:	84 23       	and	r24, r20
    111a:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
    111c:	19 82       	std	Y+1, r1	; 0x01
    111e:	1e c0       	rjmp	.+60     	; 0x115c <DIO_writePin+0x224>
				break;
			case DIO_PORTD:
				CLEAR_BIT(PORTD_DATA_R, enu_pinID);
    1120:	a2 e3       	ldi	r26, 0x32	; 50
    1122:	b0 e0       	ldi	r27, 0x00	; 0
    1124:	e2 e3       	ldi	r30, 0x32	; 50
    1126:	f0 e0       	ldi	r31, 0x00	; 0
    1128:	80 81       	ld	r24, Z
    112a:	48 2f       	mov	r20, r24
    112c:	8b 81       	ldd	r24, Y+3	; 0x03
    112e:	28 2f       	mov	r18, r24
    1130:	30 e0       	ldi	r19, 0x00	; 0
    1132:	81 e0       	ldi	r24, 0x01	; 1
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	02 2e       	mov	r0, r18
    1138:	02 c0       	rjmp	.+4      	; 0x113e <DIO_writePin+0x206>
    113a:	88 0f       	add	r24, r24
    113c:	99 1f       	adc	r25, r25
    113e:	0a 94       	dec	r0
    1140:	e2 f7       	brpl	.-8      	; 0x113a <DIO_writePin+0x202>
    1142:	80 95       	com	r24
    1144:	84 23       	and	r24, r20
    1146:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
    1148:	19 82       	std	Y+1, r1	; 0x01
    114a:	08 c0       	rjmp	.+16     	; 0x115c <DIO_writePin+0x224>
				break;
		    	default:
				enu_ErrorState = DIO_E_PARAM_INVALID_PORT_ID;	/* Invalid port id */
    114c:	81 e0       	ldi	r24, 0x01	; 1
    114e:	89 83       	std	Y+1, r24	; 0x01
    1150:	05 c0       	rjmp	.+10     	; 0x115c <DIO_writePin+0x224>
				break;
			}
		}
		else
        {
			enu_ErrorState = DIO_E_PARAM_INVALID_PORT_DIR;	/* Invalid port direction */
    1152:	84 e0       	ldi	r24, 0x04	; 4
    1154:	89 83       	std	Y+1, r24	; 0x01
    1156:	02 c0       	rjmp	.+4      	; 0x115c <DIO_writePin+0x224>
		}
	}
	else
	{
		enu_ErrorState = DIO_E_PARAM_INVALID_PIN_ID;	/* Invalid pin id */
    1158:	82 e0       	ldi	r24, 0x02	; 2
    115a:	89 83       	std	Y+1, r24	; 0x01
	}
	return enu_ErrorState;
    115c:	89 81       	ldd	r24, Y+1	; 0x01
}
    115e:	28 96       	adiw	r28, 0x08	; 8
    1160:	0f b6       	in	r0, 0x3f	; 63
    1162:	f8 94       	cli
    1164:	de bf       	out	0x3e, r29	; 62
    1166:	0f be       	out	0x3f, r0	; 63
    1168:	cd bf       	out	0x3d, r28	; 61
    116a:	cf 91       	pop	r28
    116c:	df 91       	pop	r29
    116e:	08 95       	ret

00001170 <DIO_readPort>:
 * [in/out]	  None
 *
 * [Returns]:     Error State
 ******************************************************************************/
enuDIO_E_STATE_t DIO_readPort(enuDIO_PortId_t enu_portID, uint8_t * ptr_portState)
{
    1170:	df 93       	push	r29
    1172:	cf 93       	push	r28
    1174:	00 d0       	rcall	.+0      	; 0x1176 <DIO_readPort+0x6>
    1176:	00 d0       	rcall	.+0      	; 0x1178 <DIO_readPort+0x8>
    1178:	00 d0       	rcall	.+0      	; 0x117a <DIO_readPort+0xa>
    117a:	cd b7       	in	r28, 0x3d	; 61
    117c:	de b7       	in	r29, 0x3e	; 62
    117e:	8a 83       	std	Y+2, r24	; 0x02
    1180:	7c 83       	std	Y+4, r23	; 0x04
    1182:	6b 83       	std	Y+3, r22	; 0x03
	enuDIO_E_STATE_t enu_ErrorState = E_NOT_OK;
    1184:	81 e0       	ldi	r24, 0x01	; 1
    1186:	89 83       	std	Y+1, r24	; 0x01

	/* Check if the pointer is NULL pointer or not */
	if(ptr_portState == NULL_PTR)
    1188:	8b 81       	ldd	r24, Y+3	; 0x03
    118a:	9c 81       	ldd	r25, Y+4	; 0x04
    118c:	00 97       	sbiw	r24, 0x00	; 0
    118e:	19 f4       	brne	.+6      	; 0x1196 <DIO_readPort+0x26>
    	{
		enu_ErrorState = DIO_E_PARAM_POINTER;	/* Invalid pointer */
    1190:	85 e0       	ldi	r24, 0x05	; 5
    1192:	89 83       	std	Y+1, r24	; 0x01
    1194:	41 c0       	rjmp	.+130    	; 0x1218 <DIO_readPort+0xa8>
	}
	else
	{
		switch (enu_portID)
    1196:	8a 81       	ldd	r24, Y+2	; 0x02
    1198:	28 2f       	mov	r18, r24
    119a:	30 e0       	ldi	r19, 0x00	; 0
    119c:	3e 83       	std	Y+6, r19	; 0x06
    119e:	2d 83       	std	Y+5, r18	; 0x05
    11a0:	8d 81       	ldd	r24, Y+5	; 0x05
    11a2:	9e 81       	ldd	r25, Y+6	; 0x06
    11a4:	81 30       	cpi	r24, 0x01	; 1
    11a6:	91 05       	cpc	r25, r1
    11a8:	e9 f0       	breq	.+58     	; 0x11e4 <DIO_readPort+0x74>
    11aa:	2d 81       	ldd	r18, Y+5	; 0x05
    11ac:	3e 81       	ldd	r19, Y+6	; 0x06
    11ae:	22 30       	cpi	r18, 0x02	; 2
    11b0:	31 05       	cpc	r19, r1
    11b2:	2c f4       	brge	.+10     	; 0x11be <DIO_readPort+0x4e>
    11b4:	8d 81       	ldd	r24, Y+5	; 0x05
    11b6:	9e 81       	ldd	r25, Y+6	; 0x06
    11b8:	00 97       	sbiw	r24, 0x00	; 0
    11ba:	61 f0       	breq	.+24     	; 0x11d4 <DIO_readPort+0x64>
    11bc:	2b c0       	rjmp	.+86     	; 0x1214 <DIO_readPort+0xa4>
    11be:	2d 81       	ldd	r18, Y+5	; 0x05
    11c0:	3e 81       	ldd	r19, Y+6	; 0x06
    11c2:	22 30       	cpi	r18, 0x02	; 2
    11c4:	31 05       	cpc	r19, r1
    11c6:	b1 f0       	breq	.+44     	; 0x11f4 <DIO_readPort+0x84>
    11c8:	8d 81       	ldd	r24, Y+5	; 0x05
    11ca:	9e 81       	ldd	r25, Y+6	; 0x06
    11cc:	83 30       	cpi	r24, 0x03	; 3
    11ce:	91 05       	cpc	r25, r1
    11d0:	c9 f0       	breq	.+50     	; 0x1204 <DIO_readPort+0x94>
    11d2:	20 c0       	rjmp	.+64     	; 0x1214 <DIO_readPort+0xa4>
		{
		case DIO_PORTA:
			*ptr_portState = PINA_INPUT_R;
    11d4:	e9 e3       	ldi	r30, 0x39	; 57
    11d6:	f0 e0       	ldi	r31, 0x00	; 0
    11d8:	80 81       	ld	r24, Z
    11da:	eb 81       	ldd	r30, Y+3	; 0x03
    11dc:	fc 81       	ldd	r31, Y+4	; 0x04
    11de:	80 83       	st	Z, r24
			enu_ErrorState = DIO_E_PARAM_VALID;
    11e0:	19 82       	std	Y+1, r1	; 0x01
    11e2:	1a c0       	rjmp	.+52     	; 0x1218 <DIO_readPort+0xa8>
			break;
		case DIO_PORTB:
			*ptr_portState = PINB_INPUT_R;
    11e4:	e6 e3       	ldi	r30, 0x36	; 54
    11e6:	f0 e0       	ldi	r31, 0x00	; 0
    11e8:	80 81       	ld	r24, Z
    11ea:	eb 81       	ldd	r30, Y+3	; 0x03
    11ec:	fc 81       	ldd	r31, Y+4	; 0x04
    11ee:	80 83       	st	Z, r24
			enu_ErrorState = DIO_E_PARAM_VALID;;
    11f0:	19 82       	std	Y+1, r1	; 0x01
    11f2:	12 c0       	rjmp	.+36     	; 0x1218 <DIO_readPort+0xa8>
			break;
		case DIO_PORTC:
			*ptr_portState = PINC_INPUT_R;
    11f4:	e3 e3       	ldi	r30, 0x33	; 51
    11f6:	f0 e0       	ldi	r31, 0x00	; 0
    11f8:	80 81       	ld	r24, Z
    11fa:	eb 81       	ldd	r30, Y+3	; 0x03
    11fc:	fc 81       	ldd	r31, Y+4	; 0x04
    11fe:	80 83       	st	Z, r24
			enu_ErrorState = DIO_E_PARAM_VALID;
    1200:	19 82       	std	Y+1, r1	; 0x01
    1202:	0a c0       	rjmp	.+20     	; 0x1218 <DIO_readPort+0xa8>
			break;
		case DIO_PORTD:
			*ptr_portState = PIND_INPUT_R;
    1204:	e0 e3       	ldi	r30, 0x30	; 48
    1206:	f0 e0       	ldi	r31, 0x00	; 0
    1208:	80 81       	ld	r24, Z
    120a:	eb 81       	ldd	r30, Y+3	; 0x03
    120c:	fc 81       	ldd	r31, Y+4	; 0x04
    120e:	80 83       	st	Z, r24
			enu_ErrorState = DIO_E_PARAM_VALID;
    1210:	19 82       	std	Y+1, r1	; 0x01
    1212:	02 c0       	rjmp	.+4      	; 0x1218 <DIO_readPort+0xa8>
			break;
		default:
			enu_ErrorState = DIO_E_PARAM_INVALID_PORT_ID;	/* Invalid port id */
    1214:	81 e0       	ldi	r24, 0x01	; 1
    1216:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return enu_ErrorState;
    1218:	89 81       	ldd	r24, Y+1	; 0x01
}
    121a:	26 96       	adiw	r28, 0x06	; 6
    121c:	0f b6       	in	r0, 0x3f	; 63
    121e:	f8 94       	cli
    1220:	de bf       	out	0x3e, r29	; 62
    1222:	0f be       	out	0x3f, r0	; 63
    1224:	cd bf       	out	0x3d, r28	; 61
    1226:	cf 91       	pop	r28
    1228:	df 91       	pop	r29
    122a:	08 95       	ret

0000122c <DIO_readPin>:
 * [in/out]	  None
 *
 * [Returns]:     Error State
 ******************************************************************************/
enuDIO_E_STATE_t DIO_readPin(enuDIO_PortId_t enu_portID, enuDIO_PinId_t enu_pinID, uint8_t * ptr_pinState)
{
    122c:	df 93       	push	r29
    122e:	cf 93       	push	r28
    1230:	cd b7       	in	r28, 0x3d	; 61
    1232:	de b7       	in	r29, 0x3e	; 62
    1234:	27 97       	sbiw	r28, 0x07	; 7
    1236:	0f b6       	in	r0, 0x3f	; 63
    1238:	f8 94       	cli
    123a:	de bf       	out	0x3e, r29	; 62
    123c:	0f be       	out	0x3f, r0	; 63
    123e:	cd bf       	out	0x3d, r28	; 61
    1240:	8a 83       	std	Y+2, r24	; 0x02
    1242:	6b 83       	std	Y+3, r22	; 0x03
    1244:	5d 83       	std	Y+5, r21	; 0x05
    1246:	4c 83       	std	Y+4, r20	; 0x04
	enuDIO_E_STATE_t enu_ErrorState = E_NOT_OK;
    1248:	81 e0       	ldi	r24, 0x01	; 1
    124a:	89 83       	std	Y+1, r24	; 0x01

	/* Check if the pointer is NULL pointer or not */
	if(ptr_pinState == NULL_PTR)
    124c:	8c 81       	ldd	r24, Y+4	; 0x04
    124e:	9d 81       	ldd	r25, Y+5	; 0x05
    1250:	00 97       	sbiw	r24, 0x00	; 0
    1252:	19 f4       	brne	.+6      	; 0x125a <DIO_readPin+0x2e>
    	{
		enu_ErrorState = DIO_E_PARAM_POINTER;
    1254:	85 e0       	ldi	r24, 0x05	; 5
    1256:	89 83       	std	Y+1, r24	; 0x01
    1258:	af c0       	rjmp	.+350    	; 0x13b8 <DIO_readPin+0x18c>
	}
	else
	{
		if((enu_pinID >= PIN_0) && (enu_pinID <= PIN_7))
    125a:	8b 81       	ldd	r24, Y+3	; 0x03
    125c:	88 30       	cpi	r24, 0x08	; 8
    125e:	08 f0       	brcs	.+2      	; 0x1262 <DIO_readPin+0x36>
    1260:	a9 c0       	rjmp	.+338    	; 0x13b4 <DIO_readPin+0x188>
		{
		    switch (enu_portID)
    1262:	8a 81       	ldd	r24, Y+2	; 0x02
    1264:	28 2f       	mov	r18, r24
    1266:	30 e0       	ldi	r19, 0x00	; 0
    1268:	3f 83       	std	Y+7, r19	; 0x07
    126a:	2e 83       	std	Y+6, r18	; 0x06
    126c:	4e 81       	ldd	r20, Y+6	; 0x06
    126e:	5f 81       	ldd	r21, Y+7	; 0x07
    1270:	41 30       	cpi	r20, 0x01	; 1
    1272:	51 05       	cpc	r21, r1
    1274:	c9 f1       	breq	.+114    	; 0x12e8 <DIO_readPin+0xbc>
    1276:	8e 81       	ldd	r24, Y+6	; 0x06
    1278:	9f 81       	ldd	r25, Y+7	; 0x07
    127a:	82 30       	cpi	r24, 0x02	; 2
    127c:	91 05       	cpc	r25, r1
    127e:	34 f4       	brge	.+12     	; 0x128c <DIO_readPin+0x60>
    1280:	2e 81       	ldd	r18, Y+6	; 0x06
    1282:	3f 81       	ldd	r19, Y+7	; 0x07
    1284:	21 15       	cp	r18, r1
    1286:	31 05       	cpc	r19, r1
    1288:	71 f0       	breq	.+28     	; 0x12a6 <DIO_readPin+0x7a>
    128a:	91 c0       	rjmp	.+290    	; 0x13ae <DIO_readPin+0x182>
    128c:	4e 81       	ldd	r20, Y+6	; 0x06
    128e:	5f 81       	ldd	r21, Y+7	; 0x07
    1290:	42 30       	cpi	r20, 0x02	; 2
    1292:	51 05       	cpc	r21, r1
    1294:	09 f4       	brne	.+2      	; 0x1298 <DIO_readPin+0x6c>
    1296:	49 c0       	rjmp	.+146    	; 0x132a <DIO_readPin+0xfe>
    1298:	8e 81       	ldd	r24, Y+6	; 0x06
    129a:	9f 81       	ldd	r25, Y+7	; 0x07
    129c:	83 30       	cpi	r24, 0x03	; 3
    129e:	91 05       	cpc	r25, r1
    12a0:	09 f4       	brne	.+2      	; 0x12a4 <DIO_readPin+0x78>
    12a2:	64 c0       	rjmp	.+200    	; 0x136c <DIO_readPin+0x140>
    12a4:	84 c0       	rjmp	.+264    	; 0x13ae <DIO_readPin+0x182>
		    {
		    case DIO_PORTA:
			*ptr_pinState = READ_BIT(PINA_INPUT_R, enu_pinID);
    12a6:	e9 e3       	ldi	r30, 0x39	; 57
    12a8:	f0 e0       	ldi	r31, 0x00	; 0
    12aa:	80 81       	ld	r24, Z
    12ac:	48 2f       	mov	r20, r24
    12ae:	50 e0       	ldi	r21, 0x00	; 0
    12b0:	8b 81       	ldd	r24, Y+3	; 0x03
    12b2:	28 2f       	mov	r18, r24
    12b4:	30 e0       	ldi	r19, 0x00	; 0
    12b6:	81 e0       	ldi	r24, 0x01	; 1
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	02 c0       	rjmp	.+4      	; 0x12c0 <DIO_readPin+0x94>
    12bc:	88 0f       	add	r24, r24
    12be:	99 1f       	adc	r25, r25
    12c0:	2a 95       	dec	r18
    12c2:	e2 f7       	brpl	.-8      	; 0x12bc <DIO_readPin+0x90>
    12c4:	9a 01       	movw	r18, r20
    12c6:	28 23       	and	r18, r24
    12c8:	39 23       	and	r19, r25
    12ca:	8b 81       	ldd	r24, Y+3	; 0x03
    12cc:	88 2f       	mov	r24, r24
    12ce:	90 e0       	ldi	r25, 0x00	; 0
    12d0:	a9 01       	movw	r20, r18
    12d2:	02 c0       	rjmp	.+4      	; 0x12d8 <DIO_readPin+0xac>
    12d4:	55 95       	asr	r21
    12d6:	47 95       	ror	r20
    12d8:	8a 95       	dec	r24
    12da:	e2 f7       	brpl	.-8      	; 0x12d4 <DIO_readPin+0xa8>
    12dc:	ca 01       	movw	r24, r20
    12de:	ec 81       	ldd	r30, Y+4	; 0x04
    12e0:	fd 81       	ldd	r31, Y+5	; 0x05
    12e2:	80 83       	st	Z, r24
			enu_ErrorState = DIO_E_PARAM_VALID;
    12e4:	19 82       	std	Y+1, r1	; 0x01
    12e6:	68 c0       	rjmp	.+208    	; 0x13b8 <DIO_readPin+0x18c>
			break;
		    case DIO_PORTB:
			*ptr_pinState = READ_BIT(PINB_INPUT_R, enu_pinID);
    12e8:	e6 e3       	ldi	r30, 0x36	; 54
    12ea:	f0 e0       	ldi	r31, 0x00	; 0
    12ec:	80 81       	ld	r24, Z
    12ee:	48 2f       	mov	r20, r24
    12f0:	50 e0       	ldi	r21, 0x00	; 0
    12f2:	8b 81       	ldd	r24, Y+3	; 0x03
    12f4:	28 2f       	mov	r18, r24
    12f6:	30 e0       	ldi	r19, 0x00	; 0
    12f8:	81 e0       	ldi	r24, 0x01	; 1
    12fa:	90 e0       	ldi	r25, 0x00	; 0
    12fc:	02 c0       	rjmp	.+4      	; 0x1302 <DIO_readPin+0xd6>
    12fe:	88 0f       	add	r24, r24
    1300:	99 1f       	adc	r25, r25
    1302:	2a 95       	dec	r18
    1304:	e2 f7       	brpl	.-8      	; 0x12fe <DIO_readPin+0xd2>
    1306:	9a 01       	movw	r18, r20
    1308:	28 23       	and	r18, r24
    130a:	39 23       	and	r19, r25
    130c:	8b 81       	ldd	r24, Y+3	; 0x03
    130e:	88 2f       	mov	r24, r24
    1310:	90 e0       	ldi	r25, 0x00	; 0
    1312:	a9 01       	movw	r20, r18
    1314:	02 c0       	rjmp	.+4      	; 0x131a <DIO_readPin+0xee>
    1316:	55 95       	asr	r21
    1318:	47 95       	ror	r20
    131a:	8a 95       	dec	r24
    131c:	e2 f7       	brpl	.-8      	; 0x1316 <DIO_readPin+0xea>
    131e:	ca 01       	movw	r24, r20
    1320:	ec 81       	ldd	r30, Y+4	; 0x04
    1322:	fd 81       	ldd	r31, Y+5	; 0x05
    1324:	80 83       	st	Z, r24
			enu_ErrorState = DIO_E_PARAM_VALID;
    1326:	19 82       	std	Y+1, r1	; 0x01
    1328:	47 c0       	rjmp	.+142    	; 0x13b8 <DIO_readPin+0x18c>
			break;
		    case DIO_PORTC:
			*ptr_pinState = READ_BIT(PINC_INPUT_R, enu_pinID);
    132a:	e3 e3       	ldi	r30, 0x33	; 51
    132c:	f0 e0       	ldi	r31, 0x00	; 0
    132e:	80 81       	ld	r24, Z
    1330:	48 2f       	mov	r20, r24
    1332:	50 e0       	ldi	r21, 0x00	; 0
    1334:	8b 81       	ldd	r24, Y+3	; 0x03
    1336:	28 2f       	mov	r18, r24
    1338:	30 e0       	ldi	r19, 0x00	; 0
    133a:	81 e0       	ldi	r24, 0x01	; 1
    133c:	90 e0       	ldi	r25, 0x00	; 0
    133e:	02 c0       	rjmp	.+4      	; 0x1344 <DIO_readPin+0x118>
    1340:	88 0f       	add	r24, r24
    1342:	99 1f       	adc	r25, r25
    1344:	2a 95       	dec	r18
    1346:	e2 f7       	brpl	.-8      	; 0x1340 <DIO_readPin+0x114>
    1348:	9a 01       	movw	r18, r20
    134a:	28 23       	and	r18, r24
    134c:	39 23       	and	r19, r25
    134e:	8b 81       	ldd	r24, Y+3	; 0x03
    1350:	88 2f       	mov	r24, r24
    1352:	90 e0       	ldi	r25, 0x00	; 0
    1354:	a9 01       	movw	r20, r18
    1356:	02 c0       	rjmp	.+4      	; 0x135c <DIO_readPin+0x130>
    1358:	55 95       	asr	r21
    135a:	47 95       	ror	r20
    135c:	8a 95       	dec	r24
    135e:	e2 f7       	brpl	.-8      	; 0x1358 <DIO_readPin+0x12c>
    1360:	ca 01       	movw	r24, r20
    1362:	ec 81       	ldd	r30, Y+4	; 0x04
    1364:	fd 81       	ldd	r31, Y+5	; 0x05
    1366:	80 83       	st	Z, r24
			enu_ErrorState = DIO_E_PARAM_VALID;
    1368:	19 82       	std	Y+1, r1	; 0x01
    136a:	26 c0       	rjmp	.+76     	; 0x13b8 <DIO_readPin+0x18c>
			break;
		    case DIO_PORTD:
			*ptr_pinState = READ_BIT(PIND_INPUT_R, enu_pinID);
    136c:	e0 e3       	ldi	r30, 0x30	; 48
    136e:	f0 e0       	ldi	r31, 0x00	; 0
    1370:	80 81       	ld	r24, Z
    1372:	48 2f       	mov	r20, r24
    1374:	50 e0       	ldi	r21, 0x00	; 0
    1376:	8b 81       	ldd	r24, Y+3	; 0x03
    1378:	28 2f       	mov	r18, r24
    137a:	30 e0       	ldi	r19, 0x00	; 0
    137c:	81 e0       	ldi	r24, 0x01	; 1
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	02 c0       	rjmp	.+4      	; 0x1386 <DIO_readPin+0x15a>
    1382:	88 0f       	add	r24, r24
    1384:	99 1f       	adc	r25, r25
    1386:	2a 95       	dec	r18
    1388:	e2 f7       	brpl	.-8      	; 0x1382 <DIO_readPin+0x156>
    138a:	9a 01       	movw	r18, r20
    138c:	28 23       	and	r18, r24
    138e:	39 23       	and	r19, r25
    1390:	8b 81       	ldd	r24, Y+3	; 0x03
    1392:	88 2f       	mov	r24, r24
    1394:	90 e0       	ldi	r25, 0x00	; 0
    1396:	a9 01       	movw	r20, r18
    1398:	02 c0       	rjmp	.+4      	; 0x139e <DIO_readPin+0x172>
    139a:	55 95       	asr	r21
    139c:	47 95       	ror	r20
    139e:	8a 95       	dec	r24
    13a0:	e2 f7       	brpl	.-8      	; 0x139a <DIO_readPin+0x16e>
    13a2:	ca 01       	movw	r24, r20
    13a4:	ec 81       	ldd	r30, Y+4	; 0x04
    13a6:	fd 81       	ldd	r31, Y+5	; 0x05
    13a8:	80 83       	st	Z, r24
			enu_ErrorState = DIO_E_PARAM_VALID;
    13aa:	19 82       	std	Y+1, r1	; 0x01
    13ac:	05 c0       	rjmp	.+10     	; 0x13b8 <DIO_readPin+0x18c>
			break;
		    default:
			enu_ErrorState = DIO_E_PARAM_INVALID_PORT_ID;	/* Invalid port id */
    13ae:	81 e0       	ldi	r24, 0x01	; 1
    13b0:	89 83       	std	Y+1, r24	; 0x01
    13b2:	02 c0       	rjmp	.+4      	; 0x13b8 <DIO_readPin+0x18c>
			break;
		    }
		}
		else
		{
			enu_ErrorState = DIO_E_PARAM_INVALID_PIN_ID;	/* Invalid pin id */
    13b4:	82 e0       	ldi	r24, 0x02	; 2
    13b6:	89 83       	std	Y+1, r24	; 0x01
		}
	}
    return enu_ErrorState;
    13b8:	89 81       	ldd	r24, Y+1	; 0x01
}
    13ba:	27 96       	adiw	r28, 0x07	; 7
    13bc:	0f b6       	in	r0, 0x3f	; 63
    13be:	f8 94       	cli
    13c0:	de bf       	out	0x3e, r29	; 62
    13c2:	0f be       	out	0x3f, r0	; 63
    13c4:	cd bf       	out	0x3d, r28	; 61
    13c6:	cf 91       	pop	r28
    13c8:	df 91       	pop	r29
    13ca:	08 95       	ret

000013cc <DIO_TogglePin>:
 * [in/out]	  None
 *
 * [Returns]:     Error State
 ******************************************************************************/
enuDIO_E_STATE_t DIO_TogglePin(enuDIO_PortId_t enu_portID, enuDIO_PinId_t enu_pinID)
{
    13cc:	df 93       	push	r29
    13ce:	cf 93       	push	r28
    13d0:	00 d0       	rcall	.+0      	; 0x13d2 <DIO_TogglePin+0x6>
    13d2:	00 d0       	rcall	.+0      	; 0x13d4 <DIO_TogglePin+0x8>
    13d4:	0f 92       	push	r0
    13d6:	cd b7       	in	r28, 0x3d	; 61
    13d8:	de b7       	in	r29, 0x3e	; 62
    13da:	8a 83       	std	Y+2, r24	; 0x02
    13dc:	6b 83       	std	Y+3, r22	; 0x03
	enuDIO_E_STATE_t enu_ErrorState = E_NOT_OK;
    13de:	81 e0       	ldi	r24, 0x01	; 1
    13e0:	89 83       	std	Y+1, r24	; 0x01

	/* Check if the pointer is NULL pointer or not */
    if ((enu_pinID >= PIN_0) && (enu_pinID <= PIN_7))
    13e2:	8b 81       	ldd	r24, Y+3	; 0x03
    13e4:	88 30       	cpi	r24, 0x08	; 8
    13e6:	08 f0       	brcs	.+2      	; 0x13ea <DIO_TogglePin+0x1e>
    13e8:	77 c0       	rjmp	.+238    	; 0x14d8 <DIO_TogglePin+0x10c>
    {
        switch (enu_portID)
    13ea:	8a 81       	ldd	r24, Y+2	; 0x02
    13ec:	28 2f       	mov	r18, r24
    13ee:	30 e0       	ldi	r19, 0x00	; 0
    13f0:	3d 83       	std	Y+5, r19	; 0x05
    13f2:	2c 83       	std	Y+4, r18	; 0x04
    13f4:	8c 81       	ldd	r24, Y+4	; 0x04
    13f6:	9d 81       	ldd	r25, Y+5	; 0x05
    13f8:	81 30       	cpi	r24, 0x01	; 1
    13fa:	91 05       	cpc	r25, r1
    13fc:	59 f1       	breq	.+86     	; 0x1454 <DIO_TogglePin+0x88>
    13fe:	2c 81       	ldd	r18, Y+4	; 0x04
    1400:	3d 81       	ldd	r19, Y+5	; 0x05
    1402:	22 30       	cpi	r18, 0x02	; 2
    1404:	31 05       	cpc	r19, r1
    1406:	2c f4       	brge	.+10     	; 0x1412 <DIO_TogglePin+0x46>
    1408:	8c 81       	ldd	r24, Y+4	; 0x04
    140a:	9d 81       	ldd	r25, Y+5	; 0x05
    140c:	00 97       	sbiw	r24, 0x00	; 0
    140e:	69 f0       	breq	.+26     	; 0x142a <DIO_TogglePin+0x5e>
    1410:	60 c0       	rjmp	.+192    	; 0x14d2 <DIO_TogglePin+0x106>
    1412:	2c 81       	ldd	r18, Y+4	; 0x04
    1414:	3d 81       	ldd	r19, Y+5	; 0x05
    1416:	22 30       	cpi	r18, 0x02	; 2
    1418:	31 05       	cpc	r19, r1
    141a:	89 f1       	breq	.+98     	; 0x147e <DIO_TogglePin+0xb2>
    141c:	8c 81       	ldd	r24, Y+4	; 0x04
    141e:	9d 81       	ldd	r25, Y+5	; 0x05
    1420:	83 30       	cpi	r24, 0x03	; 3
    1422:	91 05       	cpc	r25, r1
    1424:	09 f4       	brne	.+2      	; 0x1428 <DIO_TogglePin+0x5c>
    1426:	40 c0       	rjmp	.+128    	; 0x14a8 <DIO_TogglePin+0xdc>
    1428:	54 c0       	rjmp	.+168    	; 0x14d2 <DIO_TogglePin+0x106>
        {
        case DIO_PORTA:
            TOGGLE_BIT(PORTA_DATA_R, enu_pinID);
    142a:	ab e3       	ldi	r26, 0x3B	; 59
    142c:	b0 e0       	ldi	r27, 0x00	; 0
    142e:	eb e3       	ldi	r30, 0x3B	; 59
    1430:	f0 e0       	ldi	r31, 0x00	; 0
    1432:	80 81       	ld	r24, Z
    1434:	48 2f       	mov	r20, r24
    1436:	8b 81       	ldd	r24, Y+3	; 0x03
    1438:	28 2f       	mov	r18, r24
    143a:	30 e0       	ldi	r19, 0x00	; 0
    143c:	81 e0       	ldi	r24, 0x01	; 1
    143e:	90 e0       	ldi	r25, 0x00	; 0
    1440:	02 2e       	mov	r0, r18
    1442:	02 c0       	rjmp	.+4      	; 0x1448 <DIO_TogglePin+0x7c>
    1444:	88 0f       	add	r24, r24
    1446:	99 1f       	adc	r25, r25
    1448:	0a 94       	dec	r0
    144a:	e2 f7       	brpl	.-8      	; 0x1444 <DIO_TogglePin+0x78>
    144c:	84 27       	eor	r24, r20
    144e:	8c 93       	st	X, r24
            enu_ErrorState = DIO_E_PARAM_VALID;
    1450:	19 82       	std	Y+1, r1	; 0x01
    1452:	44 c0       	rjmp	.+136    	; 0x14dc <DIO_TogglePin+0x110>
            break;
        case DIO_PORTB:
        	TOGGLE_BIT(PORTB_DATA_R, enu_pinID);
    1454:	a8 e3       	ldi	r26, 0x38	; 56
    1456:	b0 e0       	ldi	r27, 0x00	; 0
    1458:	e8 e3       	ldi	r30, 0x38	; 56
    145a:	f0 e0       	ldi	r31, 0x00	; 0
    145c:	80 81       	ld	r24, Z
    145e:	48 2f       	mov	r20, r24
    1460:	8b 81       	ldd	r24, Y+3	; 0x03
    1462:	28 2f       	mov	r18, r24
    1464:	30 e0       	ldi	r19, 0x00	; 0
    1466:	81 e0       	ldi	r24, 0x01	; 1
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	02 2e       	mov	r0, r18
    146c:	02 c0       	rjmp	.+4      	; 0x1472 <DIO_TogglePin+0xa6>
    146e:	88 0f       	add	r24, r24
    1470:	99 1f       	adc	r25, r25
    1472:	0a 94       	dec	r0
    1474:	e2 f7       	brpl	.-8      	; 0x146e <DIO_TogglePin+0xa2>
    1476:	84 27       	eor	r24, r20
    1478:	8c 93       	st	X, r24
            enu_ErrorState = DIO_E_PARAM_VALID;
    147a:	19 82       	std	Y+1, r1	; 0x01
    147c:	2f c0       	rjmp	.+94     	; 0x14dc <DIO_TogglePin+0x110>
            break;
        case DIO_PORTC:
        	TOGGLE_BIT(PORTC_DATA_R, enu_pinID);
    147e:	a5 e3       	ldi	r26, 0x35	; 53
    1480:	b0 e0       	ldi	r27, 0x00	; 0
    1482:	e5 e3       	ldi	r30, 0x35	; 53
    1484:	f0 e0       	ldi	r31, 0x00	; 0
    1486:	80 81       	ld	r24, Z
    1488:	48 2f       	mov	r20, r24
    148a:	8b 81       	ldd	r24, Y+3	; 0x03
    148c:	28 2f       	mov	r18, r24
    148e:	30 e0       	ldi	r19, 0x00	; 0
    1490:	81 e0       	ldi	r24, 0x01	; 1
    1492:	90 e0       	ldi	r25, 0x00	; 0
    1494:	02 2e       	mov	r0, r18
    1496:	02 c0       	rjmp	.+4      	; 0x149c <DIO_TogglePin+0xd0>
    1498:	88 0f       	add	r24, r24
    149a:	99 1f       	adc	r25, r25
    149c:	0a 94       	dec	r0
    149e:	e2 f7       	brpl	.-8      	; 0x1498 <DIO_TogglePin+0xcc>
    14a0:	84 27       	eor	r24, r20
    14a2:	8c 93       	st	X, r24
            enu_ErrorState = DIO_E_PARAM_VALID;
    14a4:	19 82       	std	Y+1, r1	; 0x01
    14a6:	1a c0       	rjmp	.+52     	; 0x14dc <DIO_TogglePin+0x110>
            break;
        case DIO_PORTD:
        	TOGGLE_BIT(PORTD_DATA_R, enu_pinID);
    14a8:	a2 e3       	ldi	r26, 0x32	; 50
    14aa:	b0 e0       	ldi	r27, 0x00	; 0
    14ac:	e2 e3       	ldi	r30, 0x32	; 50
    14ae:	f0 e0       	ldi	r31, 0x00	; 0
    14b0:	80 81       	ld	r24, Z
    14b2:	48 2f       	mov	r20, r24
    14b4:	8b 81       	ldd	r24, Y+3	; 0x03
    14b6:	28 2f       	mov	r18, r24
    14b8:	30 e0       	ldi	r19, 0x00	; 0
    14ba:	81 e0       	ldi	r24, 0x01	; 1
    14bc:	90 e0       	ldi	r25, 0x00	; 0
    14be:	02 2e       	mov	r0, r18
    14c0:	02 c0       	rjmp	.+4      	; 0x14c6 <DIO_TogglePin+0xfa>
    14c2:	88 0f       	add	r24, r24
    14c4:	99 1f       	adc	r25, r25
    14c6:	0a 94       	dec	r0
    14c8:	e2 f7       	brpl	.-8      	; 0x14c2 <DIO_TogglePin+0xf6>
    14ca:	84 27       	eor	r24, r20
    14cc:	8c 93       	st	X, r24
            enu_ErrorState = DIO_E_PARAM_VALID;
    14ce:	19 82       	std	Y+1, r1	; 0x01
    14d0:	05 c0       	rjmp	.+10     	; 0x14dc <DIO_TogglePin+0x110>
            break;
        default:
        	enu_ErrorState = E_NOT_OK;	/* Invalid port id */
    14d2:	81 e0       	ldi	r24, 0x01	; 1
    14d4:	89 83       	std	Y+1, r24	; 0x01
    14d6:	02 c0       	rjmp	.+4      	; 0x14dc <DIO_TogglePin+0x110>
            break;
        }
    }
    else
    {
    	enu_ErrorState = DIO_E_PARAM_INVALID_PIN_ID;	/* Invalid pin id */
    14d8:	82 e0       	ldi	r24, 0x02	; 2
    14da:	89 83       	std	Y+1, r24	; 0x01
    }
    return enu_ErrorState;
    14dc:	89 81       	ldd	r24, Y+1	; 0x01
}
    14de:	0f 90       	pop	r0
    14e0:	0f 90       	pop	r0
    14e2:	0f 90       	pop	r0
    14e4:	0f 90       	pop	r0
    14e6:	0f 90       	pop	r0
    14e8:	cf 91       	pop	r28
    14ea:	df 91       	pop	r29
    14ec:	08 95       	ret

000014ee <LCD_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void LCD_init(void)
{
    14ee:	df 93       	push	r29
    14f0:	cf 93       	push	r28
    14f2:	cd b7       	in	r28, 0x3d	; 61
    14f4:	de b7       	in	r29, 0x3e	; 62
	LCD_CTRL_PORT_DIR |= (1<<E) | (1<<RS) | (1<<RW); /* Configure the control pins(E,RS,RW) as output pins */
    14f6:	aa e3       	ldi	r26, 0x3A	; 58
    14f8:	b0 e0       	ldi	r27, 0x00	; 0
    14fa:	ea e3       	ldi	r30, 0x3A	; 58
    14fc:	f0 e0       	ldi	r31, 0x00	; 0
    14fe:	80 81       	ld	r24, Z
    1500:	8e 60       	ori	r24, 0x0E	; 14
    1502:	8c 93       	st	X, r24
	
	#if (DATA_BITS_MODE == 4)
		#ifdef UPPER_PORT_PINS
			LCD_DATA_PORT_DIR |= 0xF0; /* Configure the highest 4 bits of the data port as output pins */
    1504:	aa e3       	ldi	r26, 0x3A	; 58
    1506:	b0 e0       	ldi	r27, 0x00	; 0
    1508:	ea e3       	ldi	r30, 0x3A	; 58
    150a:	f0 e0       	ldi	r31, 0x00	; 0
    150c:	80 81       	ld	r24, Z
    150e:	80 6f       	ori	r24, 0xF0	; 240
    1510:	8c 93       	st	X, r24
		#else
			LCD_DATA_PORT_DIR |= 0x0F; /* Configure the lowest 4 bits of the data port as output pins */
		#endif		 
		LCD_sendCommand(FOUR_BITS_DATA_MODE); /* Initialize LCD in 4-bit mode */
    1512:	82 e0       	ldi	r24, 0x02	; 2
    1514:	0e 94 98 0a 	call	0x1530	; 0x1530 <LCD_sendCommand>
		LCD_sendCommand(TWO_LINE_LCD_Four_BIT_MODE); /* Use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */
    1518:	88 e2       	ldi	r24, 0x28	; 40
    151a:	0e 94 98 0a 	call	0x1530	; 0x1530 <LCD_sendCommand>
	#elif (DATA_BITS_MODE == 8)
		LCD_DATA_PORT_DIR = 0xFF; /* Configure the data port as output port */ 
		LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE); /* Use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
	#endif
	
	LCD_sendCommand(CURSOR_OFF); /* Cursor off */
    151e:	8c e0       	ldi	r24, 0x0C	; 12
    1520:	0e 94 98 0a 	call	0x1530	; 0x1530 <LCD_sendCommand>
	LCD_sendCommand(CLEAR_COMMAND); /* Clear LCD at the beginning */
    1524:	81 e0       	ldi	r24, 0x01	; 1
    1526:	0e 94 98 0a 	call	0x1530	; 0x1530 <LCD_sendCommand>
}
    152a:	cf 91       	pop	r28
    152c:	df 91       	pop	r29
    152e:	08 95       	ret

00001530 <LCD_sendCommand>:

void LCD_sendCommand(uint8_t command)
{
    1530:	0f 93       	push	r16
    1532:	1f 93       	push	r17
    1534:	df 93       	push	r29
    1536:	cf 93       	push	r28
    1538:	cd b7       	in	r28, 0x3d	; 61
    153a:	de b7       	in	r29, 0x3e	; 62
    153c:	c3 56       	subi	r28, 0x63	; 99
    153e:	d0 40       	sbci	r29, 0x00	; 0
    1540:	0f b6       	in	r0, 0x3f	; 63
    1542:	f8 94       	cli
    1544:	de bf       	out	0x3e, r29	; 62
    1546:	0f be       	out	0x3f, r0	; 63
    1548:	cd bf       	out	0x3d, r28	; 61
    154a:	fe 01       	movw	r30, r28
    154c:	ed 59       	subi	r30, 0x9D	; 157
    154e:	ff 4f       	sbci	r31, 0xFF	; 255
    1550:	80 83       	st	Z, r24
	CLEAR_BIT(LCD_CTRL_PORT,RS); /* Instruction Mode RS = 0 */
    1552:	ab e3       	ldi	r26, 0x3B	; 59
    1554:	b0 e0       	ldi	r27, 0x00	; 0
    1556:	eb e3       	ldi	r30, 0x3B	; 59
    1558:	f0 e0       	ldi	r31, 0x00	; 0
    155a:	80 81       	ld	r24, Z
    155c:	8d 7f       	andi	r24, 0xFD	; 253
    155e:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* Write data to LCD so RW = 0 */
    1560:	ab e3       	ldi	r26, 0x3B	; 59
    1562:	b0 e0       	ldi	r27, 0x00	; 0
    1564:	eb e3       	ldi	r30, 0x3B	; 59
    1566:	f0 e0       	ldi	r31, 0x00	; 0
    1568:	80 81       	ld	r24, Z
    156a:	8b 7f       	andi	r24, 0xFB	; 251
    156c:	8c 93       	st	X, r24
    156e:	fe 01       	movw	r30, r28
    1570:	e1 5a       	subi	r30, 0xA1	; 161
    1572:	ff 4f       	sbci	r31, 0xFF	; 255
    1574:	80 e0       	ldi	r24, 0x00	; 0
    1576:	90 e0       	ldi	r25, 0x00	; 0
    1578:	a0 e8       	ldi	r26, 0x80	; 128
    157a:	bf e3       	ldi	r27, 0x3F	; 63
    157c:	80 83       	st	Z, r24
    157e:	91 83       	std	Z+1, r25	; 0x01
    1580:	a2 83       	std	Z+2, r26	; 0x02
    1582:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1584:	8e 01       	movw	r16, r28
    1586:	05 5a       	subi	r16, 0xA5	; 165
    1588:	1f 4f       	sbci	r17, 0xFF	; 255
    158a:	fe 01       	movw	r30, r28
    158c:	e1 5a       	subi	r30, 0xA1	; 161
    158e:	ff 4f       	sbci	r31, 0xFF	; 255
    1590:	60 81       	ld	r22, Z
    1592:	71 81       	ldd	r23, Z+1	; 0x01
    1594:	82 81       	ldd	r24, Z+2	; 0x02
    1596:	93 81       	ldd	r25, Z+3	; 0x03
    1598:	20 e0       	ldi	r18, 0x00	; 0
    159a:	30 e0       	ldi	r19, 0x00	; 0
    159c:	4a ef       	ldi	r20, 0xFA	; 250
    159e:	54 e4       	ldi	r21, 0x44	; 68
    15a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15a4:	dc 01       	movw	r26, r24
    15a6:	cb 01       	movw	r24, r22
    15a8:	f8 01       	movw	r30, r16
    15aa:	80 83       	st	Z, r24
    15ac:	91 83       	std	Z+1, r25	; 0x01
    15ae:	a2 83       	std	Z+2, r26	; 0x02
    15b0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    15b2:	fe 01       	movw	r30, r28
    15b4:	e5 5a       	subi	r30, 0xA5	; 165
    15b6:	ff 4f       	sbci	r31, 0xFF	; 255
    15b8:	60 81       	ld	r22, Z
    15ba:	71 81       	ldd	r23, Z+1	; 0x01
    15bc:	82 81       	ldd	r24, Z+2	; 0x02
    15be:	93 81       	ldd	r25, Z+3	; 0x03
    15c0:	20 e0       	ldi	r18, 0x00	; 0
    15c2:	30 e0       	ldi	r19, 0x00	; 0
    15c4:	40 e8       	ldi	r20, 0x80	; 128
    15c6:	5f e3       	ldi	r21, 0x3F	; 63
    15c8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15cc:	88 23       	and	r24, r24
    15ce:	44 f4       	brge	.+16     	; 0x15e0 <LCD_sendCommand+0xb0>
		__ticks = 1;
    15d0:	fe 01       	movw	r30, r28
    15d2:	e7 5a       	subi	r30, 0xA7	; 167
    15d4:	ff 4f       	sbci	r31, 0xFF	; 255
    15d6:	81 e0       	ldi	r24, 0x01	; 1
    15d8:	90 e0       	ldi	r25, 0x00	; 0
    15da:	91 83       	std	Z+1, r25	; 0x01
    15dc:	80 83       	st	Z, r24
    15de:	64 c0       	rjmp	.+200    	; 0x16a8 <LCD_sendCommand+0x178>
	else if (__tmp > 65535)
    15e0:	fe 01       	movw	r30, r28
    15e2:	e5 5a       	subi	r30, 0xA5	; 165
    15e4:	ff 4f       	sbci	r31, 0xFF	; 255
    15e6:	60 81       	ld	r22, Z
    15e8:	71 81       	ldd	r23, Z+1	; 0x01
    15ea:	82 81       	ldd	r24, Z+2	; 0x02
    15ec:	93 81       	ldd	r25, Z+3	; 0x03
    15ee:	20 e0       	ldi	r18, 0x00	; 0
    15f0:	3f ef       	ldi	r19, 0xFF	; 255
    15f2:	4f e7       	ldi	r20, 0x7F	; 127
    15f4:	57 e4       	ldi	r21, 0x47	; 71
    15f6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15fa:	18 16       	cp	r1, r24
    15fc:	0c f0       	brlt	.+2      	; 0x1600 <LCD_sendCommand+0xd0>
    15fe:	43 c0       	rjmp	.+134    	; 0x1686 <LCD_sendCommand+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1600:	fe 01       	movw	r30, r28
    1602:	e1 5a       	subi	r30, 0xA1	; 161
    1604:	ff 4f       	sbci	r31, 0xFF	; 255
    1606:	60 81       	ld	r22, Z
    1608:	71 81       	ldd	r23, Z+1	; 0x01
    160a:	82 81       	ldd	r24, Z+2	; 0x02
    160c:	93 81       	ldd	r25, Z+3	; 0x03
    160e:	20 e0       	ldi	r18, 0x00	; 0
    1610:	30 e0       	ldi	r19, 0x00	; 0
    1612:	40 e2       	ldi	r20, 0x20	; 32
    1614:	51 e4       	ldi	r21, 0x41	; 65
    1616:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    161a:	dc 01       	movw	r26, r24
    161c:	cb 01       	movw	r24, r22
    161e:	8e 01       	movw	r16, r28
    1620:	07 5a       	subi	r16, 0xA7	; 167
    1622:	1f 4f       	sbci	r17, 0xFF	; 255
    1624:	bc 01       	movw	r22, r24
    1626:	cd 01       	movw	r24, r26
    1628:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    162c:	dc 01       	movw	r26, r24
    162e:	cb 01       	movw	r24, r22
    1630:	f8 01       	movw	r30, r16
    1632:	91 83       	std	Z+1, r25	; 0x01
    1634:	80 83       	st	Z, r24
    1636:	1f c0       	rjmp	.+62     	; 0x1676 <LCD_sendCommand+0x146>
    1638:	fe 01       	movw	r30, r28
    163a:	e9 5a       	subi	r30, 0xA9	; 169
    163c:	ff 4f       	sbci	r31, 0xFF	; 255
    163e:	88 ec       	ldi	r24, 0xC8	; 200
    1640:	90 e0       	ldi	r25, 0x00	; 0
    1642:	91 83       	std	Z+1, r25	; 0x01
    1644:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1646:	fe 01       	movw	r30, r28
    1648:	e9 5a       	subi	r30, 0xA9	; 169
    164a:	ff 4f       	sbci	r31, 0xFF	; 255
    164c:	80 81       	ld	r24, Z
    164e:	91 81       	ldd	r25, Z+1	; 0x01
    1650:	01 97       	sbiw	r24, 0x01	; 1
    1652:	f1 f7       	brne	.-4      	; 0x1650 <LCD_sendCommand+0x120>
    1654:	fe 01       	movw	r30, r28
    1656:	e9 5a       	subi	r30, 0xA9	; 169
    1658:	ff 4f       	sbci	r31, 0xFF	; 255
    165a:	91 83       	std	Z+1, r25	; 0x01
    165c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    165e:	de 01       	movw	r26, r28
    1660:	a7 5a       	subi	r26, 0xA7	; 167
    1662:	bf 4f       	sbci	r27, 0xFF	; 255
    1664:	fe 01       	movw	r30, r28
    1666:	e7 5a       	subi	r30, 0xA7	; 167
    1668:	ff 4f       	sbci	r31, 0xFF	; 255
    166a:	80 81       	ld	r24, Z
    166c:	91 81       	ldd	r25, Z+1	; 0x01
    166e:	01 97       	sbiw	r24, 0x01	; 1
    1670:	11 96       	adiw	r26, 0x01	; 1
    1672:	9c 93       	st	X, r25
    1674:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1676:	fe 01       	movw	r30, r28
    1678:	e7 5a       	subi	r30, 0xA7	; 167
    167a:	ff 4f       	sbci	r31, 0xFF	; 255
    167c:	80 81       	ld	r24, Z
    167e:	91 81       	ldd	r25, Z+1	; 0x01
    1680:	00 97       	sbiw	r24, 0x00	; 0
    1682:	d1 f6       	brne	.-76     	; 0x1638 <LCD_sendCommand+0x108>
    1684:	27 c0       	rjmp	.+78     	; 0x16d4 <LCD_sendCommand+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1686:	8e 01       	movw	r16, r28
    1688:	07 5a       	subi	r16, 0xA7	; 167
    168a:	1f 4f       	sbci	r17, 0xFF	; 255
    168c:	fe 01       	movw	r30, r28
    168e:	e5 5a       	subi	r30, 0xA5	; 165
    1690:	ff 4f       	sbci	r31, 0xFF	; 255
    1692:	60 81       	ld	r22, Z
    1694:	71 81       	ldd	r23, Z+1	; 0x01
    1696:	82 81       	ldd	r24, Z+2	; 0x02
    1698:	93 81       	ldd	r25, Z+3	; 0x03
    169a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    169e:	dc 01       	movw	r26, r24
    16a0:	cb 01       	movw	r24, r22
    16a2:	f8 01       	movw	r30, r16
    16a4:	91 83       	std	Z+1, r25	; 0x01
    16a6:	80 83       	st	Z, r24
    16a8:	de 01       	movw	r26, r28
    16aa:	ab 5a       	subi	r26, 0xAB	; 171
    16ac:	bf 4f       	sbci	r27, 0xFF	; 255
    16ae:	fe 01       	movw	r30, r28
    16b0:	e7 5a       	subi	r30, 0xA7	; 167
    16b2:	ff 4f       	sbci	r31, 0xFF	; 255
    16b4:	80 81       	ld	r24, Z
    16b6:	91 81       	ldd	r25, Z+1	; 0x01
    16b8:	8d 93       	st	X+, r24
    16ba:	9c 93       	st	X, r25
    16bc:	fe 01       	movw	r30, r28
    16be:	eb 5a       	subi	r30, 0xAB	; 171
    16c0:	ff 4f       	sbci	r31, 0xFF	; 255
    16c2:	80 81       	ld	r24, Z
    16c4:	91 81       	ldd	r25, Z+1	; 0x01
    16c6:	01 97       	sbiw	r24, 0x01	; 1
    16c8:	f1 f7       	brne	.-4      	; 0x16c6 <LCD_sendCommand+0x196>
    16ca:	fe 01       	movw	r30, r28
    16cc:	eb 5a       	subi	r30, 0xAB	; 171
    16ce:	ff 4f       	sbci	r31, 0xFF	; 255
    16d0:	91 83       	std	Z+1, r25	; 0x01
    16d2:	80 83       	st	Z, r24
	_delay_ms(1); /* Delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E = 1 */
    16d4:	ab e3       	ldi	r26, 0x3B	; 59
    16d6:	b0 e0       	ldi	r27, 0x00	; 0
    16d8:	eb e3       	ldi	r30, 0x3B	; 59
    16da:	f0 e0       	ldi	r31, 0x00	; 0
    16dc:	80 81       	ld	r24, Z
    16de:	88 60       	ori	r24, 0x08	; 8
    16e0:	8c 93       	st	X, r24
    16e2:	fe 01       	movw	r30, r28
    16e4:	ef 5a       	subi	r30, 0xAF	; 175
    16e6:	ff 4f       	sbci	r31, 0xFF	; 255
    16e8:	80 e0       	ldi	r24, 0x00	; 0
    16ea:	90 e0       	ldi	r25, 0x00	; 0
    16ec:	a0 e8       	ldi	r26, 0x80	; 128
    16ee:	bf e3       	ldi	r27, 0x3F	; 63
    16f0:	80 83       	st	Z, r24
    16f2:	91 83       	std	Z+1, r25	; 0x01
    16f4:	a2 83       	std	Z+2, r26	; 0x02
    16f6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16f8:	8e 01       	movw	r16, r28
    16fa:	03 5b       	subi	r16, 0xB3	; 179
    16fc:	1f 4f       	sbci	r17, 0xFF	; 255
    16fe:	fe 01       	movw	r30, r28
    1700:	ef 5a       	subi	r30, 0xAF	; 175
    1702:	ff 4f       	sbci	r31, 0xFF	; 255
    1704:	60 81       	ld	r22, Z
    1706:	71 81       	ldd	r23, Z+1	; 0x01
    1708:	82 81       	ldd	r24, Z+2	; 0x02
    170a:	93 81       	ldd	r25, Z+3	; 0x03
    170c:	20 e0       	ldi	r18, 0x00	; 0
    170e:	30 e0       	ldi	r19, 0x00	; 0
    1710:	4a ef       	ldi	r20, 0xFA	; 250
    1712:	54 e4       	ldi	r21, 0x44	; 68
    1714:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1718:	dc 01       	movw	r26, r24
    171a:	cb 01       	movw	r24, r22
    171c:	f8 01       	movw	r30, r16
    171e:	80 83       	st	Z, r24
    1720:	91 83       	std	Z+1, r25	; 0x01
    1722:	a2 83       	std	Z+2, r26	; 0x02
    1724:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1726:	fe 01       	movw	r30, r28
    1728:	e3 5b       	subi	r30, 0xB3	; 179
    172a:	ff 4f       	sbci	r31, 0xFF	; 255
    172c:	60 81       	ld	r22, Z
    172e:	71 81       	ldd	r23, Z+1	; 0x01
    1730:	82 81       	ldd	r24, Z+2	; 0x02
    1732:	93 81       	ldd	r25, Z+3	; 0x03
    1734:	20 e0       	ldi	r18, 0x00	; 0
    1736:	30 e0       	ldi	r19, 0x00	; 0
    1738:	40 e8       	ldi	r20, 0x80	; 128
    173a:	5f e3       	ldi	r21, 0x3F	; 63
    173c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1740:	88 23       	and	r24, r24
    1742:	44 f4       	brge	.+16     	; 0x1754 <LCD_sendCommand+0x224>
		__ticks = 1;
    1744:	fe 01       	movw	r30, r28
    1746:	e5 5b       	subi	r30, 0xB5	; 181
    1748:	ff 4f       	sbci	r31, 0xFF	; 255
    174a:	81 e0       	ldi	r24, 0x01	; 1
    174c:	90 e0       	ldi	r25, 0x00	; 0
    174e:	91 83       	std	Z+1, r25	; 0x01
    1750:	80 83       	st	Z, r24
    1752:	64 c0       	rjmp	.+200    	; 0x181c <LCD_sendCommand+0x2ec>
	else if (__tmp > 65535)
    1754:	fe 01       	movw	r30, r28
    1756:	e3 5b       	subi	r30, 0xB3	; 179
    1758:	ff 4f       	sbci	r31, 0xFF	; 255
    175a:	60 81       	ld	r22, Z
    175c:	71 81       	ldd	r23, Z+1	; 0x01
    175e:	82 81       	ldd	r24, Z+2	; 0x02
    1760:	93 81       	ldd	r25, Z+3	; 0x03
    1762:	20 e0       	ldi	r18, 0x00	; 0
    1764:	3f ef       	ldi	r19, 0xFF	; 255
    1766:	4f e7       	ldi	r20, 0x7F	; 127
    1768:	57 e4       	ldi	r21, 0x47	; 71
    176a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    176e:	18 16       	cp	r1, r24
    1770:	0c f0       	brlt	.+2      	; 0x1774 <LCD_sendCommand+0x244>
    1772:	43 c0       	rjmp	.+134    	; 0x17fa <LCD_sendCommand+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1774:	fe 01       	movw	r30, r28
    1776:	ef 5a       	subi	r30, 0xAF	; 175
    1778:	ff 4f       	sbci	r31, 0xFF	; 255
    177a:	60 81       	ld	r22, Z
    177c:	71 81       	ldd	r23, Z+1	; 0x01
    177e:	82 81       	ldd	r24, Z+2	; 0x02
    1780:	93 81       	ldd	r25, Z+3	; 0x03
    1782:	20 e0       	ldi	r18, 0x00	; 0
    1784:	30 e0       	ldi	r19, 0x00	; 0
    1786:	40 e2       	ldi	r20, 0x20	; 32
    1788:	51 e4       	ldi	r21, 0x41	; 65
    178a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    178e:	dc 01       	movw	r26, r24
    1790:	cb 01       	movw	r24, r22
    1792:	8e 01       	movw	r16, r28
    1794:	05 5b       	subi	r16, 0xB5	; 181
    1796:	1f 4f       	sbci	r17, 0xFF	; 255
    1798:	bc 01       	movw	r22, r24
    179a:	cd 01       	movw	r24, r26
    179c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17a0:	dc 01       	movw	r26, r24
    17a2:	cb 01       	movw	r24, r22
    17a4:	f8 01       	movw	r30, r16
    17a6:	91 83       	std	Z+1, r25	; 0x01
    17a8:	80 83       	st	Z, r24
    17aa:	1f c0       	rjmp	.+62     	; 0x17ea <LCD_sendCommand+0x2ba>
    17ac:	fe 01       	movw	r30, r28
    17ae:	e7 5b       	subi	r30, 0xB7	; 183
    17b0:	ff 4f       	sbci	r31, 0xFF	; 255
    17b2:	88 ec       	ldi	r24, 0xC8	; 200
    17b4:	90 e0       	ldi	r25, 0x00	; 0
    17b6:	91 83       	std	Z+1, r25	; 0x01
    17b8:	80 83       	st	Z, r24
    17ba:	fe 01       	movw	r30, r28
    17bc:	e7 5b       	subi	r30, 0xB7	; 183
    17be:	ff 4f       	sbci	r31, 0xFF	; 255
    17c0:	80 81       	ld	r24, Z
    17c2:	91 81       	ldd	r25, Z+1	; 0x01
    17c4:	01 97       	sbiw	r24, 0x01	; 1
    17c6:	f1 f7       	brne	.-4      	; 0x17c4 <LCD_sendCommand+0x294>
    17c8:	fe 01       	movw	r30, r28
    17ca:	e7 5b       	subi	r30, 0xB7	; 183
    17cc:	ff 4f       	sbci	r31, 0xFF	; 255
    17ce:	91 83       	std	Z+1, r25	; 0x01
    17d0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17d2:	de 01       	movw	r26, r28
    17d4:	a5 5b       	subi	r26, 0xB5	; 181
    17d6:	bf 4f       	sbci	r27, 0xFF	; 255
    17d8:	fe 01       	movw	r30, r28
    17da:	e5 5b       	subi	r30, 0xB5	; 181
    17dc:	ff 4f       	sbci	r31, 0xFF	; 255
    17de:	80 81       	ld	r24, Z
    17e0:	91 81       	ldd	r25, Z+1	; 0x01
    17e2:	01 97       	sbiw	r24, 0x01	; 1
    17e4:	11 96       	adiw	r26, 0x01	; 1
    17e6:	9c 93       	st	X, r25
    17e8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17ea:	fe 01       	movw	r30, r28
    17ec:	e5 5b       	subi	r30, 0xB5	; 181
    17ee:	ff 4f       	sbci	r31, 0xFF	; 255
    17f0:	80 81       	ld	r24, Z
    17f2:	91 81       	ldd	r25, Z+1	; 0x01
    17f4:	00 97       	sbiw	r24, 0x00	; 0
    17f6:	d1 f6       	brne	.-76     	; 0x17ac <LCD_sendCommand+0x27c>
    17f8:	27 c0       	rjmp	.+78     	; 0x1848 <LCD_sendCommand+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17fa:	8e 01       	movw	r16, r28
    17fc:	05 5b       	subi	r16, 0xB5	; 181
    17fe:	1f 4f       	sbci	r17, 0xFF	; 255
    1800:	fe 01       	movw	r30, r28
    1802:	e3 5b       	subi	r30, 0xB3	; 179
    1804:	ff 4f       	sbci	r31, 0xFF	; 255
    1806:	60 81       	ld	r22, Z
    1808:	71 81       	ldd	r23, Z+1	; 0x01
    180a:	82 81       	ldd	r24, Z+2	; 0x02
    180c:	93 81       	ldd	r25, Z+3	; 0x03
    180e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1812:	dc 01       	movw	r26, r24
    1814:	cb 01       	movw	r24, r22
    1816:	f8 01       	movw	r30, r16
    1818:	91 83       	std	Z+1, r25	; 0x01
    181a:	80 83       	st	Z, r24
    181c:	de 01       	movw	r26, r28
    181e:	a9 5b       	subi	r26, 0xB9	; 185
    1820:	bf 4f       	sbci	r27, 0xFF	; 255
    1822:	fe 01       	movw	r30, r28
    1824:	e5 5b       	subi	r30, 0xB5	; 181
    1826:	ff 4f       	sbci	r31, 0xFF	; 255
    1828:	80 81       	ld	r24, Z
    182a:	91 81       	ldd	r25, Z+1	; 0x01
    182c:	8d 93       	st	X+, r24
    182e:	9c 93       	st	X, r25
    1830:	fe 01       	movw	r30, r28
    1832:	e9 5b       	subi	r30, 0xB9	; 185
    1834:	ff 4f       	sbci	r31, 0xFF	; 255
    1836:	80 81       	ld	r24, Z
    1838:	91 81       	ldd	r25, Z+1	; 0x01
    183a:	01 97       	sbiw	r24, 0x01	; 1
    183c:	f1 f7       	brne	.-4      	; 0x183a <LCD_sendCommand+0x30a>
    183e:	fe 01       	movw	r30, r28
    1840:	e9 5b       	subi	r30, 0xB9	; 185
    1842:	ff 4f       	sbci	r31, 0xFF	; 255
    1844:	91 83       	std	Z+1, r25	; 0x01
    1846:	80 83       	st	Z, r24
	_delay_ms(1); /* Delay for processing Tpw - Tdws = 190ns */
#if (DATA_BITS_MODE == 4)
	/* Out the highest 4 bits of the required command to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (command & 0xF0);
    1848:	ab e3       	ldi	r26, 0x3B	; 59
    184a:	b0 e0       	ldi	r27, 0x00	; 0
    184c:	eb e3       	ldi	r30, 0x3B	; 59
    184e:	f0 e0       	ldi	r31, 0x00	; 0
    1850:	80 81       	ld	r24, Z
    1852:	98 2f       	mov	r25, r24
    1854:	9f 70       	andi	r25, 0x0F	; 15
    1856:	fe 01       	movw	r30, r28
    1858:	ed 59       	subi	r30, 0x9D	; 157
    185a:	ff 4f       	sbci	r31, 0xFF	; 255
    185c:	80 81       	ld	r24, Z
    185e:	80 7f       	andi	r24, 0xF0	; 240
    1860:	89 2b       	or	r24, r25
    1862:	8c 93       	st	X, r24
    1864:	fe 01       	movw	r30, r28
    1866:	ed 5b       	subi	r30, 0xBD	; 189
    1868:	ff 4f       	sbci	r31, 0xFF	; 255
    186a:	80 e0       	ldi	r24, 0x00	; 0
    186c:	90 e0       	ldi	r25, 0x00	; 0
    186e:	a0 e8       	ldi	r26, 0x80	; 128
    1870:	bf e3       	ldi	r27, 0x3F	; 63
    1872:	80 83       	st	Z, r24
    1874:	91 83       	std	Z+1, r25	; 0x01
    1876:	a2 83       	std	Z+2, r26	; 0x02
    1878:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    187a:	8e 01       	movw	r16, r28
    187c:	01 5c       	subi	r16, 0xC1	; 193
    187e:	1f 4f       	sbci	r17, 0xFF	; 255
    1880:	fe 01       	movw	r30, r28
    1882:	ed 5b       	subi	r30, 0xBD	; 189
    1884:	ff 4f       	sbci	r31, 0xFF	; 255
    1886:	60 81       	ld	r22, Z
    1888:	71 81       	ldd	r23, Z+1	; 0x01
    188a:	82 81       	ldd	r24, Z+2	; 0x02
    188c:	93 81       	ldd	r25, Z+3	; 0x03
    188e:	20 e0       	ldi	r18, 0x00	; 0
    1890:	30 e0       	ldi	r19, 0x00	; 0
    1892:	4a ef       	ldi	r20, 0xFA	; 250
    1894:	54 e4       	ldi	r21, 0x44	; 68
    1896:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    189a:	dc 01       	movw	r26, r24
    189c:	cb 01       	movw	r24, r22
    189e:	f8 01       	movw	r30, r16
    18a0:	80 83       	st	Z, r24
    18a2:	91 83       	std	Z+1, r25	; 0x01
    18a4:	a2 83       	std	Z+2, r26	; 0x02
    18a6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    18a8:	fe 01       	movw	r30, r28
    18aa:	ff 96       	adiw	r30, 0x3f	; 63
    18ac:	60 81       	ld	r22, Z
    18ae:	71 81       	ldd	r23, Z+1	; 0x01
    18b0:	82 81       	ldd	r24, Z+2	; 0x02
    18b2:	93 81       	ldd	r25, Z+3	; 0x03
    18b4:	20 e0       	ldi	r18, 0x00	; 0
    18b6:	30 e0       	ldi	r19, 0x00	; 0
    18b8:	40 e8       	ldi	r20, 0x80	; 128
    18ba:	5f e3       	ldi	r21, 0x3F	; 63
    18bc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18c0:	88 23       	and	r24, r24
    18c2:	2c f4       	brge	.+10     	; 0x18ce <LCD_sendCommand+0x39e>
		__ticks = 1;
    18c4:	81 e0       	ldi	r24, 0x01	; 1
    18c6:	90 e0       	ldi	r25, 0x00	; 0
    18c8:	9e af       	std	Y+62, r25	; 0x3e
    18ca:	8d af       	std	Y+61, r24	; 0x3d
    18cc:	46 c0       	rjmp	.+140    	; 0x195a <LCD_sendCommand+0x42a>
	else if (__tmp > 65535)
    18ce:	fe 01       	movw	r30, r28
    18d0:	ff 96       	adiw	r30, 0x3f	; 63
    18d2:	60 81       	ld	r22, Z
    18d4:	71 81       	ldd	r23, Z+1	; 0x01
    18d6:	82 81       	ldd	r24, Z+2	; 0x02
    18d8:	93 81       	ldd	r25, Z+3	; 0x03
    18da:	20 e0       	ldi	r18, 0x00	; 0
    18dc:	3f ef       	ldi	r19, 0xFF	; 255
    18de:	4f e7       	ldi	r20, 0x7F	; 127
    18e0:	57 e4       	ldi	r21, 0x47	; 71
    18e2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18e6:	18 16       	cp	r1, r24
    18e8:	64 f5       	brge	.+88     	; 0x1942 <LCD_sendCommand+0x412>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18ea:	fe 01       	movw	r30, r28
    18ec:	ed 5b       	subi	r30, 0xBD	; 189
    18ee:	ff 4f       	sbci	r31, 0xFF	; 255
    18f0:	60 81       	ld	r22, Z
    18f2:	71 81       	ldd	r23, Z+1	; 0x01
    18f4:	82 81       	ldd	r24, Z+2	; 0x02
    18f6:	93 81       	ldd	r25, Z+3	; 0x03
    18f8:	20 e0       	ldi	r18, 0x00	; 0
    18fa:	30 e0       	ldi	r19, 0x00	; 0
    18fc:	40 e2       	ldi	r20, 0x20	; 32
    18fe:	51 e4       	ldi	r21, 0x41	; 65
    1900:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1904:	dc 01       	movw	r26, r24
    1906:	cb 01       	movw	r24, r22
    1908:	bc 01       	movw	r22, r24
    190a:	cd 01       	movw	r24, r26
    190c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1910:	dc 01       	movw	r26, r24
    1912:	cb 01       	movw	r24, r22
    1914:	9e af       	std	Y+62, r25	; 0x3e
    1916:	8d af       	std	Y+61, r24	; 0x3d
    1918:	0f c0       	rjmp	.+30     	; 0x1938 <LCD_sendCommand+0x408>
    191a:	88 ec       	ldi	r24, 0xC8	; 200
    191c:	90 e0       	ldi	r25, 0x00	; 0
    191e:	9c af       	std	Y+60, r25	; 0x3c
    1920:	8b af       	std	Y+59, r24	; 0x3b
    1922:	8b ad       	ldd	r24, Y+59	; 0x3b
    1924:	9c ad       	ldd	r25, Y+60	; 0x3c
    1926:	01 97       	sbiw	r24, 0x01	; 1
    1928:	f1 f7       	brne	.-4      	; 0x1926 <LCD_sendCommand+0x3f6>
    192a:	9c af       	std	Y+60, r25	; 0x3c
    192c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    192e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1930:	9e ad       	ldd	r25, Y+62	; 0x3e
    1932:	01 97       	sbiw	r24, 0x01	; 1
    1934:	9e af       	std	Y+62, r25	; 0x3e
    1936:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1938:	8d ad       	ldd	r24, Y+61	; 0x3d
    193a:	9e ad       	ldd	r25, Y+62	; 0x3e
    193c:	00 97       	sbiw	r24, 0x00	; 0
    193e:	69 f7       	brne	.-38     	; 0x191a <LCD_sendCommand+0x3ea>
    1940:	16 c0       	rjmp	.+44     	; 0x196e <LCD_sendCommand+0x43e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1942:	fe 01       	movw	r30, r28
    1944:	ff 96       	adiw	r30, 0x3f	; 63
    1946:	60 81       	ld	r22, Z
    1948:	71 81       	ldd	r23, Z+1	; 0x01
    194a:	82 81       	ldd	r24, Z+2	; 0x02
    194c:	93 81       	ldd	r25, Z+3	; 0x03
    194e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1952:	dc 01       	movw	r26, r24
    1954:	cb 01       	movw	r24, r22
    1956:	9e af       	std	Y+62, r25	; 0x3e
    1958:	8d af       	std	Y+61, r24	; 0x3d
    195a:	8d ad       	ldd	r24, Y+61	; 0x3d
    195c:	9e ad       	ldd	r25, Y+62	; 0x3e
    195e:	9a af       	std	Y+58, r25	; 0x3a
    1960:	89 af       	std	Y+57, r24	; 0x39
    1962:	89 ad       	ldd	r24, Y+57	; 0x39
    1964:	9a ad       	ldd	r25, Y+58	; 0x3a
    1966:	01 97       	sbiw	r24, 0x01	; 1
    1968:	f1 f7       	brne	.-4      	; 0x1966 <LCD_sendCommand+0x436>
    196a:	9a af       	std	Y+58, r25	; 0x3a
    196c:	89 af       	std	Y+57, r24	; 0x39
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | ((command & 0xF0) >> 4);
#endif

	_delay_ms(1); /* Delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E = 0 */
    196e:	ab e3       	ldi	r26, 0x3B	; 59
    1970:	b0 e0       	ldi	r27, 0x00	; 0
    1972:	eb e3       	ldi	r30, 0x3B	; 59
    1974:	f0 e0       	ldi	r31, 0x00	; 0
    1976:	80 81       	ld	r24, Z
    1978:	87 7f       	andi	r24, 0xF7	; 247
    197a:	8c 93       	st	X, r24
    197c:	80 e0       	ldi	r24, 0x00	; 0
    197e:	90 e0       	ldi	r25, 0x00	; 0
    1980:	a0 e8       	ldi	r26, 0x80	; 128
    1982:	bf e3       	ldi	r27, 0x3F	; 63
    1984:	8d ab       	std	Y+53, r24	; 0x35
    1986:	9e ab       	std	Y+54, r25	; 0x36
    1988:	af ab       	std	Y+55, r26	; 0x37
    198a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    198c:	6d a9       	ldd	r22, Y+53	; 0x35
    198e:	7e a9       	ldd	r23, Y+54	; 0x36
    1990:	8f a9       	ldd	r24, Y+55	; 0x37
    1992:	98 ad       	ldd	r25, Y+56	; 0x38
    1994:	20 e0       	ldi	r18, 0x00	; 0
    1996:	30 e0       	ldi	r19, 0x00	; 0
    1998:	4a ef       	ldi	r20, 0xFA	; 250
    199a:	54 e4       	ldi	r21, 0x44	; 68
    199c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19a0:	dc 01       	movw	r26, r24
    19a2:	cb 01       	movw	r24, r22
    19a4:	89 ab       	std	Y+49, r24	; 0x31
    19a6:	9a ab       	std	Y+50, r25	; 0x32
    19a8:	ab ab       	std	Y+51, r26	; 0x33
    19aa:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    19ac:	69 a9       	ldd	r22, Y+49	; 0x31
    19ae:	7a a9       	ldd	r23, Y+50	; 0x32
    19b0:	8b a9       	ldd	r24, Y+51	; 0x33
    19b2:	9c a9       	ldd	r25, Y+52	; 0x34
    19b4:	20 e0       	ldi	r18, 0x00	; 0
    19b6:	30 e0       	ldi	r19, 0x00	; 0
    19b8:	40 e8       	ldi	r20, 0x80	; 128
    19ba:	5f e3       	ldi	r21, 0x3F	; 63
    19bc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19c0:	88 23       	and	r24, r24
    19c2:	2c f4       	brge	.+10     	; 0x19ce <LCD_sendCommand+0x49e>
		__ticks = 1;
    19c4:	81 e0       	ldi	r24, 0x01	; 1
    19c6:	90 e0       	ldi	r25, 0x00	; 0
    19c8:	98 ab       	std	Y+48, r25	; 0x30
    19ca:	8f a7       	std	Y+47, r24	; 0x2f
    19cc:	3f c0       	rjmp	.+126    	; 0x1a4c <LCD_sendCommand+0x51c>
	else if (__tmp > 65535)
    19ce:	69 a9       	ldd	r22, Y+49	; 0x31
    19d0:	7a a9       	ldd	r23, Y+50	; 0x32
    19d2:	8b a9       	ldd	r24, Y+51	; 0x33
    19d4:	9c a9       	ldd	r25, Y+52	; 0x34
    19d6:	20 e0       	ldi	r18, 0x00	; 0
    19d8:	3f ef       	ldi	r19, 0xFF	; 255
    19da:	4f e7       	ldi	r20, 0x7F	; 127
    19dc:	57 e4       	ldi	r21, 0x47	; 71
    19de:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19e2:	18 16       	cp	r1, r24
    19e4:	4c f5       	brge	.+82     	; 0x1a38 <LCD_sendCommand+0x508>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19e6:	6d a9       	ldd	r22, Y+53	; 0x35
    19e8:	7e a9       	ldd	r23, Y+54	; 0x36
    19ea:	8f a9       	ldd	r24, Y+55	; 0x37
    19ec:	98 ad       	ldd	r25, Y+56	; 0x38
    19ee:	20 e0       	ldi	r18, 0x00	; 0
    19f0:	30 e0       	ldi	r19, 0x00	; 0
    19f2:	40 e2       	ldi	r20, 0x20	; 32
    19f4:	51 e4       	ldi	r21, 0x41	; 65
    19f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19fa:	dc 01       	movw	r26, r24
    19fc:	cb 01       	movw	r24, r22
    19fe:	bc 01       	movw	r22, r24
    1a00:	cd 01       	movw	r24, r26
    1a02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a06:	dc 01       	movw	r26, r24
    1a08:	cb 01       	movw	r24, r22
    1a0a:	98 ab       	std	Y+48, r25	; 0x30
    1a0c:	8f a7       	std	Y+47, r24	; 0x2f
    1a0e:	0f c0       	rjmp	.+30     	; 0x1a2e <LCD_sendCommand+0x4fe>
    1a10:	88 ec       	ldi	r24, 0xC8	; 200
    1a12:	90 e0       	ldi	r25, 0x00	; 0
    1a14:	9e a7       	std	Y+46, r25	; 0x2e
    1a16:	8d a7       	std	Y+45, r24	; 0x2d
    1a18:	8d a5       	ldd	r24, Y+45	; 0x2d
    1a1a:	9e a5       	ldd	r25, Y+46	; 0x2e
    1a1c:	01 97       	sbiw	r24, 0x01	; 1
    1a1e:	f1 f7       	brne	.-4      	; 0x1a1c <LCD_sendCommand+0x4ec>
    1a20:	9e a7       	std	Y+46, r25	; 0x2e
    1a22:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a24:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a26:	98 a9       	ldd	r25, Y+48	; 0x30
    1a28:	01 97       	sbiw	r24, 0x01	; 1
    1a2a:	98 ab       	std	Y+48, r25	; 0x30
    1a2c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a2e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a30:	98 a9       	ldd	r25, Y+48	; 0x30
    1a32:	00 97       	sbiw	r24, 0x00	; 0
    1a34:	69 f7       	brne	.-38     	; 0x1a10 <LCD_sendCommand+0x4e0>
    1a36:	14 c0       	rjmp	.+40     	; 0x1a60 <LCD_sendCommand+0x530>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a38:	69 a9       	ldd	r22, Y+49	; 0x31
    1a3a:	7a a9       	ldd	r23, Y+50	; 0x32
    1a3c:	8b a9       	ldd	r24, Y+51	; 0x33
    1a3e:	9c a9       	ldd	r25, Y+52	; 0x34
    1a40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a44:	dc 01       	movw	r26, r24
    1a46:	cb 01       	movw	r24, r22
    1a48:	98 ab       	std	Y+48, r25	; 0x30
    1a4a:	8f a7       	std	Y+47, r24	; 0x2f
    1a4c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a4e:	98 a9       	ldd	r25, Y+48	; 0x30
    1a50:	9c a7       	std	Y+44, r25	; 0x2c
    1a52:	8b a7       	std	Y+43, r24	; 0x2b
    1a54:	8b a5       	ldd	r24, Y+43	; 0x2b
    1a56:	9c a5       	ldd	r25, Y+44	; 0x2c
    1a58:	01 97       	sbiw	r24, 0x01	; 1
    1a5a:	f1 f7       	brne	.-4      	; 0x1a58 <LCD_sendCommand+0x528>
    1a5c:	9c a7       	std	Y+44, r25	; 0x2c
    1a5e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* Delay for processing Th = 13ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E = 1 */
    1a60:	ab e3       	ldi	r26, 0x3B	; 59
    1a62:	b0 e0       	ldi	r27, 0x00	; 0
    1a64:	eb e3       	ldi	r30, 0x3B	; 59
    1a66:	f0 e0       	ldi	r31, 0x00	; 0
    1a68:	80 81       	ld	r24, Z
    1a6a:	88 60       	ori	r24, 0x08	; 8
    1a6c:	8c 93       	st	X, r24
    1a6e:	80 e0       	ldi	r24, 0x00	; 0
    1a70:	90 e0       	ldi	r25, 0x00	; 0
    1a72:	a0 e8       	ldi	r26, 0x80	; 128
    1a74:	bf e3       	ldi	r27, 0x3F	; 63
    1a76:	8f a3       	std	Y+39, r24	; 0x27
    1a78:	98 a7       	std	Y+40, r25	; 0x28
    1a7a:	a9 a7       	std	Y+41, r26	; 0x29
    1a7c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a7e:	6f a1       	ldd	r22, Y+39	; 0x27
    1a80:	78 a5       	ldd	r23, Y+40	; 0x28
    1a82:	89 a5       	ldd	r24, Y+41	; 0x29
    1a84:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a86:	20 e0       	ldi	r18, 0x00	; 0
    1a88:	30 e0       	ldi	r19, 0x00	; 0
    1a8a:	4a ef       	ldi	r20, 0xFA	; 250
    1a8c:	54 e4       	ldi	r21, 0x44	; 68
    1a8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a92:	dc 01       	movw	r26, r24
    1a94:	cb 01       	movw	r24, r22
    1a96:	8b a3       	std	Y+35, r24	; 0x23
    1a98:	9c a3       	std	Y+36, r25	; 0x24
    1a9a:	ad a3       	std	Y+37, r26	; 0x25
    1a9c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1a9e:	6b a1       	ldd	r22, Y+35	; 0x23
    1aa0:	7c a1       	ldd	r23, Y+36	; 0x24
    1aa2:	8d a1       	ldd	r24, Y+37	; 0x25
    1aa4:	9e a1       	ldd	r25, Y+38	; 0x26
    1aa6:	20 e0       	ldi	r18, 0x00	; 0
    1aa8:	30 e0       	ldi	r19, 0x00	; 0
    1aaa:	40 e8       	ldi	r20, 0x80	; 128
    1aac:	5f e3       	ldi	r21, 0x3F	; 63
    1aae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ab2:	88 23       	and	r24, r24
    1ab4:	2c f4       	brge	.+10     	; 0x1ac0 <LCD_sendCommand+0x590>
		__ticks = 1;
    1ab6:	81 e0       	ldi	r24, 0x01	; 1
    1ab8:	90 e0       	ldi	r25, 0x00	; 0
    1aba:	9a a3       	std	Y+34, r25	; 0x22
    1abc:	89 a3       	std	Y+33, r24	; 0x21
    1abe:	3f c0       	rjmp	.+126    	; 0x1b3e <LCD_sendCommand+0x60e>
	else if (__tmp > 65535)
    1ac0:	6b a1       	ldd	r22, Y+35	; 0x23
    1ac2:	7c a1       	ldd	r23, Y+36	; 0x24
    1ac4:	8d a1       	ldd	r24, Y+37	; 0x25
    1ac6:	9e a1       	ldd	r25, Y+38	; 0x26
    1ac8:	20 e0       	ldi	r18, 0x00	; 0
    1aca:	3f ef       	ldi	r19, 0xFF	; 255
    1acc:	4f e7       	ldi	r20, 0x7F	; 127
    1ace:	57 e4       	ldi	r21, 0x47	; 71
    1ad0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ad4:	18 16       	cp	r1, r24
    1ad6:	4c f5       	brge	.+82     	; 0x1b2a <LCD_sendCommand+0x5fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ad8:	6f a1       	ldd	r22, Y+39	; 0x27
    1ada:	78 a5       	ldd	r23, Y+40	; 0x28
    1adc:	89 a5       	ldd	r24, Y+41	; 0x29
    1ade:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ae0:	20 e0       	ldi	r18, 0x00	; 0
    1ae2:	30 e0       	ldi	r19, 0x00	; 0
    1ae4:	40 e2       	ldi	r20, 0x20	; 32
    1ae6:	51 e4       	ldi	r21, 0x41	; 65
    1ae8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aec:	dc 01       	movw	r26, r24
    1aee:	cb 01       	movw	r24, r22
    1af0:	bc 01       	movw	r22, r24
    1af2:	cd 01       	movw	r24, r26
    1af4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1af8:	dc 01       	movw	r26, r24
    1afa:	cb 01       	movw	r24, r22
    1afc:	9a a3       	std	Y+34, r25	; 0x22
    1afe:	89 a3       	std	Y+33, r24	; 0x21
    1b00:	0f c0       	rjmp	.+30     	; 0x1b20 <LCD_sendCommand+0x5f0>
    1b02:	88 ec       	ldi	r24, 0xC8	; 200
    1b04:	90 e0       	ldi	r25, 0x00	; 0
    1b06:	98 a3       	std	Y+32, r25	; 0x20
    1b08:	8f 8f       	std	Y+31, r24	; 0x1f
    1b0a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b0c:	98 a1       	ldd	r25, Y+32	; 0x20
    1b0e:	01 97       	sbiw	r24, 0x01	; 1
    1b10:	f1 f7       	brne	.-4      	; 0x1b0e <LCD_sendCommand+0x5de>
    1b12:	98 a3       	std	Y+32, r25	; 0x20
    1b14:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b16:	89 a1       	ldd	r24, Y+33	; 0x21
    1b18:	9a a1       	ldd	r25, Y+34	; 0x22
    1b1a:	01 97       	sbiw	r24, 0x01	; 1
    1b1c:	9a a3       	std	Y+34, r25	; 0x22
    1b1e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b20:	89 a1       	ldd	r24, Y+33	; 0x21
    1b22:	9a a1       	ldd	r25, Y+34	; 0x22
    1b24:	00 97       	sbiw	r24, 0x00	; 0
    1b26:	69 f7       	brne	.-38     	; 0x1b02 <LCD_sendCommand+0x5d2>
    1b28:	14 c0       	rjmp	.+40     	; 0x1b52 <LCD_sendCommand+0x622>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b2a:	6b a1       	ldd	r22, Y+35	; 0x23
    1b2c:	7c a1       	ldd	r23, Y+36	; 0x24
    1b2e:	8d a1       	ldd	r24, Y+37	; 0x25
    1b30:	9e a1       	ldd	r25, Y+38	; 0x26
    1b32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b36:	dc 01       	movw	r26, r24
    1b38:	cb 01       	movw	r24, r22
    1b3a:	9a a3       	std	Y+34, r25	; 0x22
    1b3c:	89 a3       	std	Y+33, r24	; 0x21
    1b3e:	89 a1       	ldd	r24, Y+33	; 0x21
    1b40:	9a a1       	ldd	r25, Y+34	; 0x22
    1b42:	9e 8f       	std	Y+30, r25	; 0x1e
    1b44:	8d 8f       	std	Y+29, r24	; 0x1d
    1b46:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b48:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1b4a:	01 97       	sbiw	r24, 0x01	; 1
    1b4c:	f1 f7       	brne	.-4      	; 0x1b4a <LCD_sendCommand+0x61a>
    1b4e:	9e 8f       	std	Y+30, r25	; 0x1e
    1b50:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* Delay for processing Tpw - Tdws = 190ns */

	/* Out the lowest 4 bits of the required command to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | ((command & 0x0F) << 4);
    1b52:	ab e3       	ldi	r26, 0x3B	; 59
    1b54:	b0 e0       	ldi	r27, 0x00	; 0
    1b56:	eb e3       	ldi	r30, 0x3B	; 59
    1b58:	f0 e0       	ldi	r31, 0x00	; 0
    1b5a:	80 81       	ld	r24, Z
    1b5c:	28 2f       	mov	r18, r24
    1b5e:	2f 70       	andi	r18, 0x0F	; 15
    1b60:	fe 01       	movw	r30, r28
    1b62:	ed 59       	subi	r30, 0x9D	; 157
    1b64:	ff 4f       	sbci	r31, 0xFF	; 255
    1b66:	80 81       	ld	r24, Z
    1b68:	88 2f       	mov	r24, r24
    1b6a:	90 e0       	ldi	r25, 0x00	; 0
    1b6c:	82 95       	swap	r24
    1b6e:	92 95       	swap	r25
    1b70:	90 7f       	andi	r25, 0xF0	; 240
    1b72:	98 27       	eor	r25, r24
    1b74:	80 7f       	andi	r24, 0xF0	; 240
    1b76:	98 27       	eor	r25, r24
    1b78:	82 2b       	or	r24, r18
    1b7a:	8c 93       	st	X, r24
    1b7c:	80 e0       	ldi	r24, 0x00	; 0
    1b7e:	90 e0       	ldi	r25, 0x00	; 0
    1b80:	a0 e8       	ldi	r26, 0x80	; 128
    1b82:	bf e3       	ldi	r27, 0x3F	; 63
    1b84:	89 8f       	std	Y+25, r24	; 0x19
    1b86:	9a 8f       	std	Y+26, r25	; 0x1a
    1b88:	ab 8f       	std	Y+27, r26	; 0x1b
    1b8a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b8c:	69 8d       	ldd	r22, Y+25	; 0x19
    1b8e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b90:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b92:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b94:	20 e0       	ldi	r18, 0x00	; 0
    1b96:	30 e0       	ldi	r19, 0x00	; 0
    1b98:	4a ef       	ldi	r20, 0xFA	; 250
    1b9a:	54 e4       	ldi	r21, 0x44	; 68
    1b9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ba0:	dc 01       	movw	r26, r24
    1ba2:	cb 01       	movw	r24, r22
    1ba4:	8d 8b       	std	Y+21, r24	; 0x15
    1ba6:	9e 8b       	std	Y+22, r25	; 0x16
    1ba8:	af 8b       	std	Y+23, r26	; 0x17
    1baa:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1bac:	6d 89       	ldd	r22, Y+21	; 0x15
    1bae:	7e 89       	ldd	r23, Y+22	; 0x16
    1bb0:	8f 89       	ldd	r24, Y+23	; 0x17
    1bb2:	98 8d       	ldd	r25, Y+24	; 0x18
    1bb4:	20 e0       	ldi	r18, 0x00	; 0
    1bb6:	30 e0       	ldi	r19, 0x00	; 0
    1bb8:	40 e8       	ldi	r20, 0x80	; 128
    1bba:	5f e3       	ldi	r21, 0x3F	; 63
    1bbc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bc0:	88 23       	and	r24, r24
    1bc2:	2c f4       	brge	.+10     	; 0x1bce <LCD_sendCommand+0x69e>
		__ticks = 1;
    1bc4:	81 e0       	ldi	r24, 0x01	; 1
    1bc6:	90 e0       	ldi	r25, 0x00	; 0
    1bc8:	9c 8b       	std	Y+20, r25	; 0x14
    1bca:	8b 8b       	std	Y+19, r24	; 0x13
    1bcc:	3f c0       	rjmp	.+126    	; 0x1c4c <LCD_sendCommand+0x71c>
	else if (__tmp > 65535)
    1bce:	6d 89       	ldd	r22, Y+21	; 0x15
    1bd0:	7e 89       	ldd	r23, Y+22	; 0x16
    1bd2:	8f 89       	ldd	r24, Y+23	; 0x17
    1bd4:	98 8d       	ldd	r25, Y+24	; 0x18
    1bd6:	20 e0       	ldi	r18, 0x00	; 0
    1bd8:	3f ef       	ldi	r19, 0xFF	; 255
    1bda:	4f e7       	ldi	r20, 0x7F	; 127
    1bdc:	57 e4       	ldi	r21, 0x47	; 71
    1bde:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1be2:	18 16       	cp	r1, r24
    1be4:	4c f5       	brge	.+82     	; 0x1c38 <LCD_sendCommand+0x708>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1be6:	69 8d       	ldd	r22, Y+25	; 0x19
    1be8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1bea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1bee:	20 e0       	ldi	r18, 0x00	; 0
    1bf0:	30 e0       	ldi	r19, 0x00	; 0
    1bf2:	40 e2       	ldi	r20, 0x20	; 32
    1bf4:	51 e4       	ldi	r21, 0x41	; 65
    1bf6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bfa:	dc 01       	movw	r26, r24
    1bfc:	cb 01       	movw	r24, r22
    1bfe:	bc 01       	movw	r22, r24
    1c00:	cd 01       	movw	r24, r26
    1c02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c06:	dc 01       	movw	r26, r24
    1c08:	cb 01       	movw	r24, r22
    1c0a:	9c 8b       	std	Y+20, r25	; 0x14
    1c0c:	8b 8b       	std	Y+19, r24	; 0x13
    1c0e:	0f c0       	rjmp	.+30     	; 0x1c2e <LCD_sendCommand+0x6fe>
    1c10:	88 ec       	ldi	r24, 0xC8	; 200
    1c12:	90 e0       	ldi	r25, 0x00	; 0
    1c14:	9a 8b       	std	Y+18, r25	; 0x12
    1c16:	89 8b       	std	Y+17, r24	; 0x11
    1c18:	89 89       	ldd	r24, Y+17	; 0x11
    1c1a:	9a 89       	ldd	r25, Y+18	; 0x12
    1c1c:	01 97       	sbiw	r24, 0x01	; 1
    1c1e:	f1 f7       	brne	.-4      	; 0x1c1c <LCD_sendCommand+0x6ec>
    1c20:	9a 8b       	std	Y+18, r25	; 0x12
    1c22:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c24:	8b 89       	ldd	r24, Y+19	; 0x13
    1c26:	9c 89       	ldd	r25, Y+20	; 0x14
    1c28:	01 97       	sbiw	r24, 0x01	; 1
    1c2a:	9c 8b       	std	Y+20, r25	; 0x14
    1c2c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c2e:	8b 89       	ldd	r24, Y+19	; 0x13
    1c30:	9c 89       	ldd	r25, Y+20	; 0x14
    1c32:	00 97       	sbiw	r24, 0x00	; 0
    1c34:	69 f7       	brne	.-38     	; 0x1c10 <LCD_sendCommand+0x6e0>
    1c36:	14 c0       	rjmp	.+40     	; 0x1c60 <LCD_sendCommand+0x730>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c38:	6d 89       	ldd	r22, Y+21	; 0x15
    1c3a:	7e 89       	ldd	r23, Y+22	; 0x16
    1c3c:	8f 89       	ldd	r24, Y+23	; 0x17
    1c3e:	98 8d       	ldd	r25, Y+24	; 0x18
    1c40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c44:	dc 01       	movw	r26, r24
    1c46:	cb 01       	movw	r24, r22
    1c48:	9c 8b       	std	Y+20, r25	; 0x14
    1c4a:	8b 8b       	std	Y+19, r24	; 0x13
    1c4c:	8b 89       	ldd	r24, Y+19	; 0x13
    1c4e:	9c 89       	ldd	r25, Y+20	; 0x14
    1c50:	98 8b       	std	Y+16, r25	; 0x10
    1c52:	8f 87       	std	Y+15, r24	; 0x0f
    1c54:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c56:	98 89       	ldd	r25, Y+16	; 0x10
    1c58:	01 97       	sbiw	r24, 0x01	; 1
    1c5a:	f1 f7       	brne	.-4      	; 0x1c58 <LCD_sendCommand+0x728>
    1c5c:	98 8b       	std	Y+16, r25	; 0x10
    1c5e:	8f 87       	std	Y+15, r24	; 0x0f
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | (command & 0x0F);
#endif

	_delay_ms(1); /* Delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* Disable LCD E = 0 */
    1c60:	ab e3       	ldi	r26, 0x3B	; 59
    1c62:	b0 e0       	ldi	r27, 0x00	; 0
    1c64:	eb e3       	ldi	r30, 0x3B	; 59
    1c66:	f0 e0       	ldi	r31, 0x00	; 0
    1c68:	80 81       	ld	r24, Z
    1c6a:	87 7f       	andi	r24, 0xF7	; 247
    1c6c:	8c 93       	st	X, r24
    1c6e:	80 e0       	ldi	r24, 0x00	; 0
    1c70:	90 e0       	ldi	r25, 0x00	; 0
    1c72:	a0 e8       	ldi	r26, 0x80	; 128
    1c74:	bf e3       	ldi	r27, 0x3F	; 63
    1c76:	8b 87       	std	Y+11, r24	; 0x0b
    1c78:	9c 87       	std	Y+12, r25	; 0x0c
    1c7a:	ad 87       	std	Y+13, r26	; 0x0d
    1c7c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c7e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c80:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c82:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c84:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c86:	20 e0       	ldi	r18, 0x00	; 0
    1c88:	30 e0       	ldi	r19, 0x00	; 0
    1c8a:	4a ef       	ldi	r20, 0xFA	; 250
    1c8c:	54 e4       	ldi	r21, 0x44	; 68
    1c8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c92:	dc 01       	movw	r26, r24
    1c94:	cb 01       	movw	r24, r22
    1c96:	8f 83       	std	Y+7, r24	; 0x07
    1c98:	98 87       	std	Y+8, r25	; 0x08
    1c9a:	a9 87       	std	Y+9, r26	; 0x09
    1c9c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c9e:	6f 81       	ldd	r22, Y+7	; 0x07
    1ca0:	78 85       	ldd	r23, Y+8	; 0x08
    1ca2:	89 85       	ldd	r24, Y+9	; 0x09
    1ca4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ca6:	20 e0       	ldi	r18, 0x00	; 0
    1ca8:	30 e0       	ldi	r19, 0x00	; 0
    1caa:	40 e8       	ldi	r20, 0x80	; 128
    1cac:	5f e3       	ldi	r21, 0x3F	; 63
    1cae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cb2:	88 23       	and	r24, r24
    1cb4:	2c f4       	brge	.+10     	; 0x1cc0 <LCD_sendCommand+0x790>
		__ticks = 1;
    1cb6:	81 e0       	ldi	r24, 0x01	; 1
    1cb8:	90 e0       	ldi	r25, 0x00	; 0
    1cba:	9e 83       	std	Y+6, r25	; 0x06
    1cbc:	8d 83       	std	Y+5, r24	; 0x05
    1cbe:	3f c0       	rjmp	.+126    	; 0x1d3e <LCD_sendCommand+0x80e>
	else if (__tmp > 65535)
    1cc0:	6f 81       	ldd	r22, Y+7	; 0x07
    1cc2:	78 85       	ldd	r23, Y+8	; 0x08
    1cc4:	89 85       	ldd	r24, Y+9	; 0x09
    1cc6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cc8:	20 e0       	ldi	r18, 0x00	; 0
    1cca:	3f ef       	ldi	r19, 0xFF	; 255
    1ccc:	4f e7       	ldi	r20, 0x7F	; 127
    1cce:	57 e4       	ldi	r21, 0x47	; 71
    1cd0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1cd4:	18 16       	cp	r1, r24
    1cd6:	4c f5       	brge	.+82     	; 0x1d2a <LCD_sendCommand+0x7fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cd8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cda:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cdc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cde:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ce0:	20 e0       	ldi	r18, 0x00	; 0
    1ce2:	30 e0       	ldi	r19, 0x00	; 0
    1ce4:	40 e2       	ldi	r20, 0x20	; 32
    1ce6:	51 e4       	ldi	r21, 0x41	; 65
    1ce8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cec:	dc 01       	movw	r26, r24
    1cee:	cb 01       	movw	r24, r22
    1cf0:	bc 01       	movw	r22, r24
    1cf2:	cd 01       	movw	r24, r26
    1cf4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cf8:	dc 01       	movw	r26, r24
    1cfa:	cb 01       	movw	r24, r22
    1cfc:	9e 83       	std	Y+6, r25	; 0x06
    1cfe:	8d 83       	std	Y+5, r24	; 0x05
    1d00:	0f c0       	rjmp	.+30     	; 0x1d20 <LCD_sendCommand+0x7f0>
    1d02:	88 ec       	ldi	r24, 0xC8	; 200
    1d04:	90 e0       	ldi	r25, 0x00	; 0
    1d06:	9c 83       	std	Y+4, r25	; 0x04
    1d08:	8b 83       	std	Y+3, r24	; 0x03
    1d0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d0c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d0e:	01 97       	sbiw	r24, 0x01	; 1
    1d10:	f1 f7       	brne	.-4      	; 0x1d0e <LCD_sendCommand+0x7de>
    1d12:	9c 83       	std	Y+4, r25	; 0x04
    1d14:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d16:	8d 81       	ldd	r24, Y+5	; 0x05
    1d18:	9e 81       	ldd	r25, Y+6	; 0x06
    1d1a:	01 97       	sbiw	r24, 0x01	; 1
    1d1c:	9e 83       	std	Y+6, r25	; 0x06
    1d1e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d20:	8d 81       	ldd	r24, Y+5	; 0x05
    1d22:	9e 81       	ldd	r25, Y+6	; 0x06
    1d24:	00 97       	sbiw	r24, 0x00	; 0
    1d26:	69 f7       	brne	.-38     	; 0x1d02 <LCD_sendCommand+0x7d2>
    1d28:	14 c0       	rjmp	.+40     	; 0x1d52 <LCD_sendCommand+0x822>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d2a:	6f 81       	ldd	r22, Y+7	; 0x07
    1d2c:	78 85       	ldd	r23, Y+8	; 0x08
    1d2e:	89 85       	ldd	r24, Y+9	; 0x09
    1d30:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d36:	dc 01       	movw	r26, r24
    1d38:	cb 01       	movw	r24, r22
    1d3a:	9e 83       	std	Y+6, r25	; 0x06
    1d3c:	8d 83       	std	Y+5, r24	; 0x05
    1d3e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d40:	9e 81       	ldd	r25, Y+6	; 0x06
    1d42:	9a 83       	std	Y+2, r25	; 0x02
    1d44:	89 83       	std	Y+1, r24	; 0x01
    1d46:	89 81       	ldd	r24, Y+1	; 0x01
    1d48:	9a 81       	ldd	r25, Y+2	; 0x02
    1d4a:	01 97       	sbiw	r24, 0x01	; 1
    1d4c:	f1 f7       	brne	.-4      	; 0x1d4a <LCD_sendCommand+0x81a>
    1d4e:	9a 83       	std	Y+2, r25	; 0x02
    1d50:	89 83       	std	Y+1, r24	; 0x01
	LCD_DATA_PORT = command; /* Out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* Delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E = 0 */
	_delay_ms(1); /* Delay for processing Th = 13ns */
#endif
}
    1d52:	cd 59       	subi	r28, 0x9D	; 157
    1d54:	df 4f       	sbci	r29, 0xFF	; 255
    1d56:	0f b6       	in	r0, 0x3f	; 63
    1d58:	f8 94       	cli
    1d5a:	de bf       	out	0x3e, r29	; 62
    1d5c:	0f be       	out	0x3f, r0	; 63
    1d5e:	cd bf       	out	0x3d, r28	; 61
    1d60:	cf 91       	pop	r28
    1d62:	df 91       	pop	r29
    1d64:	1f 91       	pop	r17
    1d66:	0f 91       	pop	r16
    1d68:	08 95       	ret

00001d6a <LCD_displayCharacter>:

void LCD_displayCharacter(uint8_t data)
{
    1d6a:	0f 93       	push	r16
    1d6c:	1f 93       	push	r17
    1d6e:	df 93       	push	r29
    1d70:	cf 93       	push	r28
    1d72:	cd b7       	in	r28, 0x3d	; 61
    1d74:	de b7       	in	r29, 0x3e	; 62
    1d76:	c3 56       	subi	r28, 0x63	; 99
    1d78:	d0 40       	sbci	r29, 0x00	; 0
    1d7a:	0f b6       	in	r0, 0x3f	; 63
    1d7c:	f8 94       	cli
    1d7e:	de bf       	out	0x3e, r29	; 62
    1d80:	0f be       	out	0x3f, r0	; 63
    1d82:	cd bf       	out	0x3d, r28	; 61
    1d84:	fe 01       	movw	r30, r28
    1d86:	ed 59       	subi	r30, 0x9D	; 157
    1d88:	ff 4f       	sbci	r31, 0xFF	; 255
    1d8a:	80 83       	st	Z, r24
	SET_BIT(LCD_CTRL_PORT,RS); /* Data Mode RS = 1 */
    1d8c:	ab e3       	ldi	r26, 0x3B	; 59
    1d8e:	b0 e0       	ldi	r27, 0x00	; 0
    1d90:	eb e3       	ldi	r30, 0x3B	; 59
    1d92:	f0 e0       	ldi	r31, 0x00	; 0
    1d94:	80 81       	ld	r24, Z
    1d96:	82 60       	ori	r24, 0x02	; 2
    1d98:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* Write data to LCD so RW = 0 */
    1d9a:	ab e3       	ldi	r26, 0x3B	; 59
    1d9c:	b0 e0       	ldi	r27, 0x00	; 0
    1d9e:	eb e3       	ldi	r30, 0x3B	; 59
    1da0:	f0 e0       	ldi	r31, 0x00	; 0
    1da2:	80 81       	ld	r24, Z
    1da4:	8b 7f       	andi	r24, 0xFB	; 251
    1da6:	8c 93       	st	X, r24
    1da8:	fe 01       	movw	r30, r28
    1daa:	e1 5a       	subi	r30, 0xA1	; 161
    1dac:	ff 4f       	sbci	r31, 0xFF	; 255
    1dae:	80 e0       	ldi	r24, 0x00	; 0
    1db0:	90 e0       	ldi	r25, 0x00	; 0
    1db2:	a0 e8       	ldi	r26, 0x80	; 128
    1db4:	bf e3       	ldi	r27, 0x3F	; 63
    1db6:	80 83       	st	Z, r24
    1db8:	91 83       	std	Z+1, r25	; 0x01
    1dba:	a2 83       	std	Z+2, r26	; 0x02
    1dbc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dbe:	8e 01       	movw	r16, r28
    1dc0:	05 5a       	subi	r16, 0xA5	; 165
    1dc2:	1f 4f       	sbci	r17, 0xFF	; 255
    1dc4:	fe 01       	movw	r30, r28
    1dc6:	e1 5a       	subi	r30, 0xA1	; 161
    1dc8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dca:	60 81       	ld	r22, Z
    1dcc:	71 81       	ldd	r23, Z+1	; 0x01
    1dce:	82 81       	ldd	r24, Z+2	; 0x02
    1dd0:	93 81       	ldd	r25, Z+3	; 0x03
    1dd2:	20 e0       	ldi	r18, 0x00	; 0
    1dd4:	30 e0       	ldi	r19, 0x00	; 0
    1dd6:	4a ef       	ldi	r20, 0xFA	; 250
    1dd8:	54 e4       	ldi	r21, 0x44	; 68
    1dda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dde:	dc 01       	movw	r26, r24
    1de0:	cb 01       	movw	r24, r22
    1de2:	f8 01       	movw	r30, r16
    1de4:	80 83       	st	Z, r24
    1de6:	91 83       	std	Z+1, r25	; 0x01
    1de8:	a2 83       	std	Z+2, r26	; 0x02
    1dea:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1dec:	fe 01       	movw	r30, r28
    1dee:	e5 5a       	subi	r30, 0xA5	; 165
    1df0:	ff 4f       	sbci	r31, 0xFF	; 255
    1df2:	60 81       	ld	r22, Z
    1df4:	71 81       	ldd	r23, Z+1	; 0x01
    1df6:	82 81       	ldd	r24, Z+2	; 0x02
    1df8:	93 81       	ldd	r25, Z+3	; 0x03
    1dfa:	20 e0       	ldi	r18, 0x00	; 0
    1dfc:	30 e0       	ldi	r19, 0x00	; 0
    1dfe:	40 e8       	ldi	r20, 0x80	; 128
    1e00:	5f e3       	ldi	r21, 0x3F	; 63
    1e02:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e06:	88 23       	and	r24, r24
    1e08:	44 f4       	brge	.+16     	; 0x1e1a <LCD_displayCharacter+0xb0>
		__ticks = 1;
    1e0a:	fe 01       	movw	r30, r28
    1e0c:	e7 5a       	subi	r30, 0xA7	; 167
    1e0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e10:	81 e0       	ldi	r24, 0x01	; 1
    1e12:	90 e0       	ldi	r25, 0x00	; 0
    1e14:	91 83       	std	Z+1, r25	; 0x01
    1e16:	80 83       	st	Z, r24
    1e18:	64 c0       	rjmp	.+200    	; 0x1ee2 <LCD_displayCharacter+0x178>
	else if (__tmp > 65535)
    1e1a:	fe 01       	movw	r30, r28
    1e1c:	e5 5a       	subi	r30, 0xA5	; 165
    1e1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e20:	60 81       	ld	r22, Z
    1e22:	71 81       	ldd	r23, Z+1	; 0x01
    1e24:	82 81       	ldd	r24, Z+2	; 0x02
    1e26:	93 81       	ldd	r25, Z+3	; 0x03
    1e28:	20 e0       	ldi	r18, 0x00	; 0
    1e2a:	3f ef       	ldi	r19, 0xFF	; 255
    1e2c:	4f e7       	ldi	r20, 0x7F	; 127
    1e2e:	57 e4       	ldi	r21, 0x47	; 71
    1e30:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e34:	18 16       	cp	r1, r24
    1e36:	0c f0       	brlt	.+2      	; 0x1e3a <LCD_displayCharacter+0xd0>
    1e38:	43 c0       	rjmp	.+134    	; 0x1ec0 <LCD_displayCharacter+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e3a:	fe 01       	movw	r30, r28
    1e3c:	e1 5a       	subi	r30, 0xA1	; 161
    1e3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e40:	60 81       	ld	r22, Z
    1e42:	71 81       	ldd	r23, Z+1	; 0x01
    1e44:	82 81       	ldd	r24, Z+2	; 0x02
    1e46:	93 81       	ldd	r25, Z+3	; 0x03
    1e48:	20 e0       	ldi	r18, 0x00	; 0
    1e4a:	30 e0       	ldi	r19, 0x00	; 0
    1e4c:	40 e2       	ldi	r20, 0x20	; 32
    1e4e:	51 e4       	ldi	r21, 0x41	; 65
    1e50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e54:	dc 01       	movw	r26, r24
    1e56:	cb 01       	movw	r24, r22
    1e58:	8e 01       	movw	r16, r28
    1e5a:	07 5a       	subi	r16, 0xA7	; 167
    1e5c:	1f 4f       	sbci	r17, 0xFF	; 255
    1e5e:	bc 01       	movw	r22, r24
    1e60:	cd 01       	movw	r24, r26
    1e62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e66:	dc 01       	movw	r26, r24
    1e68:	cb 01       	movw	r24, r22
    1e6a:	f8 01       	movw	r30, r16
    1e6c:	91 83       	std	Z+1, r25	; 0x01
    1e6e:	80 83       	st	Z, r24
    1e70:	1f c0       	rjmp	.+62     	; 0x1eb0 <LCD_displayCharacter+0x146>
    1e72:	fe 01       	movw	r30, r28
    1e74:	e9 5a       	subi	r30, 0xA9	; 169
    1e76:	ff 4f       	sbci	r31, 0xFF	; 255
    1e78:	88 ec       	ldi	r24, 0xC8	; 200
    1e7a:	90 e0       	ldi	r25, 0x00	; 0
    1e7c:	91 83       	std	Z+1, r25	; 0x01
    1e7e:	80 83       	st	Z, r24
    1e80:	fe 01       	movw	r30, r28
    1e82:	e9 5a       	subi	r30, 0xA9	; 169
    1e84:	ff 4f       	sbci	r31, 0xFF	; 255
    1e86:	80 81       	ld	r24, Z
    1e88:	91 81       	ldd	r25, Z+1	; 0x01
    1e8a:	01 97       	sbiw	r24, 0x01	; 1
    1e8c:	f1 f7       	brne	.-4      	; 0x1e8a <LCD_displayCharacter+0x120>
    1e8e:	fe 01       	movw	r30, r28
    1e90:	e9 5a       	subi	r30, 0xA9	; 169
    1e92:	ff 4f       	sbci	r31, 0xFF	; 255
    1e94:	91 83       	std	Z+1, r25	; 0x01
    1e96:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e98:	de 01       	movw	r26, r28
    1e9a:	a7 5a       	subi	r26, 0xA7	; 167
    1e9c:	bf 4f       	sbci	r27, 0xFF	; 255
    1e9e:	fe 01       	movw	r30, r28
    1ea0:	e7 5a       	subi	r30, 0xA7	; 167
    1ea2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea4:	80 81       	ld	r24, Z
    1ea6:	91 81       	ldd	r25, Z+1	; 0x01
    1ea8:	01 97       	sbiw	r24, 0x01	; 1
    1eaa:	11 96       	adiw	r26, 0x01	; 1
    1eac:	9c 93       	st	X, r25
    1eae:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1eb0:	fe 01       	movw	r30, r28
    1eb2:	e7 5a       	subi	r30, 0xA7	; 167
    1eb4:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb6:	80 81       	ld	r24, Z
    1eb8:	91 81       	ldd	r25, Z+1	; 0x01
    1eba:	00 97       	sbiw	r24, 0x00	; 0
    1ebc:	d1 f6       	brne	.-76     	; 0x1e72 <LCD_displayCharacter+0x108>
    1ebe:	27 c0       	rjmp	.+78     	; 0x1f0e <LCD_displayCharacter+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ec0:	8e 01       	movw	r16, r28
    1ec2:	07 5a       	subi	r16, 0xA7	; 167
    1ec4:	1f 4f       	sbci	r17, 0xFF	; 255
    1ec6:	fe 01       	movw	r30, r28
    1ec8:	e5 5a       	subi	r30, 0xA5	; 165
    1eca:	ff 4f       	sbci	r31, 0xFF	; 255
    1ecc:	60 81       	ld	r22, Z
    1ece:	71 81       	ldd	r23, Z+1	; 0x01
    1ed0:	82 81       	ldd	r24, Z+2	; 0x02
    1ed2:	93 81       	ldd	r25, Z+3	; 0x03
    1ed4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ed8:	dc 01       	movw	r26, r24
    1eda:	cb 01       	movw	r24, r22
    1edc:	f8 01       	movw	r30, r16
    1ede:	91 83       	std	Z+1, r25	; 0x01
    1ee0:	80 83       	st	Z, r24
    1ee2:	de 01       	movw	r26, r28
    1ee4:	ab 5a       	subi	r26, 0xAB	; 171
    1ee6:	bf 4f       	sbci	r27, 0xFF	; 255
    1ee8:	fe 01       	movw	r30, r28
    1eea:	e7 5a       	subi	r30, 0xA7	; 167
    1eec:	ff 4f       	sbci	r31, 0xFF	; 255
    1eee:	80 81       	ld	r24, Z
    1ef0:	91 81       	ldd	r25, Z+1	; 0x01
    1ef2:	8d 93       	st	X+, r24
    1ef4:	9c 93       	st	X, r25
    1ef6:	fe 01       	movw	r30, r28
    1ef8:	eb 5a       	subi	r30, 0xAB	; 171
    1efa:	ff 4f       	sbci	r31, 0xFF	; 255
    1efc:	80 81       	ld	r24, Z
    1efe:	91 81       	ldd	r25, Z+1	; 0x01
    1f00:	01 97       	sbiw	r24, 0x01	; 1
    1f02:	f1 f7       	brne	.-4      	; 0x1f00 <LCD_displayCharacter+0x196>
    1f04:	fe 01       	movw	r30, r28
    1f06:	eb 5a       	subi	r30, 0xAB	; 171
    1f08:	ff 4f       	sbci	r31, 0xFF	; 255
    1f0a:	91 83       	std	Z+1, r25	; 0x01
    1f0c:	80 83       	st	Z, r24
	_delay_ms(1); /* Delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E = 1 */
    1f0e:	ab e3       	ldi	r26, 0x3B	; 59
    1f10:	b0 e0       	ldi	r27, 0x00	; 0
    1f12:	eb e3       	ldi	r30, 0x3B	; 59
    1f14:	f0 e0       	ldi	r31, 0x00	; 0
    1f16:	80 81       	ld	r24, Z
    1f18:	88 60       	ori	r24, 0x08	; 8
    1f1a:	8c 93       	st	X, r24
    1f1c:	fe 01       	movw	r30, r28
    1f1e:	ef 5a       	subi	r30, 0xAF	; 175
    1f20:	ff 4f       	sbci	r31, 0xFF	; 255
    1f22:	80 e0       	ldi	r24, 0x00	; 0
    1f24:	90 e0       	ldi	r25, 0x00	; 0
    1f26:	a0 e8       	ldi	r26, 0x80	; 128
    1f28:	bf e3       	ldi	r27, 0x3F	; 63
    1f2a:	80 83       	st	Z, r24
    1f2c:	91 83       	std	Z+1, r25	; 0x01
    1f2e:	a2 83       	std	Z+2, r26	; 0x02
    1f30:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f32:	8e 01       	movw	r16, r28
    1f34:	03 5b       	subi	r16, 0xB3	; 179
    1f36:	1f 4f       	sbci	r17, 0xFF	; 255
    1f38:	fe 01       	movw	r30, r28
    1f3a:	ef 5a       	subi	r30, 0xAF	; 175
    1f3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f3e:	60 81       	ld	r22, Z
    1f40:	71 81       	ldd	r23, Z+1	; 0x01
    1f42:	82 81       	ldd	r24, Z+2	; 0x02
    1f44:	93 81       	ldd	r25, Z+3	; 0x03
    1f46:	20 e0       	ldi	r18, 0x00	; 0
    1f48:	30 e0       	ldi	r19, 0x00	; 0
    1f4a:	4a ef       	ldi	r20, 0xFA	; 250
    1f4c:	54 e4       	ldi	r21, 0x44	; 68
    1f4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f52:	dc 01       	movw	r26, r24
    1f54:	cb 01       	movw	r24, r22
    1f56:	f8 01       	movw	r30, r16
    1f58:	80 83       	st	Z, r24
    1f5a:	91 83       	std	Z+1, r25	; 0x01
    1f5c:	a2 83       	std	Z+2, r26	; 0x02
    1f5e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f60:	fe 01       	movw	r30, r28
    1f62:	e3 5b       	subi	r30, 0xB3	; 179
    1f64:	ff 4f       	sbci	r31, 0xFF	; 255
    1f66:	60 81       	ld	r22, Z
    1f68:	71 81       	ldd	r23, Z+1	; 0x01
    1f6a:	82 81       	ldd	r24, Z+2	; 0x02
    1f6c:	93 81       	ldd	r25, Z+3	; 0x03
    1f6e:	20 e0       	ldi	r18, 0x00	; 0
    1f70:	30 e0       	ldi	r19, 0x00	; 0
    1f72:	40 e8       	ldi	r20, 0x80	; 128
    1f74:	5f e3       	ldi	r21, 0x3F	; 63
    1f76:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f7a:	88 23       	and	r24, r24
    1f7c:	44 f4       	brge	.+16     	; 0x1f8e <LCD_displayCharacter+0x224>
		__ticks = 1;
    1f7e:	fe 01       	movw	r30, r28
    1f80:	e5 5b       	subi	r30, 0xB5	; 181
    1f82:	ff 4f       	sbci	r31, 0xFF	; 255
    1f84:	81 e0       	ldi	r24, 0x01	; 1
    1f86:	90 e0       	ldi	r25, 0x00	; 0
    1f88:	91 83       	std	Z+1, r25	; 0x01
    1f8a:	80 83       	st	Z, r24
    1f8c:	64 c0       	rjmp	.+200    	; 0x2056 <LCD_displayCharacter+0x2ec>
	else if (__tmp > 65535)
    1f8e:	fe 01       	movw	r30, r28
    1f90:	e3 5b       	subi	r30, 0xB3	; 179
    1f92:	ff 4f       	sbci	r31, 0xFF	; 255
    1f94:	60 81       	ld	r22, Z
    1f96:	71 81       	ldd	r23, Z+1	; 0x01
    1f98:	82 81       	ldd	r24, Z+2	; 0x02
    1f9a:	93 81       	ldd	r25, Z+3	; 0x03
    1f9c:	20 e0       	ldi	r18, 0x00	; 0
    1f9e:	3f ef       	ldi	r19, 0xFF	; 255
    1fa0:	4f e7       	ldi	r20, 0x7F	; 127
    1fa2:	57 e4       	ldi	r21, 0x47	; 71
    1fa4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fa8:	18 16       	cp	r1, r24
    1faa:	0c f0       	brlt	.+2      	; 0x1fae <LCD_displayCharacter+0x244>
    1fac:	43 c0       	rjmp	.+134    	; 0x2034 <LCD_displayCharacter+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fae:	fe 01       	movw	r30, r28
    1fb0:	ef 5a       	subi	r30, 0xAF	; 175
    1fb2:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb4:	60 81       	ld	r22, Z
    1fb6:	71 81       	ldd	r23, Z+1	; 0x01
    1fb8:	82 81       	ldd	r24, Z+2	; 0x02
    1fba:	93 81       	ldd	r25, Z+3	; 0x03
    1fbc:	20 e0       	ldi	r18, 0x00	; 0
    1fbe:	30 e0       	ldi	r19, 0x00	; 0
    1fc0:	40 e2       	ldi	r20, 0x20	; 32
    1fc2:	51 e4       	ldi	r21, 0x41	; 65
    1fc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fc8:	dc 01       	movw	r26, r24
    1fca:	cb 01       	movw	r24, r22
    1fcc:	8e 01       	movw	r16, r28
    1fce:	05 5b       	subi	r16, 0xB5	; 181
    1fd0:	1f 4f       	sbci	r17, 0xFF	; 255
    1fd2:	bc 01       	movw	r22, r24
    1fd4:	cd 01       	movw	r24, r26
    1fd6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fda:	dc 01       	movw	r26, r24
    1fdc:	cb 01       	movw	r24, r22
    1fde:	f8 01       	movw	r30, r16
    1fe0:	91 83       	std	Z+1, r25	; 0x01
    1fe2:	80 83       	st	Z, r24
    1fe4:	1f c0       	rjmp	.+62     	; 0x2024 <LCD_displayCharacter+0x2ba>
    1fe6:	fe 01       	movw	r30, r28
    1fe8:	e7 5b       	subi	r30, 0xB7	; 183
    1fea:	ff 4f       	sbci	r31, 0xFF	; 255
    1fec:	88 ec       	ldi	r24, 0xC8	; 200
    1fee:	90 e0       	ldi	r25, 0x00	; 0
    1ff0:	91 83       	std	Z+1, r25	; 0x01
    1ff2:	80 83       	st	Z, r24
    1ff4:	fe 01       	movw	r30, r28
    1ff6:	e7 5b       	subi	r30, 0xB7	; 183
    1ff8:	ff 4f       	sbci	r31, 0xFF	; 255
    1ffa:	80 81       	ld	r24, Z
    1ffc:	91 81       	ldd	r25, Z+1	; 0x01
    1ffe:	01 97       	sbiw	r24, 0x01	; 1
    2000:	f1 f7       	brne	.-4      	; 0x1ffe <LCD_displayCharacter+0x294>
    2002:	fe 01       	movw	r30, r28
    2004:	e7 5b       	subi	r30, 0xB7	; 183
    2006:	ff 4f       	sbci	r31, 0xFF	; 255
    2008:	91 83       	std	Z+1, r25	; 0x01
    200a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    200c:	de 01       	movw	r26, r28
    200e:	a5 5b       	subi	r26, 0xB5	; 181
    2010:	bf 4f       	sbci	r27, 0xFF	; 255
    2012:	fe 01       	movw	r30, r28
    2014:	e5 5b       	subi	r30, 0xB5	; 181
    2016:	ff 4f       	sbci	r31, 0xFF	; 255
    2018:	80 81       	ld	r24, Z
    201a:	91 81       	ldd	r25, Z+1	; 0x01
    201c:	01 97       	sbiw	r24, 0x01	; 1
    201e:	11 96       	adiw	r26, 0x01	; 1
    2020:	9c 93       	st	X, r25
    2022:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2024:	fe 01       	movw	r30, r28
    2026:	e5 5b       	subi	r30, 0xB5	; 181
    2028:	ff 4f       	sbci	r31, 0xFF	; 255
    202a:	80 81       	ld	r24, Z
    202c:	91 81       	ldd	r25, Z+1	; 0x01
    202e:	00 97       	sbiw	r24, 0x00	; 0
    2030:	d1 f6       	brne	.-76     	; 0x1fe6 <LCD_displayCharacter+0x27c>
    2032:	27 c0       	rjmp	.+78     	; 0x2082 <LCD_displayCharacter+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2034:	8e 01       	movw	r16, r28
    2036:	05 5b       	subi	r16, 0xB5	; 181
    2038:	1f 4f       	sbci	r17, 0xFF	; 255
    203a:	fe 01       	movw	r30, r28
    203c:	e3 5b       	subi	r30, 0xB3	; 179
    203e:	ff 4f       	sbci	r31, 0xFF	; 255
    2040:	60 81       	ld	r22, Z
    2042:	71 81       	ldd	r23, Z+1	; 0x01
    2044:	82 81       	ldd	r24, Z+2	; 0x02
    2046:	93 81       	ldd	r25, Z+3	; 0x03
    2048:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    204c:	dc 01       	movw	r26, r24
    204e:	cb 01       	movw	r24, r22
    2050:	f8 01       	movw	r30, r16
    2052:	91 83       	std	Z+1, r25	; 0x01
    2054:	80 83       	st	Z, r24
    2056:	de 01       	movw	r26, r28
    2058:	a9 5b       	subi	r26, 0xB9	; 185
    205a:	bf 4f       	sbci	r27, 0xFF	; 255
    205c:	fe 01       	movw	r30, r28
    205e:	e5 5b       	subi	r30, 0xB5	; 181
    2060:	ff 4f       	sbci	r31, 0xFF	; 255
    2062:	80 81       	ld	r24, Z
    2064:	91 81       	ldd	r25, Z+1	; 0x01
    2066:	8d 93       	st	X+, r24
    2068:	9c 93       	st	X, r25
    206a:	fe 01       	movw	r30, r28
    206c:	e9 5b       	subi	r30, 0xB9	; 185
    206e:	ff 4f       	sbci	r31, 0xFF	; 255
    2070:	80 81       	ld	r24, Z
    2072:	91 81       	ldd	r25, Z+1	; 0x01
    2074:	01 97       	sbiw	r24, 0x01	; 1
    2076:	f1 f7       	brne	.-4      	; 0x2074 <LCD_displayCharacter+0x30a>
    2078:	fe 01       	movw	r30, r28
    207a:	e9 5b       	subi	r30, 0xB9	; 185
    207c:	ff 4f       	sbci	r31, 0xFF	; 255
    207e:	91 83       	std	Z+1, r25	; 0x01
    2080:	80 83       	st	Z, r24
	_delay_ms(1); /* Delay for processing Tpw - Tdws = 190ns */
#if (DATA_BITS_MODE == 4)
	/* Out the highest 4 bits of the required data to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (data & 0xF0);
    2082:	ab e3       	ldi	r26, 0x3B	; 59
    2084:	b0 e0       	ldi	r27, 0x00	; 0
    2086:	eb e3       	ldi	r30, 0x3B	; 59
    2088:	f0 e0       	ldi	r31, 0x00	; 0
    208a:	80 81       	ld	r24, Z
    208c:	98 2f       	mov	r25, r24
    208e:	9f 70       	andi	r25, 0x0F	; 15
    2090:	fe 01       	movw	r30, r28
    2092:	ed 59       	subi	r30, 0x9D	; 157
    2094:	ff 4f       	sbci	r31, 0xFF	; 255
    2096:	80 81       	ld	r24, Z
    2098:	80 7f       	andi	r24, 0xF0	; 240
    209a:	89 2b       	or	r24, r25
    209c:	8c 93       	st	X, r24
    209e:	fe 01       	movw	r30, r28
    20a0:	ed 5b       	subi	r30, 0xBD	; 189
    20a2:	ff 4f       	sbci	r31, 0xFF	; 255
    20a4:	80 e0       	ldi	r24, 0x00	; 0
    20a6:	90 e0       	ldi	r25, 0x00	; 0
    20a8:	a0 e8       	ldi	r26, 0x80	; 128
    20aa:	bf e3       	ldi	r27, 0x3F	; 63
    20ac:	80 83       	st	Z, r24
    20ae:	91 83       	std	Z+1, r25	; 0x01
    20b0:	a2 83       	std	Z+2, r26	; 0x02
    20b2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20b4:	8e 01       	movw	r16, r28
    20b6:	01 5c       	subi	r16, 0xC1	; 193
    20b8:	1f 4f       	sbci	r17, 0xFF	; 255
    20ba:	fe 01       	movw	r30, r28
    20bc:	ed 5b       	subi	r30, 0xBD	; 189
    20be:	ff 4f       	sbci	r31, 0xFF	; 255
    20c0:	60 81       	ld	r22, Z
    20c2:	71 81       	ldd	r23, Z+1	; 0x01
    20c4:	82 81       	ldd	r24, Z+2	; 0x02
    20c6:	93 81       	ldd	r25, Z+3	; 0x03
    20c8:	20 e0       	ldi	r18, 0x00	; 0
    20ca:	30 e0       	ldi	r19, 0x00	; 0
    20cc:	4a ef       	ldi	r20, 0xFA	; 250
    20ce:	54 e4       	ldi	r21, 0x44	; 68
    20d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20d4:	dc 01       	movw	r26, r24
    20d6:	cb 01       	movw	r24, r22
    20d8:	f8 01       	movw	r30, r16
    20da:	80 83       	st	Z, r24
    20dc:	91 83       	std	Z+1, r25	; 0x01
    20de:	a2 83       	std	Z+2, r26	; 0x02
    20e0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    20e2:	fe 01       	movw	r30, r28
    20e4:	ff 96       	adiw	r30, 0x3f	; 63
    20e6:	60 81       	ld	r22, Z
    20e8:	71 81       	ldd	r23, Z+1	; 0x01
    20ea:	82 81       	ldd	r24, Z+2	; 0x02
    20ec:	93 81       	ldd	r25, Z+3	; 0x03
    20ee:	20 e0       	ldi	r18, 0x00	; 0
    20f0:	30 e0       	ldi	r19, 0x00	; 0
    20f2:	40 e8       	ldi	r20, 0x80	; 128
    20f4:	5f e3       	ldi	r21, 0x3F	; 63
    20f6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20fa:	88 23       	and	r24, r24
    20fc:	2c f4       	brge	.+10     	; 0x2108 <LCD_displayCharacter+0x39e>
		__ticks = 1;
    20fe:	81 e0       	ldi	r24, 0x01	; 1
    2100:	90 e0       	ldi	r25, 0x00	; 0
    2102:	9e af       	std	Y+62, r25	; 0x3e
    2104:	8d af       	std	Y+61, r24	; 0x3d
    2106:	46 c0       	rjmp	.+140    	; 0x2194 <LCD_displayCharacter+0x42a>
	else if (__tmp > 65535)
    2108:	fe 01       	movw	r30, r28
    210a:	ff 96       	adiw	r30, 0x3f	; 63
    210c:	60 81       	ld	r22, Z
    210e:	71 81       	ldd	r23, Z+1	; 0x01
    2110:	82 81       	ldd	r24, Z+2	; 0x02
    2112:	93 81       	ldd	r25, Z+3	; 0x03
    2114:	20 e0       	ldi	r18, 0x00	; 0
    2116:	3f ef       	ldi	r19, 0xFF	; 255
    2118:	4f e7       	ldi	r20, 0x7F	; 127
    211a:	57 e4       	ldi	r21, 0x47	; 71
    211c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2120:	18 16       	cp	r1, r24
    2122:	64 f5       	brge	.+88     	; 0x217c <LCD_displayCharacter+0x412>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2124:	fe 01       	movw	r30, r28
    2126:	ed 5b       	subi	r30, 0xBD	; 189
    2128:	ff 4f       	sbci	r31, 0xFF	; 255
    212a:	60 81       	ld	r22, Z
    212c:	71 81       	ldd	r23, Z+1	; 0x01
    212e:	82 81       	ldd	r24, Z+2	; 0x02
    2130:	93 81       	ldd	r25, Z+3	; 0x03
    2132:	20 e0       	ldi	r18, 0x00	; 0
    2134:	30 e0       	ldi	r19, 0x00	; 0
    2136:	40 e2       	ldi	r20, 0x20	; 32
    2138:	51 e4       	ldi	r21, 0x41	; 65
    213a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    213e:	dc 01       	movw	r26, r24
    2140:	cb 01       	movw	r24, r22
    2142:	bc 01       	movw	r22, r24
    2144:	cd 01       	movw	r24, r26
    2146:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    214a:	dc 01       	movw	r26, r24
    214c:	cb 01       	movw	r24, r22
    214e:	9e af       	std	Y+62, r25	; 0x3e
    2150:	8d af       	std	Y+61, r24	; 0x3d
    2152:	0f c0       	rjmp	.+30     	; 0x2172 <LCD_displayCharacter+0x408>
    2154:	88 ec       	ldi	r24, 0xC8	; 200
    2156:	90 e0       	ldi	r25, 0x00	; 0
    2158:	9c af       	std	Y+60, r25	; 0x3c
    215a:	8b af       	std	Y+59, r24	; 0x3b
    215c:	8b ad       	ldd	r24, Y+59	; 0x3b
    215e:	9c ad       	ldd	r25, Y+60	; 0x3c
    2160:	01 97       	sbiw	r24, 0x01	; 1
    2162:	f1 f7       	brne	.-4      	; 0x2160 <LCD_displayCharacter+0x3f6>
    2164:	9c af       	std	Y+60, r25	; 0x3c
    2166:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2168:	8d ad       	ldd	r24, Y+61	; 0x3d
    216a:	9e ad       	ldd	r25, Y+62	; 0x3e
    216c:	01 97       	sbiw	r24, 0x01	; 1
    216e:	9e af       	std	Y+62, r25	; 0x3e
    2170:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2172:	8d ad       	ldd	r24, Y+61	; 0x3d
    2174:	9e ad       	ldd	r25, Y+62	; 0x3e
    2176:	00 97       	sbiw	r24, 0x00	; 0
    2178:	69 f7       	brne	.-38     	; 0x2154 <LCD_displayCharacter+0x3ea>
    217a:	16 c0       	rjmp	.+44     	; 0x21a8 <LCD_displayCharacter+0x43e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    217c:	fe 01       	movw	r30, r28
    217e:	ff 96       	adiw	r30, 0x3f	; 63
    2180:	60 81       	ld	r22, Z
    2182:	71 81       	ldd	r23, Z+1	; 0x01
    2184:	82 81       	ldd	r24, Z+2	; 0x02
    2186:	93 81       	ldd	r25, Z+3	; 0x03
    2188:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    218c:	dc 01       	movw	r26, r24
    218e:	cb 01       	movw	r24, r22
    2190:	9e af       	std	Y+62, r25	; 0x3e
    2192:	8d af       	std	Y+61, r24	; 0x3d
    2194:	8d ad       	ldd	r24, Y+61	; 0x3d
    2196:	9e ad       	ldd	r25, Y+62	; 0x3e
    2198:	9a af       	std	Y+58, r25	; 0x3a
    219a:	89 af       	std	Y+57, r24	; 0x39
    219c:	89 ad       	ldd	r24, Y+57	; 0x39
    219e:	9a ad       	ldd	r25, Y+58	; 0x3a
    21a0:	01 97       	sbiw	r24, 0x01	; 1
    21a2:	f1 f7       	brne	.-4      	; 0x21a0 <LCD_displayCharacter+0x436>
    21a4:	9a af       	std	Y+58, r25	; 0x3a
    21a6:	89 af       	std	Y+57, r24	; 0x39
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | ((data & 0xF0) >> 4);
#endif

	_delay_ms(1); /* Delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* Disable LCD E = 0 */
    21a8:	ab e3       	ldi	r26, 0x3B	; 59
    21aa:	b0 e0       	ldi	r27, 0x00	; 0
    21ac:	eb e3       	ldi	r30, 0x3B	; 59
    21ae:	f0 e0       	ldi	r31, 0x00	; 0
    21b0:	80 81       	ld	r24, Z
    21b2:	87 7f       	andi	r24, 0xF7	; 247
    21b4:	8c 93       	st	X, r24
    21b6:	80 e0       	ldi	r24, 0x00	; 0
    21b8:	90 e0       	ldi	r25, 0x00	; 0
    21ba:	a0 e8       	ldi	r26, 0x80	; 128
    21bc:	bf e3       	ldi	r27, 0x3F	; 63
    21be:	8d ab       	std	Y+53, r24	; 0x35
    21c0:	9e ab       	std	Y+54, r25	; 0x36
    21c2:	af ab       	std	Y+55, r26	; 0x37
    21c4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21c6:	6d a9       	ldd	r22, Y+53	; 0x35
    21c8:	7e a9       	ldd	r23, Y+54	; 0x36
    21ca:	8f a9       	ldd	r24, Y+55	; 0x37
    21cc:	98 ad       	ldd	r25, Y+56	; 0x38
    21ce:	20 e0       	ldi	r18, 0x00	; 0
    21d0:	30 e0       	ldi	r19, 0x00	; 0
    21d2:	4a ef       	ldi	r20, 0xFA	; 250
    21d4:	54 e4       	ldi	r21, 0x44	; 68
    21d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21da:	dc 01       	movw	r26, r24
    21dc:	cb 01       	movw	r24, r22
    21de:	89 ab       	std	Y+49, r24	; 0x31
    21e0:	9a ab       	std	Y+50, r25	; 0x32
    21e2:	ab ab       	std	Y+51, r26	; 0x33
    21e4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    21e6:	69 a9       	ldd	r22, Y+49	; 0x31
    21e8:	7a a9       	ldd	r23, Y+50	; 0x32
    21ea:	8b a9       	ldd	r24, Y+51	; 0x33
    21ec:	9c a9       	ldd	r25, Y+52	; 0x34
    21ee:	20 e0       	ldi	r18, 0x00	; 0
    21f0:	30 e0       	ldi	r19, 0x00	; 0
    21f2:	40 e8       	ldi	r20, 0x80	; 128
    21f4:	5f e3       	ldi	r21, 0x3F	; 63
    21f6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21fa:	88 23       	and	r24, r24
    21fc:	2c f4       	brge	.+10     	; 0x2208 <LCD_displayCharacter+0x49e>
		__ticks = 1;
    21fe:	81 e0       	ldi	r24, 0x01	; 1
    2200:	90 e0       	ldi	r25, 0x00	; 0
    2202:	98 ab       	std	Y+48, r25	; 0x30
    2204:	8f a7       	std	Y+47, r24	; 0x2f
    2206:	3f c0       	rjmp	.+126    	; 0x2286 <LCD_displayCharacter+0x51c>
	else if (__tmp > 65535)
    2208:	69 a9       	ldd	r22, Y+49	; 0x31
    220a:	7a a9       	ldd	r23, Y+50	; 0x32
    220c:	8b a9       	ldd	r24, Y+51	; 0x33
    220e:	9c a9       	ldd	r25, Y+52	; 0x34
    2210:	20 e0       	ldi	r18, 0x00	; 0
    2212:	3f ef       	ldi	r19, 0xFF	; 255
    2214:	4f e7       	ldi	r20, 0x7F	; 127
    2216:	57 e4       	ldi	r21, 0x47	; 71
    2218:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    221c:	18 16       	cp	r1, r24
    221e:	4c f5       	brge	.+82     	; 0x2272 <LCD_displayCharacter+0x508>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2220:	6d a9       	ldd	r22, Y+53	; 0x35
    2222:	7e a9       	ldd	r23, Y+54	; 0x36
    2224:	8f a9       	ldd	r24, Y+55	; 0x37
    2226:	98 ad       	ldd	r25, Y+56	; 0x38
    2228:	20 e0       	ldi	r18, 0x00	; 0
    222a:	30 e0       	ldi	r19, 0x00	; 0
    222c:	40 e2       	ldi	r20, 0x20	; 32
    222e:	51 e4       	ldi	r21, 0x41	; 65
    2230:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2234:	dc 01       	movw	r26, r24
    2236:	cb 01       	movw	r24, r22
    2238:	bc 01       	movw	r22, r24
    223a:	cd 01       	movw	r24, r26
    223c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2240:	dc 01       	movw	r26, r24
    2242:	cb 01       	movw	r24, r22
    2244:	98 ab       	std	Y+48, r25	; 0x30
    2246:	8f a7       	std	Y+47, r24	; 0x2f
    2248:	0f c0       	rjmp	.+30     	; 0x2268 <LCD_displayCharacter+0x4fe>
    224a:	88 ec       	ldi	r24, 0xC8	; 200
    224c:	90 e0       	ldi	r25, 0x00	; 0
    224e:	9e a7       	std	Y+46, r25	; 0x2e
    2250:	8d a7       	std	Y+45, r24	; 0x2d
    2252:	8d a5       	ldd	r24, Y+45	; 0x2d
    2254:	9e a5       	ldd	r25, Y+46	; 0x2e
    2256:	01 97       	sbiw	r24, 0x01	; 1
    2258:	f1 f7       	brne	.-4      	; 0x2256 <LCD_displayCharacter+0x4ec>
    225a:	9e a7       	std	Y+46, r25	; 0x2e
    225c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    225e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2260:	98 a9       	ldd	r25, Y+48	; 0x30
    2262:	01 97       	sbiw	r24, 0x01	; 1
    2264:	98 ab       	std	Y+48, r25	; 0x30
    2266:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2268:	8f a5       	ldd	r24, Y+47	; 0x2f
    226a:	98 a9       	ldd	r25, Y+48	; 0x30
    226c:	00 97       	sbiw	r24, 0x00	; 0
    226e:	69 f7       	brne	.-38     	; 0x224a <LCD_displayCharacter+0x4e0>
    2270:	14 c0       	rjmp	.+40     	; 0x229a <LCD_displayCharacter+0x530>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2272:	69 a9       	ldd	r22, Y+49	; 0x31
    2274:	7a a9       	ldd	r23, Y+50	; 0x32
    2276:	8b a9       	ldd	r24, Y+51	; 0x33
    2278:	9c a9       	ldd	r25, Y+52	; 0x34
    227a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    227e:	dc 01       	movw	r26, r24
    2280:	cb 01       	movw	r24, r22
    2282:	98 ab       	std	Y+48, r25	; 0x30
    2284:	8f a7       	std	Y+47, r24	; 0x2f
    2286:	8f a5       	ldd	r24, Y+47	; 0x2f
    2288:	98 a9       	ldd	r25, Y+48	; 0x30
    228a:	9c a7       	std	Y+44, r25	; 0x2c
    228c:	8b a7       	std	Y+43, r24	; 0x2b
    228e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2290:	9c a5       	ldd	r25, Y+44	; 0x2c
    2292:	01 97       	sbiw	r24, 0x01	; 1
    2294:	f1 f7       	brne	.-4      	; 0x2292 <LCD_displayCharacter+0x528>
    2296:	9c a7       	std	Y+44, r25	; 0x2c
    2298:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* Delay for processing Th = 13ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    229a:	ab e3       	ldi	r26, 0x3B	; 59
    229c:	b0 e0       	ldi	r27, 0x00	; 0
    229e:	eb e3       	ldi	r30, 0x3B	; 59
    22a0:	f0 e0       	ldi	r31, 0x00	; 0
    22a2:	80 81       	ld	r24, Z
    22a4:	88 60       	ori	r24, 0x08	; 8
    22a6:	8c 93       	st	X, r24
    22a8:	80 e0       	ldi	r24, 0x00	; 0
    22aa:	90 e0       	ldi	r25, 0x00	; 0
    22ac:	a0 e8       	ldi	r26, 0x80	; 128
    22ae:	bf e3       	ldi	r27, 0x3F	; 63
    22b0:	8f a3       	std	Y+39, r24	; 0x27
    22b2:	98 a7       	std	Y+40, r25	; 0x28
    22b4:	a9 a7       	std	Y+41, r26	; 0x29
    22b6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22b8:	6f a1       	ldd	r22, Y+39	; 0x27
    22ba:	78 a5       	ldd	r23, Y+40	; 0x28
    22bc:	89 a5       	ldd	r24, Y+41	; 0x29
    22be:	9a a5       	ldd	r25, Y+42	; 0x2a
    22c0:	20 e0       	ldi	r18, 0x00	; 0
    22c2:	30 e0       	ldi	r19, 0x00	; 0
    22c4:	4a ef       	ldi	r20, 0xFA	; 250
    22c6:	54 e4       	ldi	r21, 0x44	; 68
    22c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22cc:	dc 01       	movw	r26, r24
    22ce:	cb 01       	movw	r24, r22
    22d0:	8b a3       	std	Y+35, r24	; 0x23
    22d2:	9c a3       	std	Y+36, r25	; 0x24
    22d4:	ad a3       	std	Y+37, r26	; 0x25
    22d6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    22d8:	6b a1       	ldd	r22, Y+35	; 0x23
    22da:	7c a1       	ldd	r23, Y+36	; 0x24
    22dc:	8d a1       	ldd	r24, Y+37	; 0x25
    22de:	9e a1       	ldd	r25, Y+38	; 0x26
    22e0:	20 e0       	ldi	r18, 0x00	; 0
    22e2:	30 e0       	ldi	r19, 0x00	; 0
    22e4:	40 e8       	ldi	r20, 0x80	; 128
    22e6:	5f e3       	ldi	r21, 0x3F	; 63
    22e8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22ec:	88 23       	and	r24, r24
    22ee:	2c f4       	brge	.+10     	; 0x22fa <LCD_displayCharacter+0x590>
		__ticks = 1;
    22f0:	81 e0       	ldi	r24, 0x01	; 1
    22f2:	90 e0       	ldi	r25, 0x00	; 0
    22f4:	9a a3       	std	Y+34, r25	; 0x22
    22f6:	89 a3       	std	Y+33, r24	; 0x21
    22f8:	3f c0       	rjmp	.+126    	; 0x2378 <LCD_displayCharacter+0x60e>
	else if (__tmp > 65535)
    22fa:	6b a1       	ldd	r22, Y+35	; 0x23
    22fc:	7c a1       	ldd	r23, Y+36	; 0x24
    22fe:	8d a1       	ldd	r24, Y+37	; 0x25
    2300:	9e a1       	ldd	r25, Y+38	; 0x26
    2302:	20 e0       	ldi	r18, 0x00	; 0
    2304:	3f ef       	ldi	r19, 0xFF	; 255
    2306:	4f e7       	ldi	r20, 0x7F	; 127
    2308:	57 e4       	ldi	r21, 0x47	; 71
    230a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    230e:	18 16       	cp	r1, r24
    2310:	4c f5       	brge	.+82     	; 0x2364 <LCD_displayCharacter+0x5fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2312:	6f a1       	ldd	r22, Y+39	; 0x27
    2314:	78 a5       	ldd	r23, Y+40	; 0x28
    2316:	89 a5       	ldd	r24, Y+41	; 0x29
    2318:	9a a5       	ldd	r25, Y+42	; 0x2a
    231a:	20 e0       	ldi	r18, 0x00	; 0
    231c:	30 e0       	ldi	r19, 0x00	; 0
    231e:	40 e2       	ldi	r20, 0x20	; 32
    2320:	51 e4       	ldi	r21, 0x41	; 65
    2322:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2326:	dc 01       	movw	r26, r24
    2328:	cb 01       	movw	r24, r22
    232a:	bc 01       	movw	r22, r24
    232c:	cd 01       	movw	r24, r26
    232e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2332:	dc 01       	movw	r26, r24
    2334:	cb 01       	movw	r24, r22
    2336:	9a a3       	std	Y+34, r25	; 0x22
    2338:	89 a3       	std	Y+33, r24	; 0x21
    233a:	0f c0       	rjmp	.+30     	; 0x235a <LCD_displayCharacter+0x5f0>
    233c:	88 ec       	ldi	r24, 0xC8	; 200
    233e:	90 e0       	ldi	r25, 0x00	; 0
    2340:	98 a3       	std	Y+32, r25	; 0x20
    2342:	8f 8f       	std	Y+31, r24	; 0x1f
    2344:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2346:	98 a1       	ldd	r25, Y+32	; 0x20
    2348:	01 97       	sbiw	r24, 0x01	; 1
    234a:	f1 f7       	brne	.-4      	; 0x2348 <LCD_displayCharacter+0x5de>
    234c:	98 a3       	std	Y+32, r25	; 0x20
    234e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2350:	89 a1       	ldd	r24, Y+33	; 0x21
    2352:	9a a1       	ldd	r25, Y+34	; 0x22
    2354:	01 97       	sbiw	r24, 0x01	; 1
    2356:	9a a3       	std	Y+34, r25	; 0x22
    2358:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    235a:	89 a1       	ldd	r24, Y+33	; 0x21
    235c:	9a a1       	ldd	r25, Y+34	; 0x22
    235e:	00 97       	sbiw	r24, 0x00	; 0
    2360:	69 f7       	brne	.-38     	; 0x233c <LCD_displayCharacter+0x5d2>
    2362:	14 c0       	rjmp	.+40     	; 0x238c <LCD_displayCharacter+0x622>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2364:	6b a1       	ldd	r22, Y+35	; 0x23
    2366:	7c a1       	ldd	r23, Y+36	; 0x24
    2368:	8d a1       	ldd	r24, Y+37	; 0x25
    236a:	9e a1       	ldd	r25, Y+38	; 0x26
    236c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2370:	dc 01       	movw	r26, r24
    2372:	cb 01       	movw	r24, r22
    2374:	9a a3       	std	Y+34, r25	; 0x22
    2376:	89 a3       	std	Y+33, r24	; 0x21
    2378:	89 a1       	ldd	r24, Y+33	; 0x21
    237a:	9a a1       	ldd	r25, Y+34	; 0x22
    237c:	9e 8f       	std	Y+30, r25	; 0x1e
    237e:	8d 8f       	std	Y+29, r24	; 0x1d
    2380:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2382:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2384:	01 97       	sbiw	r24, 0x01	; 1
    2386:	f1 f7       	brne	.-4      	; 0x2384 <LCD_displayCharacter+0x61a>
    2388:	9e 8f       	std	Y+30, r25	; 0x1e
    238a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* Delay for processing Tpw - Tdws = 190ns */

	/* Out the lowest 4 bits of the required data to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | ((data & 0x0F) << 4);
    238c:	ab e3       	ldi	r26, 0x3B	; 59
    238e:	b0 e0       	ldi	r27, 0x00	; 0
    2390:	eb e3       	ldi	r30, 0x3B	; 59
    2392:	f0 e0       	ldi	r31, 0x00	; 0
    2394:	80 81       	ld	r24, Z
    2396:	28 2f       	mov	r18, r24
    2398:	2f 70       	andi	r18, 0x0F	; 15
    239a:	fe 01       	movw	r30, r28
    239c:	ed 59       	subi	r30, 0x9D	; 157
    239e:	ff 4f       	sbci	r31, 0xFF	; 255
    23a0:	80 81       	ld	r24, Z
    23a2:	88 2f       	mov	r24, r24
    23a4:	90 e0       	ldi	r25, 0x00	; 0
    23a6:	82 95       	swap	r24
    23a8:	92 95       	swap	r25
    23aa:	90 7f       	andi	r25, 0xF0	; 240
    23ac:	98 27       	eor	r25, r24
    23ae:	80 7f       	andi	r24, 0xF0	; 240
    23b0:	98 27       	eor	r25, r24
    23b2:	82 2b       	or	r24, r18
    23b4:	8c 93       	st	X, r24
    23b6:	80 e0       	ldi	r24, 0x00	; 0
    23b8:	90 e0       	ldi	r25, 0x00	; 0
    23ba:	a0 e8       	ldi	r26, 0x80	; 128
    23bc:	bf e3       	ldi	r27, 0x3F	; 63
    23be:	89 8f       	std	Y+25, r24	; 0x19
    23c0:	9a 8f       	std	Y+26, r25	; 0x1a
    23c2:	ab 8f       	std	Y+27, r26	; 0x1b
    23c4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23c6:	69 8d       	ldd	r22, Y+25	; 0x19
    23c8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23ca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23cc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23ce:	20 e0       	ldi	r18, 0x00	; 0
    23d0:	30 e0       	ldi	r19, 0x00	; 0
    23d2:	4a ef       	ldi	r20, 0xFA	; 250
    23d4:	54 e4       	ldi	r21, 0x44	; 68
    23d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23da:	dc 01       	movw	r26, r24
    23dc:	cb 01       	movw	r24, r22
    23de:	8d 8b       	std	Y+21, r24	; 0x15
    23e0:	9e 8b       	std	Y+22, r25	; 0x16
    23e2:	af 8b       	std	Y+23, r26	; 0x17
    23e4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    23e6:	6d 89       	ldd	r22, Y+21	; 0x15
    23e8:	7e 89       	ldd	r23, Y+22	; 0x16
    23ea:	8f 89       	ldd	r24, Y+23	; 0x17
    23ec:	98 8d       	ldd	r25, Y+24	; 0x18
    23ee:	20 e0       	ldi	r18, 0x00	; 0
    23f0:	30 e0       	ldi	r19, 0x00	; 0
    23f2:	40 e8       	ldi	r20, 0x80	; 128
    23f4:	5f e3       	ldi	r21, 0x3F	; 63
    23f6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23fa:	88 23       	and	r24, r24
    23fc:	2c f4       	brge	.+10     	; 0x2408 <LCD_displayCharacter+0x69e>
		__ticks = 1;
    23fe:	81 e0       	ldi	r24, 0x01	; 1
    2400:	90 e0       	ldi	r25, 0x00	; 0
    2402:	9c 8b       	std	Y+20, r25	; 0x14
    2404:	8b 8b       	std	Y+19, r24	; 0x13
    2406:	3f c0       	rjmp	.+126    	; 0x2486 <LCD_displayCharacter+0x71c>
	else if (__tmp > 65535)
    2408:	6d 89       	ldd	r22, Y+21	; 0x15
    240a:	7e 89       	ldd	r23, Y+22	; 0x16
    240c:	8f 89       	ldd	r24, Y+23	; 0x17
    240e:	98 8d       	ldd	r25, Y+24	; 0x18
    2410:	20 e0       	ldi	r18, 0x00	; 0
    2412:	3f ef       	ldi	r19, 0xFF	; 255
    2414:	4f e7       	ldi	r20, 0x7F	; 127
    2416:	57 e4       	ldi	r21, 0x47	; 71
    2418:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    241c:	18 16       	cp	r1, r24
    241e:	4c f5       	brge	.+82     	; 0x2472 <LCD_displayCharacter+0x708>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2420:	69 8d       	ldd	r22, Y+25	; 0x19
    2422:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2424:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2426:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2428:	20 e0       	ldi	r18, 0x00	; 0
    242a:	30 e0       	ldi	r19, 0x00	; 0
    242c:	40 e2       	ldi	r20, 0x20	; 32
    242e:	51 e4       	ldi	r21, 0x41	; 65
    2430:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2434:	dc 01       	movw	r26, r24
    2436:	cb 01       	movw	r24, r22
    2438:	bc 01       	movw	r22, r24
    243a:	cd 01       	movw	r24, r26
    243c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2440:	dc 01       	movw	r26, r24
    2442:	cb 01       	movw	r24, r22
    2444:	9c 8b       	std	Y+20, r25	; 0x14
    2446:	8b 8b       	std	Y+19, r24	; 0x13
    2448:	0f c0       	rjmp	.+30     	; 0x2468 <LCD_displayCharacter+0x6fe>
    244a:	88 ec       	ldi	r24, 0xC8	; 200
    244c:	90 e0       	ldi	r25, 0x00	; 0
    244e:	9a 8b       	std	Y+18, r25	; 0x12
    2450:	89 8b       	std	Y+17, r24	; 0x11
    2452:	89 89       	ldd	r24, Y+17	; 0x11
    2454:	9a 89       	ldd	r25, Y+18	; 0x12
    2456:	01 97       	sbiw	r24, 0x01	; 1
    2458:	f1 f7       	brne	.-4      	; 0x2456 <LCD_displayCharacter+0x6ec>
    245a:	9a 8b       	std	Y+18, r25	; 0x12
    245c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    245e:	8b 89       	ldd	r24, Y+19	; 0x13
    2460:	9c 89       	ldd	r25, Y+20	; 0x14
    2462:	01 97       	sbiw	r24, 0x01	; 1
    2464:	9c 8b       	std	Y+20, r25	; 0x14
    2466:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2468:	8b 89       	ldd	r24, Y+19	; 0x13
    246a:	9c 89       	ldd	r25, Y+20	; 0x14
    246c:	00 97       	sbiw	r24, 0x00	; 0
    246e:	69 f7       	brne	.-38     	; 0x244a <LCD_displayCharacter+0x6e0>
    2470:	14 c0       	rjmp	.+40     	; 0x249a <LCD_displayCharacter+0x730>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2472:	6d 89       	ldd	r22, Y+21	; 0x15
    2474:	7e 89       	ldd	r23, Y+22	; 0x16
    2476:	8f 89       	ldd	r24, Y+23	; 0x17
    2478:	98 8d       	ldd	r25, Y+24	; 0x18
    247a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    247e:	dc 01       	movw	r26, r24
    2480:	cb 01       	movw	r24, r22
    2482:	9c 8b       	std	Y+20, r25	; 0x14
    2484:	8b 8b       	std	Y+19, r24	; 0x13
    2486:	8b 89       	ldd	r24, Y+19	; 0x13
    2488:	9c 89       	ldd	r25, Y+20	; 0x14
    248a:	98 8b       	std	Y+16, r25	; 0x10
    248c:	8f 87       	std	Y+15, r24	; 0x0f
    248e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2490:	98 89       	ldd	r25, Y+16	; 0x10
    2492:	01 97       	sbiw	r24, 0x01	; 1
    2494:	f1 f7       	brne	.-4      	; 0x2492 <LCD_displayCharacter+0x728>
    2496:	98 8b       	std	Y+16, r25	; 0x10
    2498:	8f 87       	std	Y+15, r24	; 0x0f
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | (data & 0x0F);
#endif

	_delay_ms(1); /* Delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E = 0 */
    249a:	ab e3       	ldi	r26, 0x3B	; 59
    249c:	b0 e0       	ldi	r27, 0x00	; 0
    249e:	eb e3       	ldi	r30, 0x3B	; 59
    24a0:	f0 e0       	ldi	r31, 0x00	; 0
    24a2:	80 81       	ld	r24, Z
    24a4:	87 7f       	andi	r24, 0xF7	; 247
    24a6:	8c 93       	st	X, r24
    24a8:	80 e0       	ldi	r24, 0x00	; 0
    24aa:	90 e0       	ldi	r25, 0x00	; 0
    24ac:	a0 e8       	ldi	r26, 0x80	; 128
    24ae:	bf e3       	ldi	r27, 0x3F	; 63
    24b0:	8b 87       	std	Y+11, r24	; 0x0b
    24b2:	9c 87       	std	Y+12, r25	; 0x0c
    24b4:	ad 87       	std	Y+13, r26	; 0x0d
    24b6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    24ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    24bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    24be:	9e 85       	ldd	r25, Y+14	; 0x0e
    24c0:	20 e0       	ldi	r18, 0x00	; 0
    24c2:	30 e0       	ldi	r19, 0x00	; 0
    24c4:	4a ef       	ldi	r20, 0xFA	; 250
    24c6:	54 e4       	ldi	r21, 0x44	; 68
    24c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24cc:	dc 01       	movw	r26, r24
    24ce:	cb 01       	movw	r24, r22
    24d0:	8f 83       	std	Y+7, r24	; 0x07
    24d2:	98 87       	std	Y+8, r25	; 0x08
    24d4:	a9 87       	std	Y+9, r26	; 0x09
    24d6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24d8:	6f 81       	ldd	r22, Y+7	; 0x07
    24da:	78 85       	ldd	r23, Y+8	; 0x08
    24dc:	89 85       	ldd	r24, Y+9	; 0x09
    24de:	9a 85       	ldd	r25, Y+10	; 0x0a
    24e0:	20 e0       	ldi	r18, 0x00	; 0
    24e2:	30 e0       	ldi	r19, 0x00	; 0
    24e4:	40 e8       	ldi	r20, 0x80	; 128
    24e6:	5f e3       	ldi	r21, 0x3F	; 63
    24e8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24ec:	88 23       	and	r24, r24
    24ee:	2c f4       	brge	.+10     	; 0x24fa <LCD_displayCharacter+0x790>
		__ticks = 1;
    24f0:	81 e0       	ldi	r24, 0x01	; 1
    24f2:	90 e0       	ldi	r25, 0x00	; 0
    24f4:	9e 83       	std	Y+6, r25	; 0x06
    24f6:	8d 83       	std	Y+5, r24	; 0x05
    24f8:	3f c0       	rjmp	.+126    	; 0x2578 <LCD_displayCharacter+0x80e>
	else if (__tmp > 65535)
    24fa:	6f 81       	ldd	r22, Y+7	; 0x07
    24fc:	78 85       	ldd	r23, Y+8	; 0x08
    24fe:	89 85       	ldd	r24, Y+9	; 0x09
    2500:	9a 85       	ldd	r25, Y+10	; 0x0a
    2502:	20 e0       	ldi	r18, 0x00	; 0
    2504:	3f ef       	ldi	r19, 0xFF	; 255
    2506:	4f e7       	ldi	r20, 0x7F	; 127
    2508:	57 e4       	ldi	r21, 0x47	; 71
    250a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    250e:	18 16       	cp	r1, r24
    2510:	4c f5       	brge	.+82     	; 0x2564 <LCD_displayCharacter+0x7fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2512:	6b 85       	ldd	r22, Y+11	; 0x0b
    2514:	7c 85       	ldd	r23, Y+12	; 0x0c
    2516:	8d 85       	ldd	r24, Y+13	; 0x0d
    2518:	9e 85       	ldd	r25, Y+14	; 0x0e
    251a:	20 e0       	ldi	r18, 0x00	; 0
    251c:	30 e0       	ldi	r19, 0x00	; 0
    251e:	40 e2       	ldi	r20, 0x20	; 32
    2520:	51 e4       	ldi	r21, 0x41	; 65
    2522:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2526:	dc 01       	movw	r26, r24
    2528:	cb 01       	movw	r24, r22
    252a:	bc 01       	movw	r22, r24
    252c:	cd 01       	movw	r24, r26
    252e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2532:	dc 01       	movw	r26, r24
    2534:	cb 01       	movw	r24, r22
    2536:	9e 83       	std	Y+6, r25	; 0x06
    2538:	8d 83       	std	Y+5, r24	; 0x05
    253a:	0f c0       	rjmp	.+30     	; 0x255a <LCD_displayCharacter+0x7f0>
    253c:	88 ec       	ldi	r24, 0xC8	; 200
    253e:	90 e0       	ldi	r25, 0x00	; 0
    2540:	9c 83       	std	Y+4, r25	; 0x04
    2542:	8b 83       	std	Y+3, r24	; 0x03
    2544:	8b 81       	ldd	r24, Y+3	; 0x03
    2546:	9c 81       	ldd	r25, Y+4	; 0x04
    2548:	01 97       	sbiw	r24, 0x01	; 1
    254a:	f1 f7       	brne	.-4      	; 0x2548 <LCD_displayCharacter+0x7de>
    254c:	9c 83       	std	Y+4, r25	; 0x04
    254e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2550:	8d 81       	ldd	r24, Y+5	; 0x05
    2552:	9e 81       	ldd	r25, Y+6	; 0x06
    2554:	01 97       	sbiw	r24, 0x01	; 1
    2556:	9e 83       	std	Y+6, r25	; 0x06
    2558:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    255a:	8d 81       	ldd	r24, Y+5	; 0x05
    255c:	9e 81       	ldd	r25, Y+6	; 0x06
    255e:	00 97       	sbiw	r24, 0x00	; 0
    2560:	69 f7       	brne	.-38     	; 0x253c <LCD_displayCharacter+0x7d2>
    2562:	14 c0       	rjmp	.+40     	; 0x258c <LCD_displayCharacter+0x822>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2564:	6f 81       	ldd	r22, Y+7	; 0x07
    2566:	78 85       	ldd	r23, Y+8	; 0x08
    2568:	89 85       	ldd	r24, Y+9	; 0x09
    256a:	9a 85       	ldd	r25, Y+10	; 0x0a
    256c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2570:	dc 01       	movw	r26, r24
    2572:	cb 01       	movw	r24, r22
    2574:	9e 83       	std	Y+6, r25	; 0x06
    2576:	8d 83       	std	Y+5, r24	; 0x05
    2578:	8d 81       	ldd	r24, Y+5	; 0x05
    257a:	9e 81       	ldd	r25, Y+6	; 0x06
    257c:	9a 83       	std	Y+2, r25	; 0x02
    257e:	89 83       	std	Y+1, r24	; 0x01
    2580:	89 81       	ldd	r24, Y+1	; 0x01
    2582:	9a 81       	ldd	r25, Y+2	; 0x02
    2584:	01 97       	sbiw	r24, 0x01	; 1
    2586:	f1 f7       	brne	.-4      	; 0x2584 <LCD_displayCharacter+0x81a>
    2588:	9a 83       	std	Y+2, r25	; 0x02
    258a:	89 83       	std	Y+1, r24	; 0x01
	LCD_DATA_PORT = data; /* Out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* Delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* Disable LCD E = 0 */
	_delay_ms(1); /* Delay for processing Th = 13ns */
#endif
}
    258c:	cd 59       	subi	r28, 0x9D	; 157
    258e:	df 4f       	sbci	r29, 0xFF	; 255
    2590:	0f b6       	in	r0, 0x3f	; 63
    2592:	f8 94       	cli
    2594:	de bf       	out	0x3e, r29	; 62
    2596:	0f be       	out	0x3f, r0	; 63
    2598:	cd bf       	out	0x3d, r28	; 61
    259a:	cf 91       	pop	r28
    259c:	df 91       	pop	r29
    259e:	1f 91       	pop	r17
    25a0:	0f 91       	pop	r16
    25a2:	08 95       	ret

000025a4 <LCD_displayString>:

void LCD_displayString(const uint8_t *Str)
{
    25a4:	df 93       	push	r29
    25a6:	cf 93       	push	r28
    25a8:	00 d0       	rcall	.+0      	; 0x25aa <LCD_displayString+0x6>
    25aa:	0f 92       	push	r0
    25ac:	cd b7       	in	r28, 0x3d	; 61
    25ae:	de b7       	in	r29, 0x3e	; 62
    25b0:	9b 83       	std	Y+3, r25	; 0x03
    25b2:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t i = 0;
    25b4:	19 82       	std	Y+1, r1	; 0x01
    25b6:	0e c0       	rjmp	.+28     	; 0x25d4 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    25b8:	89 81       	ldd	r24, Y+1	; 0x01
    25ba:	28 2f       	mov	r18, r24
    25bc:	30 e0       	ldi	r19, 0x00	; 0
    25be:	8a 81       	ldd	r24, Y+2	; 0x02
    25c0:	9b 81       	ldd	r25, Y+3	; 0x03
    25c2:	fc 01       	movw	r30, r24
    25c4:	e2 0f       	add	r30, r18
    25c6:	f3 1f       	adc	r31, r19
    25c8:	80 81       	ld	r24, Z
    25ca:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <LCD_displayCharacter>
		i++;
    25ce:	89 81       	ldd	r24, Y+1	; 0x01
    25d0:	8f 5f       	subi	r24, 0xFF	; 255
    25d2:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const uint8_t *Str)
{
	uint8_t i = 0;
	while(Str[i] != '\0')
    25d4:	89 81       	ldd	r24, Y+1	; 0x01
    25d6:	28 2f       	mov	r18, r24
    25d8:	30 e0       	ldi	r19, 0x00	; 0
    25da:	8a 81       	ldd	r24, Y+2	; 0x02
    25dc:	9b 81       	ldd	r25, Y+3	; 0x03
    25de:	fc 01       	movw	r30, r24
    25e0:	e2 0f       	add	r30, r18
    25e2:	f3 1f       	adc	r31, r19
    25e4:	80 81       	ld	r24, Z
    25e6:	88 23       	and	r24, r24
    25e8:	39 f7       	brne	.-50     	; 0x25b8 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(Str[i]);
		i++;
	}
}
    25ea:	0f 90       	pop	r0
    25ec:	0f 90       	pop	r0
    25ee:	0f 90       	pop	r0
    25f0:	cf 91       	pop	r28
    25f2:	df 91       	pop	r29
    25f4:	08 95       	ret

000025f6 <LCD_goToRowColumn>:

void LCD_goToRowColumn(uint8_t row, uint8_t col)
{
    25f6:	df 93       	push	r29
    25f8:	cf 93       	push	r28
    25fa:	00 d0       	rcall	.+0      	; 0x25fc <LCD_goToRowColumn+0x6>
    25fc:	00 d0       	rcall	.+0      	; 0x25fe <LCD_goToRowColumn+0x8>
    25fe:	0f 92       	push	r0
    2600:	cd b7       	in	r28, 0x3d	; 61
    2602:	de b7       	in	r29, 0x3e	; 62
    2604:	8a 83       	std	Y+2, r24	; 0x02
    2606:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t Address;
	
	/* First of all calculate the required address */
	switch(row)
    2608:	8a 81       	ldd	r24, Y+2	; 0x02
    260a:	28 2f       	mov	r18, r24
    260c:	30 e0       	ldi	r19, 0x00	; 0
    260e:	3d 83       	std	Y+5, r19	; 0x05
    2610:	2c 83       	std	Y+4, r18	; 0x04
    2612:	8c 81       	ldd	r24, Y+4	; 0x04
    2614:	9d 81       	ldd	r25, Y+5	; 0x05
    2616:	81 30       	cpi	r24, 0x01	; 1
    2618:	91 05       	cpc	r25, r1
    261a:	c1 f0       	breq	.+48     	; 0x264c <LCD_goToRowColumn+0x56>
    261c:	2c 81       	ldd	r18, Y+4	; 0x04
    261e:	3d 81       	ldd	r19, Y+5	; 0x05
    2620:	22 30       	cpi	r18, 0x02	; 2
    2622:	31 05       	cpc	r19, r1
    2624:	2c f4       	brge	.+10     	; 0x2630 <LCD_goToRowColumn+0x3a>
    2626:	8c 81       	ldd	r24, Y+4	; 0x04
    2628:	9d 81       	ldd	r25, Y+5	; 0x05
    262a:	00 97       	sbiw	r24, 0x00	; 0
    262c:	61 f0       	breq	.+24     	; 0x2646 <LCD_goToRowColumn+0x50>
    262e:	19 c0       	rjmp	.+50     	; 0x2662 <LCD_goToRowColumn+0x6c>
    2630:	2c 81       	ldd	r18, Y+4	; 0x04
    2632:	3d 81       	ldd	r19, Y+5	; 0x05
    2634:	22 30       	cpi	r18, 0x02	; 2
    2636:	31 05       	cpc	r19, r1
    2638:	69 f0       	breq	.+26     	; 0x2654 <LCD_goToRowColumn+0x5e>
    263a:	8c 81       	ldd	r24, Y+4	; 0x04
    263c:	9d 81       	ldd	r25, Y+5	; 0x05
    263e:	83 30       	cpi	r24, 0x03	; 3
    2640:	91 05       	cpc	r25, r1
    2642:	61 f0       	breq	.+24     	; 0x265c <LCD_goToRowColumn+0x66>
    2644:	0e c0       	rjmp	.+28     	; 0x2662 <LCD_goToRowColumn+0x6c>
	{
		case 0:
			Address=col;
    2646:	8b 81       	ldd	r24, Y+3	; 0x03
    2648:	89 83       	std	Y+1, r24	; 0x01
    264a:	0b c0       	rjmp	.+22     	; 0x2662 <LCD_goToRowColumn+0x6c>
			break;
		case 1:
			Address=col+0x40;
    264c:	8b 81       	ldd	r24, Y+3	; 0x03
    264e:	80 5c       	subi	r24, 0xC0	; 192
    2650:	89 83       	std	Y+1, r24	; 0x01
    2652:	07 c0       	rjmp	.+14     	; 0x2662 <LCD_goToRowColumn+0x6c>
			break;
		case 2:
			Address=col+0x10;
    2654:	8b 81       	ldd	r24, Y+3	; 0x03
    2656:	80 5f       	subi	r24, 0xF0	; 240
    2658:	89 83       	std	Y+1, r24	; 0x01
    265a:	03 c0       	rjmp	.+6      	; 0x2662 <LCD_goToRowColumn+0x6c>
			break;
		case 3:
			Address=col+0x50;
    265c:	8b 81       	ldd	r24, Y+3	; 0x03
    265e:	80 5b       	subi	r24, 0xB0	; 176
    2660:	89 83       	std	Y+1, r24	; 0x01
	}					
	/* 
	 * To write to a specific address in the LCD 
	 * we need to apply the corresponding command 0b10000000+Address 
	 */
	LCD_sendCommand(Address | SET_CURSOR_LOCATION); 
    2662:	89 81       	ldd	r24, Y+1	; 0x01
    2664:	80 68       	ori	r24, 0x80	; 128
    2666:	0e 94 98 0a 	call	0x1530	; 0x1530 <LCD_sendCommand>
}
    266a:	0f 90       	pop	r0
    266c:	0f 90       	pop	r0
    266e:	0f 90       	pop	r0
    2670:	0f 90       	pop	r0
    2672:	0f 90       	pop	r0
    2674:	cf 91       	pop	r28
    2676:	df 91       	pop	r29
    2678:	08 95       	ret

0000267a <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8_t row, uint8_t col, const char * Str)
{
    267a:	df 93       	push	r29
    267c:	cf 93       	push	r28
    267e:	00 d0       	rcall	.+0      	; 0x2680 <LCD_displayStringRowColumn+0x6>
    2680:	00 d0       	rcall	.+0      	; 0x2682 <LCD_displayStringRowColumn+0x8>
    2682:	cd b7       	in	r28, 0x3d	; 61
    2684:	de b7       	in	r29, 0x3e	; 62
    2686:	89 83       	std	Y+1, r24	; 0x01
    2688:	6a 83       	std	Y+2, r22	; 0x02
    268a:	5c 83       	std	Y+4, r21	; 0x04
    268c:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(row, col); /* Go to to the required LCD position */
    268e:	89 81       	ldd	r24, Y+1	; 0x01
    2690:	6a 81       	ldd	r22, Y+2	; 0x02
    2692:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <LCD_goToRowColumn>
	LCD_displayString(Str); /* Display the string */
    2696:	8b 81       	ldd	r24, Y+3	; 0x03
    2698:	9c 81       	ldd	r25, Y+4	; 0x04
    269a:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <LCD_displayString>
}
    269e:	0f 90       	pop	r0
    26a0:	0f 90       	pop	r0
    26a2:	0f 90       	pop	r0
    26a4:	0f 90       	pop	r0
    26a6:	cf 91       	pop	r28
    26a8:	df 91       	pop	r29
    26aa:	08 95       	ret

000026ac <LCD_intgerToString>:

void LCD_intgerToString(int32_t data)
{
    26ac:	df 93       	push	r29
    26ae:	cf 93       	push	r28
    26b0:	cd b7       	in	r28, 0x3d	; 61
    26b2:	de b7       	in	r29, 0x3e	; 62
    26b4:	64 97       	sbiw	r28, 0x14	; 20
    26b6:	0f b6       	in	r0, 0x3f	; 63
    26b8:	f8 94       	cli
    26ba:	de bf       	out	0x3e, r29	; 62
    26bc:	0f be       	out	0x3f, r0	; 63
    26be:	cd bf       	out	0x3d, r28	; 61
    26c0:	69 8b       	std	Y+17, r22	; 0x11
    26c2:	7a 8b       	std	Y+18, r23	; 0x12
    26c4:	8b 8b       	std	Y+19, r24	; 0x13
    26c6:	9c 8b       	std	Y+20, r25	; 0x14
   char buff[16]; /* String to hold the ASCII result */
   itoa(data,buff,10); /* 10 for decimal */
    26c8:	89 89       	ldd	r24, Y+17	; 0x11
    26ca:	9a 89       	ldd	r25, Y+18	; 0x12
    26cc:	9e 01       	movw	r18, r28
    26ce:	2f 5f       	subi	r18, 0xFF	; 255
    26d0:	3f 4f       	sbci	r19, 0xFF	; 255
    26d2:	b9 01       	movw	r22, r18
    26d4:	4a e0       	ldi	r20, 0x0A	; 10
    26d6:	50 e0       	ldi	r21, 0x00	; 0
    26d8:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <itoa>
   LCD_displayString(buff);
    26dc:	ce 01       	movw	r24, r28
    26de:	01 96       	adiw	r24, 0x01	; 1
    26e0:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <LCD_displayString>
}
    26e4:	64 96       	adiw	r28, 0x14	; 20
    26e6:	0f b6       	in	r0, 0x3f	; 63
    26e8:	f8 94       	cli
    26ea:	de bf       	out	0x3e, r29	; 62
    26ec:	0f be       	out	0x3f, r0	; 63
    26ee:	cd bf       	out	0x3d, r28	; 61
    26f0:	cf 91       	pop	r28
    26f2:	df 91       	pop	r29
    26f4:	08 95       	ret

000026f6 <LCD_clearScreen>:

void LCD_clearScreen(void)
{
    26f6:	df 93       	push	r29
    26f8:	cf 93       	push	r28
    26fa:	cd b7       	in	r28, 0x3d	; 61
    26fc:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND); /* Clear display */
    26fe:	81 e0       	ldi	r24, 0x01	; 1
    2700:	0e 94 98 0a 	call	0x1530	; 0x1530 <LCD_sendCommand>
}
    2704:	cf 91       	pop	r28
    2706:	df 91       	pop	r29
    2708:	08 95       	ret

0000270a <KeyPad_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8_t KeyPad_getPressedKey(void)
{
    270a:	df 93       	push	r29
    270c:	cf 93       	push	r28
    270e:	00 d0       	rcall	.+0      	; 0x2710 <KeyPad_getPressedKey+0x6>
    2710:	cd b7       	in	r28, 0x3d	; 61
    2712:	de b7       	in	r29, 0x3e	; 62
	uint8_t col,row;
	
	while(1)
	{
		for(col= 0; col < N_col; col++) /* Loop for columns */
    2714:	1a 82       	std	Y+2, r1	; 0x02
    2716:	5a c0       	rjmp	.+180    	; 0x27cc <KeyPad_getPressedKey+0xc2>
			/* 
			 * Each time only one of the column pins will be output and 
			 * the rest will be input pins include the row pins 
			 * KEYPAD_PORT = (0b00100000<<col);
			 */ 
			DIO_setPinDirection(KEYPAD_PORT, (KEYPAD_COL_PIN + col), HIGH);
    2718:	8a 81       	ldd	r24, Y+2	; 0x02
    271a:	98 2f       	mov	r25, r24
    271c:	9b 5f       	subi	r25, 0xFB	; 251
    271e:	82 e0       	ldi	r24, 0x02	; 2
    2720:	69 2f       	mov	r22, r25
    2722:	41 e0       	ldi	r20, 0x01	; 1
    2724:	0e 94 33 06 	call	0xc66	; 0xc66 <DIO_setPinDirection>
			/* 
			 * Enable the internal pull up resistors for the rows pins and
			 * Clear the output pin column in this trace
			 * KEYPAD_PORT = (~(0b00100000<<col));
			 */ 
			DIO_writePort(KEYPAD_PORT, ENABLE_PULL_UP);
    2728:	82 e0       	ldi	r24, 0x02	; 2
    272a:	6c ef       	ldi	r22, 0xFC	; 252
    272c:	0e 94 4f 07 	call	0xe9e	; 0xe9e <DIO_writePort>

			DIO_writePin(KEYPAD_PORT, (KEYPAD_COL_PIN + col), LOW);
    2730:	8a 81       	ldd	r24, Y+2	; 0x02
    2732:	98 2f       	mov	r25, r24
    2734:	9b 5f       	subi	r25, 0xFB	; 251
    2736:	82 e0       	ldi	r24, 0x02	; 2
    2738:	69 2f       	mov	r22, r25
    273a:	40 e0       	ldi	r20, 0x00	; 0
    273c:	0e 94 9c 07 	call	0xf38	; 0xf38 <DIO_writePin>

			for(row = KEYPAD_ROW_PIN; row < (N_row + KEYPAD_ROW_PIN); row++) /* Loop for rows */
    2740:	82 e0       	ldi	r24, 0x02	; 2
    2742:	89 83       	std	Y+1, r24	; 0x01
    2744:	3c c0       	rjmp	.+120    	; 0x27be <KeyPad_getPressedKey+0xb4>
			{
				if(BIT_IS_CLEAR(KEYPAD_PORT_IN, row)) /* If the switch is press in this row */
    2746:	e3 e3       	ldi	r30, 0x33	; 51
    2748:	f0 e0       	ldi	r31, 0x00	; 0
    274a:	80 81       	ld	r24, Z
    274c:	28 2f       	mov	r18, r24
    274e:	30 e0       	ldi	r19, 0x00	; 0
    2750:	89 81       	ldd	r24, Y+1	; 0x01
    2752:	88 2f       	mov	r24, r24
    2754:	90 e0       	ldi	r25, 0x00	; 0
    2756:	a9 01       	movw	r20, r18
    2758:	02 c0       	rjmp	.+4      	; 0x275e <KeyPad_getPressedKey+0x54>
    275a:	55 95       	asr	r21
    275c:	47 95       	ror	r20
    275e:	8a 95       	dec	r24
    2760:	e2 f7       	brpl	.-8      	; 0x275a <KeyPad_getPressedKey+0x50>
    2762:	ca 01       	movw	r24, r20
    2764:	81 70       	andi	r24, 0x01	; 1
    2766:	90 70       	andi	r25, 0x00	; 0
    2768:	00 97       	sbiw	r24, 0x00	; 0
    276a:	31 f5       	brne	.+76     	; 0x27b8 <KeyPad_getPressedKey+0xae>
				{
					while(BIT_IS_CLEAR(KEYPAD_PORT_IN, row));    /* de-bouncing */
    276c:	e3 e3       	ldi	r30, 0x33	; 51
    276e:	f0 e0       	ldi	r31, 0x00	; 0
    2770:	80 81       	ld	r24, Z
    2772:	28 2f       	mov	r18, r24
    2774:	30 e0       	ldi	r19, 0x00	; 0
    2776:	89 81       	ldd	r24, Y+1	; 0x01
    2778:	88 2f       	mov	r24, r24
    277a:	90 e0       	ldi	r25, 0x00	; 0
    277c:	a9 01       	movw	r20, r18
    277e:	02 c0       	rjmp	.+4      	; 0x2784 <KeyPad_getPressedKey+0x7a>
    2780:	55 95       	asr	r21
    2782:	47 95       	ror	r20
    2784:	8a 95       	dec	r24
    2786:	e2 f7       	brpl	.-8      	; 0x2780 <KeyPad_getPressedKey+0x76>
    2788:	ca 01       	movw	r24, r20
    278a:	81 70       	andi	r24, 0x01	; 1
    278c:	90 70       	andi	r25, 0x00	; 0
    278e:	00 97       	sbiw	r24, 0x00	; 0
    2790:	69 f3       	breq	.-38     	; 0x276c <KeyPad_getPressedKey+0x62>
					#if (N_col == 3)  
						return KeyPad_4x3_adjustKeyNumber(((row-KEYPAD_ROW_PIN) * N_col) + col+1);
    2792:	89 81       	ldd	r24, Y+1	; 0x01
    2794:	28 2f       	mov	r18, r24
    2796:	30 e0       	ldi	r19, 0x00	; 0
    2798:	c9 01       	movw	r24, r18
    279a:	88 0f       	add	r24, r24
    279c:	99 1f       	adc	r25, r25
    279e:	82 0f       	add	r24, r18
    27a0:	93 1f       	adc	r25, r19
    27a2:	98 2f       	mov	r25, r24
    27a4:	8a 81       	ldd	r24, Y+2	; 0x02
    27a6:	89 0f       	add	r24, r25
    27a8:	85 50       	subi	r24, 0x05	; 5
    27aa:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <KeyPad_4x3_adjustKeyNumber>
					#endif
				}
			}
		}
	}	
}
    27ae:	0f 90       	pop	r0
    27b0:	0f 90       	pop	r0
    27b2:	cf 91       	pop	r28
    27b4:	df 91       	pop	r29
    27b6:	08 95       	ret
			 */ 
			DIO_writePort(KEYPAD_PORT, ENABLE_PULL_UP);

			DIO_writePin(KEYPAD_PORT, (KEYPAD_COL_PIN + col), LOW);

			for(row = KEYPAD_ROW_PIN; row < (N_row + KEYPAD_ROW_PIN); row++) /* Loop for rows */
    27b8:	89 81       	ldd	r24, Y+1	; 0x01
    27ba:	8f 5f       	subi	r24, 0xFF	; 255
    27bc:	89 83       	std	Y+1, r24	; 0x01
    27be:	89 81       	ldd	r24, Y+1	; 0x01
    27c0:	85 30       	cpi	r24, 0x05	; 5
    27c2:	08 f4       	brcc	.+2      	; 0x27c6 <KeyPad_getPressedKey+0xbc>
    27c4:	c0 cf       	rjmp	.-128    	; 0x2746 <KeyPad_getPressedKey+0x3c>
{
	uint8_t col,row;
	
	while(1)
	{
		for(col= 0; col < N_col; col++) /* Loop for columns */
    27c6:	8a 81       	ldd	r24, Y+2	; 0x02
    27c8:	8f 5f       	subi	r24, 0xFF	; 255
    27ca:	8a 83       	std	Y+2, r24	; 0x02
    27cc:	8a 81       	ldd	r24, Y+2	; 0x02
    27ce:	83 30       	cpi	r24, 0x03	; 3
    27d0:	08 f4       	brcc	.+2      	; 0x27d4 <KeyPad_getPressedKey+0xca>
    27d2:	a2 cf       	rjmp	.-188    	; 0x2718 <KeyPad_getPressedKey+0xe>
    27d4:	9f cf       	rjmp	.-194    	; 0x2714 <KeyPad_getPressedKey+0xa>

000027d6 <KeyPad_4x3_adjustKeyNumber>:
}

#if (N_col == 3) 

static uint8_t KeyPad_4x3_adjustKeyNumber(uint8_t au8_button_number)
{
    27d6:	df 93       	push	r29
    27d8:	cf 93       	push	r28
    27da:	00 d0       	rcall	.+0      	; 0x27dc <KeyPad_4x3_adjustKeyNumber+0x6>
    27dc:	00 d0       	rcall	.+0      	; 0x27de <KeyPad_4x3_adjustKeyNumber+0x8>
    27de:	cd b7       	in	r28, 0x3d	; 61
    27e0:	de b7       	in	r29, 0x3e	; 62
    27e2:	89 83       	std	Y+1, r24	; 0x01
	switch(au8_button_number)
    27e4:	89 81       	ldd	r24, Y+1	; 0x01
    27e6:	28 2f       	mov	r18, r24
    27e8:	30 e0       	ldi	r19, 0x00	; 0
    27ea:	3c 83       	std	Y+4, r19	; 0x04
    27ec:	2b 83       	std	Y+3, r18	; 0x03
    27ee:	8b 81       	ldd	r24, Y+3	; 0x03
    27f0:	9c 81       	ldd	r25, Y+4	; 0x04
    27f2:	8a 30       	cpi	r24, 0x0A	; 10
    27f4:	91 05       	cpc	r25, r1
    27f6:	81 f0       	breq	.+32     	; 0x2818 <KeyPad_4x3_adjustKeyNumber+0x42>
    27f8:	2b 81       	ldd	r18, Y+3	; 0x03
    27fa:	3c 81       	ldd	r19, Y+4	; 0x04
    27fc:	2a 30       	cpi	r18, 0x0A	; 10
    27fe:	31 05       	cpc	r19, r1
    2800:	9c f0       	brlt	.+38     	; 0x2828 <KeyPad_4x3_adjustKeyNumber+0x52>
    2802:	8b 81       	ldd	r24, Y+3	; 0x03
    2804:	9c 81       	ldd	r25, Y+4	; 0x04
    2806:	8b 30       	cpi	r24, 0x0B	; 11
    2808:	91 05       	cpc	r25, r1
    280a:	49 f0       	breq	.+18     	; 0x281e <KeyPad_4x3_adjustKeyNumber+0x48>
    280c:	2b 81       	ldd	r18, Y+3	; 0x03
    280e:	3c 81       	ldd	r19, Y+4	; 0x04
    2810:	2c 30       	cpi	r18, 0x0C	; 12
    2812:	31 05       	cpc	r19, r1
    2814:	31 f0       	breq	.+12     	; 0x2822 <KeyPad_4x3_adjustKeyNumber+0x4c>
    2816:	08 c0       	rjmp	.+16     	; 0x2828 <KeyPad_4x3_adjustKeyNumber+0x52>
	{
		case 10: return BUTTON_MUL; /* ASCII Code of * */
    2818:	3a e2       	ldi	r19, 0x2A	; 42
    281a:	3a 83       	std	Y+2, r19	; 0x02
    281c:	07 c0       	rjmp	.+14     	; 0x282c <KeyPad_4x3_adjustKeyNumber+0x56>
				 break;
		case 11: return BUTTON_0;
    281e:	1a 82       	std	Y+2, r1	; 0x02
    2820:	05 c0       	rjmp	.+10     	; 0x282c <KeyPad_4x3_adjustKeyNumber+0x56>
				 break;
		case 12: return BUTTON_HASH; /* ASCII Code of # */
    2822:	83 e2       	ldi	r24, 0x23	; 35
    2824:	8a 83       	std	Y+2, r24	; 0x02
    2826:	02 c0       	rjmp	.+4      	; 0x282c <KeyPad_4x3_adjustKeyNumber+0x56>
				 break;
		default: return au8_button_number;
    2828:	99 81       	ldd	r25, Y+1	; 0x01
    282a:	9a 83       	std	Y+2, r25	; 0x02
    282c:	8a 81       	ldd	r24, Y+2	; 0x02
	}
} 
    282e:	0f 90       	pop	r0
    2830:	0f 90       	pop	r0
    2832:	0f 90       	pop	r0
    2834:	0f 90       	pop	r0
    2836:	cf 91       	pop	r28
    2838:	df 91       	pop	r29
    283a:	08 95       	ret

0000283c <App_init>:
 * [in/out]	  None
 *
 * [Returns]:     None
 *******************************************************************************/
void App_init(void)
{
    283c:	df 93       	push	r29
    283e:	cf 93       	push	r28
    2840:	cd b7       	in	r28, 0x3d	; 61
    2842:	de b7       	in	r29, 0x3e	; 62
    2844:	6c 97       	sbiw	r28, 0x1c	; 28
    2846:	0f b6       	in	r0, 0x3f	; 63
    2848:	f8 94       	cli
    284a:	de bf       	out	0x3e, r29	; 62
    284c:	0f be       	out	0x3f, r0	; 63
    284e:	cd bf       	out	0x3d, r28	; 61
	LCD_init();	/* LCD Initialization */
    2850:	0e 94 77 0a 	call	0x14ee	; 0x14ee <LCD_init>
	LCD_displayStringRowColumn(0, 0, "Hello Sprints!!!");
    2854:	20 e6       	ldi	r18, 0x60	; 96
    2856:	30 e0       	ldi	r19, 0x00	; 0
    2858:	80 e0       	ldi	r24, 0x00	; 0
    285a:	60 e0       	ldi	r22, 0x00	; 0
    285c:	a9 01       	movw	r20, r18
    285e:	0e 94 3d 13 	call	0x267a	; 0x267a <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1, 2, "KEYPAD TEST");
    2862:	21 e7       	ldi	r18, 0x71	; 113
    2864:	30 e0       	ldi	r19, 0x00	; 0
    2866:	81 e0       	ldi	r24, 0x01	; 1
    2868:	62 e0       	ldi	r22, 0x02	; 2
    286a:	a9 01       	movw	r20, r18
    286c:	0e 94 3d 13 	call	0x267a	; 0x267a <LCD_displayStringRowColumn>
    2870:	80 e0       	ldi	r24, 0x00	; 0
    2872:	90 e8       	ldi	r25, 0x80	; 128
    2874:	ab e3       	ldi	r26, 0x3B	; 59
    2876:	b5 e4       	ldi	r27, 0x45	; 69
    2878:	89 8f       	std	Y+25, r24	; 0x19
    287a:	9a 8f       	std	Y+26, r25	; 0x1a
    287c:	ab 8f       	std	Y+27, r26	; 0x1b
    287e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2880:	69 8d       	ldd	r22, Y+25	; 0x19
    2882:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2884:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2886:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2888:	20 e0       	ldi	r18, 0x00	; 0
    288a:	30 e0       	ldi	r19, 0x00	; 0
    288c:	4a ef       	ldi	r20, 0xFA	; 250
    288e:	54 e4       	ldi	r21, 0x44	; 68
    2890:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2894:	dc 01       	movw	r26, r24
    2896:	cb 01       	movw	r24, r22
    2898:	8d 8b       	std	Y+21, r24	; 0x15
    289a:	9e 8b       	std	Y+22, r25	; 0x16
    289c:	af 8b       	std	Y+23, r26	; 0x17
    289e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    28a0:	6d 89       	ldd	r22, Y+21	; 0x15
    28a2:	7e 89       	ldd	r23, Y+22	; 0x16
    28a4:	8f 89       	ldd	r24, Y+23	; 0x17
    28a6:	98 8d       	ldd	r25, Y+24	; 0x18
    28a8:	20 e0       	ldi	r18, 0x00	; 0
    28aa:	30 e0       	ldi	r19, 0x00	; 0
    28ac:	40 e8       	ldi	r20, 0x80	; 128
    28ae:	5f e3       	ldi	r21, 0x3F	; 63
    28b0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28b4:	88 23       	and	r24, r24
    28b6:	2c f4       	brge	.+10     	; 0x28c2 <App_init+0x86>
		__ticks = 1;
    28b8:	81 e0       	ldi	r24, 0x01	; 1
    28ba:	90 e0       	ldi	r25, 0x00	; 0
    28bc:	9c 8b       	std	Y+20, r25	; 0x14
    28be:	8b 8b       	std	Y+19, r24	; 0x13
    28c0:	3f c0       	rjmp	.+126    	; 0x2940 <App_init+0x104>
	else if (__tmp > 65535)
    28c2:	6d 89       	ldd	r22, Y+21	; 0x15
    28c4:	7e 89       	ldd	r23, Y+22	; 0x16
    28c6:	8f 89       	ldd	r24, Y+23	; 0x17
    28c8:	98 8d       	ldd	r25, Y+24	; 0x18
    28ca:	20 e0       	ldi	r18, 0x00	; 0
    28cc:	3f ef       	ldi	r19, 0xFF	; 255
    28ce:	4f e7       	ldi	r20, 0x7F	; 127
    28d0:	57 e4       	ldi	r21, 0x47	; 71
    28d2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28d6:	18 16       	cp	r1, r24
    28d8:	4c f5       	brge	.+82     	; 0x292c <App_init+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28da:	69 8d       	ldd	r22, Y+25	; 0x19
    28dc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    28de:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28e0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    28e2:	20 e0       	ldi	r18, 0x00	; 0
    28e4:	30 e0       	ldi	r19, 0x00	; 0
    28e6:	40 e2       	ldi	r20, 0x20	; 32
    28e8:	51 e4       	ldi	r21, 0x41	; 65
    28ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28ee:	dc 01       	movw	r26, r24
    28f0:	cb 01       	movw	r24, r22
    28f2:	bc 01       	movw	r22, r24
    28f4:	cd 01       	movw	r24, r26
    28f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28fa:	dc 01       	movw	r26, r24
    28fc:	cb 01       	movw	r24, r22
    28fe:	9c 8b       	std	Y+20, r25	; 0x14
    2900:	8b 8b       	std	Y+19, r24	; 0x13
    2902:	0f c0       	rjmp	.+30     	; 0x2922 <App_init+0xe6>
    2904:	88 ec       	ldi	r24, 0xC8	; 200
    2906:	90 e0       	ldi	r25, 0x00	; 0
    2908:	9a 8b       	std	Y+18, r25	; 0x12
    290a:	89 8b       	std	Y+17, r24	; 0x11
    290c:	89 89       	ldd	r24, Y+17	; 0x11
    290e:	9a 89       	ldd	r25, Y+18	; 0x12
    2910:	01 97       	sbiw	r24, 0x01	; 1
    2912:	f1 f7       	brne	.-4      	; 0x2910 <App_init+0xd4>
    2914:	9a 8b       	std	Y+18, r25	; 0x12
    2916:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2918:	8b 89       	ldd	r24, Y+19	; 0x13
    291a:	9c 89       	ldd	r25, Y+20	; 0x14
    291c:	01 97       	sbiw	r24, 0x01	; 1
    291e:	9c 8b       	std	Y+20, r25	; 0x14
    2920:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2922:	8b 89       	ldd	r24, Y+19	; 0x13
    2924:	9c 89       	ldd	r25, Y+20	; 0x14
    2926:	00 97       	sbiw	r24, 0x00	; 0
    2928:	69 f7       	brne	.-38     	; 0x2904 <App_init+0xc8>
    292a:	14 c0       	rjmp	.+40     	; 0x2954 <App_init+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    292c:	6d 89       	ldd	r22, Y+21	; 0x15
    292e:	7e 89       	ldd	r23, Y+22	; 0x16
    2930:	8f 89       	ldd	r24, Y+23	; 0x17
    2932:	98 8d       	ldd	r25, Y+24	; 0x18
    2934:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2938:	dc 01       	movw	r26, r24
    293a:	cb 01       	movw	r24, r22
    293c:	9c 8b       	std	Y+20, r25	; 0x14
    293e:	8b 8b       	std	Y+19, r24	; 0x13
    2940:	8b 89       	ldd	r24, Y+19	; 0x13
    2942:	9c 89       	ldd	r25, Y+20	; 0x14
    2944:	98 8b       	std	Y+16, r25	; 0x10
    2946:	8f 87       	std	Y+15, r24	; 0x0f
    2948:	8f 85       	ldd	r24, Y+15	; 0x0f
    294a:	98 89       	ldd	r25, Y+16	; 0x10
    294c:	01 97       	sbiw	r24, 0x01	; 1
    294e:	f1 f7       	brne	.-4      	; 0x294c <App_init+0x110>
    2950:	98 8b       	std	Y+16, r25	; 0x10
    2952:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(3000); /* Display Time */
	LCD_clearScreen();
    2954:	0e 94 7b 13 	call	0x26f6	; 0x26f6 <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 0, "PRESS ANY KEY TO");
    2958:	2d e7       	ldi	r18, 0x7D	; 125
    295a:	30 e0       	ldi	r19, 0x00	; 0
    295c:	80 e0       	ldi	r24, 0x00	; 0
    295e:	60 e0       	ldi	r22, 0x00	; 0
    2960:	a9 01       	movw	r20, r18
    2962:	0e 94 3d 13 	call	0x267a	; 0x267a <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1, 2, "TEST KEYPAD");
    2966:	2e e8       	ldi	r18, 0x8E	; 142
    2968:	30 e0       	ldi	r19, 0x00	; 0
    296a:	81 e0       	ldi	r24, 0x01	; 1
    296c:	62 e0       	ldi	r22, 0x02	; 2
    296e:	a9 01       	movw	r20, r18
    2970:	0e 94 3d 13 	call	0x267a	; 0x267a <LCD_displayStringRowColumn>
    2974:	80 e0       	ldi	r24, 0x00	; 0
    2976:	90 e0       	ldi	r25, 0x00	; 0
    2978:	aa ef       	ldi	r26, 0xFA	; 250
    297a:	b4 e4       	ldi	r27, 0x44	; 68
    297c:	8b 87       	std	Y+11, r24	; 0x0b
    297e:	9c 87       	std	Y+12, r25	; 0x0c
    2980:	ad 87       	std	Y+13, r26	; 0x0d
    2982:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2984:	6b 85       	ldd	r22, Y+11	; 0x0b
    2986:	7c 85       	ldd	r23, Y+12	; 0x0c
    2988:	8d 85       	ldd	r24, Y+13	; 0x0d
    298a:	9e 85       	ldd	r25, Y+14	; 0x0e
    298c:	20 e0       	ldi	r18, 0x00	; 0
    298e:	30 e0       	ldi	r19, 0x00	; 0
    2990:	4a ef       	ldi	r20, 0xFA	; 250
    2992:	54 e4       	ldi	r21, 0x44	; 68
    2994:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2998:	dc 01       	movw	r26, r24
    299a:	cb 01       	movw	r24, r22
    299c:	8f 83       	std	Y+7, r24	; 0x07
    299e:	98 87       	std	Y+8, r25	; 0x08
    29a0:	a9 87       	std	Y+9, r26	; 0x09
    29a2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    29a4:	6f 81       	ldd	r22, Y+7	; 0x07
    29a6:	78 85       	ldd	r23, Y+8	; 0x08
    29a8:	89 85       	ldd	r24, Y+9	; 0x09
    29aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    29ac:	20 e0       	ldi	r18, 0x00	; 0
    29ae:	30 e0       	ldi	r19, 0x00	; 0
    29b0:	40 e8       	ldi	r20, 0x80	; 128
    29b2:	5f e3       	ldi	r21, 0x3F	; 63
    29b4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29b8:	88 23       	and	r24, r24
    29ba:	2c f4       	brge	.+10     	; 0x29c6 <App_init+0x18a>
		__ticks = 1;
    29bc:	81 e0       	ldi	r24, 0x01	; 1
    29be:	90 e0       	ldi	r25, 0x00	; 0
    29c0:	9e 83       	std	Y+6, r25	; 0x06
    29c2:	8d 83       	std	Y+5, r24	; 0x05
    29c4:	3f c0       	rjmp	.+126    	; 0x2a44 <App_init+0x208>
	else if (__tmp > 65535)
    29c6:	6f 81       	ldd	r22, Y+7	; 0x07
    29c8:	78 85       	ldd	r23, Y+8	; 0x08
    29ca:	89 85       	ldd	r24, Y+9	; 0x09
    29cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    29ce:	20 e0       	ldi	r18, 0x00	; 0
    29d0:	3f ef       	ldi	r19, 0xFF	; 255
    29d2:	4f e7       	ldi	r20, 0x7F	; 127
    29d4:	57 e4       	ldi	r21, 0x47	; 71
    29d6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29da:	18 16       	cp	r1, r24
    29dc:	4c f5       	brge	.+82     	; 0x2a30 <App_init+0x1f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29de:	6b 85       	ldd	r22, Y+11	; 0x0b
    29e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    29e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    29e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    29e6:	20 e0       	ldi	r18, 0x00	; 0
    29e8:	30 e0       	ldi	r19, 0x00	; 0
    29ea:	40 e2       	ldi	r20, 0x20	; 32
    29ec:	51 e4       	ldi	r21, 0x41	; 65
    29ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29f2:	dc 01       	movw	r26, r24
    29f4:	cb 01       	movw	r24, r22
    29f6:	bc 01       	movw	r22, r24
    29f8:	cd 01       	movw	r24, r26
    29fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29fe:	dc 01       	movw	r26, r24
    2a00:	cb 01       	movw	r24, r22
    2a02:	9e 83       	std	Y+6, r25	; 0x06
    2a04:	8d 83       	std	Y+5, r24	; 0x05
    2a06:	0f c0       	rjmp	.+30     	; 0x2a26 <App_init+0x1ea>
    2a08:	88 ec       	ldi	r24, 0xC8	; 200
    2a0a:	90 e0       	ldi	r25, 0x00	; 0
    2a0c:	9c 83       	std	Y+4, r25	; 0x04
    2a0e:	8b 83       	std	Y+3, r24	; 0x03
    2a10:	8b 81       	ldd	r24, Y+3	; 0x03
    2a12:	9c 81       	ldd	r25, Y+4	; 0x04
    2a14:	01 97       	sbiw	r24, 0x01	; 1
    2a16:	f1 f7       	brne	.-4      	; 0x2a14 <App_init+0x1d8>
    2a18:	9c 83       	std	Y+4, r25	; 0x04
    2a1a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a1c:	8d 81       	ldd	r24, Y+5	; 0x05
    2a1e:	9e 81       	ldd	r25, Y+6	; 0x06
    2a20:	01 97       	sbiw	r24, 0x01	; 1
    2a22:	9e 83       	std	Y+6, r25	; 0x06
    2a24:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a26:	8d 81       	ldd	r24, Y+5	; 0x05
    2a28:	9e 81       	ldd	r25, Y+6	; 0x06
    2a2a:	00 97       	sbiw	r24, 0x00	; 0
    2a2c:	69 f7       	brne	.-38     	; 0x2a08 <App_init+0x1cc>
    2a2e:	14 c0       	rjmp	.+40     	; 0x2a58 <App_init+0x21c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a30:	6f 81       	ldd	r22, Y+7	; 0x07
    2a32:	78 85       	ldd	r23, Y+8	; 0x08
    2a34:	89 85       	ldd	r24, Y+9	; 0x09
    2a36:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a3c:	dc 01       	movw	r26, r24
    2a3e:	cb 01       	movw	r24, r22
    2a40:	9e 83       	std	Y+6, r25	; 0x06
    2a42:	8d 83       	std	Y+5, r24	; 0x05
    2a44:	8d 81       	ldd	r24, Y+5	; 0x05
    2a46:	9e 81       	ldd	r25, Y+6	; 0x06
    2a48:	9a 83       	std	Y+2, r25	; 0x02
    2a4a:	89 83       	std	Y+1, r24	; 0x01
    2a4c:	89 81       	ldd	r24, Y+1	; 0x01
    2a4e:	9a 81       	ldd	r25, Y+2	; 0x02
    2a50:	01 97       	sbiw	r24, 0x01	; 1
    2a52:	f1 f7       	brne	.-4      	; 0x2a50 <App_init+0x214>
    2a54:	9a 83       	std	Y+2, r25	; 0x02
    2a56:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2000); /* Display Time */
	LCD_clearScreen();
    2a58:	0e 94 7b 13 	call	0x26f6	; 0x26f6 <LCD_clearScreen>
}
    2a5c:	6c 96       	adiw	r28, 0x1c	; 28
    2a5e:	0f b6       	in	r0, 0x3f	; 63
    2a60:	f8 94       	cli
    2a62:	de bf       	out	0x3e, r29	; 62
    2a64:	0f be       	out	0x3f, r0	; 63
    2a66:	cd bf       	out	0x3d, r28	; 61
    2a68:	cf 91       	pop	r28
    2a6a:	df 91       	pop	r29
    2a6c:	08 95       	ret

00002a6e <App_Update>:
 * [in/out]	  None
 *
 * [Returns]:     None
 *******************************************************************************/
void App_Update(void)
{
    2a6e:	df 93       	push	r29
    2a70:	cf 93       	push	r28
    2a72:	cd b7       	in	r28, 0x3d	; 61
    2a74:	de b7       	in	r29, 0x3e	; 62
	/* If any switch pressed for more than 500 ms it counts only one press */

	gu8_key = KeyPad_getPressedKey(); /* get the pressed key number */
    2a76:	0e 94 85 13 	call	0x270a	; 0x270a <KeyPad_getPressedKey>
    2a7a:	80 93 a2 00 	sts	0x00A2, r24

	if((gu8_key <= 9) && (gu8_key >= 0))
    2a7e:	80 91 a2 00 	lds	r24, 0x00A2
    2a82:	8a 30       	cpi	r24, 0x0A	; 10
    2a84:	58 f4       	brcc	.+22     	; 0x2a9c <App_Update+0x2e>
	{
		LCD_intgerToString(gu8_key); /* display the pressed keypad switch */
    2a86:	80 91 a2 00 	lds	r24, 0x00A2
    2a8a:	88 2f       	mov	r24, r24
    2a8c:	90 e0       	ldi	r25, 0x00	; 0
    2a8e:	a0 e0       	ldi	r26, 0x00	; 0
    2a90:	b0 e0       	ldi	r27, 0x00	; 0
    2a92:	bc 01       	movw	r22, r24
    2a94:	cd 01       	movw	r24, r26
    2a96:	0e 94 56 13 	call	0x26ac	; 0x26ac <LCD_intgerToString>
    2a9a:	04 c0       	rjmp	.+8      	; 0x2aa4 <App_Update+0x36>
	}
	else
	{
		LCD_displayCharacter(gu8_key); /* display the pressed keypad switch */
    2a9c:	80 91 a2 00 	lds	r24, 0x00A2
    2aa0:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <LCD_displayCharacter>
	}
}
    2aa4:	cf 91       	pop	r28
    2aa6:	df 91       	pop	r29
    2aa8:	08 95       	ret

00002aaa <main>:
/*****************************************************************************************
 *                                MAIN FUNCTION                                          *
 *****************************************************************************************/

int main(void)
{
    2aaa:	df 93       	push	r29
    2aac:	cf 93       	push	r28
    2aae:	cd b7       	in	r28, 0x3d	; 61
    2ab0:	de b7       	in	r29, 0x3e	; 62
	/********************************************************************************
	 *                           SYSTEM INITIALIZATION                              *
	 ********************************************************************************/

	App_init();	/* Test KEYPAD in simple application */
    2ab2:	0e 94 1e 14 	call	0x283c	; 0x283c <App_init>
	 *                        APPLICATION	(SUPER LOOP)			        *
	 ********************************************************************************/

	while(1)
	{
		App_Update();
    2ab6:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <App_Update>
    2aba:	fd cf       	rjmp	.-6      	; 0x2ab6 <main+0xc>

00002abc <__prologue_saves__>:
    2abc:	2f 92       	push	r2
    2abe:	3f 92       	push	r3
    2ac0:	4f 92       	push	r4
    2ac2:	5f 92       	push	r5
    2ac4:	6f 92       	push	r6
    2ac6:	7f 92       	push	r7
    2ac8:	8f 92       	push	r8
    2aca:	9f 92       	push	r9
    2acc:	af 92       	push	r10
    2ace:	bf 92       	push	r11
    2ad0:	cf 92       	push	r12
    2ad2:	df 92       	push	r13
    2ad4:	ef 92       	push	r14
    2ad6:	ff 92       	push	r15
    2ad8:	0f 93       	push	r16
    2ada:	1f 93       	push	r17
    2adc:	cf 93       	push	r28
    2ade:	df 93       	push	r29
    2ae0:	cd b7       	in	r28, 0x3d	; 61
    2ae2:	de b7       	in	r29, 0x3e	; 62
    2ae4:	ca 1b       	sub	r28, r26
    2ae6:	db 0b       	sbc	r29, r27
    2ae8:	0f b6       	in	r0, 0x3f	; 63
    2aea:	f8 94       	cli
    2aec:	de bf       	out	0x3e, r29	; 62
    2aee:	0f be       	out	0x3f, r0	; 63
    2af0:	cd bf       	out	0x3d, r28	; 61
    2af2:	09 94       	ijmp

00002af4 <__epilogue_restores__>:
    2af4:	2a 88       	ldd	r2, Y+18	; 0x12
    2af6:	39 88       	ldd	r3, Y+17	; 0x11
    2af8:	48 88       	ldd	r4, Y+16	; 0x10
    2afa:	5f 84       	ldd	r5, Y+15	; 0x0f
    2afc:	6e 84       	ldd	r6, Y+14	; 0x0e
    2afe:	7d 84       	ldd	r7, Y+13	; 0x0d
    2b00:	8c 84       	ldd	r8, Y+12	; 0x0c
    2b02:	9b 84       	ldd	r9, Y+11	; 0x0b
    2b04:	aa 84       	ldd	r10, Y+10	; 0x0a
    2b06:	b9 84       	ldd	r11, Y+9	; 0x09
    2b08:	c8 84       	ldd	r12, Y+8	; 0x08
    2b0a:	df 80       	ldd	r13, Y+7	; 0x07
    2b0c:	ee 80       	ldd	r14, Y+6	; 0x06
    2b0e:	fd 80       	ldd	r15, Y+5	; 0x05
    2b10:	0c 81       	ldd	r16, Y+4	; 0x04
    2b12:	1b 81       	ldd	r17, Y+3	; 0x03
    2b14:	aa 81       	ldd	r26, Y+2	; 0x02
    2b16:	b9 81       	ldd	r27, Y+1	; 0x01
    2b18:	ce 0f       	add	r28, r30
    2b1a:	d1 1d       	adc	r29, r1
    2b1c:	0f b6       	in	r0, 0x3f	; 63
    2b1e:	f8 94       	cli
    2b20:	de bf       	out	0x3e, r29	; 62
    2b22:	0f be       	out	0x3f, r0	; 63
    2b24:	cd bf       	out	0x3d, r28	; 61
    2b26:	ed 01       	movw	r28, r26
    2b28:	08 95       	ret

00002b2a <itoa>:
    2b2a:	fb 01       	movw	r30, r22
    2b2c:	9f 01       	movw	r18, r30
    2b2e:	e8 94       	clt
    2b30:	42 30       	cpi	r20, 0x02	; 2
    2b32:	c4 f0       	brlt	.+48     	; 0x2b64 <itoa+0x3a>
    2b34:	45 32       	cpi	r20, 0x25	; 37
    2b36:	b4 f4       	brge	.+44     	; 0x2b64 <itoa+0x3a>
    2b38:	4a 30       	cpi	r20, 0x0A	; 10
    2b3a:	29 f4       	brne	.+10     	; 0x2b46 <itoa+0x1c>
    2b3c:	97 fb       	bst	r25, 7
    2b3e:	1e f4       	brtc	.+6      	; 0x2b46 <itoa+0x1c>
    2b40:	90 95       	com	r25
    2b42:	81 95       	neg	r24
    2b44:	9f 4f       	sbci	r25, 0xFF	; 255
    2b46:	64 2f       	mov	r22, r20
    2b48:	77 27       	eor	r23, r23
    2b4a:	0e 94 c6 15 	call	0x2b8c	; 0x2b8c <__udivmodhi4>
    2b4e:	80 5d       	subi	r24, 0xD0	; 208
    2b50:	8a 33       	cpi	r24, 0x3A	; 58
    2b52:	0c f0       	brlt	.+2      	; 0x2b56 <itoa+0x2c>
    2b54:	89 5d       	subi	r24, 0xD9	; 217
    2b56:	81 93       	st	Z+, r24
    2b58:	cb 01       	movw	r24, r22
    2b5a:	00 97       	sbiw	r24, 0x00	; 0
    2b5c:	a1 f7       	brne	.-24     	; 0x2b46 <itoa+0x1c>
    2b5e:	16 f4       	brtc	.+4      	; 0x2b64 <itoa+0x3a>
    2b60:	5d e2       	ldi	r21, 0x2D	; 45
    2b62:	51 93       	st	Z+, r21
    2b64:	10 82       	st	Z, r1
    2b66:	c9 01       	movw	r24, r18
    2b68:	0c 94 b6 15 	jmp	0x2b6c	; 0x2b6c <strrev>

00002b6c <strrev>:
    2b6c:	dc 01       	movw	r26, r24
    2b6e:	fc 01       	movw	r30, r24
    2b70:	67 2f       	mov	r22, r23
    2b72:	71 91       	ld	r23, Z+
    2b74:	77 23       	and	r23, r23
    2b76:	e1 f7       	brne	.-8      	; 0x2b70 <strrev+0x4>
    2b78:	32 97       	sbiw	r30, 0x02	; 2
    2b7a:	04 c0       	rjmp	.+8      	; 0x2b84 <strrev+0x18>
    2b7c:	7c 91       	ld	r23, X
    2b7e:	6d 93       	st	X+, r22
    2b80:	70 83       	st	Z, r23
    2b82:	62 91       	ld	r22, -Z
    2b84:	ae 17       	cp	r26, r30
    2b86:	bf 07       	cpc	r27, r31
    2b88:	c8 f3       	brcs	.-14     	; 0x2b7c <strrev+0x10>
    2b8a:	08 95       	ret

00002b8c <__udivmodhi4>:
    2b8c:	aa 1b       	sub	r26, r26
    2b8e:	bb 1b       	sub	r27, r27
    2b90:	51 e1       	ldi	r21, 0x11	; 17
    2b92:	07 c0       	rjmp	.+14     	; 0x2ba2 <__udivmodhi4_ep>

00002b94 <__udivmodhi4_loop>:
    2b94:	aa 1f       	adc	r26, r26
    2b96:	bb 1f       	adc	r27, r27
    2b98:	a6 17       	cp	r26, r22
    2b9a:	b7 07       	cpc	r27, r23
    2b9c:	10 f0       	brcs	.+4      	; 0x2ba2 <__udivmodhi4_ep>
    2b9e:	a6 1b       	sub	r26, r22
    2ba0:	b7 0b       	sbc	r27, r23

00002ba2 <__udivmodhi4_ep>:
    2ba2:	88 1f       	adc	r24, r24
    2ba4:	99 1f       	adc	r25, r25
    2ba6:	5a 95       	dec	r21
    2ba8:	a9 f7       	brne	.-22     	; 0x2b94 <__udivmodhi4_loop>
    2baa:	80 95       	com	r24
    2bac:	90 95       	com	r25
    2bae:	bc 01       	movw	r22, r24
    2bb0:	cd 01       	movw	r24, r26
    2bb2:	08 95       	ret

00002bb4 <_exit>:
    2bb4:	f8 94       	cli

00002bb6 <__stop_program>:
    2bb6:	ff cf       	rjmp	.-2      	; 0x2bb6 <__stop_program>
