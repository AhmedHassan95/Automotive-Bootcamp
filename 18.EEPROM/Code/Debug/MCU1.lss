
MCU1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000032b6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000042  00800060  000032b6  0000334a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000016  008000a2  008000a2  0000338c  2**0
                  ALLOC
  3 .stab         00003168  00000000  00000000  0000338c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001da8  00000000  00000000  000064f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000829c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000083dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000854c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000a195  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000b080  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000be30  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000bf90  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000c21d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c9eb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 eb       	ldi	r30, 0xB6	; 182
      68:	f2 e3       	ldi	r31, 0x32	; 50
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 3a       	cpi	r26, 0xA2	; 162
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a2 ea       	ldi	r26, 0xA2	; 162
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 3b       	cpi	r26, 0xB8	; 184
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 83 18 	call	0x3106	; 0x3106 <main>
      8a:	0c 94 59 19 	jmp	0x32b2	; 0x32b2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 c2 18 	jmp	0x3184	; 0x3184 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ac e8       	ldi	r26, 0x8C	; 140
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 de 18 	jmp	0x31bc	; 0x31bc <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 ce 18 	jmp	0x319c	; 0x319c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 ea 18 	jmp	0x31d4	; 0x31d4 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 ce 18 	jmp	0x319c	; 0x319c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 ea 18 	jmp	0x31d4	; 0x31d4 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 c2 18 	jmp	0x3184	; 0x3184 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8c e8       	ldi	r24, 0x8C	; 140
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 de 18 	jmp	0x31bc	; 0x31bc <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 ce 18 	jmp	0x319c	; 0x319c <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 ea 18 	jmp	0x31d4	; 0x31d4 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 ce 18 	jmp	0x319c	; 0x319c <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 ea 18 	jmp	0x31d4	; 0x31d4 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 ce 18 	jmp	0x319c	; 0x319c <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 ea 18 	jmp	0x31d4	; 0x31d4 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 d2 18 	jmp	0x31a4	; 0x31a4 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 ee 18 	jmp	0x31dc	; 0x31dc <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <UART_init>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 ******************************************************************************************/
void UART_init(const UART_ConfigType * Config_Ptr)
{
     b46:	0f 93       	push	r16
     b48:	1f 93       	push	r17
     b4a:	df 93       	push	r29
     b4c:	cf 93       	push	r28
     b4e:	00 d0       	rcall	.+0      	; 0xb50 <UART_init+0xa>
     b50:	00 d0       	rcall	.+0      	; 0xb52 <UART_init+0xc>
     b52:	cd b7       	in	r28, 0x3d	; 61
     b54:	de b7       	in	r29, 0x3e	; 62
     b56:	9a 83       	std	Y+2, r25	; 0x02
     b58:	89 83       	std	Y+1, r24	; 0x01
	/* Insert the required Mode in U2X bit in UCSRA Register */
	UCSRA = (UCSRA & 0xFD) | ( (Config_Ptr -> uart_Mode) << 1);
     b5a:	ab e2       	ldi	r26, 0x2B	; 43
     b5c:	b0 e0       	ldi	r27, 0x00	; 0
     b5e:	eb e2       	ldi	r30, 0x2B	; 43
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	80 81       	ld	r24, Z
     b64:	28 2f       	mov	r18, r24
     b66:	2d 7f       	andi	r18, 0xFD	; 253
     b68:	e9 81       	ldd	r30, Y+1	; 0x01
     b6a:	fa 81       	ldd	r31, Y+2	; 0x02
     b6c:	84 81       	ldd	r24, Z+4	; 0x04
     b6e:	88 2f       	mov	r24, r24
     b70:	90 e0       	ldi	r25, 0x00	; 0
     b72:	88 0f       	add	r24, r24
     b74:	99 1f       	adc	r25, r25
     b76:	82 2b       	or	r24, r18
     b78:	8c 93       	st	X, r24

	/* In Case of Nine Bit Data */
	if(Config_Ptr -> uart_DataBits == NINE_BITS)
     b7a:	e9 81       	ldd	r30, Y+1	; 0x01
     b7c:	fa 81       	ldd	r31, Y+2	; 0x02
     b7e:	85 81       	ldd	r24, Z+5	; 0x05
     b80:	87 30       	cpi	r24, 0x07	; 7
     b82:	a1 f4       	brne	.+40     	; 0xbac <UART_init+0x66>
	{
		/* Insert the last bit of required data bits in bit UCSZ2 in UCSRB Register */
		UCSRB = (UCSRB & 0xFB) | ( (Config_Ptr -> uart_DataBits) & 0x04);
     b84:	aa e2       	ldi	r26, 0x2A	; 42
     b86:	b0 e0       	ldi	r27, 0x00	; 0
     b88:	ea e2       	ldi	r30, 0x2A	; 42
     b8a:	f0 e0       	ldi	r31, 0x00	; 0
     b8c:	80 81       	ld	r24, Z
     b8e:	98 2f       	mov	r25, r24
     b90:	9b 7f       	andi	r25, 0xFB	; 251
     b92:	e9 81       	ldd	r30, Y+1	; 0x01
     b94:	fa 81       	ldd	r31, Y+2	; 0x02
     b96:	85 81       	ldd	r24, Z+5	; 0x05
     b98:	84 70       	andi	r24, 0x04	; 4
     b9a:	89 2b       	or	r24, r25
     b9c:	8c 93       	st	X, r24

		/* Two bits RXB8 & TXB8 must be Enabled in UCSRB Register */
		UCSRB |= (1 << RXB8) | (1 << TXB8);
     b9e:	aa e2       	ldi	r26, 0x2A	; 42
     ba0:	b0 e0       	ldi	r27, 0x00	; 0
     ba2:	ea e2       	ldi	r30, 0x2A	; 42
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	80 81       	ld	r24, Z
     ba8:	83 60       	ori	r24, 0x03	; 3
     baa:	8c 93       	st	X, r24

	/*
	 * Enable Transmitter & Receiver to be able to transmit and receive thought
	 * the UART driver
	 */
	UCSRB |= (1 << RXEN) | (1 << TXEN);
     bac:	aa e2       	ldi	r26, 0x2A	; 42
     bae:	b0 e0       	ldi	r27, 0x00	; 0
     bb0:	ea e2       	ldi	r30, 0x2A	; 42
     bb2:	f0 e0       	ldi	r31, 0x00	; 0
     bb4:	80 81       	ld	r24, Z
     bb6:	88 61       	ori	r24, 0x18	; 24
     bb8:	8c 93       	st	X, r24

	/* URSEL must be one when writing the UCSRC */
	UCSRC |= (1 << URSEL);
     bba:	a0 e4       	ldi	r26, 0x40	; 64
     bbc:	b0 e0       	ldi	r27, 0x00	; 0
     bbe:	e0 e4       	ldi	r30, 0x40	; 64
     bc0:	f0 e0       	ldi	r31, 0x00	; 0
     bc2:	80 81       	ld	r24, Z
     bc4:	80 68       	ori	r24, 0x80	; 128
     bc6:	8c 93       	st	X, r24

	/*
	 * Insert the First two bits of required data bits in bits (UCSZ0, UCSZ1)
	 * in UCSRC Register in case of (5,6,7 or 8) Data bits
	 */
	UCSRC = (UCSRC & 0xF9) | ( (Config_Ptr -> uart_DataBits & 0x03) << 1);
     bc8:	a0 e4       	ldi	r26, 0x40	; 64
     bca:	b0 e0       	ldi	r27, 0x00	; 0
     bcc:	e0 e4       	ldi	r30, 0x40	; 64
     bce:	f0 e0       	ldi	r31, 0x00	; 0
     bd0:	80 81       	ld	r24, Z
     bd2:	28 2f       	mov	r18, r24
     bd4:	29 7f       	andi	r18, 0xF9	; 249
     bd6:	e9 81       	ldd	r30, Y+1	; 0x01
     bd8:	fa 81       	ldd	r31, Y+2	; 0x02
     bda:	85 81       	ldd	r24, Z+5	; 0x05
     bdc:	88 2f       	mov	r24, r24
     bde:	90 e0       	ldi	r25, 0x00	; 0
     be0:	83 70       	andi	r24, 0x03	; 3
     be2:	90 70       	andi	r25, 0x00	; 0
     be4:	88 0f       	add	r24, r24
     be6:	99 1f       	adc	r25, r25
     be8:	82 2b       	or	r24, r18
     bea:	8c 93       	st	X, r24

	/* Insert the required parity type in bits (UPM0, UPM1) in UCSRC Register */
	UCSRC = (UCSRC & 0xCF) | ( (Config_Ptr -> uart_Parity) << 4);
     bec:	a0 e4       	ldi	r26, 0x40	; 64
     bee:	b0 e0       	ldi	r27, 0x00	; 0
     bf0:	e0 e4       	ldi	r30, 0x40	; 64
     bf2:	f0 e0       	ldi	r31, 0x00	; 0
     bf4:	80 81       	ld	r24, Z
     bf6:	28 2f       	mov	r18, r24
     bf8:	2f 7c       	andi	r18, 0xCF	; 207
     bfa:	e9 81       	ldd	r30, Y+1	; 0x01
     bfc:	fa 81       	ldd	r31, Y+2	; 0x02
     bfe:	86 81       	ldd	r24, Z+6	; 0x06
     c00:	88 2f       	mov	r24, r24
     c02:	90 e0       	ldi	r25, 0x00	; 0
     c04:	82 95       	swap	r24
     c06:	92 95       	swap	r25
     c08:	90 7f       	andi	r25, 0xF0	; 240
     c0a:	98 27       	eor	r25, r24
     c0c:	80 7f       	andi	r24, 0xF0	; 240
     c0e:	98 27       	eor	r25, r24
     c10:	82 2b       	or	r24, r18
     c12:	8c 93       	st	X, r24

	/* Insert the required number of stop bit(s) in bit USBS in UCSRC Register */
	UCSRC = (UCSRC & 0xF7) | ( (Config_Ptr -> uart_StopBit) << 3);
     c14:	a0 e4       	ldi	r26, 0x40	; 64
     c16:	b0 e0       	ldi	r27, 0x00	; 0
     c18:	e0 e4       	ldi	r30, 0x40	; 64
     c1a:	f0 e0       	ldi	r31, 0x00	; 0
     c1c:	80 81       	ld	r24, Z
     c1e:	28 2f       	mov	r18, r24
     c20:	27 7f       	andi	r18, 0xF7	; 247
     c22:	e9 81       	ldd	r30, Y+1	; 0x01
     c24:	fa 81       	ldd	r31, Y+2	; 0x02
     c26:	87 81       	ldd	r24, Z+7	; 0x07
     c28:	88 2f       	mov	r24, r24
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	88 0f       	add	r24, r24
     c2e:	99 1f       	adc	r25, r25
     c30:	88 0f       	add	r24, r24
     c32:	99 1f       	adc	r25, r25
     c34:	88 0f       	add	r24, r24
     c36:	99 1f       	adc	r25, r25
     c38:	82 2b       	or	r24, r18
     c3a:	8c 93       	st	X, r24
	/*
	 * This switch case is to choose between two Modes (Normal, Double Speed),
	 * then calculate and insert the required Baud rate in First 8 bits from the
	 * BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH
	 */
	switch(Config_Ptr -> uart_Mode)
     c3c:	e9 81       	ldd	r30, Y+1	; 0x01
     c3e:	fa 81       	ldd	r31, Y+2	; 0x02
     c40:	84 81       	ldd	r24, Z+4	; 0x04
     c42:	28 2f       	mov	r18, r24
     c44:	30 e0       	ldi	r19, 0x00	; 0
     c46:	3c 83       	std	Y+4, r19	; 0x04
     c48:	2b 83       	std	Y+3, r18	; 0x03
     c4a:	8b 81       	ldd	r24, Y+3	; 0x03
     c4c:	9c 81       	ldd	r25, Y+4	; 0x04
     c4e:	00 97       	sbiw	r24, 0x00	; 0
     c50:	39 f0       	breq	.+14     	; 0xc60 <UART_init+0x11a>
     c52:	eb 81       	ldd	r30, Y+3	; 0x03
     c54:	fc 81       	ldd	r31, Y+4	; 0x04
     c56:	e1 30       	cpi	r30, 0x01	; 1
     c58:	f1 05       	cpc	r31, r1
     c5a:	09 f4       	brne	.+2      	; 0xc5e <UART_init+0x118>
     c5c:	56 c0       	rjmp	.+172    	; 0xd0a <UART_init+0x1c4>
     c5e:	a1 c0       	rjmp	.+322    	; 0xda2 <UART_init+0x25c>
	{
	case NORMAL_SPEED:	UBRRH = ( (((F_CPU / (Config_Ptr -> uart_BaudRate * 16UL))) - 1) >> 8 );
     c60:	00 e4       	ldi	r16, 0x40	; 64
     c62:	10 e0       	ldi	r17, 0x00	; 0
     c64:	e9 81       	ldd	r30, Y+1	; 0x01
     c66:	fa 81       	ldd	r31, Y+2	; 0x02
     c68:	80 81       	ld	r24, Z
     c6a:	91 81       	ldd	r25, Z+1	; 0x01
     c6c:	a2 81       	ldd	r26, Z+2	; 0x02
     c6e:	b3 81       	ldd	r27, Z+3	; 0x03
     c70:	88 0f       	add	r24, r24
     c72:	99 1f       	adc	r25, r25
     c74:	aa 1f       	adc	r26, r26
     c76:	bb 1f       	adc	r27, r27
     c78:	88 0f       	add	r24, r24
     c7a:	99 1f       	adc	r25, r25
     c7c:	aa 1f       	adc	r26, r26
     c7e:	bb 1f       	adc	r27, r27
     c80:	88 0f       	add	r24, r24
     c82:	99 1f       	adc	r25, r25
     c84:	aa 1f       	adc	r26, r26
     c86:	bb 1f       	adc	r27, r27
     c88:	88 0f       	add	r24, r24
     c8a:	99 1f       	adc	r25, r25
     c8c:	aa 1f       	adc	r26, r26
     c8e:	bb 1f       	adc	r27, r27
     c90:	9c 01       	movw	r18, r24
     c92:	ad 01       	movw	r20, r26
     c94:	80 e0       	ldi	r24, 0x00	; 0
     c96:	92 e1       	ldi	r25, 0x12	; 18
     c98:	aa e7       	ldi	r26, 0x7A	; 122
     c9a:	b0 e0       	ldi	r27, 0x00	; 0
     c9c:	bc 01       	movw	r22, r24
     c9e:	cd 01       	movw	r24, r26
     ca0:	0e 94 a0 18 	call	0x3140	; 0x3140 <__udivmodsi4>
     ca4:	da 01       	movw	r26, r20
     ca6:	c9 01       	movw	r24, r18
     ca8:	01 97       	sbiw	r24, 0x01	; 1
     caa:	a1 09       	sbc	r26, r1
     cac:	b1 09       	sbc	r27, r1
     cae:	89 2f       	mov	r24, r25
     cb0:	9a 2f       	mov	r25, r26
     cb2:	ab 2f       	mov	r26, r27
     cb4:	bb 27       	eor	r27, r27
     cb6:	f8 01       	movw	r30, r16
     cb8:	80 83       	st	Z, r24
						UBRRL = ( ((F_CPU / (Config_Ptr -> uart_BaudRate * 16UL))) - 1 );
     cba:	09 e2       	ldi	r16, 0x29	; 41
     cbc:	10 e0       	ldi	r17, 0x00	; 0
     cbe:	e9 81       	ldd	r30, Y+1	; 0x01
     cc0:	fa 81       	ldd	r31, Y+2	; 0x02
     cc2:	80 81       	ld	r24, Z
     cc4:	91 81       	ldd	r25, Z+1	; 0x01
     cc6:	a2 81       	ldd	r26, Z+2	; 0x02
     cc8:	b3 81       	ldd	r27, Z+3	; 0x03
     cca:	88 0f       	add	r24, r24
     ccc:	99 1f       	adc	r25, r25
     cce:	aa 1f       	adc	r26, r26
     cd0:	bb 1f       	adc	r27, r27
     cd2:	88 0f       	add	r24, r24
     cd4:	99 1f       	adc	r25, r25
     cd6:	aa 1f       	adc	r26, r26
     cd8:	bb 1f       	adc	r27, r27
     cda:	88 0f       	add	r24, r24
     cdc:	99 1f       	adc	r25, r25
     cde:	aa 1f       	adc	r26, r26
     ce0:	bb 1f       	adc	r27, r27
     ce2:	88 0f       	add	r24, r24
     ce4:	99 1f       	adc	r25, r25
     ce6:	aa 1f       	adc	r26, r26
     ce8:	bb 1f       	adc	r27, r27
     cea:	9c 01       	movw	r18, r24
     cec:	ad 01       	movw	r20, r26
     cee:	80 e0       	ldi	r24, 0x00	; 0
     cf0:	92 e1       	ldi	r25, 0x12	; 18
     cf2:	aa e7       	ldi	r26, 0x7A	; 122
     cf4:	b0 e0       	ldi	r27, 0x00	; 0
     cf6:	bc 01       	movw	r22, r24
     cf8:	cd 01       	movw	r24, r26
     cfa:	0e 94 a0 18 	call	0x3140	; 0x3140 <__udivmodsi4>
     cfe:	da 01       	movw	r26, r20
     d00:	c9 01       	movw	r24, r18
     d02:	81 50       	subi	r24, 0x01	; 1
     d04:	f8 01       	movw	r30, r16
     d06:	80 83       	st	Z, r24
     d08:	4c c0       	rjmp	.+152    	; 0xda2 <UART_init+0x25c>
						break;

	case DOUBLE_SPEED:	UBRRH = ( (((F_CPU / (Config_Ptr -> uart_BaudRate * 8UL))) - 1) >> 8 );
     d0a:	00 e4       	ldi	r16, 0x40	; 64
     d0c:	10 e0       	ldi	r17, 0x00	; 0
     d0e:	e9 81       	ldd	r30, Y+1	; 0x01
     d10:	fa 81       	ldd	r31, Y+2	; 0x02
     d12:	80 81       	ld	r24, Z
     d14:	91 81       	ldd	r25, Z+1	; 0x01
     d16:	a2 81       	ldd	r26, Z+2	; 0x02
     d18:	b3 81       	ldd	r27, Z+3	; 0x03
     d1a:	88 0f       	add	r24, r24
     d1c:	99 1f       	adc	r25, r25
     d1e:	aa 1f       	adc	r26, r26
     d20:	bb 1f       	adc	r27, r27
     d22:	88 0f       	add	r24, r24
     d24:	99 1f       	adc	r25, r25
     d26:	aa 1f       	adc	r26, r26
     d28:	bb 1f       	adc	r27, r27
     d2a:	88 0f       	add	r24, r24
     d2c:	99 1f       	adc	r25, r25
     d2e:	aa 1f       	adc	r26, r26
     d30:	bb 1f       	adc	r27, r27
     d32:	9c 01       	movw	r18, r24
     d34:	ad 01       	movw	r20, r26
     d36:	80 e0       	ldi	r24, 0x00	; 0
     d38:	92 e1       	ldi	r25, 0x12	; 18
     d3a:	aa e7       	ldi	r26, 0x7A	; 122
     d3c:	b0 e0       	ldi	r27, 0x00	; 0
     d3e:	bc 01       	movw	r22, r24
     d40:	cd 01       	movw	r24, r26
     d42:	0e 94 a0 18 	call	0x3140	; 0x3140 <__udivmodsi4>
     d46:	da 01       	movw	r26, r20
     d48:	c9 01       	movw	r24, r18
     d4a:	01 97       	sbiw	r24, 0x01	; 1
     d4c:	a1 09       	sbc	r26, r1
     d4e:	b1 09       	sbc	r27, r1
     d50:	89 2f       	mov	r24, r25
     d52:	9a 2f       	mov	r25, r26
     d54:	ab 2f       	mov	r26, r27
     d56:	bb 27       	eor	r27, r27
     d58:	f8 01       	movw	r30, r16
     d5a:	80 83       	st	Z, r24
						UBRRL = ( ((F_CPU / (Config_Ptr -> uart_BaudRate * 8UL))) - 1 );
     d5c:	09 e2       	ldi	r16, 0x29	; 41
     d5e:	10 e0       	ldi	r17, 0x00	; 0
     d60:	e9 81       	ldd	r30, Y+1	; 0x01
     d62:	fa 81       	ldd	r31, Y+2	; 0x02
     d64:	80 81       	ld	r24, Z
     d66:	91 81       	ldd	r25, Z+1	; 0x01
     d68:	a2 81       	ldd	r26, Z+2	; 0x02
     d6a:	b3 81       	ldd	r27, Z+3	; 0x03
     d6c:	88 0f       	add	r24, r24
     d6e:	99 1f       	adc	r25, r25
     d70:	aa 1f       	adc	r26, r26
     d72:	bb 1f       	adc	r27, r27
     d74:	88 0f       	add	r24, r24
     d76:	99 1f       	adc	r25, r25
     d78:	aa 1f       	adc	r26, r26
     d7a:	bb 1f       	adc	r27, r27
     d7c:	88 0f       	add	r24, r24
     d7e:	99 1f       	adc	r25, r25
     d80:	aa 1f       	adc	r26, r26
     d82:	bb 1f       	adc	r27, r27
     d84:	9c 01       	movw	r18, r24
     d86:	ad 01       	movw	r20, r26
     d88:	80 e0       	ldi	r24, 0x00	; 0
     d8a:	92 e1       	ldi	r25, 0x12	; 18
     d8c:	aa e7       	ldi	r26, 0x7A	; 122
     d8e:	b0 e0       	ldi	r27, 0x00	; 0
     d90:	bc 01       	movw	r22, r24
     d92:	cd 01       	movw	r24, r26
     d94:	0e 94 a0 18 	call	0x3140	; 0x3140 <__udivmodsi4>
     d98:	da 01       	movw	r26, r20
     d9a:	c9 01       	movw	r24, r18
     d9c:	81 50       	subi	r24, 0x01	; 1
     d9e:	f8 01       	movw	r30, r16
     da0:	80 83       	st	Z, r24
						break;
	}
}
     da2:	0f 90       	pop	r0
     da4:	0f 90       	pop	r0
     da6:	0f 90       	pop	r0
     da8:	0f 90       	pop	r0
     daa:	cf 91       	pop	r28
     dac:	df 91       	pop	r29
     dae:	1f 91       	pop	r17
     db0:	0f 91       	pop	r16
     db2:	08 95       	ret

00000db4 <UART_sendByte>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 ****************************************************************************************/
void UART_sendByte(const uint8_t data)
{
     db4:	df 93       	push	r29
     db6:	cf 93       	push	r28
     db8:	0f 92       	push	r0
     dba:	cd b7       	in	r28, 0x3d	; 61
     dbc:	de b7       	in	r29, 0x3e	; 62
     dbe:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the TX buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
     dc0:	eb e2       	ldi	r30, 0x2B	; 43
     dc2:	f0 e0       	ldi	r31, 0x00	; 0
     dc4:	80 81       	ld	r24, Z
     dc6:	88 2f       	mov	r24, r24
     dc8:	90 e0       	ldi	r25, 0x00	; 0
     dca:	80 72       	andi	r24, 0x20	; 32
     dcc:	90 70       	andi	r25, 0x00	; 0
     dce:	00 97       	sbiw	r24, 0x00	; 0
     dd0:	b9 f3       	breq	.-18     	; 0xdc0 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE
	 * flag as the UDR register is not empty now
	 */
	UDR = data;
     dd2:	ec e2       	ldi	r30, 0x2C	; 44
     dd4:	f0 e0       	ldi	r31, 0x00	; 0
     dd6:	89 81       	ldd	r24, Y+1	; 0x01
     dd8:	80 83       	st	Z, r24
}
     dda:	0f 90       	pop	r0
     ddc:	cf 91       	pop	r28
     dde:	df 91       	pop	r29
     de0:	08 95       	ret

00000de2 <UART_recieveByte>:
 * [in/out]		 	None
 *
 * [Returns]:       The Byte that received through the UART
 ****************************************************************************************/
uint8_t UART_recieveByte(void)
{
     de2:	df 93       	push	r29
     de4:	cf 93       	push	r28
     de6:	cd b7       	in	r28, 0x3d	; 61
     de8:	de b7       	in	r29, 0x3e	; 62
	/*
	 * RXC flag is set when the UART receive data so wait until this
	 * flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
     dea:	eb e2       	ldi	r30, 0x2B	; 43
     dec:	f0 e0       	ldi	r31, 0x00	; 0
     dee:	80 81       	ld	r24, Z
     df0:	88 23       	and	r24, r24
     df2:	dc f7       	brge	.-10     	; 0xdea <UART_recieveByte+0x8>

	/*
	 * Read the received data from the RX buffer (UDR) and the RXC flag
	 * will be cleared after read this data
	 */
	return UDR;
     df4:	ec e2       	ldi	r30, 0x2C	; 44
     df6:	f0 e0       	ldi	r31, 0x00	; 0
     df8:	80 81       	ld	r24, Z
}
     dfa:	cf 91       	pop	r28
     dfc:	df 91       	pop	r29
     dfe:	08 95       	ret

00000e00 <UART_sendString>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 ****************************************************************************************/
void UART_sendString(const uint8_t * Str)
{
     e00:	df 93       	push	r29
     e02:	cf 93       	push	r28
     e04:	00 d0       	rcall	.+0      	; 0xe06 <UART_sendString+0x6>
     e06:	0f 92       	push	r0
     e08:	cd b7       	in	r28, 0x3d	; 61
     e0a:	de b7       	in	r29, 0x3e	; 62
     e0c:	9b 83       	std	Y+3, r25	; 0x03
     e0e:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t i = 0;
     e10:	19 82       	std	Y+1, r1	; 0x01
     e12:	0e c0       	rjmp	.+28     	; 0xe30 <UART_sendString+0x30>

	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
     e14:	89 81       	ldd	r24, Y+1	; 0x01
     e16:	28 2f       	mov	r18, r24
     e18:	30 e0       	ldi	r19, 0x00	; 0
     e1a:	8a 81       	ldd	r24, Y+2	; 0x02
     e1c:	9b 81       	ldd	r25, Y+3	; 0x03
     e1e:	fc 01       	movw	r30, r24
     e20:	e2 0f       	add	r30, r18
     e22:	f3 1f       	adc	r31, r19
     e24:	80 81       	ld	r24, Z
     e26:	0e 94 da 06 	call	0xdb4	; 0xdb4 <UART_sendByte>
		i++;
     e2a:	89 81       	ldd	r24, Y+1	; 0x01
     e2c:	8f 5f       	subi	r24, 0xFF	; 255
     e2e:	89 83       	std	Y+1, r24	; 0x01
 ****************************************************************************************/
void UART_sendString(const uint8_t * Str)
{
	uint8_t i = 0;

	while(Str[i] != '\0')
     e30:	89 81       	ldd	r24, Y+1	; 0x01
     e32:	28 2f       	mov	r18, r24
     e34:	30 e0       	ldi	r19, 0x00	; 0
     e36:	8a 81       	ldd	r24, Y+2	; 0x02
     e38:	9b 81       	ldd	r25, Y+3	; 0x03
     e3a:	fc 01       	movw	r30, r24
     e3c:	e2 0f       	add	r30, r18
     e3e:	f3 1f       	adc	r31, r19
     e40:	80 81       	ld	r24, Z
     e42:	88 23       	and	r24, r24
     e44:	39 f7       	brne	.-50     	; 0xe14 <UART_sendString+0x14>
	{
		UART_sendByte(Str[i]);
		i++;
	}
}
     e46:	0f 90       	pop	r0
     e48:	0f 90       	pop	r0
     e4a:	0f 90       	pop	r0
     e4c:	cf 91       	pop	r28
     e4e:	df 91       	pop	r29
     e50:	08 95       	ret

00000e52 <UART_receiveString>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 ****************************************************************************************/
void UART_receiveString(uint8_t * Str)
{
     e52:	0f 93       	push	r16
     e54:	1f 93       	push	r17
     e56:	df 93       	push	r29
     e58:	cf 93       	push	r28
     e5a:	00 d0       	rcall	.+0      	; 0xe5c <UART_receiveString+0xa>
     e5c:	0f 92       	push	r0
     e5e:	cd b7       	in	r28, 0x3d	; 61
     e60:	de b7       	in	r29, 0x3e	; 62
     e62:	9b 83       	std	Y+3, r25	; 0x03
     e64:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t i = 0;
     e66:	19 82       	std	Y+1, r1	; 0x01

	Str[i] = UART_recieveByte();
     e68:	89 81       	ldd	r24, Y+1	; 0x01
     e6a:	28 2f       	mov	r18, r24
     e6c:	30 e0       	ldi	r19, 0x00	; 0
     e6e:	8a 81       	ldd	r24, Y+2	; 0x02
     e70:	9b 81       	ldd	r25, Y+3	; 0x03
     e72:	8c 01       	movw	r16, r24
     e74:	02 0f       	add	r16, r18
     e76:	13 1f       	adc	r17, r19
     e78:	0e 94 f1 06 	call	0xde2	; 0xde2 <UART_recieveByte>
     e7c:	f8 01       	movw	r30, r16
     e7e:	80 83       	st	Z, r24
     e80:	0f c0       	rjmp	.+30     	; 0xea0 <UART_receiveString+0x4e>
	while(Str[i] != '\r')
	{
		i++;
     e82:	89 81       	ldd	r24, Y+1	; 0x01
     e84:	8f 5f       	subi	r24, 0xFF	; 255
     e86:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
     e88:	89 81       	ldd	r24, Y+1	; 0x01
     e8a:	28 2f       	mov	r18, r24
     e8c:	30 e0       	ldi	r19, 0x00	; 0
     e8e:	8a 81       	ldd	r24, Y+2	; 0x02
     e90:	9b 81       	ldd	r25, Y+3	; 0x03
     e92:	8c 01       	movw	r16, r24
     e94:	02 0f       	add	r16, r18
     e96:	13 1f       	adc	r17, r19
     e98:	0e 94 f1 06 	call	0xde2	; 0xde2 <UART_recieveByte>
     e9c:	f8 01       	movw	r30, r16
     e9e:	80 83       	st	Z, r24
void UART_receiveString(uint8_t * Str)
{
	uint8_t i = 0;

	Str[i] = UART_recieveByte();
	while(Str[i] != '\r')
     ea0:	89 81       	ldd	r24, Y+1	; 0x01
     ea2:	28 2f       	mov	r18, r24
     ea4:	30 e0       	ldi	r19, 0x00	; 0
     ea6:	8a 81       	ldd	r24, Y+2	; 0x02
     ea8:	9b 81       	ldd	r25, Y+3	; 0x03
     eaa:	fc 01       	movw	r30, r24
     eac:	e2 0f       	add	r30, r18
     eae:	f3 1f       	adc	r31, r19
     eb0:	80 81       	ld	r24, Z
     eb2:	8d 30       	cpi	r24, 0x0D	; 13
     eb4:	31 f7       	brne	.-52     	; 0xe82 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}
	//Str[i] = ' ';
	//++i;
	Str[i] = '\0';
     eb6:	89 81       	ldd	r24, Y+1	; 0x01
     eb8:	28 2f       	mov	r18, r24
     eba:	30 e0       	ldi	r19, 0x00	; 0
     ebc:	8a 81       	ldd	r24, Y+2	; 0x02
     ebe:	9b 81       	ldd	r25, Y+3	; 0x03
     ec0:	fc 01       	movw	r30, r24
     ec2:	e2 0f       	add	r30, r18
     ec4:	f3 1f       	adc	r31, r19
     ec6:	10 82       	st	Z, r1
}
     ec8:	0f 90       	pop	r0
     eca:	0f 90       	pop	r0
     ecc:	0f 90       	pop	r0
     ece:	cf 91       	pop	r28
     ed0:	df 91       	pop	r29
     ed2:	1f 91       	pop	r17
     ed4:	0f 91       	pop	r16
     ed6:	08 95       	ret

00000ed8 <UART_setParityType>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 ****************************************************************************************/
void UART_setParityType(const UART_ParityType a_parityType)
{
     ed8:	df 93       	push	r29
     eda:	cf 93       	push	r28
     edc:	0f 92       	push	r0
     ede:	cd b7       	in	r28, 0x3d	; 61
     ee0:	de b7       	in	r29, 0x3e	; 62
     ee2:	89 83       	std	Y+1, r24	; 0x01
	/* Insert the required parity type in bits (UPM0, UPM1) in UCSRC Register */
	UCSRC = (UCSRC & 0xCF) | (a_parityType << 4);
     ee4:	a0 e4       	ldi	r26, 0x40	; 64
     ee6:	b0 e0       	ldi	r27, 0x00	; 0
     ee8:	e0 e4       	ldi	r30, 0x40	; 64
     eea:	f0 e0       	ldi	r31, 0x00	; 0
     eec:	80 81       	ld	r24, Z
     eee:	28 2f       	mov	r18, r24
     ef0:	2f 7c       	andi	r18, 0xCF	; 207
     ef2:	89 81       	ldd	r24, Y+1	; 0x01
     ef4:	88 2f       	mov	r24, r24
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	82 95       	swap	r24
     efa:	92 95       	swap	r25
     efc:	90 7f       	andi	r25, 0xF0	; 240
     efe:	98 27       	eor	r25, r24
     f00:	80 7f       	andi	r24, 0xF0	; 240
     f02:	98 27       	eor	r25, r24
     f04:	82 2b       	or	r24, r18
     f06:	8c 93       	st	X, r24
}
     f08:	0f 90       	pop	r0
     f0a:	cf 91       	pop	r28
     f0c:	df 91       	pop	r29
     f0e:	08 95       	ret

00000f10 <UART_setStopBit>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 ****************************************************************************************/
void UART_setStopBit(const UART_StopBit a_stopBit)
{
     f10:	df 93       	push	r29
     f12:	cf 93       	push	r28
     f14:	0f 92       	push	r0
     f16:	cd b7       	in	r28, 0x3d	; 61
     f18:	de b7       	in	r29, 0x3e	; 62
     f1a:	89 83       	std	Y+1, r24	; 0x01
	/* Insert the required number of stop bit(s) in bit USBS in UCSRC Register */
	UCSRC = (UCSRC & 0xF7) | ( a_stopBit << 3);
     f1c:	a0 e4       	ldi	r26, 0x40	; 64
     f1e:	b0 e0       	ldi	r27, 0x00	; 0
     f20:	e0 e4       	ldi	r30, 0x40	; 64
     f22:	f0 e0       	ldi	r31, 0x00	; 0
     f24:	80 81       	ld	r24, Z
     f26:	28 2f       	mov	r18, r24
     f28:	27 7f       	andi	r18, 0xF7	; 247
     f2a:	89 81       	ldd	r24, Y+1	; 0x01
     f2c:	88 2f       	mov	r24, r24
     f2e:	90 e0       	ldi	r25, 0x00	; 0
     f30:	88 0f       	add	r24, r24
     f32:	99 1f       	adc	r25, r25
     f34:	88 0f       	add	r24, r24
     f36:	99 1f       	adc	r25, r25
     f38:	88 0f       	add	r24, r24
     f3a:	99 1f       	adc	r25, r25
     f3c:	82 2b       	or	r24, r18
     f3e:	8c 93       	st	X, r24
}
     f40:	0f 90       	pop	r0
     f42:	cf 91       	pop	r28
     f44:	df 91       	pop	r29
     f46:	08 95       	ret

00000f48 <UART_DeInit>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 ****************************************************************************************/
void UART_DeInit(void)
{
     f48:	df 93       	push	r29
     f4a:	cf 93       	push	r28
     f4c:	cd b7       	in	r28, 0x3d	; 61
     f4e:	de b7       	in	r29, 0x3e	; 62
	/* Reset All UART Registers to its initial value */
	UCSRA = 0x20;
     f50:	eb e2       	ldi	r30, 0x2B	; 43
     f52:	f0 e0       	ldi	r31, 0x00	; 0
     f54:	80 e2       	ldi	r24, 0x20	; 32
     f56:	80 83       	st	Z, r24
	UCSRB = 0;
     f58:	ea e2       	ldi	r30, 0x2A	; 42
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	10 82       	st	Z, r1
	UCSRC = 0x86;
     f5e:	e0 e4       	ldi	r30, 0x40	; 64
     f60:	f0 e0       	ldi	r31, 0x00	; 0
     f62:	86 e8       	ldi	r24, 0x86	; 134
     f64:	80 83       	st	Z, r24

	/* Clear UART Baud Rate Registers */
	UBRRH = 0;
     f66:	e0 e4       	ldi	r30, 0x40	; 64
     f68:	f0 e0       	ldi	r31, 0x00	; 0
     f6a:	10 82       	st	Z, r1
	UBRRL = 0;
     f6c:	e9 e2       	ldi	r30, 0x29	; 41
     f6e:	f0 e0       	ldi	r31, 0x00	; 0
     f70:	10 82       	st	Z, r1
}
     f72:	cf 91       	pop	r28
     f74:	df 91       	pop	r29
     f76:	08 95       	ret

00000f78 <TWI_init>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 ********************************************************************************************/
void TWI_init(const TWI_ConfigType * Config_Ptr)
{
     f78:	cf 92       	push	r12
     f7a:	df 92       	push	r13
     f7c:	ef 92       	push	r14
     f7e:	ff 92       	push	r15
     f80:	0f 93       	push	r16
     f82:	1f 93       	push	r17
     f84:	df 93       	push	r29
     f86:	cf 93       	push	r28
     f88:	00 d0       	rcall	.+0      	; 0xf8a <TWI_init+0x12>
     f8a:	cd b7       	in	r28, 0x3d	; 61
     f8c:	de b7       	in	r29, 0x3e	; 62
     f8e:	9a 83       	std	Y+2, r25	; 0x02
     f90:	89 83       	std	Y+1, r24	; 0x01
	/* Insert the required Pre-scaler in First two bits (TWPS1,TWPS0) in TWSR Register */
	TWSR = (TWSR & 0xFC) | (Config_Ptr -> twi_Prescaler);
     f92:	a1 e2       	ldi	r26, 0x21	; 33
     f94:	b0 e0       	ldi	r27, 0x00	; 0
     f96:	e1 e2       	ldi	r30, 0x21	; 33
     f98:	f0 e0       	ldi	r31, 0x00	; 0
     f9a:	80 81       	ld	r24, Z
     f9c:	98 2f       	mov	r25, r24
     f9e:	9c 7f       	andi	r25, 0xFC	; 252
     fa0:	e9 81       	ldd	r30, Y+1	; 0x01
     fa2:	fa 81       	ldd	r31, Y+2	; 0x02
     fa4:	85 81       	ldd	r24, Z+5	; 0x05
     fa6:	89 2b       	or	r24, r25
     fa8:	8c 93       	st	X, r24

	/* Insert the required Bit Rate in TWBR Register */
	TWBR = ( ( (F_CPU/Config_Ptr -> twi_Clock) -16) /2 ) / ( 4 << (Config_Ptr -> twi_Prescaler) );
     faa:	cc 24       	eor	r12, r12
     fac:	dd 24       	eor	r13, r13
     fae:	68 94       	set
     fb0:	c5 f8       	bld	r12, 5
     fb2:	e9 81       	ldd	r30, Y+1	; 0x01
     fb4:	fa 81       	ldd	r31, Y+2	; 0x02
     fb6:	21 81       	ldd	r18, Z+1	; 0x01
     fb8:	32 81       	ldd	r19, Z+2	; 0x02
     fba:	43 81       	ldd	r20, Z+3	; 0x03
     fbc:	54 81       	ldd	r21, Z+4	; 0x04
     fbe:	80 e0       	ldi	r24, 0x00	; 0
     fc0:	92 e1       	ldi	r25, 0x12	; 18
     fc2:	aa e7       	ldi	r26, 0x7A	; 122
     fc4:	b0 e0       	ldi	r27, 0x00	; 0
     fc6:	bc 01       	movw	r22, r24
     fc8:	cd 01       	movw	r24, r26
     fca:	0e 94 a0 18 	call	0x3140	; 0x3140 <__udivmodsi4>
     fce:	da 01       	movw	r26, r20
     fd0:	c9 01       	movw	r24, r18
     fd2:	40 97       	sbiw	r24, 0x10	; 16
     fd4:	a1 09       	sbc	r26, r1
     fd6:	b1 09       	sbc	r27, r1
     fd8:	7c 01       	movw	r14, r24
     fda:	8d 01       	movw	r16, r26
     fdc:	16 95       	lsr	r17
     fde:	07 95       	ror	r16
     fe0:	f7 94       	ror	r15
     fe2:	e7 94       	ror	r14
     fe4:	e9 81       	ldd	r30, Y+1	; 0x01
     fe6:	fa 81       	ldd	r31, Y+2	; 0x02
     fe8:	85 81       	ldd	r24, Z+5	; 0x05
     fea:	28 2f       	mov	r18, r24
     fec:	30 e0       	ldi	r19, 0x00	; 0
     fee:	84 e0       	ldi	r24, 0x04	; 4
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	02 c0       	rjmp	.+4      	; 0xff8 <TWI_init+0x80>
     ff4:	88 0f       	add	r24, r24
     ff6:	99 1f       	adc	r25, r25
     ff8:	2a 95       	dec	r18
     ffa:	e2 f7       	brpl	.-8      	; 0xff4 <TWI_init+0x7c>
     ffc:	9c 01       	movw	r18, r24
     ffe:	44 27       	eor	r20, r20
    1000:	37 fd       	sbrc	r19, 7
    1002:	40 95       	com	r20
    1004:	54 2f       	mov	r21, r20
    1006:	c8 01       	movw	r24, r16
    1008:	b7 01       	movw	r22, r14
    100a:	0e 94 a0 18 	call	0x3140	; 0x3140 <__udivmodsi4>
    100e:	da 01       	movw	r26, r20
    1010:	c9 01       	movw	r24, r18
    1012:	f6 01       	movw	r30, r12
    1014:	80 83       	st	Z, r24

    /*
     * Insert the required Two Wire Bus address, if any master device want to call MCU
     * (used in case this MC is a slave device), General Call Recognition: Off
     */
    TWAR = ( (Config_Ptr -> twi_Address) << 1 ); /* Shift left to use as address in 7 bits only */
    1016:	a2 e2       	ldi	r26, 0x22	; 34
    1018:	b0 e0       	ldi	r27, 0x00	; 0
    101a:	e9 81       	ldd	r30, Y+1	; 0x01
    101c:	fa 81       	ldd	r31, Y+2	; 0x02
    101e:	80 81       	ld	r24, Z
    1020:	88 0f       	add	r24, r24
    1022:	8c 93       	st	X, r24
	
    TWCR = (1 << TWEN); /* Enable TWI */
    1024:	e6 e5       	ldi	r30, 0x56	; 86
    1026:	f0 e0       	ldi	r31, 0x00	; 0
    1028:	84 e0       	ldi	r24, 0x04	; 4
    102a:	80 83       	st	Z, r24
}
    102c:	0f 90       	pop	r0
    102e:	0f 90       	pop	r0
    1030:	cf 91       	pop	r28
    1032:	df 91       	pop	r29
    1034:	1f 91       	pop	r17
    1036:	0f 91       	pop	r16
    1038:	ff 90       	pop	r15
    103a:	ef 90       	pop	r14
    103c:	df 90       	pop	r13
    103e:	cf 90       	pop	r12
    1040:	08 95       	ret

00001042 <TWI_start>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 ********************************************************************************************/
void TWI_start(void)
{
    1042:	df 93       	push	r29
    1044:	cf 93       	push	r28
    1046:	cd b7       	in	r28, 0x3d	; 61
    1048:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT = 1
	 * send the start bit by TWSTA = 1
	 * Enable TWI Module TWEN = 1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    104a:	e6 e5       	ldi	r30, 0x56	; 86
    104c:	f0 e0       	ldi	r31, 0x00	; 0
    104e:	84 ea       	ldi	r24, 0xA4	; 164
    1050:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1052:	e6 e5       	ldi	r30, 0x56	; 86
    1054:	f0 e0       	ldi	r31, 0x00	; 0
    1056:	80 81       	ld	r24, Z
    1058:	88 23       	and	r24, r24
    105a:	dc f7       	brge	.-10     	; 0x1052 <TWI_start+0x10>
}
    105c:	cf 91       	pop	r28
    105e:	df 91       	pop	r29
    1060:	08 95       	ret

00001062 <TWI_stop>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 *****************************************************************************************/
void TWI_stop(void)
{
    1062:	df 93       	push	r29
    1064:	cf 93       	push	r28
    1066:	cd b7       	in	r28, 0x3d	; 61
    1068:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT = 1
	 * send the stop bit by TWSTO = 1
	 * Enable TWI Module TWEN = 1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    106a:	e6 e5       	ldi	r30, 0x56	; 86
    106c:	f0 e0       	ldi	r31, 0x00	; 0
    106e:	84 e9       	ldi	r24, 0x94	; 148
    1070:	80 83       	st	Z, r24
}
    1072:	cf 91       	pop	r28
    1074:	df 91       	pop	r29
    1076:	08 95       	ret

00001078 <TWI_write>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 *****************************************************************************************/
void TWI_write(uint8_t data)
{
    1078:	df 93       	push	r29
    107a:	cf 93       	push	r28
    107c:	0f 92       	push	r0
    107e:	cd b7       	in	r28, 0x3d	; 61
    1080:	de b7       	in	r29, 0x3e	; 62
    1082:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    1084:	e3 e2       	ldi	r30, 0x23	; 35
    1086:	f0 e0       	ldi	r31, 0x00	; 0
    1088:	89 81       	ldd	r24, Y+1	; 0x01
    108a:	80 83       	st	Z, r24

    /* 
	 * Clear the TWINT flag before sending the data TWINT = 1
	 * Enable TWI Module TWEN = 1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    108c:	e6 e5       	ldi	r30, 0x56	; 86
    108e:	f0 e0       	ldi	r31, 0x00	; 0
    1090:	84 e8       	ldi	r24, 0x84	; 132
    1092:	80 83       	st	Z, r24

    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1094:	e6 e5       	ldi	r30, 0x56	; 86
    1096:	f0 e0       	ldi	r31, 0x00	; 0
    1098:	80 81       	ld	r24, Z
    109a:	88 23       	and	r24, r24
    109c:	dc f7       	brge	.-10     	; 0x1094 <TWI_write+0x1c>
}
    109e:	0f 90       	pop	r0
    10a0:	cf 91       	pop	r28
    10a2:	df 91       	pop	r29
    10a4:	08 95       	ret

000010a6 <TWI_readWithACK>:
 * [in/out]		 	None
 *
 * [Returns]:       Data read (with ACK) from the TWI Bus
 *****************************************************************************************/
uint8_t TWI_readWithACK(void)
{
    10a6:	df 93       	push	r29
    10a8:	cf 93       	push	r28
    10aa:	cd b7       	in	r28, 0x3d	; 61
    10ac:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT =  1
	 * Enable sending ACK after reading or receiving data TWEA = 1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    10ae:	e6 e5       	ldi	r30, 0x56	; 86
    10b0:	f0 e0       	ldi	r31, 0x00	; 0
    10b2:	84 ec       	ldi	r24, 0xC4	; 196
    10b4:	80 83       	st	Z, r24
	
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    10b6:	e6 e5       	ldi	r30, 0x56	; 86
    10b8:	f0 e0       	ldi	r31, 0x00	; 0
    10ba:	80 81       	ld	r24, Z
    10bc:	88 23       	and	r24, r24
    10be:	dc f7       	brge	.-10     	; 0x10b6 <TWI_readWithACK+0x10>
	
    /* Read Data */
    return TWDR;
    10c0:	e3 e2       	ldi	r30, 0x23	; 35
    10c2:	f0 e0       	ldi	r31, 0x00	; 0
    10c4:	80 81       	ld	r24, Z
}
    10c6:	cf 91       	pop	r28
    10c8:	df 91       	pop	r29
    10ca:	08 95       	ret

000010cc <TWI_readWithNACK>:
 * [in/out]		 	None
 *
 * [Returns]:       Data read (without ACK) from the TWI Bus
 *****************************************************************************************/
uint8_t TWI_readWithNACK(void)
{
    10cc:	df 93       	push	r29
    10ce:	cf 93       	push	r28
    10d0:	cd b7       	in	r28, 0x3d	; 61
    10d2:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT = 1
	 * Enable TWI Module TWEN = 1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    10d4:	e6 e5       	ldi	r30, 0x56	; 86
    10d6:	f0 e0       	ldi	r31, 0x00	; 0
    10d8:	84 e8       	ldi	r24, 0x84	; 132
    10da:	80 83       	st	Z, r24
	
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    10dc:	e6 e5       	ldi	r30, 0x56	; 86
    10de:	f0 e0       	ldi	r31, 0x00	; 0
    10e0:	80 81       	ld	r24, Z
    10e2:	88 23       	and	r24, r24
    10e4:	dc f7       	brge	.-10     	; 0x10dc <TWI_readWithNACK+0x10>
	
    /* Read Data */
    return TWDR;
    10e6:	e3 e2       	ldi	r30, 0x23	; 35
    10e8:	f0 e0       	ldi	r31, 0x00	; 0
    10ea:	80 81       	ld	r24, Z
}
    10ec:	cf 91       	pop	r28
    10ee:	df 91       	pop	r29
    10f0:	08 95       	ret

000010f2 <TWI_getStatus>:
 * [in/out]		 	None
 *
 * [Returns]:       Status of the TWI Bus
 *****************************************************************************************/
uint8_t TWI_getStatus(void)
{
    10f2:	df 93       	push	r29
    10f4:	cf 93       	push	r28
    10f6:	0f 92       	push	r0
    10f8:	cd b7       	in	r28, 0x3d	; 61
    10fa:	de b7       	in	r29, 0x3e	; 62
    uint8_t status;
    /* Masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    10fc:	e1 e2       	ldi	r30, 0x21	; 33
    10fe:	f0 e0       	ldi	r31, 0x00	; 0
    1100:	80 81       	ld	r24, Z
    1102:	88 7f       	andi	r24, 0xF8	; 248
    1104:	89 83       	std	Y+1, r24	; 0x01
    return status;
    1106:	89 81       	ldd	r24, Y+1	; 0x01
}
    1108:	0f 90       	pop	r0
    110a:	cf 91       	pop	r28
    110c:	df 91       	pop	r29
    110e:	08 95       	ret

00001110 <TWI_DeInit>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 *****************************************************************************************/
void TWI_DeInit(void)
{
    1110:	df 93       	push	r29
    1112:	cf 93       	push	r28
    1114:	cd b7       	in	r28, 0x3d	; 61
    1116:	de b7       	in	r29, 0x3e	; 62
	/* Reset All TWI Registers to its initial value (if they have), and Clear the others */
	TWBR = 0;
    1118:	e0 e2       	ldi	r30, 0x20	; 32
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	10 82       	st	Z, r1
	TWSR = 0xF8;
    111e:	e1 e2       	ldi	r30, 0x21	; 33
    1120:	f0 e0       	ldi	r31, 0x00	; 0
    1122:	88 ef       	ldi	r24, 0xF8	; 248
    1124:	80 83       	st	Z, r24
	TWAR = 0xFE;
    1126:	e2 e2       	ldi	r30, 0x22	; 34
    1128:	f0 e0       	ldi	r31, 0x00	; 0
    112a:	8e ef       	ldi	r24, 0xFE	; 254
    112c:	80 83       	st	Z, r24

	/* Disable TWI */
	TWCR &= ~(1 << TWEN);
    112e:	a6 e5       	ldi	r26, 0x56	; 86
    1130:	b0 e0       	ldi	r27, 0x00	; 0
    1132:	e6 e5       	ldi	r30, 0x56	; 86
    1134:	f0 e0       	ldi	r31, 0x00	; 0
    1136:	80 81       	ld	r24, Z
    1138:	8b 7f       	andi	r24, 0xFB	; 251
    113a:	8c 93       	st	X, r24
}
    113c:	cf 91       	pop	r28
    113e:	df 91       	pop	r29
    1140:	08 95       	ret

00001142 <DIO_setPortDirection>:
 * [in/out]		 	None
 *
 * [Returns]:       Error state
 ******************************************************************************/
enuDIO_E_STATE_t DIO_setPortDirection(enuDIO_PortId_t enu_portID, enuDIO_DirectionType_t enu_portDirection)
{
    1142:	df 93       	push	r29
    1144:	cf 93       	push	r28
    1146:	cd b7       	in	r28, 0x3d	; 61
    1148:	de b7       	in	r29, 0x3e	; 62
    114a:	27 97       	sbiw	r28, 0x07	; 7
    114c:	0f b6       	in	r0, 0x3f	; 63
    114e:	f8 94       	cli
    1150:	de bf       	out	0x3e, r29	; 62
    1152:	0f be       	out	0x3f, r0	; 63
    1154:	cd bf       	out	0x3d, r28	; 61
    1156:	8a 83       	std	Y+2, r24	; 0x02
    1158:	6b 83       	std	Y+3, r22	; 0x03
	enuDIO_E_STATE_t enu_ErrorState = E_NOT_OK;
    115a:	81 e0       	ldi	r24, 0x01	; 1
    115c:	89 83       	std	Y+1, r24	; 0x01

	/* Check if the PORT is input or output */
    if(enu_portDirection == HIGH)
    115e:	8b 81       	ldd	r24, Y+3	; 0x03
    1160:	81 30       	cpi	r24, 0x01	; 1
    1162:	d1 f5       	brne	.+116    	; 0x11d8 <DIO_setPortDirection+0x96>
    {
    	switch (enu_portID)
    1164:	8a 81       	ldd	r24, Y+2	; 0x02
    1166:	28 2f       	mov	r18, r24
    1168:	30 e0       	ldi	r19, 0x00	; 0
    116a:	3f 83       	std	Y+7, r19	; 0x07
    116c:	2e 83       	std	Y+6, r18	; 0x06
    116e:	8e 81       	ldd	r24, Y+6	; 0x06
    1170:	9f 81       	ldd	r25, Y+7	; 0x07
    1172:	81 30       	cpi	r24, 0x01	; 1
    1174:	91 05       	cpc	r25, r1
    1176:	d9 f0       	breq	.+54     	; 0x11ae <DIO_setPortDirection+0x6c>
    1178:	2e 81       	ldd	r18, Y+6	; 0x06
    117a:	3f 81       	ldd	r19, Y+7	; 0x07
    117c:	22 30       	cpi	r18, 0x02	; 2
    117e:	31 05       	cpc	r19, r1
    1180:	2c f4       	brge	.+10     	; 0x118c <DIO_setPortDirection+0x4a>
    1182:	8e 81       	ldd	r24, Y+6	; 0x06
    1184:	9f 81       	ldd	r25, Y+7	; 0x07
    1186:	00 97       	sbiw	r24, 0x00	; 0
    1188:	61 f0       	breq	.+24     	; 0x11a2 <DIO_setPortDirection+0x60>
    118a:	23 c0       	rjmp	.+70     	; 0x11d2 <DIO_setPortDirection+0x90>
    118c:	2e 81       	ldd	r18, Y+6	; 0x06
    118e:	3f 81       	ldd	r19, Y+7	; 0x07
    1190:	22 30       	cpi	r18, 0x02	; 2
    1192:	31 05       	cpc	r19, r1
    1194:	91 f0       	breq	.+36     	; 0x11ba <DIO_setPortDirection+0x78>
    1196:	8e 81       	ldd	r24, Y+6	; 0x06
    1198:	9f 81       	ldd	r25, Y+7	; 0x07
    119a:	83 30       	cpi	r24, 0x03	; 3
    119c:	91 05       	cpc	r25, r1
    119e:	99 f0       	breq	.+38     	; 0x11c6 <DIO_setPortDirection+0x84>
    11a0:	18 c0       	rjmp	.+48     	; 0x11d2 <DIO_setPortDirection+0x90>
		{
		case DIO_PORTA:
			DDRA_DIR_R = OUTPUT_PORT;
    11a2:	ea e3       	ldi	r30, 0x3A	; 58
    11a4:	f0 e0       	ldi	r31, 0x00	; 0
    11a6:	8f ef       	ldi	r24, 0xFF	; 255
    11a8:	80 83       	st	Z, r24
			enu_ErrorState = DIO_E_PARAM_VALID;
    11aa:	19 82       	std	Y+1, r1	; 0x01
    11ac:	50 c0       	rjmp	.+160    	; 0x124e <DIO_setPortDirection+0x10c>
			break;
		case DIO_PORTB:
			DDRB_DIR_R = OUTPUT_PORT;
    11ae:	e7 e3       	ldi	r30, 0x37	; 55
    11b0:	f0 e0       	ldi	r31, 0x00	; 0
    11b2:	8f ef       	ldi	r24, 0xFF	; 255
    11b4:	80 83       	st	Z, r24
			enu_ErrorState = DIO_E_PARAM_VALID;
    11b6:	19 82       	std	Y+1, r1	; 0x01
    11b8:	4a c0       	rjmp	.+148    	; 0x124e <DIO_setPortDirection+0x10c>
			break;
		case DIO_PORTC:
			DDRC_DIR_R = OUTPUT_PORT;
    11ba:	e4 e3       	ldi	r30, 0x34	; 52
    11bc:	f0 e0       	ldi	r31, 0x00	; 0
    11be:	8f ef       	ldi	r24, 0xFF	; 255
    11c0:	80 83       	st	Z, r24
			enu_ErrorState = DIO_E_PARAM_VALID;
    11c2:	19 82       	std	Y+1, r1	; 0x01
    11c4:	44 c0       	rjmp	.+136    	; 0x124e <DIO_setPortDirection+0x10c>
			break;
		case DIO_PORTD:
			DDRD_DIR_R = OUTPUT_PORT;
    11c6:	e1 e3       	ldi	r30, 0x31	; 49
    11c8:	f0 e0       	ldi	r31, 0x00	; 0
    11ca:	8f ef       	ldi	r24, 0xFF	; 255
    11cc:	80 83       	st	Z, r24
			enu_ErrorState = DIO_E_PARAM_VALID;
    11ce:	19 82       	std	Y+1, r1	; 0x01
    11d0:	3e c0       	rjmp	.+124    	; 0x124e <DIO_setPortDirection+0x10c>
			break;
		default:
			enu_ErrorState = DIO_E_PARAM_INVALID_PORT_ID;
    11d2:	81 e0       	ldi	r24, 0x01	; 1
    11d4:	89 83       	std	Y+1, r24	; 0x01
    11d6:	3b c0       	rjmp	.+118    	; 0x124e <DIO_setPortDirection+0x10c>
			break;
		}
    }
    else if(enu_portDirection == LOW)
    11d8:	8b 81       	ldd	r24, Y+3	; 0x03
    11da:	88 23       	and	r24, r24
    11dc:	b1 f5       	brne	.+108    	; 0x124a <DIO_setPortDirection+0x108>
    {
		switch (enu_portID)
    11de:	8a 81       	ldd	r24, Y+2	; 0x02
    11e0:	28 2f       	mov	r18, r24
    11e2:	30 e0       	ldi	r19, 0x00	; 0
    11e4:	3d 83       	std	Y+5, r19	; 0x05
    11e6:	2c 83       	std	Y+4, r18	; 0x04
    11e8:	8c 81       	ldd	r24, Y+4	; 0x04
    11ea:	9d 81       	ldd	r25, Y+5	; 0x05
    11ec:	81 30       	cpi	r24, 0x01	; 1
    11ee:	91 05       	cpc	r25, r1
    11f0:	d1 f0       	breq	.+52     	; 0x1226 <DIO_setPortDirection+0xe4>
    11f2:	2c 81       	ldd	r18, Y+4	; 0x04
    11f4:	3d 81       	ldd	r19, Y+5	; 0x05
    11f6:	22 30       	cpi	r18, 0x02	; 2
    11f8:	31 05       	cpc	r19, r1
    11fa:	2c f4       	brge	.+10     	; 0x1206 <DIO_setPortDirection+0xc4>
    11fc:	8c 81       	ldd	r24, Y+4	; 0x04
    11fe:	9d 81       	ldd	r25, Y+5	; 0x05
    1200:	00 97       	sbiw	r24, 0x00	; 0
    1202:	61 f0       	breq	.+24     	; 0x121c <DIO_setPortDirection+0xda>
    1204:	1f c0       	rjmp	.+62     	; 0x1244 <DIO_setPortDirection+0x102>
    1206:	2c 81       	ldd	r18, Y+4	; 0x04
    1208:	3d 81       	ldd	r19, Y+5	; 0x05
    120a:	22 30       	cpi	r18, 0x02	; 2
    120c:	31 05       	cpc	r19, r1
    120e:	81 f0       	breq	.+32     	; 0x1230 <DIO_setPortDirection+0xee>
    1210:	8c 81       	ldd	r24, Y+4	; 0x04
    1212:	9d 81       	ldd	r25, Y+5	; 0x05
    1214:	83 30       	cpi	r24, 0x03	; 3
    1216:	91 05       	cpc	r25, r1
    1218:	81 f0       	breq	.+32     	; 0x123a <DIO_setPortDirection+0xf8>
    121a:	14 c0       	rjmp	.+40     	; 0x1244 <DIO_setPortDirection+0x102>
		{
		case DIO_PORTA:
			DDRA_DIR_R = INPUT_PORT;
    121c:	ea e3       	ldi	r30, 0x3A	; 58
    121e:	f0 e0       	ldi	r31, 0x00	; 0
    1220:	10 82       	st	Z, r1
			enu_ErrorState = DIO_E_PARAM_VALID;
    1222:	19 82       	std	Y+1, r1	; 0x01
    1224:	14 c0       	rjmp	.+40     	; 0x124e <DIO_setPortDirection+0x10c>
			break;
		case DIO_PORTB:
			DDRB_DIR_R = INPUT_PORT;
    1226:	e7 e3       	ldi	r30, 0x37	; 55
    1228:	f0 e0       	ldi	r31, 0x00	; 0
    122a:	10 82       	st	Z, r1
			enu_ErrorState = DIO_E_PARAM_VALID;
    122c:	19 82       	std	Y+1, r1	; 0x01
    122e:	0f c0       	rjmp	.+30     	; 0x124e <DIO_setPortDirection+0x10c>
			break;
		case DIO_PORTC:
			DDRC_DIR_R = INPUT_PORT;
    1230:	e4 e3       	ldi	r30, 0x34	; 52
    1232:	f0 e0       	ldi	r31, 0x00	; 0
    1234:	10 82       	st	Z, r1
			enu_ErrorState = DIO_E_PARAM_VALID;
    1236:	19 82       	std	Y+1, r1	; 0x01
    1238:	0a c0       	rjmp	.+20     	; 0x124e <DIO_setPortDirection+0x10c>
			break;
		case DIO_PORTD:
			DDRD_DIR_R = INPUT_PORT;
    123a:	e1 e3       	ldi	r30, 0x31	; 49
    123c:	f0 e0       	ldi	r31, 0x00	; 0
    123e:	10 82       	st	Z, r1
			enu_ErrorState = DIO_E_PARAM_VALID;
    1240:	19 82       	std	Y+1, r1	; 0x01
    1242:	05 c0       	rjmp	.+10     	; 0x124e <DIO_setPortDirection+0x10c>
			break;
		default:
			enu_ErrorState = DIO_E_PARAM_INVALID_PORT_ID;
    1244:	81 e0       	ldi	r24, 0x01	; 1
    1246:	89 83       	std	Y+1, r24	; 0x01
    1248:	02 c0       	rjmp	.+4      	; 0x124e <DIO_setPortDirection+0x10c>
			break;
		}
    }
    else
    {
    	enu_ErrorState = DIO_E_PARAM_INVALID_PORT_DIR;	/* Invalid port direction */
    124a:	84 e0       	ldi	r24, 0x04	; 4
    124c:	89 83       	std	Y+1, r24	; 0x01
    }
    return enu_ErrorState;
    124e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1250:	27 96       	adiw	r28, 0x07	; 7
    1252:	0f b6       	in	r0, 0x3f	; 63
    1254:	f8 94       	cli
    1256:	de bf       	out	0x3e, r29	; 62
    1258:	0f be       	out	0x3f, r0	; 63
    125a:	cd bf       	out	0x3d, r28	; 61
    125c:	cf 91       	pop	r28
    125e:	df 91       	pop	r29
    1260:	08 95       	ret

00001262 <DIO_setPinDirection>:
 *
 * [Returns]:       Error State
 ******************************************************************************/
enuDIO_E_STATE_t DIO_setPinDirection(enuDIO_PortId_t enu_portID , enuDIO_PinId_t enu_pinID,
								     enuDIO_DirectionType_t enu_pinDirection)
{
    1262:	df 93       	push	r29
    1264:	cf 93       	push	r28
    1266:	cd b7       	in	r28, 0x3d	; 61
    1268:	de b7       	in	r29, 0x3e	; 62
    126a:	28 97       	sbiw	r28, 0x08	; 8
    126c:	0f b6       	in	r0, 0x3f	; 63
    126e:	f8 94       	cli
    1270:	de bf       	out	0x3e, r29	; 62
    1272:	0f be       	out	0x3f, r0	; 63
    1274:	cd bf       	out	0x3d, r28	; 61
    1276:	8a 83       	std	Y+2, r24	; 0x02
    1278:	6b 83       	std	Y+3, r22	; 0x03
    127a:	4c 83       	std	Y+4, r20	; 0x04
	enuDIO_E_STATE_t enu_ErrorState = E_NOT_OK;
    127c:	81 e0       	ldi	r24, 0x01	; 1
    127e:	89 83       	std	Y+1, r24	; 0x01

	/* Check if the pin id is one of the existed pin or not */
	if ((enu_pinID >= PIN_0) && (enu_pinID <= PIN_7))
    1280:	8b 81       	ldd	r24, Y+3	; 0x03
    1282:	88 30       	cpi	r24, 0x08	; 8
    1284:	08 f0       	brcs	.+2      	; 0x1288 <DIO_setPinDirection+0x26>
    1286:	fd c0       	rjmp	.+506    	; 0x1482 <DIO_setPinDirection+0x220>
	{
		if (enu_pinDirection == OUTPUT)
    1288:	8c 81       	ldd	r24, Y+4	; 0x04
    128a:	81 30       	cpi	r24, 0x01	; 1
    128c:	09 f0       	breq	.+2      	; 0x1290 <DIO_setPinDirection+0x2e>
    128e:	77 c0       	rjmp	.+238    	; 0x137e <DIO_setPinDirection+0x11c>
		{
			switch (enu_portID)
    1290:	8a 81       	ldd	r24, Y+2	; 0x02
    1292:	28 2f       	mov	r18, r24
    1294:	30 e0       	ldi	r19, 0x00	; 0
    1296:	38 87       	std	Y+8, r19	; 0x08
    1298:	2f 83       	std	Y+7, r18	; 0x07
    129a:	8f 81       	ldd	r24, Y+7	; 0x07
    129c:	98 85       	ldd	r25, Y+8	; 0x08
    129e:	81 30       	cpi	r24, 0x01	; 1
    12a0:	91 05       	cpc	r25, r1
    12a2:	59 f1       	breq	.+86     	; 0x12fa <DIO_setPinDirection+0x98>
    12a4:	2f 81       	ldd	r18, Y+7	; 0x07
    12a6:	38 85       	ldd	r19, Y+8	; 0x08
    12a8:	22 30       	cpi	r18, 0x02	; 2
    12aa:	31 05       	cpc	r19, r1
    12ac:	2c f4       	brge	.+10     	; 0x12b8 <DIO_setPinDirection+0x56>
    12ae:	8f 81       	ldd	r24, Y+7	; 0x07
    12b0:	98 85       	ldd	r25, Y+8	; 0x08
    12b2:	00 97       	sbiw	r24, 0x00	; 0
    12b4:	69 f0       	breq	.+26     	; 0x12d0 <DIO_setPinDirection+0x6e>
    12b6:	60 c0       	rjmp	.+192    	; 0x1378 <DIO_setPinDirection+0x116>
    12b8:	2f 81       	ldd	r18, Y+7	; 0x07
    12ba:	38 85       	ldd	r19, Y+8	; 0x08
    12bc:	22 30       	cpi	r18, 0x02	; 2
    12be:	31 05       	cpc	r19, r1
    12c0:	89 f1       	breq	.+98     	; 0x1324 <DIO_setPinDirection+0xc2>
    12c2:	8f 81       	ldd	r24, Y+7	; 0x07
    12c4:	98 85       	ldd	r25, Y+8	; 0x08
    12c6:	83 30       	cpi	r24, 0x03	; 3
    12c8:	91 05       	cpc	r25, r1
    12ca:	09 f4       	brne	.+2      	; 0x12ce <DIO_setPinDirection+0x6c>
    12cc:	40 c0       	rjmp	.+128    	; 0x134e <DIO_setPinDirection+0xec>
    12ce:	54 c0       	rjmp	.+168    	; 0x1378 <DIO_setPinDirection+0x116>
			{
			case DIO_PORTA:
				SET_BIT(DDRA_DIR_R, enu_pinID);
    12d0:	aa e3       	ldi	r26, 0x3A	; 58
    12d2:	b0 e0       	ldi	r27, 0x00	; 0
    12d4:	ea e3       	ldi	r30, 0x3A	; 58
    12d6:	f0 e0       	ldi	r31, 0x00	; 0
    12d8:	80 81       	ld	r24, Z
    12da:	48 2f       	mov	r20, r24
    12dc:	8b 81       	ldd	r24, Y+3	; 0x03
    12de:	28 2f       	mov	r18, r24
    12e0:	30 e0       	ldi	r19, 0x00	; 0
    12e2:	81 e0       	ldi	r24, 0x01	; 1
    12e4:	90 e0       	ldi	r25, 0x00	; 0
    12e6:	02 2e       	mov	r0, r18
    12e8:	02 c0       	rjmp	.+4      	; 0x12ee <DIO_setPinDirection+0x8c>
    12ea:	88 0f       	add	r24, r24
    12ec:	99 1f       	adc	r25, r25
    12ee:	0a 94       	dec	r0
    12f0:	e2 f7       	brpl	.-8      	; 0x12ea <DIO_setPinDirection+0x88>
    12f2:	84 2b       	or	r24, r20
    12f4:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
    12f6:	19 82       	std	Y+1, r1	; 0x01
    12f8:	c6 c0       	rjmp	.+396    	; 0x1486 <DIO_setPinDirection+0x224>
				break;
			case DIO_PORTB:
				SET_BIT(DDRB_DIR_R, enu_pinID);
    12fa:	a7 e3       	ldi	r26, 0x37	; 55
    12fc:	b0 e0       	ldi	r27, 0x00	; 0
    12fe:	e7 e3       	ldi	r30, 0x37	; 55
    1300:	f0 e0       	ldi	r31, 0x00	; 0
    1302:	80 81       	ld	r24, Z
    1304:	48 2f       	mov	r20, r24
    1306:	8b 81       	ldd	r24, Y+3	; 0x03
    1308:	28 2f       	mov	r18, r24
    130a:	30 e0       	ldi	r19, 0x00	; 0
    130c:	81 e0       	ldi	r24, 0x01	; 1
    130e:	90 e0       	ldi	r25, 0x00	; 0
    1310:	02 2e       	mov	r0, r18
    1312:	02 c0       	rjmp	.+4      	; 0x1318 <DIO_setPinDirection+0xb6>
    1314:	88 0f       	add	r24, r24
    1316:	99 1f       	adc	r25, r25
    1318:	0a 94       	dec	r0
    131a:	e2 f7       	brpl	.-8      	; 0x1314 <DIO_setPinDirection+0xb2>
    131c:	84 2b       	or	r24, r20
    131e:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
    1320:	19 82       	std	Y+1, r1	; 0x01
    1322:	b1 c0       	rjmp	.+354    	; 0x1486 <DIO_setPinDirection+0x224>
				break;
			case DIO_PORTC:
				SET_BIT(DDRC_DIR_R, enu_pinID);
    1324:	a4 e3       	ldi	r26, 0x34	; 52
    1326:	b0 e0       	ldi	r27, 0x00	; 0
    1328:	e4 e3       	ldi	r30, 0x34	; 52
    132a:	f0 e0       	ldi	r31, 0x00	; 0
    132c:	80 81       	ld	r24, Z
    132e:	48 2f       	mov	r20, r24
    1330:	8b 81       	ldd	r24, Y+3	; 0x03
    1332:	28 2f       	mov	r18, r24
    1334:	30 e0       	ldi	r19, 0x00	; 0
    1336:	81 e0       	ldi	r24, 0x01	; 1
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	02 2e       	mov	r0, r18
    133c:	02 c0       	rjmp	.+4      	; 0x1342 <DIO_setPinDirection+0xe0>
    133e:	88 0f       	add	r24, r24
    1340:	99 1f       	adc	r25, r25
    1342:	0a 94       	dec	r0
    1344:	e2 f7       	brpl	.-8      	; 0x133e <DIO_setPinDirection+0xdc>
    1346:	84 2b       	or	r24, r20
    1348:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
    134a:	19 82       	std	Y+1, r1	; 0x01
    134c:	9c c0       	rjmp	.+312    	; 0x1486 <DIO_setPinDirection+0x224>
				break;
			case DIO_PORTD:
				SET_BIT(DDRD_DIR_R, enu_pinID);
    134e:	a1 e3       	ldi	r26, 0x31	; 49
    1350:	b0 e0       	ldi	r27, 0x00	; 0
    1352:	e1 e3       	ldi	r30, 0x31	; 49
    1354:	f0 e0       	ldi	r31, 0x00	; 0
    1356:	80 81       	ld	r24, Z
    1358:	48 2f       	mov	r20, r24
    135a:	8b 81       	ldd	r24, Y+3	; 0x03
    135c:	28 2f       	mov	r18, r24
    135e:	30 e0       	ldi	r19, 0x00	; 0
    1360:	81 e0       	ldi	r24, 0x01	; 1
    1362:	90 e0       	ldi	r25, 0x00	; 0
    1364:	02 2e       	mov	r0, r18
    1366:	02 c0       	rjmp	.+4      	; 0x136c <DIO_setPinDirection+0x10a>
    1368:	88 0f       	add	r24, r24
    136a:	99 1f       	adc	r25, r25
    136c:	0a 94       	dec	r0
    136e:	e2 f7       	brpl	.-8      	; 0x1368 <DIO_setPinDirection+0x106>
    1370:	84 2b       	or	r24, r20
    1372:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
    1374:	19 82       	std	Y+1, r1	; 0x01
    1376:	87 c0       	rjmp	.+270    	; 0x1486 <DIO_setPinDirection+0x224>
				break;
            default:
            	enu_ErrorState = DIO_E_PARAM_INVALID_PORT_ID;	/* Invalid port id */
    1378:	81 e0       	ldi	r24, 0x01	; 1
    137a:	89 83       	std	Y+1, r24	; 0x01
    137c:	84 c0       	rjmp	.+264    	; 0x1486 <DIO_setPinDirection+0x224>
                break;
			}
		}
		else if (enu_pinDirection == INPUT)
    137e:	8c 81       	ldd	r24, Y+4	; 0x04
    1380:	88 23       	and	r24, r24
    1382:	09 f0       	breq	.+2      	; 0x1386 <DIO_setPinDirection+0x124>
    1384:	7b c0       	rjmp	.+246    	; 0x147c <DIO_setPinDirection+0x21a>
		{
			switch (enu_portID)
    1386:	8a 81       	ldd	r24, Y+2	; 0x02
    1388:	28 2f       	mov	r18, r24
    138a:	30 e0       	ldi	r19, 0x00	; 0
    138c:	3e 83       	std	Y+6, r19	; 0x06
    138e:	2d 83       	std	Y+5, r18	; 0x05
    1390:	8d 81       	ldd	r24, Y+5	; 0x05
    1392:	9e 81       	ldd	r25, Y+6	; 0x06
    1394:	81 30       	cpi	r24, 0x01	; 1
    1396:	91 05       	cpc	r25, r1
    1398:	61 f1       	breq	.+88     	; 0x13f2 <DIO_setPinDirection+0x190>
    139a:	2d 81       	ldd	r18, Y+5	; 0x05
    139c:	3e 81       	ldd	r19, Y+6	; 0x06
    139e:	22 30       	cpi	r18, 0x02	; 2
    13a0:	31 05       	cpc	r19, r1
    13a2:	2c f4       	brge	.+10     	; 0x13ae <DIO_setPinDirection+0x14c>
    13a4:	8d 81       	ldd	r24, Y+5	; 0x05
    13a6:	9e 81       	ldd	r25, Y+6	; 0x06
    13a8:	00 97       	sbiw	r24, 0x00	; 0
    13aa:	69 f0       	breq	.+26     	; 0x13c6 <DIO_setPinDirection+0x164>
    13ac:	64 c0       	rjmp	.+200    	; 0x1476 <DIO_setPinDirection+0x214>
    13ae:	2d 81       	ldd	r18, Y+5	; 0x05
    13b0:	3e 81       	ldd	r19, Y+6	; 0x06
    13b2:	22 30       	cpi	r18, 0x02	; 2
    13b4:	31 05       	cpc	r19, r1
    13b6:	99 f1       	breq	.+102    	; 0x141e <DIO_setPinDirection+0x1bc>
    13b8:	8d 81       	ldd	r24, Y+5	; 0x05
    13ba:	9e 81       	ldd	r25, Y+6	; 0x06
    13bc:	83 30       	cpi	r24, 0x03	; 3
    13be:	91 05       	cpc	r25, r1
    13c0:	09 f4       	brne	.+2      	; 0x13c4 <DIO_setPinDirection+0x162>
    13c2:	43 c0       	rjmp	.+134    	; 0x144a <DIO_setPinDirection+0x1e8>
    13c4:	58 c0       	rjmp	.+176    	; 0x1476 <DIO_setPinDirection+0x214>
			{
			case DIO_PORTA:
				CLEAR_BIT(DDRA_DIR_R, enu_pinID);
    13c6:	aa e3       	ldi	r26, 0x3A	; 58
    13c8:	b0 e0       	ldi	r27, 0x00	; 0
    13ca:	ea e3       	ldi	r30, 0x3A	; 58
    13cc:	f0 e0       	ldi	r31, 0x00	; 0
    13ce:	80 81       	ld	r24, Z
    13d0:	48 2f       	mov	r20, r24
    13d2:	8b 81       	ldd	r24, Y+3	; 0x03
    13d4:	28 2f       	mov	r18, r24
    13d6:	30 e0       	ldi	r19, 0x00	; 0
    13d8:	81 e0       	ldi	r24, 0x01	; 1
    13da:	90 e0       	ldi	r25, 0x00	; 0
    13dc:	02 2e       	mov	r0, r18
    13de:	02 c0       	rjmp	.+4      	; 0x13e4 <DIO_setPinDirection+0x182>
    13e0:	88 0f       	add	r24, r24
    13e2:	99 1f       	adc	r25, r25
    13e4:	0a 94       	dec	r0
    13e6:	e2 f7       	brpl	.-8      	; 0x13e0 <DIO_setPinDirection+0x17e>
    13e8:	80 95       	com	r24
    13ea:	84 23       	and	r24, r20
    13ec:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
    13ee:	19 82       	std	Y+1, r1	; 0x01
    13f0:	4a c0       	rjmp	.+148    	; 0x1486 <DIO_setPinDirection+0x224>
				break;
			case DIO_PORTB:
				CLEAR_BIT(DDRB_DIR_R, enu_pinID);
    13f2:	a7 e3       	ldi	r26, 0x37	; 55
    13f4:	b0 e0       	ldi	r27, 0x00	; 0
    13f6:	e7 e3       	ldi	r30, 0x37	; 55
    13f8:	f0 e0       	ldi	r31, 0x00	; 0
    13fa:	80 81       	ld	r24, Z
    13fc:	48 2f       	mov	r20, r24
    13fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1400:	28 2f       	mov	r18, r24
    1402:	30 e0       	ldi	r19, 0x00	; 0
    1404:	81 e0       	ldi	r24, 0x01	; 1
    1406:	90 e0       	ldi	r25, 0x00	; 0
    1408:	02 2e       	mov	r0, r18
    140a:	02 c0       	rjmp	.+4      	; 0x1410 <DIO_setPinDirection+0x1ae>
    140c:	88 0f       	add	r24, r24
    140e:	99 1f       	adc	r25, r25
    1410:	0a 94       	dec	r0
    1412:	e2 f7       	brpl	.-8      	; 0x140c <DIO_setPinDirection+0x1aa>
    1414:	80 95       	com	r24
    1416:	84 23       	and	r24, r20
    1418:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
    141a:	19 82       	std	Y+1, r1	; 0x01
    141c:	34 c0       	rjmp	.+104    	; 0x1486 <DIO_setPinDirection+0x224>
				break;
			case DIO_PORTC:
				CLEAR_BIT(DDRC_DIR_R, enu_pinID);
    141e:	a4 e3       	ldi	r26, 0x34	; 52
    1420:	b0 e0       	ldi	r27, 0x00	; 0
    1422:	e4 e3       	ldi	r30, 0x34	; 52
    1424:	f0 e0       	ldi	r31, 0x00	; 0
    1426:	80 81       	ld	r24, Z
    1428:	48 2f       	mov	r20, r24
    142a:	8b 81       	ldd	r24, Y+3	; 0x03
    142c:	28 2f       	mov	r18, r24
    142e:	30 e0       	ldi	r19, 0x00	; 0
    1430:	81 e0       	ldi	r24, 0x01	; 1
    1432:	90 e0       	ldi	r25, 0x00	; 0
    1434:	02 2e       	mov	r0, r18
    1436:	02 c0       	rjmp	.+4      	; 0x143c <DIO_setPinDirection+0x1da>
    1438:	88 0f       	add	r24, r24
    143a:	99 1f       	adc	r25, r25
    143c:	0a 94       	dec	r0
    143e:	e2 f7       	brpl	.-8      	; 0x1438 <DIO_setPinDirection+0x1d6>
    1440:	80 95       	com	r24
    1442:	84 23       	and	r24, r20
    1444:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
    1446:	19 82       	std	Y+1, r1	; 0x01
    1448:	1e c0       	rjmp	.+60     	; 0x1486 <DIO_setPinDirection+0x224>
				break;
			case DIO_PORTD:
				CLEAR_BIT(DDRD_DIR_R, enu_pinID);
    144a:	a1 e3       	ldi	r26, 0x31	; 49
    144c:	b0 e0       	ldi	r27, 0x00	; 0
    144e:	e1 e3       	ldi	r30, 0x31	; 49
    1450:	f0 e0       	ldi	r31, 0x00	; 0
    1452:	80 81       	ld	r24, Z
    1454:	48 2f       	mov	r20, r24
    1456:	8b 81       	ldd	r24, Y+3	; 0x03
    1458:	28 2f       	mov	r18, r24
    145a:	30 e0       	ldi	r19, 0x00	; 0
    145c:	81 e0       	ldi	r24, 0x01	; 1
    145e:	90 e0       	ldi	r25, 0x00	; 0
    1460:	02 2e       	mov	r0, r18
    1462:	02 c0       	rjmp	.+4      	; 0x1468 <DIO_setPinDirection+0x206>
    1464:	88 0f       	add	r24, r24
    1466:	99 1f       	adc	r25, r25
    1468:	0a 94       	dec	r0
    146a:	e2 f7       	brpl	.-8      	; 0x1464 <DIO_setPinDirection+0x202>
    146c:	80 95       	com	r24
    146e:	84 23       	and	r24, r20
    1470:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
    1472:	19 82       	std	Y+1, r1	; 0x01
    1474:	08 c0       	rjmp	.+16     	; 0x1486 <DIO_setPinDirection+0x224>
				break;
            default:
            	enu_ErrorState = DIO_E_PARAM_INVALID_PORT_ID;	/* Invalid port id */
    1476:	81 e0       	ldi	r24, 0x01	; 1
    1478:	89 83       	std	Y+1, r24	; 0x01
    147a:	05 c0       	rjmp	.+10     	; 0x1486 <DIO_setPinDirection+0x224>
                break;
			}
		}
		else
		{
			enu_ErrorState = DIO_E_PARAM_INVALID_PORT_DIR;	/* Invalid port direction */
    147c:	84 e0       	ldi	r24, 0x04	; 4
    147e:	89 83       	std	Y+1, r24	; 0x01
    1480:	02 c0       	rjmp	.+4      	; 0x1486 <DIO_setPinDirection+0x224>
		}
	}
	else
	{
		enu_ErrorState = DIO_E_PARAM_INVALID_PIN_ID;	/* Invalid pin id */
    1482:	82 e0       	ldi	r24, 0x02	; 2
    1484:	89 83       	std	Y+1, r24	; 0x01
	}
	return enu_ErrorState;
    1486:	89 81       	ldd	r24, Y+1	; 0x01
}
    1488:	28 96       	adiw	r28, 0x08	; 8
    148a:	0f b6       	in	r0, 0x3f	; 63
    148c:	f8 94       	cli
    148e:	de bf       	out	0x3e, r29	; 62
    1490:	0f be       	out	0x3f, r0	; 63
    1492:	cd bf       	out	0x3d, r28	; 61
    1494:	cf 91       	pop	r28
    1496:	df 91       	pop	r29
    1498:	08 95       	ret

0000149a <DIO_writePort>:
 * [in/out]		 	None
 *
 * [Returns]:       Error State
 ******************************************************************************/
enuDIO_E_STATE_t DIO_writePort(enuDIO_PortId_t enu_portID, uint8_t au8_portValue)
{
    149a:	df 93       	push	r29
    149c:	cf 93       	push	r28
    149e:	00 d0       	rcall	.+0      	; 0x14a0 <DIO_writePort+0x6>
    14a0:	00 d0       	rcall	.+0      	; 0x14a2 <DIO_writePort+0x8>
    14a2:	0f 92       	push	r0
    14a4:	cd b7       	in	r28, 0x3d	; 61
    14a6:	de b7       	in	r29, 0x3e	; 62
    14a8:	8a 83       	std	Y+2, r24	; 0x02
    14aa:	6b 83       	std	Y+3, r22	; 0x03
	enuDIO_E_STATE_t enu_ErrorState = E_NOT_OK;
    14ac:	81 e0       	ldi	r24, 0x01	; 1
    14ae:	89 83       	std	Y+1, r24	; 0x01

    switch (enu_portID)
    14b0:	8a 81       	ldd	r24, Y+2	; 0x02
    14b2:	28 2f       	mov	r18, r24
    14b4:	30 e0       	ldi	r19, 0x00	; 0
    14b6:	3d 83       	std	Y+5, r19	; 0x05
    14b8:	2c 83       	std	Y+4, r18	; 0x04
    14ba:	8c 81       	ldd	r24, Y+4	; 0x04
    14bc:	9d 81       	ldd	r25, Y+5	; 0x05
    14be:	81 30       	cpi	r24, 0x01	; 1
    14c0:	91 05       	cpc	r25, r1
    14c2:	d9 f0       	breq	.+54     	; 0x14fa <DIO_writePort+0x60>
    14c4:	2c 81       	ldd	r18, Y+4	; 0x04
    14c6:	3d 81       	ldd	r19, Y+5	; 0x05
    14c8:	22 30       	cpi	r18, 0x02	; 2
    14ca:	31 05       	cpc	r19, r1
    14cc:	2c f4       	brge	.+10     	; 0x14d8 <DIO_writePort+0x3e>
    14ce:	8c 81       	ldd	r24, Y+4	; 0x04
    14d0:	9d 81       	ldd	r25, Y+5	; 0x05
    14d2:	00 97       	sbiw	r24, 0x00	; 0
    14d4:	61 f0       	breq	.+24     	; 0x14ee <DIO_writePort+0x54>
    14d6:	23 c0       	rjmp	.+70     	; 0x151e <DIO_writePort+0x84>
    14d8:	2c 81       	ldd	r18, Y+4	; 0x04
    14da:	3d 81       	ldd	r19, Y+5	; 0x05
    14dc:	22 30       	cpi	r18, 0x02	; 2
    14de:	31 05       	cpc	r19, r1
    14e0:	91 f0       	breq	.+36     	; 0x1506 <DIO_writePort+0x6c>
    14e2:	8c 81       	ldd	r24, Y+4	; 0x04
    14e4:	9d 81       	ldd	r25, Y+5	; 0x05
    14e6:	83 30       	cpi	r24, 0x03	; 3
    14e8:	91 05       	cpc	r25, r1
    14ea:	99 f0       	breq	.+38     	; 0x1512 <DIO_writePort+0x78>
    14ec:	18 c0       	rjmp	.+48     	; 0x151e <DIO_writePort+0x84>
    {
    case DIO_PORTA:
        PORTA_DATA_R = au8_portValue;
    14ee:	eb e3       	ldi	r30, 0x3B	; 59
    14f0:	f0 e0       	ldi	r31, 0x00	; 0
    14f2:	8b 81       	ldd	r24, Y+3	; 0x03
    14f4:	80 83       	st	Z, r24
        enu_ErrorState = DIO_E_PARAM_VALID;
    14f6:	19 82       	std	Y+1, r1	; 0x01
    14f8:	14 c0       	rjmp	.+40     	; 0x1522 <DIO_writePort+0x88>
        break;
    case DIO_PORTB:
        PORTB_DATA_R = au8_portValue;
    14fa:	e8 e3       	ldi	r30, 0x38	; 56
    14fc:	f0 e0       	ldi	r31, 0x00	; 0
    14fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1500:	80 83       	st	Z, r24
        enu_ErrorState = DIO_E_PARAM_VALID;
    1502:	19 82       	std	Y+1, r1	; 0x01
    1504:	0e c0       	rjmp	.+28     	; 0x1522 <DIO_writePort+0x88>
        break;
    case DIO_PORTC:
        PORTC_DATA_R = au8_portValue;
    1506:	e5 e3       	ldi	r30, 0x35	; 53
    1508:	f0 e0       	ldi	r31, 0x00	; 0
    150a:	8b 81       	ldd	r24, Y+3	; 0x03
    150c:	80 83       	st	Z, r24
        enu_ErrorState = DIO_E_PARAM_VALID;
    150e:	19 82       	std	Y+1, r1	; 0x01
    1510:	08 c0       	rjmp	.+16     	; 0x1522 <DIO_writePort+0x88>
        break;
    case DIO_PORTD:
        PORTD_DATA_R = au8_portValue;
    1512:	e2 e3       	ldi	r30, 0x32	; 50
    1514:	f0 e0       	ldi	r31, 0x00	; 0
    1516:	8b 81       	ldd	r24, Y+3	; 0x03
    1518:	80 83       	st	Z, r24
        enu_ErrorState = DIO_E_PARAM_VALID;
    151a:	19 82       	std	Y+1, r1	; 0x01
    151c:	02 c0       	rjmp	.+4      	; 0x1522 <DIO_writePort+0x88>
        break;
    default:
    	enu_ErrorState = DIO_E_PARAM_INVALID_PORT_ID;	/* Invalid port id */
    151e:	81 e0       	ldi	r24, 0x01	; 1
    1520:	89 83       	std	Y+1, r24	; 0x01
        break;
    }
    return enu_ErrorState;
    1522:	89 81       	ldd	r24, Y+1	; 0x01
}
    1524:	0f 90       	pop	r0
    1526:	0f 90       	pop	r0
    1528:	0f 90       	pop	r0
    152a:	0f 90       	pop	r0
    152c:	0f 90       	pop	r0
    152e:	cf 91       	pop	r28
    1530:	df 91       	pop	r29
    1532:	08 95       	ret

00001534 <DIO_writePin>:
 * [in/out]		 	None
 *
 * [Returns]:       Error State
 ******************************************************************************/
enuDIO_E_STATE_t DIO_writePin(enuDIO_PortId_t enu_portID, enuDIO_PinId_t enu_pinID, uint8_t au8_pinValue)
{
    1534:	df 93       	push	r29
    1536:	cf 93       	push	r28
    1538:	cd b7       	in	r28, 0x3d	; 61
    153a:	de b7       	in	r29, 0x3e	; 62
    153c:	28 97       	sbiw	r28, 0x08	; 8
    153e:	0f b6       	in	r0, 0x3f	; 63
    1540:	f8 94       	cli
    1542:	de bf       	out	0x3e, r29	; 62
    1544:	0f be       	out	0x3f, r0	; 63
    1546:	cd bf       	out	0x3d, r28	; 61
    1548:	8a 83       	std	Y+2, r24	; 0x02
    154a:	6b 83       	std	Y+3, r22	; 0x03
    154c:	4c 83       	std	Y+4, r20	; 0x04
	enuDIO_E_STATE_t enu_ErrorState = E_NOT_OK;
    154e:	81 e0       	ldi	r24, 0x01	; 1
    1550:	89 83       	std	Y+1, r24	; 0x01

	/* Check if the pin id is one of the existed pin or not */
	if ((enu_pinID >= PIN_0) && (enu_pinID <= PIN_7))
    1552:	8b 81       	ldd	r24, Y+3	; 0x03
    1554:	88 30       	cpi	r24, 0x08	; 8
    1556:	08 f0       	brcs	.+2      	; 0x155a <DIO_writePin+0x26>
    1558:	fd c0       	rjmp	.+506    	; 0x1754 <DIO_writePin+0x220>
	{
		if (au8_pinValue == HIGH)
    155a:	8c 81       	ldd	r24, Y+4	; 0x04
    155c:	81 30       	cpi	r24, 0x01	; 1
    155e:	09 f0       	breq	.+2      	; 0x1562 <DIO_writePin+0x2e>
    1560:	77 c0       	rjmp	.+238    	; 0x1650 <DIO_writePin+0x11c>
		{
			switch (enu_portID)
    1562:	8a 81       	ldd	r24, Y+2	; 0x02
    1564:	28 2f       	mov	r18, r24
    1566:	30 e0       	ldi	r19, 0x00	; 0
    1568:	38 87       	std	Y+8, r19	; 0x08
    156a:	2f 83       	std	Y+7, r18	; 0x07
    156c:	8f 81       	ldd	r24, Y+7	; 0x07
    156e:	98 85       	ldd	r25, Y+8	; 0x08
    1570:	81 30       	cpi	r24, 0x01	; 1
    1572:	91 05       	cpc	r25, r1
    1574:	59 f1       	breq	.+86     	; 0x15cc <DIO_writePin+0x98>
    1576:	2f 81       	ldd	r18, Y+7	; 0x07
    1578:	38 85       	ldd	r19, Y+8	; 0x08
    157a:	22 30       	cpi	r18, 0x02	; 2
    157c:	31 05       	cpc	r19, r1
    157e:	2c f4       	brge	.+10     	; 0x158a <DIO_writePin+0x56>
    1580:	8f 81       	ldd	r24, Y+7	; 0x07
    1582:	98 85       	ldd	r25, Y+8	; 0x08
    1584:	00 97       	sbiw	r24, 0x00	; 0
    1586:	69 f0       	breq	.+26     	; 0x15a2 <DIO_writePin+0x6e>
    1588:	60 c0       	rjmp	.+192    	; 0x164a <DIO_writePin+0x116>
    158a:	2f 81       	ldd	r18, Y+7	; 0x07
    158c:	38 85       	ldd	r19, Y+8	; 0x08
    158e:	22 30       	cpi	r18, 0x02	; 2
    1590:	31 05       	cpc	r19, r1
    1592:	89 f1       	breq	.+98     	; 0x15f6 <DIO_writePin+0xc2>
    1594:	8f 81       	ldd	r24, Y+7	; 0x07
    1596:	98 85       	ldd	r25, Y+8	; 0x08
    1598:	83 30       	cpi	r24, 0x03	; 3
    159a:	91 05       	cpc	r25, r1
    159c:	09 f4       	brne	.+2      	; 0x15a0 <DIO_writePin+0x6c>
    159e:	40 c0       	rjmp	.+128    	; 0x1620 <DIO_writePin+0xec>
    15a0:	54 c0       	rjmp	.+168    	; 0x164a <DIO_writePin+0x116>
			{
			case DIO_PORTA:
				SET_BIT(PORTA_DATA_R, enu_pinID);
    15a2:	ab e3       	ldi	r26, 0x3B	; 59
    15a4:	b0 e0       	ldi	r27, 0x00	; 0
    15a6:	eb e3       	ldi	r30, 0x3B	; 59
    15a8:	f0 e0       	ldi	r31, 0x00	; 0
    15aa:	80 81       	ld	r24, Z
    15ac:	48 2f       	mov	r20, r24
    15ae:	8b 81       	ldd	r24, Y+3	; 0x03
    15b0:	28 2f       	mov	r18, r24
    15b2:	30 e0       	ldi	r19, 0x00	; 0
    15b4:	81 e0       	ldi	r24, 0x01	; 1
    15b6:	90 e0       	ldi	r25, 0x00	; 0
    15b8:	02 2e       	mov	r0, r18
    15ba:	02 c0       	rjmp	.+4      	; 0x15c0 <DIO_writePin+0x8c>
    15bc:	88 0f       	add	r24, r24
    15be:	99 1f       	adc	r25, r25
    15c0:	0a 94       	dec	r0
    15c2:	e2 f7       	brpl	.-8      	; 0x15bc <DIO_writePin+0x88>
    15c4:	84 2b       	or	r24, r20
    15c6:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
    15c8:	19 82       	std	Y+1, r1	; 0x01
    15ca:	c6 c0       	rjmp	.+396    	; 0x1758 <DIO_writePin+0x224>
				break;
			case DIO_PORTB:
				SET_BIT(PORTB_DATA_R, enu_pinID);
    15cc:	a8 e3       	ldi	r26, 0x38	; 56
    15ce:	b0 e0       	ldi	r27, 0x00	; 0
    15d0:	e8 e3       	ldi	r30, 0x38	; 56
    15d2:	f0 e0       	ldi	r31, 0x00	; 0
    15d4:	80 81       	ld	r24, Z
    15d6:	48 2f       	mov	r20, r24
    15d8:	8b 81       	ldd	r24, Y+3	; 0x03
    15da:	28 2f       	mov	r18, r24
    15dc:	30 e0       	ldi	r19, 0x00	; 0
    15de:	81 e0       	ldi	r24, 0x01	; 1
    15e0:	90 e0       	ldi	r25, 0x00	; 0
    15e2:	02 2e       	mov	r0, r18
    15e4:	02 c0       	rjmp	.+4      	; 0x15ea <DIO_writePin+0xb6>
    15e6:	88 0f       	add	r24, r24
    15e8:	99 1f       	adc	r25, r25
    15ea:	0a 94       	dec	r0
    15ec:	e2 f7       	brpl	.-8      	; 0x15e6 <DIO_writePin+0xb2>
    15ee:	84 2b       	or	r24, r20
    15f0:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
    15f2:	19 82       	std	Y+1, r1	; 0x01
    15f4:	b1 c0       	rjmp	.+354    	; 0x1758 <DIO_writePin+0x224>
				break;
			case DIO_PORTC:
				SET_BIT(PORTC_DATA_R, enu_pinID);
    15f6:	a5 e3       	ldi	r26, 0x35	; 53
    15f8:	b0 e0       	ldi	r27, 0x00	; 0
    15fa:	e5 e3       	ldi	r30, 0x35	; 53
    15fc:	f0 e0       	ldi	r31, 0x00	; 0
    15fe:	80 81       	ld	r24, Z
    1600:	48 2f       	mov	r20, r24
    1602:	8b 81       	ldd	r24, Y+3	; 0x03
    1604:	28 2f       	mov	r18, r24
    1606:	30 e0       	ldi	r19, 0x00	; 0
    1608:	81 e0       	ldi	r24, 0x01	; 1
    160a:	90 e0       	ldi	r25, 0x00	; 0
    160c:	02 2e       	mov	r0, r18
    160e:	02 c0       	rjmp	.+4      	; 0x1614 <DIO_writePin+0xe0>
    1610:	88 0f       	add	r24, r24
    1612:	99 1f       	adc	r25, r25
    1614:	0a 94       	dec	r0
    1616:	e2 f7       	brpl	.-8      	; 0x1610 <DIO_writePin+0xdc>
    1618:	84 2b       	or	r24, r20
    161a:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
    161c:	19 82       	std	Y+1, r1	; 0x01
    161e:	9c c0       	rjmp	.+312    	; 0x1758 <DIO_writePin+0x224>
				break;
			case DIO_PORTD:
				SET_BIT(PORTD_DATA_R, enu_pinID);
    1620:	a2 e3       	ldi	r26, 0x32	; 50
    1622:	b0 e0       	ldi	r27, 0x00	; 0
    1624:	e2 e3       	ldi	r30, 0x32	; 50
    1626:	f0 e0       	ldi	r31, 0x00	; 0
    1628:	80 81       	ld	r24, Z
    162a:	48 2f       	mov	r20, r24
    162c:	8b 81       	ldd	r24, Y+3	; 0x03
    162e:	28 2f       	mov	r18, r24
    1630:	30 e0       	ldi	r19, 0x00	; 0
    1632:	81 e0       	ldi	r24, 0x01	; 1
    1634:	90 e0       	ldi	r25, 0x00	; 0
    1636:	02 2e       	mov	r0, r18
    1638:	02 c0       	rjmp	.+4      	; 0x163e <DIO_writePin+0x10a>
    163a:	88 0f       	add	r24, r24
    163c:	99 1f       	adc	r25, r25
    163e:	0a 94       	dec	r0
    1640:	e2 f7       	brpl	.-8      	; 0x163a <DIO_writePin+0x106>
    1642:	84 2b       	or	r24, r20
    1644:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
    1646:	19 82       	std	Y+1, r1	; 0x01
    1648:	87 c0       	rjmp	.+270    	; 0x1758 <DIO_writePin+0x224>
				break;
            default:
            	enu_ErrorState = DIO_E_PARAM_INVALID_PORT_ID;	/* Invalid port id */
    164a:	81 e0       	ldi	r24, 0x01	; 1
    164c:	89 83       	std	Y+1, r24	; 0x01
    164e:	84 c0       	rjmp	.+264    	; 0x1758 <DIO_writePin+0x224>
                break;
			}
		}
		else if (au8_pinValue == LOW)
    1650:	8c 81       	ldd	r24, Y+4	; 0x04
    1652:	88 23       	and	r24, r24
    1654:	09 f0       	breq	.+2      	; 0x1658 <DIO_writePin+0x124>
    1656:	7b c0       	rjmp	.+246    	; 0x174e <DIO_writePin+0x21a>
		{
			switch (enu_portID)
    1658:	8a 81       	ldd	r24, Y+2	; 0x02
    165a:	28 2f       	mov	r18, r24
    165c:	30 e0       	ldi	r19, 0x00	; 0
    165e:	3e 83       	std	Y+6, r19	; 0x06
    1660:	2d 83       	std	Y+5, r18	; 0x05
    1662:	8d 81       	ldd	r24, Y+5	; 0x05
    1664:	9e 81       	ldd	r25, Y+6	; 0x06
    1666:	81 30       	cpi	r24, 0x01	; 1
    1668:	91 05       	cpc	r25, r1
    166a:	61 f1       	breq	.+88     	; 0x16c4 <DIO_writePin+0x190>
    166c:	2d 81       	ldd	r18, Y+5	; 0x05
    166e:	3e 81       	ldd	r19, Y+6	; 0x06
    1670:	22 30       	cpi	r18, 0x02	; 2
    1672:	31 05       	cpc	r19, r1
    1674:	2c f4       	brge	.+10     	; 0x1680 <DIO_writePin+0x14c>
    1676:	8d 81       	ldd	r24, Y+5	; 0x05
    1678:	9e 81       	ldd	r25, Y+6	; 0x06
    167a:	00 97       	sbiw	r24, 0x00	; 0
    167c:	69 f0       	breq	.+26     	; 0x1698 <DIO_writePin+0x164>
    167e:	64 c0       	rjmp	.+200    	; 0x1748 <DIO_writePin+0x214>
    1680:	2d 81       	ldd	r18, Y+5	; 0x05
    1682:	3e 81       	ldd	r19, Y+6	; 0x06
    1684:	22 30       	cpi	r18, 0x02	; 2
    1686:	31 05       	cpc	r19, r1
    1688:	99 f1       	breq	.+102    	; 0x16f0 <DIO_writePin+0x1bc>
    168a:	8d 81       	ldd	r24, Y+5	; 0x05
    168c:	9e 81       	ldd	r25, Y+6	; 0x06
    168e:	83 30       	cpi	r24, 0x03	; 3
    1690:	91 05       	cpc	r25, r1
    1692:	09 f4       	brne	.+2      	; 0x1696 <DIO_writePin+0x162>
    1694:	43 c0       	rjmp	.+134    	; 0x171c <DIO_writePin+0x1e8>
    1696:	58 c0       	rjmp	.+176    	; 0x1748 <DIO_writePin+0x214>
			{
			case DIO_PORTA:
				CLEAR_BIT(PORTA_DATA_R, enu_pinID);
    1698:	ab e3       	ldi	r26, 0x3B	; 59
    169a:	b0 e0       	ldi	r27, 0x00	; 0
    169c:	eb e3       	ldi	r30, 0x3B	; 59
    169e:	f0 e0       	ldi	r31, 0x00	; 0
    16a0:	80 81       	ld	r24, Z
    16a2:	48 2f       	mov	r20, r24
    16a4:	8b 81       	ldd	r24, Y+3	; 0x03
    16a6:	28 2f       	mov	r18, r24
    16a8:	30 e0       	ldi	r19, 0x00	; 0
    16aa:	81 e0       	ldi	r24, 0x01	; 1
    16ac:	90 e0       	ldi	r25, 0x00	; 0
    16ae:	02 2e       	mov	r0, r18
    16b0:	02 c0       	rjmp	.+4      	; 0x16b6 <DIO_writePin+0x182>
    16b2:	88 0f       	add	r24, r24
    16b4:	99 1f       	adc	r25, r25
    16b6:	0a 94       	dec	r0
    16b8:	e2 f7       	brpl	.-8      	; 0x16b2 <DIO_writePin+0x17e>
    16ba:	80 95       	com	r24
    16bc:	84 23       	and	r24, r20
    16be:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
    16c0:	19 82       	std	Y+1, r1	; 0x01
    16c2:	4a c0       	rjmp	.+148    	; 0x1758 <DIO_writePin+0x224>
				break;
			case DIO_PORTB:
				CLEAR_BIT(PORTB_DATA_R, enu_pinID);
    16c4:	a8 e3       	ldi	r26, 0x38	; 56
    16c6:	b0 e0       	ldi	r27, 0x00	; 0
    16c8:	e8 e3       	ldi	r30, 0x38	; 56
    16ca:	f0 e0       	ldi	r31, 0x00	; 0
    16cc:	80 81       	ld	r24, Z
    16ce:	48 2f       	mov	r20, r24
    16d0:	8b 81       	ldd	r24, Y+3	; 0x03
    16d2:	28 2f       	mov	r18, r24
    16d4:	30 e0       	ldi	r19, 0x00	; 0
    16d6:	81 e0       	ldi	r24, 0x01	; 1
    16d8:	90 e0       	ldi	r25, 0x00	; 0
    16da:	02 2e       	mov	r0, r18
    16dc:	02 c0       	rjmp	.+4      	; 0x16e2 <DIO_writePin+0x1ae>
    16de:	88 0f       	add	r24, r24
    16e0:	99 1f       	adc	r25, r25
    16e2:	0a 94       	dec	r0
    16e4:	e2 f7       	brpl	.-8      	; 0x16de <DIO_writePin+0x1aa>
    16e6:	80 95       	com	r24
    16e8:	84 23       	and	r24, r20
    16ea:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
    16ec:	19 82       	std	Y+1, r1	; 0x01
    16ee:	34 c0       	rjmp	.+104    	; 0x1758 <DIO_writePin+0x224>
				break;
			case DIO_PORTC:
				CLEAR_BIT(PORTC_DATA_R, enu_pinID);
    16f0:	a5 e3       	ldi	r26, 0x35	; 53
    16f2:	b0 e0       	ldi	r27, 0x00	; 0
    16f4:	e5 e3       	ldi	r30, 0x35	; 53
    16f6:	f0 e0       	ldi	r31, 0x00	; 0
    16f8:	80 81       	ld	r24, Z
    16fa:	48 2f       	mov	r20, r24
    16fc:	8b 81       	ldd	r24, Y+3	; 0x03
    16fe:	28 2f       	mov	r18, r24
    1700:	30 e0       	ldi	r19, 0x00	; 0
    1702:	81 e0       	ldi	r24, 0x01	; 1
    1704:	90 e0       	ldi	r25, 0x00	; 0
    1706:	02 2e       	mov	r0, r18
    1708:	02 c0       	rjmp	.+4      	; 0x170e <DIO_writePin+0x1da>
    170a:	88 0f       	add	r24, r24
    170c:	99 1f       	adc	r25, r25
    170e:	0a 94       	dec	r0
    1710:	e2 f7       	brpl	.-8      	; 0x170a <DIO_writePin+0x1d6>
    1712:	80 95       	com	r24
    1714:	84 23       	and	r24, r20
    1716:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
    1718:	19 82       	std	Y+1, r1	; 0x01
    171a:	1e c0       	rjmp	.+60     	; 0x1758 <DIO_writePin+0x224>
				break;
			case DIO_PORTD:
				CLEAR_BIT(PORTD_DATA_R, enu_pinID);
    171c:	a2 e3       	ldi	r26, 0x32	; 50
    171e:	b0 e0       	ldi	r27, 0x00	; 0
    1720:	e2 e3       	ldi	r30, 0x32	; 50
    1722:	f0 e0       	ldi	r31, 0x00	; 0
    1724:	80 81       	ld	r24, Z
    1726:	48 2f       	mov	r20, r24
    1728:	8b 81       	ldd	r24, Y+3	; 0x03
    172a:	28 2f       	mov	r18, r24
    172c:	30 e0       	ldi	r19, 0x00	; 0
    172e:	81 e0       	ldi	r24, 0x01	; 1
    1730:	90 e0       	ldi	r25, 0x00	; 0
    1732:	02 2e       	mov	r0, r18
    1734:	02 c0       	rjmp	.+4      	; 0x173a <DIO_writePin+0x206>
    1736:	88 0f       	add	r24, r24
    1738:	99 1f       	adc	r25, r25
    173a:	0a 94       	dec	r0
    173c:	e2 f7       	brpl	.-8      	; 0x1736 <DIO_writePin+0x202>
    173e:	80 95       	com	r24
    1740:	84 23       	and	r24, r20
    1742:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
    1744:	19 82       	std	Y+1, r1	; 0x01
    1746:	08 c0       	rjmp	.+16     	; 0x1758 <DIO_writePin+0x224>
				break;
            default:
            	enu_ErrorState = DIO_E_PARAM_INVALID_PORT_ID;	/* Invalid port id */
    1748:	81 e0       	ldi	r24, 0x01	; 1
    174a:	89 83       	std	Y+1, r24	; 0x01
    174c:	05 c0       	rjmp	.+10     	; 0x1758 <DIO_writePin+0x224>
                break;
			}
		}
		else
        {
			enu_ErrorState = DIO_E_PARAM_INVALID_PORT_DIR;	/* Invalid port direction */
    174e:	84 e0       	ldi	r24, 0x04	; 4
    1750:	89 83       	std	Y+1, r24	; 0x01
    1752:	02 c0       	rjmp	.+4      	; 0x1758 <DIO_writePin+0x224>
		}
	}
	else
	{
		enu_ErrorState = DIO_E_PARAM_INVALID_PIN_ID;	/* Invalid pin id */
    1754:	82 e0       	ldi	r24, 0x02	; 2
    1756:	89 83       	std	Y+1, r24	; 0x01
	}
	return enu_ErrorState;
    1758:	89 81       	ldd	r24, Y+1	; 0x01
}
    175a:	28 96       	adiw	r28, 0x08	; 8
    175c:	0f b6       	in	r0, 0x3f	; 63
    175e:	f8 94       	cli
    1760:	de bf       	out	0x3e, r29	; 62
    1762:	0f be       	out	0x3f, r0	; 63
    1764:	cd bf       	out	0x3d, r28	; 61
    1766:	cf 91       	pop	r28
    1768:	df 91       	pop	r29
    176a:	08 95       	ret

0000176c <DIO_readPort>:
 * [in/out]		 	None
 *
 * [Returns]:       Error State
 ******************************************************************************/
enuDIO_E_STATE_t DIO_readPort(enuDIO_PortId_t enu_portID, uint8_t * ptr_portState)
{
    176c:	df 93       	push	r29
    176e:	cf 93       	push	r28
    1770:	00 d0       	rcall	.+0      	; 0x1772 <DIO_readPort+0x6>
    1772:	00 d0       	rcall	.+0      	; 0x1774 <DIO_readPort+0x8>
    1774:	00 d0       	rcall	.+0      	; 0x1776 <DIO_readPort+0xa>
    1776:	cd b7       	in	r28, 0x3d	; 61
    1778:	de b7       	in	r29, 0x3e	; 62
    177a:	8a 83       	std	Y+2, r24	; 0x02
    177c:	7c 83       	std	Y+4, r23	; 0x04
    177e:	6b 83       	std	Y+3, r22	; 0x03
	enuDIO_E_STATE_t enu_ErrorState = E_NOT_OK;
    1780:	81 e0       	ldi	r24, 0x01	; 1
    1782:	89 83       	std	Y+1, r24	; 0x01

	/* Check if the pointer is NULL pointer or not */
	if(ptr_portState == NULL_PTR)
    1784:	8b 81       	ldd	r24, Y+3	; 0x03
    1786:	9c 81       	ldd	r25, Y+4	; 0x04
    1788:	00 97       	sbiw	r24, 0x00	; 0
    178a:	19 f4       	brne	.+6      	; 0x1792 <DIO_readPort+0x26>
    {
		enu_ErrorState = DIO_E_PARAM_POINTER;	/* Invalid pointer */
    178c:	85 e0       	ldi	r24, 0x05	; 5
    178e:	89 83       	std	Y+1, r24	; 0x01
    1790:	41 c0       	rjmp	.+130    	; 0x1814 <DIO_readPort+0xa8>
	}
	else
	{
		switch (enu_portID)
    1792:	8a 81       	ldd	r24, Y+2	; 0x02
    1794:	28 2f       	mov	r18, r24
    1796:	30 e0       	ldi	r19, 0x00	; 0
    1798:	3e 83       	std	Y+6, r19	; 0x06
    179a:	2d 83       	std	Y+5, r18	; 0x05
    179c:	8d 81       	ldd	r24, Y+5	; 0x05
    179e:	9e 81       	ldd	r25, Y+6	; 0x06
    17a0:	81 30       	cpi	r24, 0x01	; 1
    17a2:	91 05       	cpc	r25, r1
    17a4:	e9 f0       	breq	.+58     	; 0x17e0 <DIO_readPort+0x74>
    17a6:	2d 81       	ldd	r18, Y+5	; 0x05
    17a8:	3e 81       	ldd	r19, Y+6	; 0x06
    17aa:	22 30       	cpi	r18, 0x02	; 2
    17ac:	31 05       	cpc	r19, r1
    17ae:	2c f4       	brge	.+10     	; 0x17ba <DIO_readPort+0x4e>
    17b0:	8d 81       	ldd	r24, Y+5	; 0x05
    17b2:	9e 81       	ldd	r25, Y+6	; 0x06
    17b4:	00 97       	sbiw	r24, 0x00	; 0
    17b6:	61 f0       	breq	.+24     	; 0x17d0 <DIO_readPort+0x64>
    17b8:	2b c0       	rjmp	.+86     	; 0x1810 <DIO_readPort+0xa4>
    17ba:	2d 81       	ldd	r18, Y+5	; 0x05
    17bc:	3e 81       	ldd	r19, Y+6	; 0x06
    17be:	22 30       	cpi	r18, 0x02	; 2
    17c0:	31 05       	cpc	r19, r1
    17c2:	b1 f0       	breq	.+44     	; 0x17f0 <DIO_readPort+0x84>
    17c4:	8d 81       	ldd	r24, Y+5	; 0x05
    17c6:	9e 81       	ldd	r25, Y+6	; 0x06
    17c8:	83 30       	cpi	r24, 0x03	; 3
    17ca:	91 05       	cpc	r25, r1
    17cc:	c9 f0       	breq	.+50     	; 0x1800 <DIO_readPort+0x94>
    17ce:	20 c0       	rjmp	.+64     	; 0x1810 <DIO_readPort+0xa4>
		{
		case DIO_PORTA:
			*ptr_portState = PINA_INPUT_R;
    17d0:	e9 e3       	ldi	r30, 0x39	; 57
    17d2:	f0 e0       	ldi	r31, 0x00	; 0
    17d4:	80 81       	ld	r24, Z
    17d6:	eb 81       	ldd	r30, Y+3	; 0x03
    17d8:	fc 81       	ldd	r31, Y+4	; 0x04
    17da:	80 83       	st	Z, r24
			enu_ErrorState = DIO_E_PARAM_VALID;
    17dc:	19 82       	std	Y+1, r1	; 0x01
    17de:	1a c0       	rjmp	.+52     	; 0x1814 <DIO_readPort+0xa8>
			break;
		case DIO_PORTB:
			*ptr_portState = PINB_INPUT_R;
    17e0:	e6 e3       	ldi	r30, 0x36	; 54
    17e2:	f0 e0       	ldi	r31, 0x00	; 0
    17e4:	80 81       	ld	r24, Z
    17e6:	eb 81       	ldd	r30, Y+3	; 0x03
    17e8:	fc 81       	ldd	r31, Y+4	; 0x04
    17ea:	80 83       	st	Z, r24
			enu_ErrorState = DIO_E_PARAM_VALID;;
    17ec:	19 82       	std	Y+1, r1	; 0x01
    17ee:	12 c0       	rjmp	.+36     	; 0x1814 <DIO_readPort+0xa8>
			break;
		case DIO_PORTC:
			*ptr_portState = PINC_INPUT_R;
    17f0:	e3 e3       	ldi	r30, 0x33	; 51
    17f2:	f0 e0       	ldi	r31, 0x00	; 0
    17f4:	80 81       	ld	r24, Z
    17f6:	eb 81       	ldd	r30, Y+3	; 0x03
    17f8:	fc 81       	ldd	r31, Y+4	; 0x04
    17fa:	80 83       	st	Z, r24
			enu_ErrorState = DIO_E_PARAM_VALID;
    17fc:	19 82       	std	Y+1, r1	; 0x01
    17fe:	0a c0       	rjmp	.+20     	; 0x1814 <DIO_readPort+0xa8>
			break;
		case DIO_PORTD:
			*ptr_portState = PIND_INPUT_R;
    1800:	e0 e3       	ldi	r30, 0x30	; 48
    1802:	f0 e0       	ldi	r31, 0x00	; 0
    1804:	80 81       	ld	r24, Z
    1806:	eb 81       	ldd	r30, Y+3	; 0x03
    1808:	fc 81       	ldd	r31, Y+4	; 0x04
    180a:	80 83       	st	Z, r24
			enu_ErrorState = DIO_E_PARAM_VALID;
    180c:	19 82       	std	Y+1, r1	; 0x01
    180e:	02 c0       	rjmp	.+4      	; 0x1814 <DIO_readPort+0xa8>
			break;
		default:
			enu_ErrorState = DIO_E_PARAM_INVALID_PORT_ID;	/* Invalid port id */
    1810:	81 e0       	ldi	r24, 0x01	; 1
    1812:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return enu_ErrorState;
    1814:	89 81       	ldd	r24, Y+1	; 0x01
}
    1816:	26 96       	adiw	r28, 0x06	; 6
    1818:	0f b6       	in	r0, 0x3f	; 63
    181a:	f8 94       	cli
    181c:	de bf       	out	0x3e, r29	; 62
    181e:	0f be       	out	0x3f, r0	; 63
    1820:	cd bf       	out	0x3d, r28	; 61
    1822:	cf 91       	pop	r28
    1824:	df 91       	pop	r29
    1826:	08 95       	ret

00001828 <DIO_readPin>:
 * [in/out]		 	None
 *
 * [Returns]:       Error State
 ******************************************************************************/
enuDIO_E_STATE_t DIO_readPin(enuDIO_PortId_t enu_portID, enuDIO_PinId_t enu_pinID, uint8_t * ptr_pinState)
{
    1828:	df 93       	push	r29
    182a:	cf 93       	push	r28
    182c:	cd b7       	in	r28, 0x3d	; 61
    182e:	de b7       	in	r29, 0x3e	; 62
    1830:	27 97       	sbiw	r28, 0x07	; 7
    1832:	0f b6       	in	r0, 0x3f	; 63
    1834:	f8 94       	cli
    1836:	de bf       	out	0x3e, r29	; 62
    1838:	0f be       	out	0x3f, r0	; 63
    183a:	cd bf       	out	0x3d, r28	; 61
    183c:	8a 83       	std	Y+2, r24	; 0x02
    183e:	6b 83       	std	Y+3, r22	; 0x03
    1840:	5d 83       	std	Y+5, r21	; 0x05
    1842:	4c 83       	std	Y+4, r20	; 0x04
	enuDIO_E_STATE_t enu_ErrorState = E_NOT_OK;
    1844:	81 e0       	ldi	r24, 0x01	; 1
    1846:	89 83       	std	Y+1, r24	; 0x01

	/* Check if the pointer is NULL pointer or not */
	if(ptr_pinState == NULL_PTR)
    1848:	8c 81       	ldd	r24, Y+4	; 0x04
    184a:	9d 81       	ldd	r25, Y+5	; 0x05
    184c:	00 97       	sbiw	r24, 0x00	; 0
    184e:	19 f4       	brne	.+6      	; 0x1856 <DIO_readPin+0x2e>
    {
		enu_ErrorState = DIO_E_PARAM_POINTER;
    1850:	85 e0       	ldi	r24, 0x05	; 5
    1852:	89 83       	std	Y+1, r24	; 0x01
    1854:	af c0       	rjmp	.+350    	; 0x19b4 <DIO_readPin+0x18c>
	}
	else
	{
        if((enu_pinID >= PIN_0) && (enu_pinID <= PIN_7))
    1856:	8b 81       	ldd	r24, Y+3	; 0x03
    1858:	88 30       	cpi	r24, 0x08	; 8
    185a:	08 f0       	brcs	.+2      	; 0x185e <DIO_readPin+0x36>
    185c:	a9 c0       	rjmp	.+338    	; 0x19b0 <DIO_readPin+0x188>
        {
            switch (enu_portID)
    185e:	8a 81       	ldd	r24, Y+2	; 0x02
    1860:	28 2f       	mov	r18, r24
    1862:	30 e0       	ldi	r19, 0x00	; 0
    1864:	3f 83       	std	Y+7, r19	; 0x07
    1866:	2e 83       	std	Y+6, r18	; 0x06
    1868:	4e 81       	ldd	r20, Y+6	; 0x06
    186a:	5f 81       	ldd	r21, Y+7	; 0x07
    186c:	41 30       	cpi	r20, 0x01	; 1
    186e:	51 05       	cpc	r21, r1
    1870:	c9 f1       	breq	.+114    	; 0x18e4 <DIO_readPin+0xbc>
    1872:	8e 81       	ldd	r24, Y+6	; 0x06
    1874:	9f 81       	ldd	r25, Y+7	; 0x07
    1876:	82 30       	cpi	r24, 0x02	; 2
    1878:	91 05       	cpc	r25, r1
    187a:	34 f4       	brge	.+12     	; 0x1888 <DIO_readPin+0x60>
    187c:	2e 81       	ldd	r18, Y+6	; 0x06
    187e:	3f 81       	ldd	r19, Y+7	; 0x07
    1880:	21 15       	cp	r18, r1
    1882:	31 05       	cpc	r19, r1
    1884:	71 f0       	breq	.+28     	; 0x18a2 <DIO_readPin+0x7a>
    1886:	91 c0       	rjmp	.+290    	; 0x19aa <DIO_readPin+0x182>
    1888:	4e 81       	ldd	r20, Y+6	; 0x06
    188a:	5f 81       	ldd	r21, Y+7	; 0x07
    188c:	42 30       	cpi	r20, 0x02	; 2
    188e:	51 05       	cpc	r21, r1
    1890:	09 f4       	brne	.+2      	; 0x1894 <DIO_readPin+0x6c>
    1892:	49 c0       	rjmp	.+146    	; 0x1926 <DIO_readPin+0xfe>
    1894:	8e 81       	ldd	r24, Y+6	; 0x06
    1896:	9f 81       	ldd	r25, Y+7	; 0x07
    1898:	83 30       	cpi	r24, 0x03	; 3
    189a:	91 05       	cpc	r25, r1
    189c:	09 f4       	brne	.+2      	; 0x18a0 <DIO_readPin+0x78>
    189e:	64 c0       	rjmp	.+200    	; 0x1968 <DIO_readPin+0x140>
    18a0:	84 c0       	rjmp	.+264    	; 0x19aa <DIO_readPin+0x182>
            {
            case DIO_PORTA:
                *ptr_pinState = READ_BIT(PINA_INPUT_R, enu_pinID);
    18a2:	e9 e3       	ldi	r30, 0x39	; 57
    18a4:	f0 e0       	ldi	r31, 0x00	; 0
    18a6:	80 81       	ld	r24, Z
    18a8:	48 2f       	mov	r20, r24
    18aa:	50 e0       	ldi	r21, 0x00	; 0
    18ac:	8b 81       	ldd	r24, Y+3	; 0x03
    18ae:	28 2f       	mov	r18, r24
    18b0:	30 e0       	ldi	r19, 0x00	; 0
    18b2:	81 e0       	ldi	r24, 0x01	; 1
    18b4:	90 e0       	ldi	r25, 0x00	; 0
    18b6:	02 c0       	rjmp	.+4      	; 0x18bc <DIO_readPin+0x94>
    18b8:	88 0f       	add	r24, r24
    18ba:	99 1f       	adc	r25, r25
    18bc:	2a 95       	dec	r18
    18be:	e2 f7       	brpl	.-8      	; 0x18b8 <DIO_readPin+0x90>
    18c0:	9a 01       	movw	r18, r20
    18c2:	28 23       	and	r18, r24
    18c4:	39 23       	and	r19, r25
    18c6:	8b 81       	ldd	r24, Y+3	; 0x03
    18c8:	88 2f       	mov	r24, r24
    18ca:	90 e0       	ldi	r25, 0x00	; 0
    18cc:	a9 01       	movw	r20, r18
    18ce:	02 c0       	rjmp	.+4      	; 0x18d4 <DIO_readPin+0xac>
    18d0:	55 95       	asr	r21
    18d2:	47 95       	ror	r20
    18d4:	8a 95       	dec	r24
    18d6:	e2 f7       	brpl	.-8      	; 0x18d0 <DIO_readPin+0xa8>
    18d8:	ca 01       	movw	r24, r20
    18da:	ec 81       	ldd	r30, Y+4	; 0x04
    18dc:	fd 81       	ldd	r31, Y+5	; 0x05
    18de:	80 83       	st	Z, r24
                enu_ErrorState = DIO_E_PARAM_VALID;
    18e0:	19 82       	std	Y+1, r1	; 0x01
    18e2:	68 c0       	rjmp	.+208    	; 0x19b4 <DIO_readPin+0x18c>
                break;
            case DIO_PORTB:
                *ptr_pinState = READ_BIT(PINB_INPUT_R, enu_pinID);
    18e4:	e6 e3       	ldi	r30, 0x36	; 54
    18e6:	f0 e0       	ldi	r31, 0x00	; 0
    18e8:	80 81       	ld	r24, Z
    18ea:	48 2f       	mov	r20, r24
    18ec:	50 e0       	ldi	r21, 0x00	; 0
    18ee:	8b 81       	ldd	r24, Y+3	; 0x03
    18f0:	28 2f       	mov	r18, r24
    18f2:	30 e0       	ldi	r19, 0x00	; 0
    18f4:	81 e0       	ldi	r24, 0x01	; 1
    18f6:	90 e0       	ldi	r25, 0x00	; 0
    18f8:	02 c0       	rjmp	.+4      	; 0x18fe <DIO_readPin+0xd6>
    18fa:	88 0f       	add	r24, r24
    18fc:	99 1f       	adc	r25, r25
    18fe:	2a 95       	dec	r18
    1900:	e2 f7       	brpl	.-8      	; 0x18fa <DIO_readPin+0xd2>
    1902:	9a 01       	movw	r18, r20
    1904:	28 23       	and	r18, r24
    1906:	39 23       	and	r19, r25
    1908:	8b 81       	ldd	r24, Y+3	; 0x03
    190a:	88 2f       	mov	r24, r24
    190c:	90 e0       	ldi	r25, 0x00	; 0
    190e:	a9 01       	movw	r20, r18
    1910:	02 c0       	rjmp	.+4      	; 0x1916 <DIO_readPin+0xee>
    1912:	55 95       	asr	r21
    1914:	47 95       	ror	r20
    1916:	8a 95       	dec	r24
    1918:	e2 f7       	brpl	.-8      	; 0x1912 <DIO_readPin+0xea>
    191a:	ca 01       	movw	r24, r20
    191c:	ec 81       	ldd	r30, Y+4	; 0x04
    191e:	fd 81       	ldd	r31, Y+5	; 0x05
    1920:	80 83       	st	Z, r24
                enu_ErrorState = DIO_E_PARAM_VALID;
    1922:	19 82       	std	Y+1, r1	; 0x01
    1924:	47 c0       	rjmp	.+142    	; 0x19b4 <DIO_readPin+0x18c>
                break;
            case DIO_PORTC:
                *ptr_pinState = READ_BIT(PINC_INPUT_R, enu_pinID);
    1926:	e3 e3       	ldi	r30, 0x33	; 51
    1928:	f0 e0       	ldi	r31, 0x00	; 0
    192a:	80 81       	ld	r24, Z
    192c:	48 2f       	mov	r20, r24
    192e:	50 e0       	ldi	r21, 0x00	; 0
    1930:	8b 81       	ldd	r24, Y+3	; 0x03
    1932:	28 2f       	mov	r18, r24
    1934:	30 e0       	ldi	r19, 0x00	; 0
    1936:	81 e0       	ldi	r24, 0x01	; 1
    1938:	90 e0       	ldi	r25, 0x00	; 0
    193a:	02 c0       	rjmp	.+4      	; 0x1940 <DIO_readPin+0x118>
    193c:	88 0f       	add	r24, r24
    193e:	99 1f       	adc	r25, r25
    1940:	2a 95       	dec	r18
    1942:	e2 f7       	brpl	.-8      	; 0x193c <DIO_readPin+0x114>
    1944:	9a 01       	movw	r18, r20
    1946:	28 23       	and	r18, r24
    1948:	39 23       	and	r19, r25
    194a:	8b 81       	ldd	r24, Y+3	; 0x03
    194c:	88 2f       	mov	r24, r24
    194e:	90 e0       	ldi	r25, 0x00	; 0
    1950:	a9 01       	movw	r20, r18
    1952:	02 c0       	rjmp	.+4      	; 0x1958 <DIO_readPin+0x130>
    1954:	55 95       	asr	r21
    1956:	47 95       	ror	r20
    1958:	8a 95       	dec	r24
    195a:	e2 f7       	brpl	.-8      	; 0x1954 <DIO_readPin+0x12c>
    195c:	ca 01       	movw	r24, r20
    195e:	ec 81       	ldd	r30, Y+4	; 0x04
    1960:	fd 81       	ldd	r31, Y+5	; 0x05
    1962:	80 83       	st	Z, r24
                enu_ErrorState = DIO_E_PARAM_VALID;
    1964:	19 82       	std	Y+1, r1	; 0x01
    1966:	26 c0       	rjmp	.+76     	; 0x19b4 <DIO_readPin+0x18c>
                break;
            case DIO_PORTD:
                *ptr_pinState = READ_BIT(PIND_INPUT_R, enu_pinID);
    1968:	e0 e3       	ldi	r30, 0x30	; 48
    196a:	f0 e0       	ldi	r31, 0x00	; 0
    196c:	80 81       	ld	r24, Z
    196e:	48 2f       	mov	r20, r24
    1970:	50 e0       	ldi	r21, 0x00	; 0
    1972:	8b 81       	ldd	r24, Y+3	; 0x03
    1974:	28 2f       	mov	r18, r24
    1976:	30 e0       	ldi	r19, 0x00	; 0
    1978:	81 e0       	ldi	r24, 0x01	; 1
    197a:	90 e0       	ldi	r25, 0x00	; 0
    197c:	02 c0       	rjmp	.+4      	; 0x1982 <DIO_readPin+0x15a>
    197e:	88 0f       	add	r24, r24
    1980:	99 1f       	adc	r25, r25
    1982:	2a 95       	dec	r18
    1984:	e2 f7       	brpl	.-8      	; 0x197e <DIO_readPin+0x156>
    1986:	9a 01       	movw	r18, r20
    1988:	28 23       	and	r18, r24
    198a:	39 23       	and	r19, r25
    198c:	8b 81       	ldd	r24, Y+3	; 0x03
    198e:	88 2f       	mov	r24, r24
    1990:	90 e0       	ldi	r25, 0x00	; 0
    1992:	a9 01       	movw	r20, r18
    1994:	02 c0       	rjmp	.+4      	; 0x199a <DIO_readPin+0x172>
    1996:	55 95       	asr	r21
    1998:	47 95       	ror	r20
    199a:	8a 95       	dec	r24
    199c:	e2 f7       	brpl	.-8      	; 0x1996 <DIO_readPin+0x16e>
    199e:	ca 01       	movw	r24, r20
    19a0:	ec 81       	ldd	r30, Y+4	; 0x04
    19a2:	fd 81       	ldd	r31, Y+5	; 0x05
    19a4:	80 83       	st	Z, r24
                enu_ErrorState = DIO_E_PARAM_VALID;
    19a6:	19 82       	std	Y+1, r1	; 0x01
    19a8:	05 c0       	rjmp	.+10     	; 0x19b4 <DIO_readPin+0x18c>
                break;
            default:
            	enu_ErrorState = DIO_E_PARAM_INVALID_PORT_ID;	/* Invalid port id */
    19aa:	81 e0       	ldi	r24, 0x01	; 1
    19ac:	89 83       	std	Y+1, r24	; 0x01
    19ae:	02 c0       	rjmp	.+4      	; 0x19b4 <DIO_readPin+0x18c>
                break;
            }
        }
        else
        {
        	enu_ErrorState = DIO_E_PARAM_INVALID_PIN_ID;	/* Invalid pin id */
    19b0:	82 e0       	ldi	r24, 0x02	; 2
    19b2:	89 83       	std	Y+1, r24	; 0x01
        }
	}
    return enu_ErrorState;
    19b4:	89 81       	ldd	r24, Y+1	; 0x01
}
    19b6:	27 96       	adiw	r28, 0x07	; 7
    19b8:	0f b6       	in	r0, 0x3f	; 63
    19ba:	f8 94       	cli
    19bc:	de bf       	out	0x3e, r29	; 62
    19be:	0f be       	out	0x3f, r0	; 63
    19c0:	cd bf       	out	0x3d, r28	; 61
    19c2:	cf 91       	pop	r28
    19c4:	df 91       	pop	r29
    19c6:	08 95       	ret

000019c8 <DIO_TogglePin>:
 * [in/out]		 	None
 *
 * [Returns]:       Error State
 ******************************************************************************/
enuDIO_E_STATE_t DIO_TogglePin(enuDIO_PortId_t enu_portID, enuDIO_PinId_t enu_pinID)
{
    19c8:	df 93       	push	r29
    19ca:	cf 93       	push	r28
    19cc:	00 d0       	rcall	.+0      	; 0x19ce <DIO_TogglePin+0x6>
    19ce:	00 d0       	rcall	.+0      	; 0x19d0 <DIO_TogglePin+0x8>
    19d0:	0f 92       	push	r0
    19d2:	cd b7       	in	r28, 0x3d	; 61
    19d4:	de b7       	in	r29, 0x3e	; 62
    19d6:	8a 83       	std	Y+2, r24	; 0x02
    19d8:	6b 83       	std	Y+3, r22	; 0x03
	enuDIO_E_STATE_t enu_ErrorState = E_NOT_OK;
    19da:	81 e0       	ldi	r24, 0x01	; 1
    19dc:	89 83       	std	Y+1, r24	; 0x01

	/* Check if the pointer is NULL pointer or not */
    if ((enu_pinID >= PIN_0) && (enu_pinID <= PIN_7))
    19de:	8b 81       	ldd	r24, Y+3	; 0x03
    19e0:	88 30       	cpi	r24, 0x08	; 8
    19e2:	08 f0       	brcs	.+2      	; 0x19e6 <DIO_TogglePin+0x1e>
    19e4:	77 c0       	rjmp	.+238    	; 0x1ad4 <DIO_TogglePin+0x10c>
    {
        switch (enu_portID)
    19e6:	8a 81       	ldd	r24, Y+2	; 0x02
    19e8:	28 2f       	mov	r18, r24
    19ea:	30 e0       	ldi	r19, 0x00	; 0
    19ec:	3d 83       	std	Y+5, r19	; 0x05
    19ee:	2c 83       	std	Y+4, r18	; 0x04
    19f0:	8c 81       	ldd	r24, Y+4	; 0x04
    19f2:	9d 81       	ldd	r25, Y+5	; 0x05
    19f4:	81 30       	cpi	r24, 0x01	; 1
    19f6:	91 05       	cpc	r25, r1
    19f8:	59 f1       	breq	.+86     	; 0x1a50 <DIO_TogglePin+0x88>
    19fa:	2c 81       	ldd	r18, Y+4	; 0x04
    19fc:	3d 81       	ldd	r19, Y+5	; 0x05
    19fe:	22 30       	cpi	r18, 0x02	; 2
    1a00:	31 05       	cpc	r19, r1
    1a02:	2c f4       	brge	.+10     	; 0x1a0e <DIO_TogglePin+0x46>
    1a04:	8c 81       	ldd	r24, Y+4	; 0x04
    1a06:	9d 81       	ldd	r25, Y+5	; 0x05
    1a08:	00 97       	sbiw	r24, 0x00	; 0
    1a0a:	69 f0       	breq	.+26     	; 0x1a26 <DIO_TogglePin+0x5e>
    1a0c:	60 c0       	rjmp	.+192    	; 0x1ace <DIO_TogglePin+0x106>
    1a0e:	2c 81       	ldd	r18, Y+4	; 0x04
    1a10:	3d 81       	ldd	r19, Y+5	; 0x05
    1a12:	22 30       	cpi	r18, 0x02	; 2
    1a14:	31 05       	cpc	r19, r1
    1a16:	89 f1       	breq	.+98     	; 0x1a7a <DIO_TogglePin+0xb2>
    1a18:	8c 81       	ldd	r24, Y+4	; 0x04
    1a1a:	9d 81       	ldd	r25, Y+5	; 0x05
    1a1c:	83 30       	cpi	r24, 0x03	; 3
    1a1e:	91 05       	cpc	r25, r1
    1a20:	09 f4       	brne	.+2      	; 0x1a24 <DIO_TogglePin+0x5c>
    1a22:	40 c0       	rjmp	.+128    	; 0x1aa4 <DIO_TogglePin+0xdc>
    1a24:	54 c0       	rjmp	.+168    	; 0x1ace <DIO_TogglePin+0x106>
        {
        case DIO_PORTA:
            TOGGLE_BIT(PORTA_DATA_R, enu_pinID);
    1a26:	ab e3       	ldi	r26, 0x3B	; 59
    1a28:	b0 e0       	ldi	r27, 0x00	; 0
    1a2a:	eb e3       	ldi	r30, 0x3B	; 59
    1a2c:	f0 e0       	ldi	r31, 0x00	; 0
    1a2e:	80 81       	ld	r24, Z
    1a30:	48 2f       	mov	r20, r24
    1a32:	8b 81       	ldd	r24, Y+3	; 0x03
    1a34:	28 2f       	mov	r18, r24
    1a36:	30 e0       	ldi	r19, 0x00	; 0
    1a38:	81 e0       	ldi	r24, 0x01	; 1
    1a3a:	90 e0       	ldi	r25, 0x00	; 0
    1a3c:	02 2e       	mov	r0, r18
    1a3e:	02 c0       	rjmp	.+4      	; 0x1a44 <DIO_TogglePin+0x7c>
    1a40:	88 0f       	add	r24, r24
    1a42:	99 1f       	adc	r25, r25
    1a44:	0a 94       	dec	r0
    1a46:	e2 f7       	brpl	.-8      	; 0x1a40 <DIO_TogglePin+0x78>
    1a48:	84 27       	eor	r24, r20
    1a4a:	8c 93       	st	X, r24
            enu_ErrorState = DIO_E_PARAM_VALID;
    1a4c:	19 82       	std	Y+1, r1	; 0x01
    1a4e:	44 c0       	rjmp	.+136    	; 0x1ad8 <DIO_TogglePin+0x110>
            break;
        case DIO_PORTB:
        	TOGGLE_BIT(PORTB_DATA_R, enu_pinID);
    1a50:	a8 e3       	ldi	r26, 0x38	; 56
    1a52:	b0 e0       	ldi	r27, 0x00	; 0
    1a54:	e8 e3       	ldi	r30, 0x38	; 56
    1a56:	f0 e0       	ldi	r31, 0x00	; 0
    1a58:	80 81       	ld	r24, Z
    1a5a:	48 2f       	mov	r20, r24
    1a5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a5e:	28 2f       	mov	r18, r24
    1a60:	30 e0       	ldi	r19, 0x00	; 0
    1a62:	81 e0       	ldi	r24, 0x01	; 1
    1a64:	90 e0       	ldi	r25, 0x00	; 0
    1a66:	02 2e       	mov	r0, r18
    1a68:	02 c0       	rjmp	.+4      	; 0x1a6e <DIO_TogglePin+0xa6>
    1a6a:	88 0f       	add	r24, r24
    1a6c:	99 1f       	adc	r25, r25
    1a6e:	0a 94       	dec	r0
    1a70:	e2 f7       	brpl	.-8      	; 0x1a6a <DIO_TogglePin+0xa2>
    1a72:	84 27       	eor	r24, r20
    1a74:	8c 93       	st	X, r24
            enu_ErrorState = DIO_E_PARAM_VALID;
    1a76:	19 82       	std	Y+1, r1	; 0x01
    1a78:	2f c0       	rjmp	.+94     	; 0x1ad8 <DIO_TogglePin+0x110>
            break;
        case DIO_PORTC:
        	TOGGLE_BIT(PORTC_DATA_R, enu_pinID);
    1a7a:	a5 e3       	ldi	r26, 0x35	; 53
    1a7c:	b0 e0       	ldi	r27, 0x00	; 0
    1a7e:	e5 e3       	ldi	r30, 0x35	; 53
    1a80:	f0 e0       	ldi	r31, 0x00	; 0
    1a82:	80 81       	ld	r24, Z
    1a84:	48 2f       	mov	r20, r24
    1a86:	8b 81       	ldd	r24, Y+3	; 0x03
    1a88:	28 2f       	mov	r18, r24
    1a8a:	30 e0       	ldi	r19, 0x00	; 0
    1a8c:	81 e0       	ldi	r24, 0x01	; 1
    1a8e:	90 e0       	ldi	r25, 0x00	; 0
    1a90:	02 2e       	mov	r0, r18
    1a92:	02 c0       	rjmp	.+4      	; 0x1a98 <DIO_TogglePin+0xd0>
    1a94:	88 0f       	add	r24, r24
    1a96:	99 1f       	adc	r25, r25
    1a98:	0a 94       	dec	r0
    1a9a:	e2 f7       	brpl	.-8      	; 0x1a94 <DIO_TogglePin+0xcc>
    1a9c:	84 27       	eor	r24, r20
    1a9e:	8c 93       	st	X, r24
            enu_ErrorState = DIO_E_PARAM_VALID;
    1aa0:	19 82       	std	Y+1, r1	; 0x01
    1aa2:	1a c0       	rjmp	.+52     	; 0x1ad8 <DIO_TogglePin+0x110>
            break;
        case DIO_PORTD:
        	TOGGLE_BIT(PORTD_DATA_R, enu_pinID);
    1aa4:	a2 e3       	ldi	r26, 0x32	; 50
    1aa6:	b0 e0       	ldi	r27, 0x00	; 0
    1aa8:	e2 e3       	ldi	r30, 0x32	; 50
    1aaa:	f0 e0       	ldi	r31, 0x00	; 0
    1aac:	80 81       	ld	r24, Z
    1aae:	48 2f       	mov	r20, r24
    1ab0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab2:	28 2f       	mov	r18, r24
    1ab4:	30 e0       	ldi	r19, 0x00	; 0
    1ab6:	81 e0       	ldi	r24, 0x01	; 1
    1ab8:	90 e0       	ldi	r25, 0x00	; 0
    1aba:	02 2e       	mov	r0, r18
    1abc:	02 c0       	rjmp	.+4      	; 0x1ac2 <DIO_TogglePin+0xfa>
    1abe:	88 0f       	add	r24, r24
    1ac0:	99 1f       	adc	r25, r25
    1ac2:	0a 94       	dec	r0
    1ac4:	e2 f7       	brpl	.-8      	; 0x1abe <DIO_TogglePin+0xf6>
    1ac6:	84 27       	eor	r24, r20
    1ac8:	8c 93       	st	X, r24
            enu_ErrorState = DIO_E_PARAM_VALID;
    1aca:	19 82       	std	Y+1, r1	; 0x01
    1acc:	05 c0       	rjmp	.+10     	; 0x1ad8 <DIO_TogglePin+0x110>
            break;
        default:
        	enu_ErrorState = E_NOT_OK;	/* Invalid port id */
    1ace:	81 e0       	ldi	r24, 0x01	; 1
    1ad0:	89 83       	std	Y+1, r24	; 0x01
    1ad2:	02 c0       	rjmp	.+4      	; 0x1ad8 <DIO_TogglePin+0x110>
            break;
        }
    }
    else
    {
    	enu_ErrorState = DIO_E_PARAM_INVALID_PIN_ID;	/* Invalid pin id */
    1ad4:	82 e0       	ldi	r24, 0x02	; 2
    1ad6:	89 83       	std	Y+1, r24	; 0x01
    }
    return enu_ErrorState;
    1ad8:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ada:	0f 90       	pop	r0
    1adc:	0f 90       	pop	r0
    1ade:	0f 90       	pop	r0
    1ae0:	0f 90       	pop	r0
    1ae2:	0f 90       	pop	r0
    1ae4:	cf 91       	pop	r28
    1ae6:	df 91       	pop	r29
    1ae8:	08 95       	ret

00001aea <LCD_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void LCD_init(void)
{
    1aea:	df 93       	push	r29
    1aec:	cf 93       	push	r28
    1aee:	cd b7       	in	r28, 0x3d	; 61
    1af0:	de b7       	in	r29, 0x3e	; 62
	LCD_CTRL_PORT_DIR |= (1<<E) | (1<<RS) | (1<<RW); /* Configure the control pins(E,RS,RW) as output pins */
    1af2:	aa e3       	ldi	r26, 0x3A	; 58
    1af4:	b0 e0       	ldi	r27, 0x00	; 0
    1af6:	ea e3       	ldi	r30, 0x3A	; 58
    1af8:	f0 e0       	ldi	r31, 0x00	; 0
    1afa:	80 81       	ld	r24, Z
    1afc:	8e 60       	ori	r24, 0x0E	; 14
    1afe:	8c 93       	st	X, r24
	
	#if (DATA_BITS_MODE == 4)
		#ifdef UPPER_PORT_PINS
			LCD_DATA_PORT_DIR |= 0xF0; /* Configure the highest 4 bits of the data port as output pins */
    1b00:	aa e3       	ldi	r26, 0x3A	; 58
    1b02:	b0 e0       	ldi	r27, 0x00	; 0
    1b04:	ea e3       	ldi	r30, 0x3A	; 58
    1b06:	f0 e0       	ldi	r31, 0x00	; 0
    1b08:	80 81       	ld	r24, Z
    1b0a:	80 6f       	ori	r24, 0xF0	; 240
    1b0c:	8c 93       	st	X, r24
		#else
			LCD_DATA_PORT_DIR |= 0x0F; /* Configure the lowest 4 bits of the data port as output pins */
		#endif		 
		LCD_sendCommand(FOUR_BITS_DATA_MODE); /* Initialize LCD in 4-bit mode */
    1b0e:	82 e0       	ldi	r24, 0x02	; 2
    1b10:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <LCD_sendCommand>
		LCD_sendCommand(TWO_LINE_LCD_Four_BIT_MODE); /* Use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */
    1b14:	88 e2       	ldi	r24, 0x28	; 40
    1b16:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <LCD_sendCommand>
	#elif (DATA_BITS_MODE == 8)
		LCD_DATA_PORT_DIR = 0xFF; /* Configure the data port as output port */ 
		LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE); /* Use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
	#endif
	
	LCD_sendCommand(CURSOR_OFF); /* Cursor off */
    1b1a:	8c e0       	ldi	r24, 0x0C	; 12
    1b1c:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <LCD_sendCommand>
	LCD_sendCommand(CLEAR_COMMAND); /* Clear LCD at the beginning */
    1b20:	81 e0       	ldi	r24, 0x01	; 1
    1b22:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <LCD_sendCommand>
}
    1b26:	cf 91       	pop	r28
    1b28:	df 91       	pop	r29
    1b2a:	08 95       	ret

00001b2c <LCD_sendCommand>:

void LCD_sendCommand(uint8_t command)
{
    1b2c:	0f 93       	push	r16
    1b2e:	1f 93       	push	r17
    1b30:	df 93       	push	r29
    1b32:	cf 93       	push	r28
    1b34:	cd b7       	in	r28, 0x3d	; 61
    1b36:	de b7       	in	r29, 0x3e	; 62
    1b38:	c3 56       	subi	r28, 0x63	; 99
    1b3a:	d0 40       	sbci	r29, 0x00	; 0
    1b3c:	0f b6       	in	r0, 0x3f	; 63
    1b3e:	f8 94       	cli
    1b40:	de bf       	out	0x3e, r29	; 62
    1b42:	0f be       	out	0x3f, r0	; 63
    1b44:	cd bf       	out	0x3d, r28	; 61
    1b46:	fe 01       	movw	r30, r28
    1b48:	ed 59       	subi	r30, 0x9D	; 157
    1b4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b4c:	80 83       	st	Z, r24
	CLEAR_BIT(LCD_CTRL_PORT,RS); /* Instruction Mode RS = 0 */
    1b4e:	ab e3       	ldi	r26, 0x3B	; 59
    1b50:	b0 e0       	ldi	r27, 0x00	; 0
    1b52:	eb e3       	ldi	r30, 0x3B	; 59
    1b54:	f0 e0       	ldi	r31, 0x00	; 0
    1b56:	80 81       	ld	r24, Z
    1b58:	8d 7f       	andi	r24, 0xFD	; 253
    1b5a:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* Write data to LCD so RW = 0 */
    1b5c:	ab e3       	ldi	r26, 0x3B	; 59
    1b5e:	b0 e0       	ldi	r27, 0x00	; 0
    1b60:	eb e3       	ldi	r30, 0x3B	; 59
    1b62:	f0 e0       	ldi	r31, 0x00	; 0
    1b64:	80 81       	ld	r24, Z
    1b66:	8b 7f       	andi	r24, 0xFB	; 251
    1b68:	8c 93       	st	X, r24
    1b6a:	fe 01       	movw	r30, r28
    1b6c:	e1 5a       	subi	r30, 0xA1	; 161
    1b6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b70:	80 e0       	ldi	r24, 0x00	; 0
    1b72:	90 e0       	ldi	r25, 0x00	; 0
    1b74:	a0 e8       	ldi	r26, 0x80	; 128
    1b76:	bf e3       	ldi	r27, 0x3F	; 63
    1b78:	80 83       	st	Z, r24
    1b7a:	91 83       	std	Z+1, r25	; 0x01
    1b7c:	a2 83       	std	Z+2, r26	; 0x02
    1b7e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b80:	8e 01       	movw	r16, r28
    1b82:	05 5a       	subi	r16, 0xA5	; 165
    1b84:	1f 4f       	sbci	r17, 0xFF	; 255
    1b86:	fe 01       	movw	r30, r28
    1b88:	e1 5a       	subi	r30, 0xA1	; 161
    1b8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b8c:	60 81       	ld	r22, Z
    1b8e:	71 81       	ldd	r23, Z+1	; 0x01
    1b90:	82 81       	ldd	r24, Z+2	; 0x02
    1b92:	93 81       	ldd	r25, Z+3	; 0x03
    1b94:	20 e0       	ldi	r18, 0x00	; 0
    1b96:	30 e0       	ldi	r19, 0x00	; 0
    1b98:	4a ef       	ldi	r20, 0xFA	; 250
    1b9a:	54 e4       	ldi	r21, 0x44	; 68
    1b9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ba0:	dc 01       	movw	r26, r24
    1ba2:	cb 01       	movw	r24, r22
    1ba4:	f8 01       	movw	r30, r16
    1ba6:	80 83       	st	Z, r24
    1ba8:	91 83       	std	Z+1, r25	; 0x01
    1baa:	a2 83       	std	Z+2, r26	; 0x02
    1bac:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1bae:	fe 01       	movw	r30, r28
    1bb0:	e5 5a       	subi	r30, 0xA5	; 165
    1bb2:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb4:	60 81       	ld	r22, Z
    1bb6:	71 81       	ldd	r23, Z+1	; 0x01
    1bb8:	82 81       	ldd	r24, Z+2	; 0x02
    1bba:	93 81       	ldd	r25, Z+3	; 0x03
    1bbc:	20 e0       	ldi	r18, 0x00	; 0
    1bbe:	30 e0       	ldi	r19, 0x00	; 0
    1bc0:	40 e8       	ldi	r20, 0x80	; 128
    1bc2:	5f e3       	ldi	r21, 0x3F	; 63
    1bc4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bc8:	88 23       	and	r24, r24
    1bca:	44 f4       	brge	.+16     	; 0x1bdc <LCD_sendCommand+0xb0>
		__ticks = 1;
    1bcc:	fe 01       	movw	r30, r28
    1bce:	e7 5a       	subi	r30, 0xA7	; 167
    1bd0:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd2:	81 e0       	ldi	r24, 0x01	; 1
    1bd4:	90 e0       	ldi	r25, 0x00	; 0
    1bd6:	91 83       	std	Z+1, r25	; 0x01
    1bd8:	80 83       	st	Z, r24
    1bda:	64 c0       	rjmp	.+200    	; 0x1ca4 <LCD_sendCommand+0x178>
	else if (__tmp > 65535)
    1bdc:	fe 01       	movw	r30, r28
    1bde:	e5 5a       	subi	r30, 0xA5	; 165
    1be0:	ff 4f       	sbci	r31, 0xFF	; 255
    1be2:	60 81       	ld	r22, Z
    1be4:	71 81       	ldd	r23, Z+1	; 0x01
    1be6:	82 81       	ldd	r24, Z+2	; 0x02
    1be8:	93 81       	ldd	r25, Z+3	; 0x03
    1bea:	20 e0       	ldi	r18, 0x00	; 0
    1bec:	3f ef       	ldi	r19, 0xFF	; 255
    1bee:	4f e7       	ldi	r20, 0x7F	; 127
    1bf0:	57 e4       	ldi	r21, 0x47	; 71
    1bf2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bf6:	18 16       	cp	r1, r24
    1bf8:	0c f0       	brlt	.+2      	; 0x1bfc <LCD_sendCommand+0xd0>
    1bfa:	43 c0       	rjmp	.+134    	; 0x1c82 <LCD_sendCommand+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bfc:	fe 01       	movw	r30, r28
    1bfe:	e1 5a       	subi	r30, 0xA1	; 161
    1c00:	ff 4f       	sbci	r31, 0xFF	; 255
    1c02:	60 81       	ld	r22, Z
    1c04:	71 81       	ldd	r23, Z+1	; 0x01
    1c06:	82 81       	ldd	r24, Z+2	; 0x02
    1c08:	93 81       	ldd	r25, Z+3	; 0x03
    1c0a:	20 e0       	ldi	r18, 0x00	; 0
    1c0c:	30 e0       	ldi	r19, 0x00	; 0
    1c0e:	40 e2       	ldi	r20, 0x20	; 32
    1c10:	51 e4       	ldi	r21, 0x41	; 65
    1c12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c16:	dc 01       	movw	r26, r24
    1c18:	cb 01       	movw	r24, r22
    1c1a:	8e 01       	movw	r16, r28
    1c1c:	07 5a       	subi	r16, 0xA7	; 167
    1c1e:	1f 4f       	sbci	r17, 0xFF	; 255
    1c20:	bc 01       	movw	r22, r24
    1c22:	cd 01       	movw	r24, r26
    1c24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c28:	dc 01       	movw	r26, r24
    1c2a:	cb 01       	movw	r24, r22
    1c2c:	f8 01       	movw	r30, r16
    1c2e:	91 83       	std	Z+1, r25	; 0x01
    1c30:	80 83       	st	Z, r24
    1c32:	1f c0       	rjmp	.+62     	; 0x1c72 <LCD_sendCommand+0x146>
    1c34:	fe 01       	movw	r30, r28
    1c36:	e9 5a       	subi	r30, 0xA9	; 169
    1c38:	ff 4f       	sbci	r31, 0xFF	; 255
    1c3a:	88 ec       	ldi	r24, 0xC8	; 200
    1c3c:	90 e0       	ldi	r25, 0x00	; 0
    1c3e:	91 83       	std	Z+1, r25	; 0x01
    1c40:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c42:	fe 01       	movw	r30, r28
    1c44:	e9 5a       	subi	r30, 0xA9	; 169
    1c46:	ff 4f       	sbci	r31, 0xFF	; 255
    1c48:	80 81       	ld	r24, Z
    1c4a:	91 81       	ldd	r25, Z+1	; 0x01
    1c4c:	01 97       	sbiw	r24, 0x01	; 1
    1c4e:	f1 f7       	brne	.-4      	; 0x1c4c <LCD_sendCommand+0x120>
    1c50:	fe 01       	movw	r30, r28
    1c52:	e9 5a       	subi	r30, 0xA9	; 169
    1c54:	ff 4f       	sbci	r31, 0xFF	; 255
    1c56:	91 83       	std	Z+1, r25	; 0x01
    1c58:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c5a:	de 01       	movw	r26, r28
    1c5c:	a7 5a       	subi	r26, 0xA7	; 167
    1c5e:	bf 4f       	sbci	r27, 0xFF	; 255
    1c60:	fe 01       	movw	r30, r28
    1c62:	e7 5a       	subi	r30, 0xA7	; 167
    1c64:	ff 4f       	sbci	r31, 0xFF	; 255
    1c66:	80 81       	ld	r24, Z
    1c68:	91 81       	ldd	r25, Z+1	; 0x01
    1c6a:	01 97       	sbiw	r24, 0x01	; 1
    1c6c:	11 96       	adiw	r26, 0x01	; 1
    1c6e:	9c 93       	st	X, r25
    1c70:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c72:	fe 01       	movw	r30, r28
    1c74:	e7 5a       	subi	r30, 0xA7	; 167
    1c76:	ff 4f       	sbci	r31, 0xFF	; 255
    1c78:	80 81       	ld	r24, Z
    1c7a:	91 81       	ldd	r25, Z+1	; 0x01
    1c7c:	00 97       	sbiw	r24, 0x00	; 0
    1c7e:	d1 f6       	brne	.-76     	; 0x1c34 <LCD_sendCommand+0x108>
    1c80:	27 c0       	rjmp	.+78     	; 0x1cd0 <LCD_sendCommand+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c82:	8e 01       	movw	r16, r28
    1c84:	07 5a       	subi	r16, 0xA7	; 167
    1c86:	1f 4f       	sbci	r17, 0xFF	; 255
    1c88:	fe 01       	movw	r30, r28
    1c8a:	e5 5a       	subi	r30, 0xA5	; 165
    1c8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c8e:	60 81       	ld	r22, Z
    1c90:	71 81       	ldd	r23, Z+1	; 0x01
    1c92:	82 81       	ldd	r24, Z+2	; 0x02
    1c94:	93 81       	ldd	r25, Z+3	; 0x03
    1c96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c9a:	dc 01       	movw	r26, r24
    1c9c:	cb 01       	movw	r24, r22
    1c9e:	f8 01       	movw	r30, r16
    1ca0:	91 83       	std	Z+1, r25	; 0x01
    1ca2:	80 83       	st	Z, r24
    1ca4:	de 01       	movw	r26, r28
    1ca6:	ab 5a       	subi	r26, 0xAB	; 171
    1ca8:	bf 4f       	sbci	r27, 0xFF	; 255
    1caa:	fe 01       	movw	r30, r28
    1cac:	e7 5a       	subi	r30, 0xA7	; 167
    1cae:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb0:	80 81       	ld	r24, Z
    1cb2:	91 81       	ldd	r25, Z+1	; 0x01
    1cb4:	8d 93       	st	X+, r24
    1cb6:	9c 93       	st	X, r25
    1cb8:	fe 01       	movw	r30, r28
    1cba:	eb 5a       	subi	r30, 0xAB	; 171
    1cbc:	ff 4f       	sbci	r31, 0xFF	; 255
    1cbe:	80 81       	ld	r24, Z
    1cc0:	91 81       	ldd	r25, Z+1	; 0x01
    1cc2:	01 97       	sbiw	r24, 0x01	; 1
    1cc4:	f1 f7       	brne	.-4      	; 0x1cc2 <LCD_sendCommand+0x196>
    1cc6:	fe 01       	movw	r30, r28
    1cc8:	eb 5a       	subi	r30, 0xAB	; 171
    1cca:	ff 4f       	sbci	r31, 0xFF	; 255
    1ccc:	91 83       	std	Z+1, r25	; 0x01
    1cce:	80 83       	st	Z, r24
	_delay_ms(1); /* Delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E = 1 */
    1cd0:	ab e3       	ldi	r26, 0x3B	; 59
    1cd2:	b0 e0       	ldi	r27, 0x00	; 0
    1cd4:	eb e3       	ldi	r30, 0x3B	; 59
    1cd6:	f0 e0       	ldi	r31, 0x00	; 0
    1cd8:	80 81       	ld	r24, Z
    1cda:	88 60       	ori	r24, 0x08	; 8
    1cdc:	8c 93       	st	X, r24
    1cde:	fe 01       	movw	r30, r28
    1ce0:	ef 5a       	subi	r30, 0xAF	; 175
    1ce2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce4:	80 e0       	ldi	r24, 0x00	; 0
    1ce6:	90 e0       	ldi	r25, 0x00	; 0
    1ce8:	a0 e8       	ldi	r26, 0x80	; 128
    1cea:	bf e3       	ldi	r27, 0x3F	; 63
    1cec:	80 83       	st	Z, r24
    1cee:	91 83       	std	Z+1, r25	; 0x01
    1cf0:	a2 83       	std	Z+2, r26	; 0x02
    1cf2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cf4:	8e 01       	movw	r16, r28
    1cf6:	03 5b       	subi	r16, 0xB3	; 179
    1cf8:	1f 4f       	sbci	r17, 0xFF	; 255
    1cfa:	fe 01       	movw	r30, r28
    1cfc:	ef 5a       	subi	r30, 0xAF	; 175
    1cfe:	ff 4f       	sbci	r31, 0xFF	; 255
    1d00:	60 81       	ld	r22, Z
    1d02:	71 81       	ldd	r23, Z+1	; 0x01
    1d04:	82 81       	ldd	r24, Z+2	; 0x02
    1d06:	93 81       	ldd	r25, Z+3	; 0x03
    1d08:	20 e0       	ldi	r18, 0x00	; 0
    1d0a:	30 e0       	ldi	r19, 0x00	; 0
    1d0c:	4a ef       	ldi	r20, 0xFA	; 250
    1d0e:	54 e4       	ldi	r21, 0x44	; 68
    1d10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d14:	dc 01       	movw	r26, r24
    1d16:	cb 01       	movw	r24, r22
    1d18:	f8 01       	movw	r30, r16
    1d1a:	80 83       	st	Z, r24
    1d1c:	91 83       	std	Z+1, r25	; 0x01
    1d1e:	a2 83       	std	Z+2, r26	; 0x02
    1d20:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d22:	fe 01       	movw	r30, r28
    1d24:	e3 5b       	subi	r30, 0xB3	; 179
    1d26:	ff 4f       	sbci	r31, 0xFF	; 255
    1d28:	60 81       	ld	r22, Z
    1d2a:	71 81       	ldd	r23, Z+1	; 0x01
    1d2c:	82 81       	ldd	r24, Z+2	; 0x02
    1d2e:	93 81       	ldd	r25, Z+3	; 0x03
    1d30:	20 e0       	ldi	r18, 0x00	; 0
    1d32:	30 e0       	ldi	r19, 0x00	; 0
    1d34:	40 e8       	ldi	r20, 0x80	; 128
    1d36:	5f e3       	ldi	r21, 0x3F	; 63
    1d38:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d3c:	88 23       	and	r24, r24
    1d3e:	44 f4       	brge	.+16     	; 0x1d50 <LCD_sendCommand+0x224>
		__ticks = 1;
    1d40:	fe 01       	movw	r30, r28
    1d42:	e5 5b       	subi	r30, 0xB5	; 181
    1d44:	ff 4f       	sbci	r31, 0xFF	; 255
    1d46:	81 e0       	ldi	r24, 0x01	; 1
    1d48:	90 e0       	ldi	r25, 0x00	; 0
    1d4a:	91 83       	std	Z+1, r25	; 0x01
    1d4c:	80 83       	st	Z, r24
    1d4e:	64 c0       	rjmp	.+200    	; 0x1e18 <LCD_sendCommand+0x2ec>
	else if (__tmp > 65535)
    1d50:	fe 01       	movw	r30, r28
    1d52:	e3 5b       	subi	r30, 0xB3	; 179
    1d54:	ff 4f       	sbci	r31, 0xFF	; 255
    1d56:	60 81       	ld	r22, Z
    1d58:	71 81       	ldd	r23, Z+1	; 0x01
    1d5a:	82 81       	ldd	r24, Z+2	; 0x02
    1d5c:	93 81       	ldd	r25, Z+3	; 0x03
    1d5e:	20 e0       	ldi	r18, 0x00	; 0
    1d60:	3f ef       	ldi	r19, 0xFF	; 255
    1d62:	4f e7       	ldi	r20, 0x7F	; 127
    1d64:	57 e4       	ldi	r21, 0x47	; 71
    1d66:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d6a:	18 16       	cp	r1, r24
    1d6c:	0c f0       	brlt	.+2      	; 0x1d70 <LCD_sendCommand+0x244>
    1d6e:	43 c0       	rjmp	.+134    	; 0x1df6 <LCD_sendCommand+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d70:	fe 01       	movw	r30, r28
    1d72:	ef 5a       	subi	r30, 0xAF	; 175
    1d74:	ff 4f       	sbci	r31, 0xFF	; 255
    1d76:	60 81       	ld	r22, Z
    1d78:	71 81       	ldd	r23, Z+1	; 0x01
    1d7a:	82 81       	ldd	r24, Z+2	; 0x02
    1d7c:	93 81       	ldd	r25, Z+3	; 0x03
    1d7e:	20 e0       	ldi	r18, 0x00	; 0
    1d80:	30 e0       	ldi	r19, 0x00	; 0
    1d82:	40 e2       	ldi	r20, 0x20	; 32
    1d84:	51 e4       	ldi	r21, 0x41	; 65
    1d86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d8a:	dc 01       	movw	r26, r24
    1d8c:	cb 01       	movw	r24, r22
    1d8e:	8e 01       	movw	r16, r28
    1d90:	05 5b       	subi	r16, 0xB5	; 181
    1d92:	1f 4f       	sbci	r17, 0xFF	; 255
    1d94:	bc 01       	movw	r22, r24
    1d96:	cd 01       	movw	r24, r26
    1d98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d9c:	dc 01       	movw	r26, r24
    1d9e:	cb 01       	movw	r24, r22
    1da0:	f8 01       	movw	r30, r16
    1da2:	91 83       	std	Z+1, r25	; 0x01
    1da4:	80 83       	st	Z, r24
    1da6:	1f c0       	rjmp	.+62     	; 0x1de6 <LCD_sendCommand+0x2ba>
    1da8:	fe 01       	movw	r30, r28
    1daa:	e7 5b       	subi	r30, 0xB7	; 183
    1dac:	ff 4f       	sbci	r31, 0xFF	; 255
    1dae:	88 ec       	ldi	r24, 0xC8	; 200
    1db0:	90 e0       	ldi	r25, 0x00	; 0
    1db2:	91 83       	std	Z+1, r25	; 0x01
    1db4:	80 83       	st	Z, r24
    1db6:	fe 01       	movw	r30, r28
    1db8:	e7 5b       	subi	r30, 0xB7	; 183
    1dba:	ff 4f       	sbci	r31, 0xFF	; 255
    1dbc:	80 81       	ld	r24, Z
    1dbe:	91 81       	ldd	r25, Z+1	; 0x01
    1dc0:	01 97       	sbiw	r24, 0x01	; 1
    1dc2:	f1 f7       	brne	.-4      	; 0x1dc0 <LCD_sendCommand+0x294>
    1dc4:	fe 01       	movw	r30, r28
    1dc6:	e7 5b       	subi	r30, 0xB7	; 183
    1dc8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dca:	91 83       	std	Z+1, r25	; 0x01
    1dcc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dce:	de 01       	movw	r26, r28
    1dd0:	a5 5b       	subi	r26, 0xB5	; 181
    1dd2:	bf 4f       	sbci	r27, 0xFF	; 255
    1dd4:	fe 01       	movw	r30, r28
    1dd6:	e5 5b       	subi	r30, 0xB5	; 181
    1dd8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dda:	80 81       	ld	r24, Z
    1ddc:	91 81       	ldd	r25, Z+1	; 0x01
    1dde:	01 97       	sbiw	r24, 0x01	; 1
    1de0:	11 96       	adiw	r26, 0x01	; 1
    1de2:	9c 93       	st	X, r25
    1de4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1de6:	fe 01       	movw	r30, r28
    1de8:	e5 5b       	subi	r30, 0xB5	; 181
    1dea:	ff 4f       	sbci	r31, 0xFF	; 255
    1dec:	80 81       	ld	r24, Z
    1dee:	91 81       	ldd	r25, Z+1	; 0x01
    1df0:	00 97       	sbiw	r24, 0x00	; 0
    1df2:	d1 f6       	brne	.-76     	; 0x1da8 <LCD_sendCommand+0x27c>
    1df4:	27 c0       	rjmp	.+78     	; 0x1e44 <LCD_sendCommand+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1df6:	8e 01       	movw	r16, r28
    1df8:	05 5b       	subi	r16, 0xB5	; 181
    1dfa:	1f 4f       	sbci	r17, 0xFF	; 255
    1dfc:	fe 01       	movw	r30, r28
    1dfe:	e3 5b       	subi	r30, 0xB3	; 179
    1e00:	ff 4f       	sbci	r31, 0xFF	; 255
    1e02:	60 81       	ld	r22, Z
    1e04:	71 81       	ldd	r23, Z+1	; 0x01
    1e06:	82 81       	ldd	r24, Z+2	; 0x02
    1e08:	93 81       	ldd	r25, Z+3	; 0x03
    1e0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e0e:	dc 01       	movw	r26, r24
    1e10:	cb 01       	movw	r24, r22
    1e12:	f8 01       	movw	r30, r16
    1e14:	91 83       	std	Z+1, r25	; 0x01
    1e16:	80 83       	st	Z, r24
    1e18:	de 01       	movw	r26, r28
    1e1a:	a9 5b       	subi	r26, 0xB9	; 185
    1e1c:	bf 4f       	sbci	r27, 0xFF	; 255
    1e1e:	fe 01       	movw	r30, r28
    1e20:	e5 5b       	subi	r30, 0xB5	; 181
    1e22:	ff 4f       	sbci	r31, 0xFF	; 255
    1e24:	80 81       	ld	r24, Z
    1e26:	91 81       	ldd	r25, Z+1	; 0x01
    1e28:	8d 93       	st	X+, r24
    1e2a:	9c 93       	st	X, r25
    1e2c:	fe 01       	movw	r30, r28
    1e2e:	e9 5b       	subi	r30, 0xB9	; 185
    1e30:	ff 4f       	sbci	r31, 0xFF	; 255
    1e32:	80 81       	ld	r24, Z
    1e34:	91 81       	ldd	r25, Z+1	; 0x01
    1e36:	01 97       	sbiw	r24, 0x01	; 1
    1e38:	f1 f7       	brne	.-4      	; 0x1e36 <LCD_sendCommand+0x30a>
    1e3a:	fe 01       	movw	r30, r28
    1e3c:	e9 5b       	subi	r30, 0xB9	; 185
    1e3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e40:	91 83       	std	Z+1, r25	; 0x01
    1e42:	80 83       	st	Z, r24
	_delay_ms(1); /* Delay for processing Tpw - Tdws = 190ns */
#if (DATA_BITS_MODE == 4)
	/* Out the highest 4 bits of the required command to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (command & 0xF0);
    1e44:	ab e3       	ldi	r26, 0x3B	; 59
    1e46:	b0 e0       	ldi	r27, 0x00	; 0
    1e48:	eb e3       	ldi	r30, 0x3B	; 59
    1e4a:	f0 e0       	ldi	r31, 0x00	; 0
    1e4c:	80 81       	ld	r24, Z
    1e4e:	98 2f       	mov	r25, r24
    1e50:	9f 70       	andi	r25, 0x0F	; 15
    1e52:	fe 01       	movw	r30, r28
    1e54:	ed 59       	subi	r30, 0x9D	; 157
    1e56:	ff 4f       	sbci	r31, 0xFF	; 255
    1e58:	80 81       	ld	r24, Z
    1e5a:	80 7f       	andi	r24, 0xF0	; 240
    1e5c:	89 2b       	or	r24, r25
    1e5e:	8c 93       	st	X, r24
    1e60:	fe 01       	movw	r30, r28
    1e62:	ed 5b       	subi	r30, 0xBD	; 189
    1e64:	ff 4f       	sbci	r31, 0xFF	; 255
    1e66:	80 e0       	ldi	r24, 0x00	; 0
    1e68:	90 e0       	ldi	r25, 0x00	; 0
    1e6a:	a0 e8       	ldi	r26, 0x80	; 128
    1e6c:	bf e3       	ldi	r27, 0x3F	; 63
    1e6e:	80 83       	st	Z, r24
    1e70:	91 83       	std	Z+1, r25	; 0x01
    1e72:	a2 83       	std	Z+2, r26	; 0x02
    1e74:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e76:	8e 01       	movw	r16, r28
    1e78:	01 5c       	subi	r16, 0xC1	; 193
    1e7a:	1f 4f       	sbci	r17, 0xFF	; 255
    1e7c:	fe 01       	movw	r30, r28
    1e7e:	ed 5b       	subi	r30, 0xBD	; 189
    1e80:	ff 4f       	sbci	r31, 0xFF	; 255
    1e82:	60 81       	ld	r22, Z
    1e84:	71 81       	ldd	r23, Z+1	; 0x01
    1e86:	82 81       	ldd	r24, Z+2	; 0x02
    1e88:	93 81       	ldd	r25, Z+3	; 0x03
    1e8a:	20 e0       	ldi	r18, 0x00	; 0
    1e8c:	30 e0       	ldi	r19, 0x00	; 0
    1e8e:	4a ef       	ldi	r20, 0xFA	; 250
    1e90:	54 e4       	ldi	r21, 0x44	; 68
    1e92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e96:	dc 01       	movw	r26, r24
    1e98:	cb 01       	movw	r24, r22
    1e9a:	f8 01       	movw	r30, r16
    1e9c:	80 83       	st	Z, r24
    1e9e:	91 83       	std	Z+1, r25	; 0x01
    1ea0:	a2 83       	std	Z+2, r26	; 0x02
    1ea2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ea4:	fe 01       	movw	r30, r28
    1ea6:	ff 96       	adiw	r30, 0x3f	; 63
    1ea8:	60 81       	ld	r22, Z
    1eaa:	71 81       	ldd	r23, Z+1	; 0x01
    1eac:	82 81       	ldd	r24, Z+2	; 0x02
    1eae:	93 81       	ldd	r25, Z+3	; 0x03
    1eb0:	20 e0       	ldi	r18, 0x00	; 0
    1eb2:	30 e0       	ldi	r19, 0x00	; 0
    1eb4:	40 e8       	ldi	r20, 0x80	; 128
    1eb6:	5f e3       	ldi	r21, 0x3F	; 63
    1eb8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ebc:	88 23       	and	r24, r24
    1ebe:	2c f4       	brge	.+10     	; 0x1eca <LCD_sendCommand+0x39e>
		__ticks = 1;
    1ec0:	81 e0       	ldi	r24, 0x01	; 1
    1ec2:	90 e0       	ldi	r25, 0x00	; 0
    1ec4:	9e af       	std	Y+62, r25	; 0x3e
    1ec6:	8d af       	std	Y+61, r24	; 0x3d
    1ec8:	46 c0       	rjmp	.+140    	; 0x1f56 <LCD_sendCommand+0x42a>
	else if (__tmp > 65535)
    1eca:	fe 01       	movw	r30, r28
    1ecc:	ff 96       	adiw	r30, 0x3f	; 63
    1ece:	60 81       	ld	r22, Z
    1ed0:	71 81       	ldd	r23, Z+1	; 0x01
    1ed2:	82 81       	ldd	r24, Z+2	; 0x02
    1ed4:	93 81       	ldd	r25, Z+3	; 0x03
    1ed6:	20 e0       	ldi	r18, 0x00	; 0
    1ed8:	3f ef       	ldi	r19, 0xFF	; 255
    1eda:	4f e7       	ldi	r20, 0x7F	; 127
    1edc:	57 e4       	ldi	r21, 0x47	; 71
    1ede:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ee2:	18 16       	cp	r1, r24
    1ee4:	64 f5       	brge	.+88     	; 0x1f3e <LCD_sendCommand+0x412>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ee6:	fe 01       	movw	r30, r28
    1ee8:	ed 5b       	subi	r30, 0xBD	; 189
    1eea:	ff 4f       	sbci	r31, 0xFF	; 255
    1eec:	60 81       	ld	r22, Z
    1eee:	71 81       	ldd	r23, Z+1	; 0x01
    1ef0:	82 81       	ldd	r24, Z+2	; 0x02
    1ef2:	93 81       	ldd	r25, Z+3	; 0x03
    1ef4:	20 e0       	ldi	r18, 0x00	; 0
    1ef6:	30 e0       	ldi	r19, 0x00	; 0
    1ef8:	40 e2       	ldi	r20, 0x20	; 32
    1efa:	51 e4       	ldi	r21, 0x41	; 65
    1efc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f00:	dc 01       	movw	r26, r24
    1f02:	cb 01       	movw	r24, r22
    1f04:	bc 01       	movw	r22, r24
    1f06:	cd 01       	movw	r24, r26
    1f08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f0c:	dc 01       	movw	r26, r24
    1f0e:	cb 01       	movw	r24, r22
    1f10:	9e af       	std	Y+62, r25	; 0x3e
    1f12:	8d af       	std	Y+61, r24	; 0x3d
    1f14:	0f c0       	rjmp	.+30     	; 0x1f34 <LCD_sendCommand+0x408>
    1f16:	88 ec       	ldi	r24, 0xC8	; 200
    1f18:	90 e0       	ldi	r25, 0x00	; 0
    1f1a:	9c af       	std	Y+60, r25	; 0x3c
    1f1c:	8b af       	std	Y+59, r24	; 0x3b
    1f1e:	8b ad       	ldd	r24, Y+59	; 0x3b
    1f20:	9c ad       	ldd	r25, Y+60	; 0x3c
    1f22:	01 97       	sbiw	r24, 0x01	; 1
    1f24:	f1 f7       	brne	.-4      	; 0x1f22 <LCD_sendCommand+0x3f6>
    1f26:	9c af       	std	Y+60, r25	; 0x3c
    1f28:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f2a:	8d ad       	ldd	r24, Y+61	; 0x3d
    1f2c:	9e ad       	ldd	r25, Y+62	; 0x3e
    1f2e:	01 97       	sbiw	r24, 0x01	; 1
    1f30:	9e af       	std	Y+62, r25	; 0x3e
    1f32:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f34:	8d ad       	ldd	r24, Y+61	; 0x3d
    1f36:	9e ad       	ldd	r25, Y+62	; 0x3e
    1f38:	00 97       	sbiw	r24, 0x00	; 0
    1f3a:	69 f7       	brne	.-38     	; 0x1f16 <LCD_sendCommand+0x3ea>
    1f3c:	16 c0       	rjmp	.+44     	; 0x1f6a <LCD_sendCommand+0x43e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f3e:	fe 01       	movw	r30, r28
    1f40:	ff 96       	adiw	r30, 0x3f	; 63
    1f42:	60 81       	ld	r22, Z
    1f44:	71 81       	ldd	r23, Z+1	; 0x01
    1f46:	82 81       	ldd	r24, Z+2	; 0x02
    1f48:	93 81       	ldd	r25, Z+3	; 0x03
    1f4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f4e:	dc 01       	movw	r26, r24
    1f50:	cb 01       	movw	r24, r22
    1f52:	9e af       	std	Y+62, r25	; 0x3e
    1f54:	8d af       	std	Y+61, r24	; 0x3d
    1f56:	8d ad       	ldd	r24, Y+61	; 0x3d
    1f58:	9e ad       	ldd	r25, Y+62	; 0x3e
    1f5a:	9a af       	std	Y+58, r25	; 0x3a
    1f5c:	89 af       	std	Y+57, r24	; 0x39
    1f5e:	89 ad       	ldd	r24, Y+57	; 0x39
    1f60:	9a ad       	ldd	r25, Y+58	; 0x3a
    1f62:	01 97       	sbiw	r24, 0x01	; 1
    1f64:	f1 f7       	brne	.-4      	; 0x1f62 <LCD_sendCommand+0x436>
    1f66:	9a af       	std	Y+58, r25	; 0x3a
    1f68:	89 af       	std	Y+57, r24	; 0x39
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | ((command & 0xF0) >> 4);
#endif

	_delay_ms(1); /* Delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E = 0 */
    1f6a:	ab e3       	ldi	r26, 0x3B	; 59
    1f6c:	b0 e0       	ldi	r27, 0x00	; 0
    1f6e:	eb e3       	ldi	r30, 0x3B	; 59
    1f70:	f0 e0       	ldi	r31, 0x00	; 0
    1f72:	80 81       	ld	r24, Z
    1f74:	87 7f       	andi	r24, 0xF7	; 247
    1f76:	8c 93       	st	X, r24
    1f78:	80 e0       	ldi	r24, 0x00	; 0
    1f7a:	90 e0       	ldi	r25, 0x00	; 0
    1f7c:	a0 e8       	ldi	r26, 0x80	; 128
    1f7e:	bf e3       	ldi	r27, 0x3F	; 63
    1f80:	8d ab       	std	Y+53, r24	; 0x35
    1f82:	9e ab       	std	Y+54, r25	; 0x36
    1f84:	af ab       	std	Y+55, r26	; 0x37
    1f86:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f88:	6d a9       	ldd	r22, Y+53	; 0x35
    1f8a:	7e a9       	ldd	r23, Y+54	; 0x36
    1f8c:	8f a9       	ldd	r24, Y+55	; 0x37
    1f8e:	98 ad       	ldd	r25, Y+56	; 0x38
    1f90:	20 e0       	ldi	r18, 0x00	; 0
    1f92:	30 e0       	ldi	r19, 0x00	; 0
    1f94:	4a ef       	ldi	r20, 0xFA	; 250
    1f96:	54 e4       	ldi	r21, 0x44	; 68
    1f98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f9c:	dc 01       	movw	r26, r24
    1f9e:	cb 01       	movw	r24, r22
    1fa0:	89 ab       	std	Y+49, r24	; 0x31
    1fa2:	9a ab       	std	Y+50, r25	; 0x32
    1fa4:	ab ab       	std	Y+51, r26	; 0x33
    1fa6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1fa8:	69 a9       	ldd	r22, Y+49	; 0x31
    1faa:	7a a9       	ldd	r23, Y+50	; 0x32
    1fac:	8b a9       	ldd	r24, Y+51	; 0x33
    1fae:	9c a9       	ldd	r25, Y+52	; 0x34
    1fb0:	20 e0       	ldi	r18, 0x00	; 0
    1fb2:	30 e0       	ldi	r19, 0x00	; 0
    1fb4:	40 e8       	ldi	r20, 0x80	; 128
    1fb6:	5f e3       	ldi	r21, 0x3F	; 63
    1fb8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fbc:	88 23       	and	r24, r24
    1fbe:	2c f4       	brge	.+10     	; 0x1fca <LCD_sendCommand+0x49e>
		__ticks = 1;
    1fc0:	81 e0       	ldi	r24, 0x01	; 1
    1fc2:	90 e0       	ldi	r25, 0x00	; 0
    1fc4:	98 ab       	std	Y+48, r25	; 0x30
    1fc6:	8f a7       	std	Y+47, r24	; 0x2f
    1fc8:	3f c0       	rjmp	.+126    	; 0x2048 <LCD_sendCommand+0x51c>
	else if (__tmp > 65535)
    1fca:	69 a9       	ldd	r22, Y+49	; 0x31
    1fcc:	7a a9       	ldd	r23, Y+50	; 0x32
    1fce:	8b a9       	ldd	r24, Y+51	; 0x33
    1fd0:	9c a9       	ldd	r25, Y+52	; 0x34
    1fd2:	20 e0       	ldi	r18, 0x00	; 0
    1fd4:	3f ef       	ldi	r19, 0xFF	; 255
    1fd6:	4f e7       	ldi	r20, 0x7F	; 127
    1fd8:	57 e4       	ldi	r21, 0x47	; 71
    1fda:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fde:	18 16       	cp	r1, r24
    1fe0:	4c f5       	brge	.+82     	; 0x2034 <LCD_sendCommand+0x508>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fe2:	6d a9       	ldd	r22, Y+53	; 0x35
    1fe4:	7e a9       	ldd	r23, Y+54	; 0x36
    1fe6:	8f a9       	ldd	r24, Y+55	; 0x37
    1fe8:	98 ad       	ldd	r25, Y+56	; 0x38
    1fea:	20 e0       	ldi	r18, 0x00	; 0
    1fec:	30 e0       	ldi	r19, 0x00	; 0
    1fee:	40 e2       	ldi	r20, 0x20	; 32
    1ff0:	51 e4       	ldi	r21, 0x41	; 65
    1ff2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ff6:	dc 01       	movw	r26, r24
    1ff8:	cb 01       	movw	r24, r22
    1ffa:	bc 01       	movw	r22, r24
    1ffc:	cd 01       	movw	r24, r26
    1ffe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2002:	dc 01       	movw	r26, r24
    2004:	cb 01       	movw	r24, r22
    2006:	98 ab       	std	Y+48, r25	; 0x30
    2008:	8f a7       	std	Y+47, r24	; 0x2f
    200a:	0f c0       	rjmp	.+30     	; 0x202a <LCD_sendCommand+0x4fe>
    200c:	88 ec       	ldi	r24, 0xC8	; 200
    200e:	90 e0       	ldi	r25, 0x00	; 0
    2010:	9e a7       	std	Y+46, r25	; 0x2e
    2012:	8d a7       	std	Y+45, r24	; 0x2d
    2014:	8d a5       	ldd	r24, Y+45	; 0x2d
    2016:	9e a5       	ldd	r25, Y+46	; 0x2e
    2018:	01 97       	sbiw	r24, 0x01	; 1
    201a:	f1 f7       	brne	.-4      	; 0x2018 <LCD_sendCommand+0x4ec>
    201c:	9e a7       	std	Y+46, r25	; 0x2e
    201e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2020:	8f a5       	ldd	r24, Y+47	; 0x2f
    2022:	98 a9       	ldd	r25, Y+48	; 0x30
    2024:	01 97       	sbiw	r24, 0x01	; 1
    2026:	98 ab       	std	Y+48, r25	; 0x30
    2028:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    202a:	8f a5       	ldd	r24, Y+47	; 0x2f
    202c:	98 a9       	ldd	r25, Y+48	; 0x30
    202e:	00 97       	sbiw	r24, 0x00	; 0
    2030:	69 f7       	brne	.-38     	; 0x200c <LCD_sendCommand+0x4e0>
    2032:	14 c0       	rjmp	.+40     	; 0x205c <LCD_sendCommand+0x530>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2034:	69 a9       	ldd	r22, Y+49	; 0x31
    2036:	7a a9       	ldd	r23, Y+50	; 0x32
    2038:	8b a9       	ldd	r24, Y+51	; 0x33
    203a:	9c a9       	ldd	r25, Y+52	; 0x34
    203c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2040:	dc 01       	movw	r26, r24
    2042:	cb 01       	movw	r24, r22
    2044:	98 ab       	std	Y+48, r25	; 0x30
    2046:	8f a7       	std	Y+47, r24	; 0x2f
    2048:	8f a5       	ldd	r24, Y+47	; 0x2f
    204a:	98 a9       	ldd	r25, Y+48	; 0x30
    204c:	9c a7       	std	Y+44, r25	; 0x2c
    204e:	8b a7       	std	Y+43, r24	; 0x2b
    2050:	8b a5       	ldd	r24, Y+43	; 0x2b
    2052:	9c a5       	ldd	r25, Y+44	; 0x2c
    2054:	01 97       	sbiw	r24, 0x01	; 1
    2056:	f1 f7       	brne	.-4      	; 0x2054 <LCD_sendCommand+0x528>
    2058:	9c a7       	std	Y+44, r25	; 0x2c
    205a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* Delay for processing Th = 13ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E = 1 */
    205c:	ab e3       	ldi	r26, 0x3B	; 59
    205e:	b0 e0       	ldi	r27, 0x00	; 0
    2060:	eb e3       	ldi	r30, 0x3B	; 59
    2062:	f0 e0       	ldi	r31, 0x00	; 0
    2064:	80 81       	ld	r24, Z
    2066:	88 60       	ori	r24, 0x08	; 8
    2068:	8c 93       	st	X, r24
    206a:	80 e0       	ldi	r24, 0x00	; 0
    206c:	90 e0       	ldi	r25, 0x00	; 0
    206e:	a0 e8       	ldi	r26, 0x80	; 128
    2070:	bf e3       	ldi	r27, 0x3F	; 63
    2072:	8f a3       	std	Y+39, r24	; 0x27
    2074:	98 a7       	std	Y+40, r25	; 0x28
    2076:	a9 a7       	std	Y+41, r26	; 0x29
    2078:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    207a:	6f a1       	ldd	r22, Y+39	; 0x27
    207c:	78 a5       	ldd	r23, Y+40	; 0x28
    207e:	89 a5       	ldd	r24, Y+41	; 0x29
    2080:	9a a5       	ldd	r25, Y+42	; 0x2a
    2082:	20 e0       	ldi	r18, 0x00	; 0
    2084:	30 e0       	ldi	r19, 0x00	; 0
    2086:	4a ef       	ldi	r20, 0xFA	; 250
    2088:	54 e4       	ldi	r21, 0x44	; 68
    208a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    208e:	dc 01       	movw	r26, r24
    2090:	cb 01       	movw	r24, r22
    2092:	8b a3       	std	Y+35, r24	; 0x23
    2094:	9c a3       	std	Y+36, r25	; 0x24
    2096:	ad a3       	std	Y+37, r26	; 0x25
    2098:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    209a:	6b a1       	ldd	r22, Y+35	; 0x23
    209c:	7c a1       	ldd	r23, Y+36	; 0x24
    209e:	8d a1       	ldd	r24, Y+37	; 0x25
    20a0:	9e a1       	ldd	r25, Y+38	; 0x26
    20a2:	20 e0       	ldi	r18, 0x00	; 0
    20a4:	30 e0       	ldi	r19, 0x00	; 0
    20a6:	40 e8       	ldi	r20, 0x80	; 128
    20a8:	5f e3       	ldi	r21, 0x3F	; 63
    20aa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20ae:	88 23       	and	r24, r24
    20b0:	2c f4       	brge	.+10     	; 0x20bc <LCD_sendCommand+0x590>
		__ticks = 1;
    20b2:	81 e0       	ldi	r24, 0x01	; 1
    20b4:	90 e0       	ldi	r25, 0x00	; 0
    20b6:	9a a3       	std	Y+34, r25	; 0x22
    20b8:	89 a3       	std	Y+33, r24	; 0x21
    20ba:	3f c0       	rjmp	.+126    	; 0x213a <LCD_sendCommand+0x60e>
	else if (__tmp > 65535)
    20bc:	6b a1       	ldd	r22, Y+35	; 0x23
    20be:	7c a1       	ldd	r23, Y+36	; 0x24
    20c0:	8d a1       	ldd	r24, Y+37	; 0x25
    20c2:	9e a1       	ldd	r25, Y+38	; 0x26
    20c4:	20 e0       	ldi	r18, 0x00	; 0
    20c6:	3f ef       	ldi	r19, 0xFF	; 255
    20c8:	4f e7       	ldi	r20, 0x7F	; 127
    20ca:	57 e4       	ldi	r21, 0x47	; 71
    20cc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20d0:	18 16       	cp	r1, r24
    20d2:	4c f5       	brge	.+82     	; 0x2126 <LCD_sendCommand+0x5fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20d4:	6f a1       	ldd	r22, Y+39	; 0x27
    20d6:	78 a5       	ldd	r23, Y+40	; 0x28
    20d8:	89 a5       	ldd	r24, Y+41	; 0x29
    20da:	9a a5       	ldd	r25, Y+42	; 0x2a
    20dc:	20 e0       	ldi	r18, 0x00	; 0
    20de:	30 e0       	ldi	r19, 0x00	; 0
    20e0:	40 e2       	ldi	r20, 0x20	; 32
    20e2:	51 e4       	ldi	r21, 0x41	; 65
    20e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20e8:	dc 01       	movw	r26, r24
    20ea:	cb 01       	movw	r24, r22
    20ec:	bc 01       	movw	r22, r24
    20ee:	cd 01       	movw	r24, r26
    20f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20f4:	dc 01       	movw	r26, r24
    20f6:	cb 01       	movw	r24, r22
    20f8:	9a a3       	std	Y+34, r25	; 0x22
    20fa:	89 a3       	std	Y+33, r24	; 0x21
    20fc:	0f c0       	rjmp	.+30     	; 0x211c <LCD_sendCommand+0x5f0>
    20fe:	88 ec       	ldi	r24, 0xC8	; 200
    2100:	90 e0       	ldi	r25, 0x00	; 0
    2102:	98 a3       	std	Y+32, r25	; 0x20
    2104:	8f 8f       	std	Y+31, r24	; 0x1f
    2106:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2108:	98 a1       	ldd	r25, Y+32	; 0x20
    210a:	01 97       	sbiw	r24, 0x01	; 1
    210c:	f1 f7       	brne	.-4      	; 0x210a <LCD_sendCommand+0x5de>
    210e:	98 a3       	std	Y+32, r25	; 0x20
    2110:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2112:	89 a1       	ldd	r24, Y+33	; 0x21
    2114:	9a a1       	ldd	r25, Y+34	; 0x22
    2116:	01 97       	sbiw	r24, 0x01	; 1
    2118:	9a a3       	std	Y+34, r25	; 0x22
    211a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    211c:	89 a1       	ldd	r24, Y+33	; 0x21
    211e:	9a a1       	ldd	r25, Y+34	; 0x22
    2120:	00 97       	sbiw	r24, 0x00	; 0
    2122:	69 f7       	brne	.-38     	; 0x20fe <LCD_sendCommand+0x5d2>
    2124:	14 c0       	rjmp	.+40     	; 0x214e <LCD_sendCommand+0x622>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2126:	6b a1       	ldd	r22, Y+35	; 0x23
    2128:	7c a1       	ldd	r23, Y+36	; 0x24
    212a:	8d a1       	ldd	r24, Y+37	; 0x25
    212c:	9e a1       	ldd	r25, Y+38	; 0x26
    212e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2132:	dc 01       	movw	r26, r24
    2134:	cb 01       	movw	r24, r22
    2136:	9a a3       	std	Y+34, r25	; 0x22
    2138:	89 a3       	std	Y+33, r24	; 0x21
    213a:	89 a1       	ldd	r24, Y+33	; 0x21
    213c:	9a a1       	ldd	r25, Y+34	; 0x22
    213e:	9e 8f       	std	Y+30, r25	; 0x1e
    2140:	8d 8f       	std	Y+29, r24	; 0x1d
    2142:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2144:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2146:	01 97       	sbiw	r24, 0x01	; 1
    2148:	f1 f7       	brne	.-4      	; 0x2146 <LCD_sendCommand+0x61a>
    214a:	9e 8f       	std	Y+30, r25	; 0x1e
    214c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* Delay for processing Tpw - Tdws = 190ns */

	/* Out the lowest 4 bits of the required command to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | ((command & 0x0F) << 4);
    214e:	ab e3       	ldi	r26, 0x3B	; 59
    2150:	b0 e0       	ldi	r27, 0x00	; 0
    2152:	eb e3       	ldi	r30, 0x3B	; 59
    2154:	f0 e0       	ldi	r31, 0x00	; 0
    2156:	80 81       	ld	r24, Z
    2158:	28 2f       	mov	r18, r24
    215a:	2f 70       	andi	r18, 0x0F	; 15
    215c:	fe 01       	movw	r30, r28
    215e:	ed 59       	subi	r30, 0x9D	; 157
    2160:	ff 4f       	sbci	r31, 0xFF	; 255
    2162:	80 81       	ld	r24, Z
    2164:	88 2f       	mov	r24, r24
    2166:	90 e0       	ldi	r25, 0x00	; 0
    2168:	82 95       	swap	r24
    216a:	92 95       	swap	r25
    216c:	90 7f       	andi	r25, 0xF0	; 240
    216e:	98 27       	eor	r25, r24
    2170:	80 7f       	andi	r24, 0xF0	; 240
    2172:	98 27       	eor	r25, r24
    2174:	82 2b       	or	r24, r18
    2176:	8c 93       	st	X, r24
    2178:	80 e0       	ldi	r24, 0x00	; 0
    217a:	90 e0       	ldi	r25, 0x00	; 0
    217c:	a0 e8       	ldi	r26, 0x80	; 128
    217e:	bf e3       	ldi	r27, 0x3F	; 63
    2180:	89 8f       	std	Y+25, r24	; 0x19
    2182:	9a 8f       	std	Y+26, r25	; 0x1a
    2184:	ab 8f       	std	Y+27, r26	; 0x1b
    2186:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2188:	69 8d       	ldd	r22, Y+25	; 0x19
    218a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    218c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    218e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2190:	20 e0       	ldi	r18, 0x00	; 0
    2192:	30 e0       	ldi	r19, 0x00	; 0
    2194:	4a ef       	ldi	r20, 0xFA	; 250
    2196:	54 e4       	ldi	r21, 0x44	; 68
    2198:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    219c:	dc 01       	movw	r26, r24
    219e:	cb 01       	movw	r24, r22
    21a0:	8d 8b       	std	Y+21, r24	; 0x15
    21a2:	9e 8b       	std	Y+22, r25	; 0x16
    21a4:	af 8b       	std	Y+23, r26	; 0x17
    21a6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    21a8:	6d 89       	ldd	r22, Y+21	; 0x15
    21aa:	7e 89       	ldd	r23, Y+22	; 0x16
    21ac:	8f 89       	ldd	r24, Y+23	; 0x17
    21ae:	98 8d       	ldd	r25, Y+24	; 0x18
    21b0:	20 e0       	ldi	r18, 0x00	; 0
    21b2:	30 e0       	ldi	r19, 0x00	; 0
    21b4:	40 e8       	ldi	r20, 0x80	; 128
    21b6:	5f e3       	ldi	r21, 0x3F	; 63
    21b8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21bc:	88 23       	and	r24, r24
    21be:	2c f4       	brge	.+10     	; 0x21ca <LCD_sendCommand+0x69e>
		__ticks = 1;
    21c0:	81 e0       	ldi	r24, 0x01	; 1
    21c2:	90 e0       	ldi	r25, 0x00	; 0
    21c4:	9c 8b       	std	Y+20, r25	; 0x14
    21c6:	8b 8b       	std	Y+19, r24	; 0x13
    21c8:	3f c0       	rjmp	.+126    	; 0x2248 <LCD_sendCommand+0x71c>
	else if (__tmp > 65535)
    21ca:	6d 89       	ldd	r22, Y+21	; 0x15
    21cc:	7e 89       	ldd	r23, Y+22	; 0x16
    21ce:	8f 89       	ldd	r24, Y+23	; 0x17
    21d0:	98 8d       	ldd	r25, Y+24	; 0x18
    21d2:	20 e0       	ldi	r18, 0x00	; 0
    21d4:	3f ef       	ldi	r19, 0xFF	; 255
    21d6:	4f e7       	ldi	r20, 0x7F	; 127
    21d8:	57 e4       	ldi	r21, 0x47	; 71
    21da:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21de:	18 16       	cp	r1, r24
    21e0:	4c f5       	brge	.+82     	; 0x2234 <LCD_sendCommand+0x708>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21e2:	69 8d       	ldd	r22, Y+25	; 0x19
    21e4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21e6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21e8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21ea:	20 e0       	ldi	r18, 0x00	; 0
    21ec:	30 e0       	ldi	r19, 0x00	; 0
    21ee:	40 e2       	ldi	r20, 0x20	; 32
    21f0:	51 e4       	ldi	r21, 0x41	; 65
    21f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21f6:	dc 01       	movw	r26, r24
    21f8:	cb 01       	movw	r24, r22
    21fa:	bc 01       	movw	r22, r24
    21fc:	cd 01       	movw	r24, r26
    21fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2202:	dc 01       	movw	r26, r24
    2204:	cb 01       	movw	r24, r22
    2206:	9c 8b       	std	Y+20, r25	; 0x14
    2208:	8b 8b       	std	Y+19, r24	; 0x13
    220a:	0f c0       	rjmp	.+30     	; 0x222a <LCD_sendCommand+0x6fe>
    220c:	88 ec       	ldi	r24, 0xC8	; 200
    220e:	90 e0       	ldi	r25, 0x00	; 0
    2210:	9a 8b       	std	Y+18, r25	; 0x12
    2212:	89 8b       	std	Y+17, r24	; 0x11
    2214:	89 89       	ldd	r24, Y+17	; 0x11
    2216:	9a 89       	ldd	r25, Y+18	; 0x12
    2218:	01 97       	sbiw	r24, 0x01	; 1
    221a:	f1 f7       	brne	.-4      	; 0x2218 <LCD_sendCommand+0x6ec>
    221c:	9a 8b       	std	Y+18, r25	; 0x12
    221e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2220:	8b 89       	ldd	r24, Y+19	; 0x13
    2222:	9c 89       	ldd	r25, Y+20	; 0x14
    2224:	01 97       	sbiw	r24, 0x01	; 1
    2226:	9c 8b       	std	Y+20, r25	; 0x14
    2228:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    222a:	8b 89       	ldd	r24, Y+19	; 0x13
    222c:	9c 89       	ldd	r25, Y+20	; 0x14
    222e:	00 97       	sbiw	r24, 0x00	; 0
    2230:	69 f7       	brne	.-38     	; 0x220c <LCD_sendCommand+0x6e0>
    2232:	14 c0       	rjmp	.+40     	; 0x225c <LCD_sendCommand+0x730>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2234:	6d 89       	ldd	r22, Y+21	; 0x15
    2236:	7e 89       	ldd	r23, Y+22	; 0x16
    2238:	8f 89       	ldd	r24, Y+23	; 0x17
    223a:	98 8d       	ldd	r25, Y+24	; 0x18
    223c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2240:	dc 01       	movw	r26, r24
    2242:	cb 01       	movw	r24, r22
    2244:	9c 8b       	std	Y+20, r25	; 0x14
    2246:	8b 8b       	std	Y+19, r24	; 0x13
    2248:	8b 89       	ldd	r24, Y+19	; 0x13
    224a:	9c 89       	ldd	r25, Y+20	; 0x14
    224c:	98 8b       	std	Y+16, r25	; 0x10
    224e:	8f 87       	std	Y+15, r24	; 0x0f
    2250:	8f 85       	ldd	r24, Y+15	; 0x0f
    2252:	98 89       	ldd	r25, Y+16	; 0x10
    2254:	01 97       	sbiw	r24, 0x01	; 1
    2256:	f1 f7       	brne	.-4      	; 0x2254 <LCD_sendCommand+0x728>
    2258:	98 8b       	std	Y+16, r25	; 0x10
    225a:	8f 87       	std	Y+15, r24	; 0x0f
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | (command & 0x0F);
#endif

	_delay_ms(1); /* Delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* Disable LCD E = 0 */
    225c:	ab e3       	ldi	r26, 0x3B	; 59
    225e:	b0 e0       	ldi	r27, 0x00	; 0
    2260:	eb e3       	ldi	r30, 0x3B	; 59
    2262:	f0 e0       	ldi	r31, 0x00	; 0
    2264:	80 81       	ld	r24, Z
    2266:	87 7f       	andi	r24, 0xF7	; 247
    2268:	8c 93       	st	X, r24
    226a:	80 e0       	ldi	r24, 0x00	; 0
    226c:	90 e0       	ldi	r25, 0x00	; 0
    226e:	a0 e8       	ldi	r26, 0x80	; 128
    2270:	bf e3       	ldi	r27, 0x3F	; 63
    2272:	8b 87       	std	Y+11, r24	; 0x0b
    2274:	9c 87       	std	Y+12, r25	; 0x0c
    2276:	ad 87       	std	Y+13, r26	; 0x0d
    2278:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    227a:	6b 85       	ldd	r22, Y+11	; 0x0b
    227c:	7c 85       	ldd	r23, Y+12	; 0x0c
    227e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2280:	9e 85       	ldd	r25, Y+14	; 0x0e
    2282:	20 e0       	ldi	r18, 0x00	; 0
    2284:	30 e0       	ldi	r19, 0x00	; 0
    2286:	4a ef       	ldi	r20, 0xFA	; 250
    2288:	54 e4       	ldi	r21, 0x44	; 68
    228a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    228e:	dc 01       	movw	r26, r24
    2290:	cb 01       	movw	r24, r22
    2292:	8f 83       	std	Y+7, r24	; 0x07
    2294:	98 87       	std	Y+8, r25	; 0x08
    2296:	a9 87       	std	Y+9, r26	; 0x09
    2298:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    229a:	6f 81       	ldd	r22, Y+7	; 0x07
    229c:	78 85       	ldd	r23, Y+8	; 0x08
    229e:	89 85       	ldd	r24, Y+9	; 0x09
    22a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    22a2:	20 e0       	ldi	r18, 0x00	; 0
    22a4:	30 e0       	ldi	r19, 0x00	; 0
    22a6:	40 e8       	ldi	r20, 0x80	; 128
    22a8:	5f e3       	ldi	r21, 0x3F	; 63
    22aa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22ae:	88 23       	and	r24, r24
    22b0:	2c f4       	brge	.+10     	; 0x22bc <LCD_sendCommand+0x790>
		__ticks = 1;
    22b2:	81 e0       	ldi	r24, 0x01	; 1
    22b4:	90 e0       	ldi	r25, 0x00	; 0
    22b6:	9e 83       	std	Y+6, r25	; 0x06
    22b8:	8d 83       	std	Y+5, r24	; 0x05
    22ba:	3f c0       	rjmp	.+126    	; 0x233a <LCD_sendCommand+0x80e>
	else if (__tmp > 65535)
    22bc:	6f 81       	ldd	r22, Y+7	; 0x07
    22be:	78 85       	ldd	r23, Y+8	; 0x08
    22c0:	89 85       	ldd	r24, Y+9	; 0x09
    22c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    22c4:	20 e0       	ldi	r18, 0x00	; 0
    22c6:	3f ef       	ldi	r19, 0xFF	; 255
    22c8:	4f e7       	ldi	r20, 0x7F	; 127
    22ca:	57 e4       	ldi	r21, 0x47	; 71
    22cc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22d0:	18 16       	cp	r1, r24
    22d2:	4c f5       	brge	.+82     	; 0x2326 <LCD_sendCommand+0x7fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    22d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    22d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    22da:	9e 85       	ldd	r25, Y+14	; 0x0e
    22dc:	20 e0       	ldi	r18, 0x00	; 0
    22de:	30 e0       	ldi	r19, 0x00	; 0
    22e0:	40 e2       	ldi	r20, 0x20	; 32
    22e2:	51 e4       	ldi	r21, 0x41	; 65
    22e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22e8:	dc 01       	movw	r26, r24
    22ea:	cb 01       	movw	r24, r22
    22ec:	bc 01       	movw	r22, r24
    22ee:	cd 01       	movw	r24, r26
    22f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22f4:	dc 01       	movw	r26, r24
    22f6:	cb 01       	movw	r24, r22
    22f8:	9e 83       	std	Y+6, r25	; 0x06
    22fa:	8d 83       	std	Y+5, r24	; 0x05
    22fc:	0f c0       	rjmp	.+30     	; 0x231c <LCD_sendCommand+0x7f0>
    22fe:	88 ec       	ldi	r24, 0xC8	; 200
    2300:	90 e0       	ldi	r25, 0x00	; 0
    2302:	9c 83       	std	Y+4, r25	; 0x04
    2304:	8b 83       	std	Y+3, r24	; 0x03
    2306:	8b 81       	ldd	r24, Y+3	; 0x03
    2308:	9c 81       	ldd	r25, Y+4	; 0x04
    230a:	01 97       	sbiw	r24, 0x01	; 1
    230c:	f1 f7       	brne	.-4      	; 0x230a <LCD_sendCommand+0x7de>
    230e:	9c 83       	std	Y+4, r25	; 0x04
    2310:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2312:	8d 81       	ldd	r24, Y+5	; 0x05
    2314:	9e 81       	ldd	r25, Y+6	; 0x06
    2316:	01 97       	sbiw	r24, 0x01	; 1
    2318:	9e 83       	std	Y+6, r25	; 0x06
    231a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    231c:	8d 81       	ldd	r24, Y+5	; 0x05
    231e:	9e 81       	ldd	r25, Y+6	; 0x06
    2320:	00 97       	sbiw	r24, 0x00	; 0
    2322:	69 f7       	brne	.-38     	; 0x22fe <LCD_sendCommand+0x7d2>
    2324:	14 c0       	rjmp	.+40     	; 0x234e <LCD_sendCommand+0x822>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2326:	6f 81       	ldd	r22, Y+7	; 0x07
    2328:	78 85       	ldd	r23, Y+8	; 0x08
    232a:	89 85       	ldd	r24, Y+9	; 0x09
    232c:	9a 85       	ldd	r25, Y+10	; 0x0a
    232e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2332:	dc 01       	movw	r26, r24
    2334:	cb 01       	movw	r24, r22
    2336:	9e 83       	std	Y+6, r25	; 0x06
    2338:	8d 83       	std	Y+5, r24	; 0x05
    233a:	8d 81       	ldd	r24, Y+5	; 0x05
    233c:	9e 81       	ldd	r25, Y+6	; 0x06
    233e:	9a 83       	std	Y+2, r25	; 0x02
    2340:	89 83       	std	Y+1, r24	; 0x01
    2342:	89 81       	ldd	r24, Y+1	; 0x01
    2344:	9a 81       	ldd	r25, Y+2	; 0x02
    2346:	01 97       	sbiw	r24, 0x01	; 1
    2348:	f1 f7       	brne	.-4      	; 0x2346 <LCD_sendCommand+0x81a>
    234a:	9a 83       	std	Y+2, r25	; 0x02
    234c:	89 83       	std	Y+1, r24	; 0x01
	LCD_DATA_PORT = command; /* Out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* Delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E = 0 */
	_delay_ms(1); /* Delay for processing Th = 13ns */
#endif
}
    234e:	cd 59       	subi	r28, 0x9D	; 157
    2350:	df 4f       	sbci	r29, 0xFF	; 255
    2352:	0f b6       	in	r0, 0x3f	; 63
    2354:	f8 94       	cli
    2356:	de bf       	out	0x3e, r29	; 62
    2358:	0f be       	out	0x3f, r0	; 63
    235a:	cd bf       	out	0x3d, r28	; 61
    235c:	cf 91       	pop	r28
    235e:	df 91       	pop	r29
    2360:	1f 91       	pop	r17
    2362:	0f 91       	pop	r16
    2364:	08 95       	ret

00002366 <LCD_displayCharacter>:

void LCD_displayCharacter(uint8_t data)
{
    2366:	0f 93       	push	r16
    2368:	1f 93       	push	r17
    236a:	df 93       	push	r29
    236c:	cf 93       	push	r28
    236e:	cd b7       	in	r28, 0x3d	; 61
    2370:	de b7       	in	r29, 0x3e	; 62
    2372:	c3 56       	subi	r28, 0x63	; 99
    2374:	d0 40       	sbci	r29, 0x00	; 0
    2376:	0f b6       	in	r0, 0x3f	; 63
    2378:	f8 94       	cli
    237a:	de bf       	out	0x3e, r29	; 62
    237c:	0f be       	out	0x3f, r0	; 63
    237e:	cd bf       	out	0x3d, r28	; 61
    2380:	fe 01       	movw	r30, r28
    2382:	ed 59       	subi	r30, 0x9D	; 157
    2384:	ff 4f       	sbci	r31, 0xFF	; 255
    2386:	80 83       	st	Z, r24
	SET_BIT(LCD_CTRL_PORT,RS); /* Data Mode RS = 1 */
    2388:	ab e3       	ldi	r26, 0x3B	; 59
    238a:	b0 e0       	ldi	r27, 0x00	; 0
    238c:	eb e3       	ldi	r30, 0x3B	; 59
    238e:	f0 e0       	ldi	r31, 0x00	; 0
    2390:	80 81       	ld	r24, Z
    2392:	82 60       	ori	r24, 0x02	; 2
    2394:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* Write data to LCD so RW = 0 */
    2396:	ab e3       	ldi	r26, 0x3B	; 59
    2398:	b0 e0       	ldi	r27, 0x00	; 0
    239a:	eb e3       	ldi	r30, 0x3B	; 59
    239c:	f0 e0       	ldi	r31, 0x00	; 0
    239e:	80 81       	ld	r24, Z
    23a0:	8b 7f       	andi	r24, 0xFB	; 251
    23a2:	8c 93       	st	X, r24
    23a4:	fe 01       	movw	r30, r28
    23a6:	e1 5a       	subi	r30, 0xA1	; 161
    23a8:	ff 4f       	sbci	r31, 0xFF	; 255
    23aa:	80 e0       	ldi	r24, 0x00	; 0
    23ac:	90 e0       	ldi	r25, 0x00	; 0
    23ae:	a0 e8       	ldi	r26, 0x80	; 128
    23b0:	bf e3       	ldi	r27, 0x3F	; 63
    23b2:	80 83       	st	Z, r24
    23b4:	91 83       	std	Z+1, r25	; 0x01
    23b6:	a2 83       	std	Z+2, r26	; 0x02
    23b8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23ba:	8e 01       	movw	r16, r28
    23bc:	05 5a       	subi	r16, 0xA5	; 165
    23be:	1f 4f       	sbci	r17, 0xFF	; 255
    23c0:	fe 01       	movw	r30, r28
    23c2:	e1 5a       	subi	r30, 0xA1	; 161
    23c4:	ff 4f       	sbci	r31, 0xFF	; 255
    23c6:	60 81       	ld	r22, Z
    23c8:	71 81       	ldd	r23, Z+1	; 0x01
    23ca:	82 81       	ldd	r24, Z+2	; 0x02
    23cc:	93 81       	ldd	r25, Z+3	; 0x03
    23ce:	20 e0       	ldi	r18, 0x00	; 0
    23d0:	30 e0       	ldi	r19, 0x00	; 0
    23d2:	4a ef       	ldi	r20, 0xFA	; 250
    23d4:	54 e4       	ldi	r21, 0x44	; 68
    23d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23da:	dc 01       	movw	r26, r24
    23dc:	cb 01       	movw	r24, r22
    23de:	f8 01       	movw	r30, r16
    23e0:	80 83       	st	Z, r24
    23e2:	91 83       	std	Z+1, r25	; 0x01
    23e4:	a2 83       	std	Z+2, r26	; 0x02
    23e6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    23e8:	fe 01       	movw	r30, r28
    23ea:	e5 5a       	subi	r30, 0xA5	; 165
    23ec:	ff 4f       	sbci	r31, 0xFF	; 255
    23ee:	60 81       	ld	r22, Z
    23f0:	71 81       	ldd	r23, Z+1	; 0x01
    23f2:	82 81       	ldd	r24, Z+2	; 0x02
    23f4:	93 81       	ldd	r25, Z+3	; 0x03
    23f6:	20 e0       	ldi	r18, 0x00	; 0
    23f8:	30 e0       	ldi	r19, 0x00	; 0
    23fa:	40 e8       	ldi	r20, 0x80	; 128
    23fc:	5f e3       	ldi	r21, 0x3F	; 63
    23fe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2402:	88 23       	and	r24, r24
    2404:	44 f4       	brge	.+16     	; 0x2416 <LCD_displayCharacter+0xb0>
		__ticks = 1;
    2406:	fe 01       	movw	r30, r28
    2408:	e7 5a       	subi	r30, 0xA7	; 167
    240a:	ff 4f       	sbci	r31, 0xFF	; 255
    240c:	81 e0       	ldi	r24, 0x01	; 1
    240e:	90 e0       	ldi	r25, 0x00	; 0
    2410:	91 83       	std	Z+1, r25	; 0x01
    2412:	80 83       	st	Z, r24
    2414:	64 c0       	rjmp	.+200    	; 0x24de <LCD_displayCharacter+0x178>
	else if (__tmp > 65535)
    2416:	fe 01       	movw	r30, r28
    2418:	e5 5a       	subi	r30, 0xA5	; 165
    241a:	ff 4f       	sbci	r31, 0xFF	; 255
    241c:	60 81       	ld	r22, Z
    241e:	71 81       	ldd	r23, Z+1	; 0x01
    2420:	82 81       	ldd	r24, Z+2	; 0x02
    2422:	93 81       	ldd	r25, Z+3	; 0x03
    2424:	20 e0       	ldi	r18, 0x00	; 0
    2426:	3f ef       	ldi	r19, 0xFF	; 255
    2428:	4f e7       	ldi	r20, 0x7F	; 127
    242a:	57 e4       	ldi	r21, 0x47	; 71
    242c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2430:	18 16       	cp	r1, r24
    2432:	0c f0       	brlt	.+2      	; 0x2436 <LCD_displayCharacter+0xd0>
    2434:	43 c0       	rjmp	.+134    	; 0x24bc <LCD_displayCharacter+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2436:	fe 01       	movw	r30, r28
    2438:	e1 5a       	subi	r30, 0xA1	; 161
    243a:	ff 4f       	sbci	r31, 0xFF	; 255
    243c:	60 81       	ld	r22, Z
    243e:	71 81       	ldd	r23, Z+1	; 0x01
    2440:	82 81       	ldd	r24, Z+2	; 0x02
    2442:	93 81       	ldd	r25, Z+3	; 0x03
    2444:	20 e0       	ldi	r18, 0x00	; 0
    2446:	30 e0       	ldi	r19, 0x00	; 0
    2448:	40 e2       	ldi	r20, 0x20	; 32
    244a:	51 e4       	ldi	r21, 0x41	; 65
    244c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2450:	dc 01       	movw	r26, r24
    2452:	cb 01       	movw	r24, r22
    2454:	8e 01       	movw	r16, r28
    2456:	07 5a       	subi	r16, 0xA7	; 167
    2458:	1f 4f       	sbci	r17, 0xFF	; 255
    245a:	bc 01       	movw	r22, r24
    245c:	cd 01       	movw	r24, r26
    245e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2462:	dc 01       	movw	r26, r24
    2464:	cb 01       	movw	r24, r22
    2466:	f8 01       	movw	r30, r16
    2468:	91 83       	std	Z+1, r25	; 0x01
    246a:	80 83       	st	Z, r24
    246c:	1f c0       	rjmp	.+62     	; 0x24ac <LCD_displayCharacter+0x146>
    246e:	fe 01       	movw	r30, r28
    2470:	e9 5a       	subi	r30, 0xA9	; 169
    2472:	ff 4f       	sbci	r31, 0xFF	; 255
    2474:	88 ec       	ldi	r24, 0xC8	; 200
    2476:	90 e0       	ldi	r25, 0x00	; 0
    2478:	91 83       	std	Z+1, r25	; 0x01
    247a:	80 83       	st	Z, r24
    247c:	fe 01       	movw	r30, r28
    247e:	e9 5a       	subi	r30, 0xA9	; 169
    2480:	ff 4f       	sbci	r31, 0xFF	; 255
    2482:	80 81       	ld	r24, Z
    2484:	91 81       	ldd	r25, Z+1	; 0x01
    2486:	01 97       	sbiw	r24, 0x01	; 1
    2488:	f1 f7       	brne	.-4      	; 0x2486 <LCD_displayCharacter+0x120>
    248a:	fe 01       	movw	r30, r28
    248c:	e9 5a       	subi	r30, 0xA9	; 169
    248e:	ff 4f       	sbci	r31, 0xFF	; 255
    2490:	91 83       	std	Z+1, r25	; 0x01
    2492:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2494:	de 01       	movw	r26, r28
    2496:	a7 5a       	subi	r26, 0xA7	; 167
    2498:	bf 4f       	sbci	r27, 0xFF	; 255
    249a:	fe 01       	movw	r30, r28
    249c:	e7 5a       	subi	r30, 0xA7	; 167
    249e:	ff 4f       	sbci	r31, 0xFF	; 255
    24a0:	80 81       	ld	r24, Z
    24a2:	91 81       	ldd	r25, Z+1	; 0x01
    24a4:	01 97       	sbiw	r24, 0x01	; 1
    24a6:	11 96       	adiw	r26, 0x01	; 1
    24a8:	9c 93       	st	X, r25
    24aa:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24ac:	fe 01       	movw	r30, r28
    24ae:	e7 5a       	subi	r30, 0xA7	; 167
    24b0:	ff 4f       	sbci	r31, 0xFF	; 255
    24b2:	80 81       	ld	r24, Z
    24b4:	91 81       	ldd	r25, Z+1	; 0x01
    24b6:	00 97       	sbiw	r24, 0x00	; 0
    24b8:	d1 f6       	brne	.-76     	; 0x246e <LCD_displayCharacter+0x108>
    24ba:	27 c0       	rjmp	.+78     	; 0x250a <LCD_displayCharacter+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24bc:	8e 01       	movw	r16, r28
    24be:	07 5a       	subi	r16, 0xA7	; 167
    24c0:	1f 4f       	sbci	r17, 0xFF	; 255
    24c2:	fe 01       	movw	r30, r28
    24c4:	e5 5a       	subi	r30, 0xA5	; 165
    24c6:	ff 4f       	sbci	r31, 0xFF	; 255
    24c8:	60 81       	ld	r22, Z
    24ca:	71 81       	ldd	r23, Z+1	; 0x01
    24cc:	82 81       	ldd	r24, Z+2	; 0x02
    24ce:	93 81       	ldd	r25, Z+3	; 0x03
    24d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24d4:	dc 01       	movw	r26, r24
    24d6:	cb 01       	movw	r24, r22
    24d8:	f8 01       	movw	r30, r16
    24da:	91 83       	std	Z+1, r25	; 0x01
    24dc:	80 83       	st	Z, r24
    24de:	de 01       	movw	r26, r28
    24e0:	ab 5a       	subi	r26, 0xAB	; 171
    24e2:	bf 4f       	sbci	r27, 0xFF	; 255
    24e4:	fe 01       	movw	r30, r28
    24e6:	e7 5a       	subi	r30, 0xA7	; 167
    24e8:	ff 4f       	sbci	r31, 0xFF	; 255
    24ea:	80 81       	ld	r24, Z
    24ec:	91 81       	ldd	r25, Z+1	; 0x01
    24ee:	8d 93       	st	X+, r24
    24f0:	9c 93       	st	X, r25
    24f2:	fe 01       	movw	r30, r28
    24f4:	eb 5a       	subi	r30, 0xAB	; 171
    24f6:	ff 4f       	sbci	r31, 0xFF	; 255
    24f8:	80 81       	ld	r24, Z
    24fa:	91 81       	ldd	r25, Z+1	; 0x01
    24fc:	01 97       	sbiw	r24, 0x01	; 1
    24fe:	f1 f7       	brne	.-4      	; 0x24fc <LCD_displayCharacter+0x196>
    2500:	fe 01       	movw	r30, r28
    2502:	eb 5a       	subi	r30, 0xAB	; 171
    2504:	ff 4f       	sbci	r31, 0xFF	; 255
    2506:	91 83       	std	Z+1, r25	; 0x01
    2508:	80 83       	st	Z, r24
	_delay_ms(1); /* Delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E = 1 */
    250a:	ab e3       	ldi	r26, 0x3B	; 59
    250c:	b0 e0       	ldi	r27, 0x00	; 0
    250e:	eb e3       	ldi	r30, 0x3B	; 59
    2510:	f0 e0       	ldi	r31, 0x00	; 0
    2512:	80 81       	ld	r24, Z
    2514:	88 60       	ori	r24, 0x08	; 8
    2516:	8c 93       	st	X, r24
    2518:	fe 01       	movw	r30, r28
    251a:	ef 5a       	subi	r30, 0xAF	; 175
    251c:	ff 4f       	sbci	r31, 0xFF	; 255
    251e:	80 e0       	ldi	r24, 0x00	; 0
    2520:	90 e0       	ldi	r25, 0x00	; 0
    2522:	a0 e8       	ldi	r26, 0x80	; 128
    2524:	bf e3       	ldi	r27, 0x3F	; 63
    2526:	80 83       	st	Z, r24
    2528:	91 83       	std	Z+1, r25	; 0x01
    252a:	a2 83       	std	Z+2, r26	; 0x02
    252c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    252e:	8e 01       	movw	r16, r28
    2530:	03 5b       	subi	r16, 0xB3	; 179
    2532:	1f 4f       	sbci	r17, 0xFF	; 255
    2534:	fe 01       	movw	r30, r28
    2536:	ef 5a       	subi	r30, 0xAF	; 175
    2538:	ff 4f       	sbci	r31, 0xFF	; 255
    253a:	60 81       	ld	r22, Z
    253c:	71 81       	ldd	r23, Z+1	; 0x01
    253e:	82 81       	ldd	r24, Z+2	; 0x02
    2540:	93 81       	ldd	r25, Z+3	; 0x03
    2542:	20 e0       	ldi	r18, 0x00	; 0
    2544:	30 e0       	ldi	r19, 0x00	; 0
    2546:	4a ef       	ldi	r20, 0xFA	; 250
    2548:	54 e4       	ldi	r21, 0x44	; 68
    254a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    254e:	dc 01       	movw	r26, r24
    2550:	cb 01       	movw	r24, r22
    2552:	f8 01       	movw	r30, r16
    2554:	80 83       	st	Z, r24
    2556:	91 83       	std	Z+1, r25	; 0x01
    2558:	a2 83       	std	Z+2, r26	; 0x02
    255a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    255c:	fe 01       	movw	r30, r28
    255e:	e3 5b       	subi	r30, 0xB3	; 179
    2560:	ff 4f       	sbci	r31, 0xFF	; 255
    2562:	60 81       	ld	r22, Z
    2564:	71 81       	ldd	r23, Z+1	; 0x01
    2566:	82 81       	ldd	r24, Z+2	; 0x02
    2568:	93 81       	ldd	r25, Z+3	; 0x03
    256a:	20 e0       	ldi	r18, 0x00	; 0
    256c:	30 e0       	ldi	r19, 0x00	; 0
    256e:	40 e8       	ldi	r20, 0x80	; 128
    2570:	5f e3       	ldi	r21, 0x3F	; 63
    2572:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2576:	88 23       	and	r24, r24
    2578:	44 f4       	brge	.+16     	; 0x258a <LCD_displayCharacter+0x224>
		__ticks = 1;
    257a:	fe 01       	movw	r30, r28
    257c:	e5 5b       	subi	r30, 0xB5	; 181
    257e:	ff 4f       	sbci	r31, 0xFF	; 255
    2580:	81 e0       	ldi	r24, 0x01	; 1
    2582:	90 e0       	ldi	r25, 0x00	; 0
    2584:	91 83       	std	Z+1, r25	; 0x01
    2586:	80 83       	st	Z, r24
    2588:	64 c0       	rjmp	.+200    	; 0x2652 <LCD_displayCharacter+0x2ec>
	else if (__tmp > 65535)
    258a:	fe 01       	movw	r30, r28
    258c:	e3 5b       	subi	r30, 0xB3	; 179
    258e:	ff 4f       	sbci	r31, 0xFF	; 255
    2590:	60 81       	ld	r22, Z
    2592:	71 81       	ldd	r23, Z+1	; 0x01
    2594:	82 81       	ldd	r24, Z+2	; 0x02
    2596:	93 81       	ldd	r25, Z+3	; 0x03
    2598:	20 e0       	ldi	r18, 0x00	; 0
    259a:	3f ef       	ldi	r19, 0xFF	; 255
    259c:	4f e7       	ldi	r20, 0x7F	; 127
    259e:	57 e4       	ldi	r21, 0x47	; 71
    25a0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25a4:	18 16       	cp	r1, r24
    25a6:	0c f0       	brlt	.+2      	; 0x25aa <LCD_displayCharacter+0x244>
    25a8:	43 c0       	rjmp	.+134    	; 0x2630 <LCD_displayCharacter+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25aa:	fe 01       	movw	r30, r28
    25ac:	ef 5a       	subi	r30, 0xAF	; 175
    25ae:	ff 4f       	sbci	r31, 0xFF	; 255
    25b0:	60 81       	ld	r22, Z
    25b2:	71 81       	ldd	r23, Z+1	; 0x01
    25b4:	82 81       	ldd	r24, Z+2	; 0x02
    25b6:	93 81       	ldd	r25, Z+3	; 0x03
    25b8:	20 e0       	ldi	r18, 0x00	; 0
    25ba:	30 e0       	ldi	r19, 0x00	; 0
    25bc:	40 e2       	ldi	r20, 0x20	; 32
    25be:	51 e4       	ldi	r21, 0x41	; 65
    25c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25c4:	dc 01       	movw	r26, r24
    25c6:	cb 01       	movw	r24, r22
    25c8:	8e 01       	movw	r16, r28
    25ca:	05 5b       	subi	r16, 0xB5	; 181
    25cc:	1f 4f       	sbci	r17, 0xFF	; 255
    25ce:	bc 01       	movw	r22, r24
    25d0:	cd 01       	movw	r24, r26
    25d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25d6:	dc 01       	movw	r26, r24
    25d8:	cb 01       	movw	r24, r22
    25da:	f8 01       	movw	r30, r16
    25dc:	91 83       	std	Z+1, r25	; 0x01
    25de:	80 83       	st	Z, r24
    25e0:	1f c0       	rjmp	.+62     	; 0x2620 <LCD_displayCharacter+0x2ba>
    25e2:	fe 01       	movw	r30, r28
    25e4:	e7 5b       	subi	r30, 0xB7	; 183
    25e6:	ff 4f       	sbci	r31, 0xFF	; 255
    25e8:	88 ec       	ldi	r24, 0xC8	; 200
    25ea:	90 e0       	ldi	r25, 0x00	; 0
    25ec:	91 83       	std	Z+1, r25	; 0x01
    25ee:	80 83       	st	Z, r24
    25f0:	fe 01       	movw	r30, r28
    25f2:	e7 5b       	subi	r30, 0xB7	; 183
    25f4:	ff 4f       	sbci	r31, 0xFF	; 255
    25f6:	80 81       	ld	r24, Z
    25f8:	91 81       	ldd	r25, Z+1	; 0x01
    25fa:	01 97       	sbiw	r24, 0x01	; 1
    25fc:	f1 f7       	brne	.-4      	; 0x25fa <LCD_displayCharacter+0x294>
    25fe:	fe 01       	movw	r30, r28
    2600:	e7 5b       	subi	r30, 0xB7	; 183
    2602:	ff 4f       	sbci	r31, 0xFF	; 255
    2604:	91 83       	std	Z+1, r25	; 0x01
    2606:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2608:	de 01       	movw	r26, r28
    260a:	a5 5b       	subi	r26, 0xB5	; 181
    260c:	bf 4f       	sbci	r27, 0xFF	; 255
    260e:	fe 01       	movw	r30, r28
    2610:	e5 5b       	subi	r30, 0xB5	; 181
    2612:	ff 4f       	sbci	r31, 0xFF	; 255
    2614:	80 81       	ld	r24, Z
    2616:	91 81       	ldd	r25, Z+1	; 0x01
    2618:	01 97       	sbiw	r24, 0x01	; 1
    261a:	11 96       	adiw	r26, 0x01	; 1
    261c:	9c 93       	st	X, r25
    261e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2620:	fe 01       	movw	r30, r28
    2622:	e5 5b       	subi	r30, 0xB5	; 181
    2624:	ff 4f       	sbci	r31, 0xFF	; 255
    2626:	80 81       	ld	r24, Z
    2628:	91 81       	ldd	r25, Z+1	; 0x01
    262a:	00 97       	sbiw	r24, 0x00	; 0
    262c:	d1 f6       	brne	.-76     	; 0x25e2 <LCD_displayCharacter+0x27c>
    262e:	27 c0       	rjmp	.+78     	; 0x267e <LCD_displayCharacter+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2630:	8e 01       	movw	r16, r28
    2632:	05 5b       	subi	r16, 0xB5	; 181
    2634:	1f 4f       	sbci	r17, 0xFF	; 255
    2636:	fe 01       	movw	r30, r28
    2638:	e3 5b       	subi	r30, 0xB3	; 179
    263a:	ff 4f       	sbci	r31, 0xFF	; 255
    263c:	60 81       	ld	r22, Z
    263e:	71 81       	ldd	r23, Z+1	; 0x01
    2640:	82 81       	ldd	r24, Z+2	; 0x02
    2642:	93 81       	ldd	r25, Z+3	; 0x03
    2644:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2648:	dc 01       	movw	r26, r24
    264a:	cb 01       	movw	r24, r22
    264c:	f8 01       	movw	r30, r16
    264e:	91 83       	std	Z+1, r25	; 0x01
    2650:	80 83       	st	Z, r24
    2652:	de 01       	movw	r26, r28
    2654:	a9 5b       	subi	r26, 0xB9	; 185
    2656:	bf 4f       	sbci	r27, 0xFF	; 255
    2658:	fe 01       	movw	r30, r28
    265a:	e5 5b       	subi	r30, 0xB5	; 181
    265c:	ff 4f       	sbci	r31, 0xFF	; 255
    265e:	80 81       	ld	r24, Z
    2660:	91 81       	ldd	r25, Z+1	; 0x01
    2662:	8d 93       	st	X+, r24
    2664:	9c 93       	st	X, r25
    2666:	fe 01       	movw	r30, r28
    2668:	e9 5b       	subi	r30, 0xB9	; 185
    266a:	ff 4f       	sbci	r31, 0xFF	; 255
    266c:	80 81       	ld	r24, Z
    266e:	91 81       	ldd	r25, Z+1	; 0x01
    2670:	01 97       	sbiw	r24, 0x01	; 1
    2672:	f1 f7       	brne	.-4      	; 0x2670 <LCD_displayCharacter+0x30a>
    2674:	fe 01       	movw	r30, r28
    2676:	e9 5b       	subi	r30, 0xB9	; 185
    2678:	ff 4f       	sbci	r31, 0xFF	; 255
    267a:	91 83       	std	Z+1, r25	; 0x01
    267c:	80 83       	st	Z, r24
	_delay_ms(1); /* Delay for processing Tpw - Tdws = 190ns */
#if (DATA_BITS_MODE == 4)
	/* Out the highest 4 bits of the required data to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (data & 0xF0);
    267e:	ab e3       	ldi	r26, 0x3B	; 59
    2680:	b0 e0       	ldi	r27, 0x00	; 0
    2682:	eb e3       	ldi	r30, 0x3B	; 59
    2684:	f0 e0       	ldi	r31, 0x00	; 0
    2686:	80 81       	ld	r24, Z
    2688:	98 2f       	mov	r25, r24
    268a:	9f 70       	andi	r25, 0x0F	; 15
    268c:	fe 01       	movw	r30, r28
    268e:	ed 59       	subi	r30, 0x9D	; 157
    2690:	ff 4f       	sbci	r31, 0xFF	; 255
    2692:	80 81       	ld	r24, Z
    2694:	80 7f       	andi	r24, 0xF0	; 240
    2696:	89 2b       	or	r24, r25
    2698:	8c 93       	st	X, r24
    269a:	fe 01       	movw	r30, r28
    269c:	ed 5b       	subi	r30, 0xBD	; 189
    269e:	ff 4f       	sbci	r31, 0xFF	; 255
    26a0:	80 e0       	ldi	r24, 0x00	; 0
    26a2:	90 e0       	ldi	r25, 0x00	; 0
    26a4:	a0 e8       	ldi	r26, 0x80	; 128
    26a6:	bf e3       	ldi	r27, 0x3F	; 63
    26a8:	80 83       	st	Z, r24
    26aa:	91 83       	std	Z+1, r25	; 0x01
    26ac:	a2 83       	std	Z+2, r26	; 0x02
    26ae:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26b0:	8e 01       	movw	r16, r28
    26b2:	01 5c       	subi	r16, 0xC1	; 193
    26b4:	1f 4f       	sbci	r17, 0xFF	; 255
    26b6:	fe 01       	movw	r30, r28
    26b8:	ed 5b       	subi	r30, 0xBD	; 189
    26ba:	ff 4f       	sbci	r31, 0xFF	; 255
    26bc:	60 81       	ld	r22, Z
    26be:	71 81       	ldd	r23, Z+1	; 0x01
    26c0:	82 81       	ldd	r24, Z+2	; 0x02
    26c2:	93 81       	ldd	r25, Z+3	; 0x03
    26c4:	20 e0       	ldi	r18, 0x00	; 0
    26c6:	30 e0       	ldi	r19, 0x00	; 0
    26c8:	4a ef       	ldi	r20, 0xFA	; 250
    26ca:	54 e4       	ldi	r21, 0x44	; 68
    26cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26d0:	dc 01       	movw	r26, r24
    26d2:	cb 01       	movw	r24, r22
    26d4:	f8 01       	movw	r30, r16
    26d6:	80 83       	st	Z, r24
    26d8:	91 83       	std	Z+1, r25	; 0x01
    26da:	a2 83       	std	Z+2, r26	; 0x02
    26dc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    26de:	fe 01       	movw	r30, r28
    26e0:	ff 96       	adiw	r30, 0x3f	; 63
    26e2:	60 81       	ld	r22, Z
    26e4:	71 81       	ldd	r23, Z+1	; 0x01
    26e6:	82 81       	ldd	r24, Z+2	; 0x02
    26e8:	93 81       	ldd	r25, Z+3	; 0x03
    26ea:	20 e0       	ldi	r18, 0x00	; 0
    26ec:	30 e0       	ldi	r19, 0x00	; 0
    26ee:	40 e8       	ldi	r20, 0x80	; 128
    26f0:	5f e3       	ldi	r21, 0x3F	; 63
    26f2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26f6:	88 23       	and	r24, r24
    26f8:	2c f4       	brge	.+10     	; 0x2704 <LCD_displayCharacter+0x39e>
		__ticks = 1;
    26fa:	81 e0       	ldi	r24, 0x01	; 1
    26fc:	90 e0       	ldi	r25, 0x00	; 0
    26fe:	9e af       	std	Y+62, r25	; 0x3e
    2700:	8d af       	std	Y+61, r24	; 0x3d
    2702:	46 c0       	rjmp	.+140    	; 0x2790 <LCD_displayCharacter+0x42a>
	else if (__tmp > 65535)
    2704:	fe 01       	movw	r30, r28
    2706:	ff 96       	adiw	r30, 0x3f	; 63
    2708:	60 81       	ld	r22, Z
    270a:	71 81       	ldd	r23, Z+1	; 0x01
    270c:	82 81       	ldd	r24, Z+2	; 0x02
    270e:	93 81       	ldd	r25, Z+3	; 0x03
    2710:	20 e0       	ldi	r18, 0x00	; 0
    2712:	3f ef       	ldi	r19, 0xFF	; 255
    2714:	4f e7       	ldi	r20, 0x7F	; 127
    2716:	57 e4       	ldi	r21, 0x47	; 71
    2718:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    271c:	18 16       	cp	r1, r24
    271e:	64 f5       	brge	.+88     	; 0x2778 <LCD_displayCharacter+0x412>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2720:	fe 01       	movw	r30, r28
    2722:	ed 5b       	subi	r30, 0xBD	; 189
    2724:	ff 4f       	sbci	r31, 0xFF	; 255
    2726:	60 81       	ld	r22, Z
    2728:	71 81       	ldd	r23, Z+1	; 0x01
    272a:	82 81       	ldd	r24, Z+2	; 0x02
    272c:	93 81       	ldd	r25, Z+3	; 0x03
    272e:	20 e0       	ldi	r18, 0x00	; 0
    2730:	30 e0       	ldi	r19, 0x00	; 0
    2732:	40 e2       	ldi	r20, 0x20	; 32
    2734:	51 e4       	ldi	r21, 0x41	; 65
    2736:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    273a:	dc 01       	movw	r26, r24
    273c:	cb 01       	movw	r24, r22
    273e:	bc 01       	movw	r22, r24
    2740:	cd 01       	movw	r24, r26
    2742:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2746:	dc 01       	movw	r26, r24
    2748:	cb 01       	movw	r24, r22
    274a:	9e af       	std	Y+62, r25	; 0x3e
    274c:	8d af       	std	Y+61, r24	; 0x3d
    274e:	0f c0       	rjmp	.+30     	; 0x276e <LCD_displayCharacter+0x408>
    2750:	88 ec       	ldi	r24, 0xC8	; 200
    2752:	90 e0       	ldi	r25, 0x00	; 0
    2754:	9c af       	std	Y+60, r25	; 0x3c
    2756:	8b af       	std	Y+59, r24	; 0x3b
    2758:	8b ad       	ldd	r24, Y+59	; 0x3b
    275a:	9c ad       	ldd	r25, Y+60	; 0x3c
    275c:	01 97       	sbiw	r24, 0x01	; 1
    275e:	f1 f7       	brne	.-4      	; 0x275c <LCD_displayCharacter+0x3f6>
    2760:	9c af       	std	Y+60, r25	; 0x3c
    2762:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2764:	8d ad       	ldd	r24, Y+61	; 0x3d
    2766:	9e ad       	ldd	r25, Y+62	; 0x3e
    2768:	01 97       	sbiw	r24, 0x01	; 1
    276a:	9e af       	std	Y+62, r25	; 0x3e
    276c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    276e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2770:	9e ad       	ldd	r25, Y+62	; 0x3e
    2772:	00 97       	sbiw	r24, 0x00	; 0
    2774:	69 f7       	brne	.-38     	; 0x2750 <LCD_displayCharacter+0x3ea>
    2776:	16 c0       	rjmp	.+44     	; 0x27a4 <LCD_displayCharacter+0x43e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2778:	fe 01       	movw	r30, r28
    277a:	ff 96       	adiw	r30, 0x3f	; 63
    277c:	60 81       	ld	r22, Z
    277e:	71 81       	ldd	r23, Z+1	; 0x01
    2780:	82 81       	ldd	r24, Z+2	; 0x02
    2782:	93 81       	ldd	r25, Z+3	; 0x03
    2784:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2788:	dc 01       	movw	r26, r24
    278a:	cb 01       	movw	r24, r22
    278c:	9e af       	std	Y+62, r25	; 0x3e
    278e:	8d af       	std	Y+61, r24	; 0x3d
    2790:	8d ad       	ldd	r24, Y+61	; 0x3d
    2792:	9e ad       	ldd	r25, Y+62	; 0x3e
    2794:	9a af       	std	Y+58, r25	; 0x3a
    2796:	89 af       	std	Y+57, r24	; 0x39
    2798:	89 ad       	ldd	r24, Y+57	; 0x39
    279a:	9a ad       	ldd	r25, Y+58	; 0x3a
    279c:	01 97       	sbiw	r24, 0x01	; 1
    279e:	f1 f7       	brne	.-4      	; 0x279c <LCD_displayCharacter+0x436>
    27a0:	9a af       	std	Y+58, r25	; 0x3a
    27a2:	89 af       	std	Y+57, r24	; 0x39
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | ((data & 0xF0) >> 4);
#endif

	_delay_ms(1); /* Delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* Disable LCD E = 0 */
    27a4:	ab e3       	ldi	r26, 0x3B	; 59
    27a6:	b0 e0       	ldi	r27, 0x00	; 0
    27a8:	eb e3       	ldi	r30, 0x3B	; 59
    27aa:	f0 e0       	ldi	r31, 0x00	; 0
    27ac:	80 81       	ld	r24, Z
    27ae:	87 7f       	andi	r24, 0xF7	; 247
    27b0:	8c 93       	st	X, r24
    27b2:	80 e0       	ldi	r24, 0x00	; 0
    27b4:	90 e0       	ldi	r25, 0x00	; 0
    27b6:	a0 e8       	ldi	r26, 0x80	; 128
    27b8:	bf e3       	ldi	r27, 0x3F	; 63
    27ba:	8d ab       	std	Y+53, r24	; 0x35
    27bc:	9e ab       	std	Y+54, r25	; 0x36
    27be:	af ab       	std	Y+55, r26	; 0x37
    27c0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27c2:	6d a9       	ldd	r22, Y+53	; 0x35
    27c4:	7e a9       	ldd	r23, Y+54	; 0x36
    27c6:	8f a9       	ldd	r24, Y+55	; 0x37
    27c8:	98 ad       	ldd	r25, Y+56	; 0x38
    27ca:	20 e0       	ldi	r18, 0x00	; 0
    27cc:	30 e0       	ldi	r19, 0x00	; 0
    27ce:	4a ef       	ldi	r20, 0xFA	; 250
    27d0:	54 e4       	ldi	r21, 0x44	; 68
    27d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27d6:	dc 01       	movw	r26, r24
    27d8:	cb 01       	movw	r24, r22
    27da:	89 ab       	std	Y+49, r24	; 0x31
    27dc:	9a ab       	std	Y+50, r25	; 0x32
    27de:	ab ab       	std	Y+51, r26	; 0x33
    27e0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    27e2:	69 a9       	ldd	r22, Y+49	; 0x31
    27e4:	7a a9       	ldd	r23, Y+50	; 0x32
    27e6:	8b a9       	ldd	r24, Y+51	; 0x33
    27e8:	9c a9       	ldd	r25, Y+52	; 0x34
    27ea:	20 e0       	ldi	r18, 0x00	; 0
    27ec:	30 e0       	ldi	r19, 0x00	; 0
    27ee:	40 e8       	ldi	r20, 0x80	; 128
    27f0:	5f e3       	ldi	r21, 0x3F	; 63
    27f2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27f6:	88 23       	and	r24, r24
    27f8:	2c f4       	brge	.+10     	; 0x2804 <LCD_displayCharacter+0x49e>
		__ticks = 1;
    27fa:	81 e0       	ldi	r24, 0x01	; 1
    27fc:	90 e0       	ldi	r25, 0x00	; 0
    27fe:	98 ab       	std	Y+48, r25	; 0x30
    2800:	8f a7       	std	Y+47, r24	; 0x2f
    2802:	3f c0       	rjmp	.+126    	; 0x2882 <LCD_displayCharacter+0x51c>
	else if (__tmp > 65535)
    2804:	69 a9       	ldd	r22, Y+49	; 0x31
    2806:	7a a9       	ldd	r23, Y+50	; 0x32
    2808:	8b a9       	ldd	r24, Y+51	; 0x33
    280a:	9c a9       	ldd	r25, Y+52	; 0x34
    280c:	20 e0       	ldi	r18, 0x00	; 0
    280e:	3f ef       	ldi	r19, 0xFF	; 255
    2810:	4f e7       	ldi	r20, 0x7F	; 127
    2812:	57 e4       	ldi	r21, 0x47	; 71
    2814:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2818:	18 16       	cp	r1, r24
    281a:	4c f5       	brge	.+82     	; 0x286e <LCD_displayCharacter+0x508>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    281c:	6d a9       	ldd	r22, Y+53	; 0x35
    281e:	7e a9       	ldd	r23, Y+54	; 0x36
    2820:	8f a9       	ldd	r24, Y+55	; 0x37
    2822:	98 ad       	ldd	r25, Y+56	; 0x38
    2824:	20 e0       	ldi	r18, 0x00	; 0
    2826:	30 e0       	ldi	r19, 0x00	; 0
    2828:	40 e2       	ldi	r20, 0x20	; 32
    282a:	51 e4       	ldi	r21, 0x41	; 65
    282c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2830:	dc 01       	movw	r26, r24
    2832:	cb 01       	movw	r24, r22
    2834:	bc 01       	movw	r22, r24
    2836:	cd 01       	movw	r24, r26
    2838:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    283c:	dc 01       	movw	r26, r24
    283e:	cb 01       	movw	r24, r22
    2840:	98 ab       	std	Y+48, r25	; 0x30
    2842:	8f a7       	std	Y+47, r24	; 0x2f
    2844:	0f c0       	rjmp	.+30     	; 0x2864 <LCD_displayCharacter+0x4fe>
    2846:	88 ec       	ldi	r24, 0xC8	; 200
    2848:	90 e0       	ldi	r25, 0x00	; 0
    284a:	9e a7       	std	Y+46, r25	; 0x2e
    284c:	8d a7       	std	Y+45, r24	; 0x2d
    284e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2850:	9e a5       	ldd	r25, Y+46	; 0x2e
    2852:	01 97       	sbiw	r24, 0x01	; 1
    2854:	f1 f7       	brne	.-4      	; 0x2852 <LCD_displayCharacter+0x4ec>
    2856:	9e a7       	std	Y+46, r25	; 0x2e
    2858:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    285a:	8f a5       	ldd	r24, Y+47	; 0x2f
    285c:	98 a9       	ldd	r25, Y+48	; 0x30
    285e:	01 97       	sbiw	r24, 0x01	; 1
    2860:	98 ab       	std	Y+48, r25	; 0x30
    2862:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2864:	8f a5       	ldd	r24, Y+47	; 0x2f
    2866:	98 a9       	ldd	r25, Y+48	; 0x30
    2868:	00 97       	sbiw	r24, 0x00	; 0
    286a:	69 f7       	brne	.-38     	; 0x2846 <LCD_displayCharacter+0x4e0>
    286c:	14 c0       	rjmp	.+40     	; 0x2896 <LCD_displayCharacter+0x530>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    286e:	69 a9       	ldd	r22, Y+49	; 0x31
    2870:	7a a9       	ldd	r23, Y+50	; 0x32
    2872:	8b a9       	ldd	r24, Y+51	; 0x33
    2874:	9c a9       	ldd	r25, Y+52	; 0x34
    2876:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    287a:	dc 01       	movw	r26, r24
    287c:	cb 01       	movw	r24, r22
    287e:	98 ab       	std	Y+48, r25	; 0x30
    2880:	8f a7       	std	Y+47, r24	; 0x2f
    2882:	8f a5       	ldd	r24, Y+47	; 0x2f
    2884:	98 a9       	ldd	r25, Y+48	; 0x30
    2886:	9c a7       	std	Y+44, r25	; 0x2c
    2888:	8b a7       	std	Y+43, r24	; 0x2b
    288a:	8b a5       	ldd	r24, Y+43	; 0x2b
    288c:	9c a5       	ldd	r25, Y+44	; 0x2c
    288e:	01 97       	sbiw	r24, 0x01	; 1
    2890:	f1 f7       	brne	.-4      	; 0x288e <LCD_displayCharacter+0x528>
    2892:	9c a7       	std	Y+44, r25	; 0x2c
    2894:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* Delay for processing Th = 13ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    2896:	ab e3       	ldi	r26, 0x3B	; 59
    2898:	b0 e0       	ldi	r27, 0x00	; 0
    289a:	eb e3       	ldi	r30, 0x3B	; 59
    289c:	f0 e0       	ldi	r31, 0x00	; 0
    289e:	80 81       	ld	r24, Z
    28a0:	88 60       	ori	r24, 0x08	; 8
    28a2:	8c 93       	st	X, r24
    28a4:	80 e0       	ldi	r24, 0x00	; 0
    28a6:	90 e0       	ldi	r25, 0x00	; 0
    28a8:	a0 e8       	ldi	r26, 0x80	; 128
    28aa:	bf e3       	ldi	r27, 0x3F	; 63
    28ac:	8f a3       	std	Y+39, r24	; 0x27
    28ae:	98 a7       	std	Y+40, r25	; 0x28
    28b0:	a9 a7       	std	Y+41, r26	; 0x29
    28b2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28b4:	6f a1       	ldd	r22, Y+39	; 0x27
    28b6:	78 a5       	ldd	r23, Y+40	; 0x28
    28b8:	89 a5       	ldd	r24, Y+41	; 0x29
    28ba:	9a a5       	ldd	r25, Y+42	; 0x2a
    28bc:	20 e0       	ldi	r18, 0x00	; 0
    28be:	30 e0       	ldi	r19, 0x00	; 0
    28c0:	4a ef       	ldi	r20, 0xFA	; 250
    28c2:	54 e4       	ldi	r21, 0x44	; 68
    28c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28c8:	dc 01       	movw	r26, r24
    28ca:	cb 01       	movw	r24, r22
    28cc:	8b a3       	std	Y+35, r24	; 0x23
    28ce:	9c a3       	std	Y+36, r25	; 0x24
    28d0:	ad a3       	std	Y+37, r26	; 0x25
    28d2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    28d4:	6b a1       	ldd	r22, Y+35	; 0x23
    28d6:	7c a1       	ldd	r23, Y+36	; 0x24
    28d8:	8d a1       	ldd	r24, Y+37	; 0x25
    28da:	9e a1       	ldd	r25, Y+38	; 0x26
    28dc:	20 e0       	ldi	r18, 0x00	; 0
    28de:	30 e0       	ldi	r19, 0x00	; 0
    28e0:	40 e8       	ldi	r20, 0x80	; 128
    28e2:	5f e3       	ldi	r21, 0x3F	; 63
    28e4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28e8:	88 23       	and	r24, r24
    28ea:	2c f4       	brge	.+10     	; 0x28f6 <LCD_displayCharacter+0x590>
		__ticks = 1;
    28ec:	81 e0       	ldi	r24, 0x01	; 1
    28ee:	90 e0       	ldi	r25, 0x00	; 0
    28f0:	9a a3       	std	Y+34, r25	; 0x22
    28f2:	89 a3       	std	Y+33, r24	; 0x21
    28f4:	3f c0       	rjmp	.+126    	; 0x2974 <LCD_displayCharacter+0x60e>
	else if (__tmp > 65535)
    28f6:	6b a1       	ldd	r22, Y+35	; 0x23
    28f8:	7c a1       	ldd	r23, Y+36	; 0x24
    28fa:	8d a1       	ldd	r24, Y+37	; 0x25
    28fc:	9e a1       	ldd	r25, Y+38	; 0x26
    28fe:	20 e0       	ldi	r18, 0x00	; 0
    2900:	3f ef       	ldi	r19, 0xFF	; 255
    2902:	4f e7       	ldi	r20, 0x7F	; 127
    2904:	57 e4       	ldi	r21, 0x47	; 71
    2906:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    290a:	18 16       	cp	r1, r24
    290c:	4c f5       	brge	.+82     	; 0x2960 <LCD_displayCharacter+0x5fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    290e:	6f a1       	ldd	r22, Y+39	; 0x27
    2910:	78 a5       	ldd	r23, Y+40	; 0x28
    2912:	89 a5       	ldd	r24, Y+41	; 0x29
    2914:	9a a5       	ldd	r25, Y+42	; 0x2a
    2916:	20 e0       	ldi	r18, 0x00	; 0
    2918:	30 e0       	ldi	r19, 0x00	; 0
    291a:	40 e2       	ldi	r20, 0x20	; 32
    291c:	51 e4       	ldi	r21, 0x41	; 65
    291e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2922:	dc 01       	movw	r26, r24
    2924:	cb 01       	movw	r24, r22
    2926:	bc 01       	movw	r22, r24
    2928:	cd 01       	movw	r24, r26
    292a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    292e:	dc 01       	movw	r26, r24
    2930:	cb 01       	movw	r24, r22
    2932:	9a a3       	std	Y+34, r25	; 0x22
    2934:	89 a3       	std	Y+33, r24	; 0x21
    2936:	0f c0       	rjmp	.+30     	; 0x2956 <LCD_displayCharacter+0x5f0>
    2938:	88 ec       	ldi	r24, 0xC8	; 200
    293a:	90 e0       	ldi	r25, 0x00	; 0
    293c:	98 a3       	std	Y+32, r25	; 0x20
    293e:	8f 8f       	std	Y+31, r24	; 0x1f
    2940:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2942:	98 a1       	ldd	r25, Y+32	; 0x20
    2944:	01 97       	sbiw	r24, 0x01	; 1
    2946:	f1 f7       	brne	.-4      	; 0x2944 <LCD_displayCharacter+0x5de>
    2948:	98 a3       	std	Y+32, r25	; 0x20
    294a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    294c:	89 a1       	ldd	r24, Y+33	; 0x21
    294e:	9a a1       	ldd	r25, Y+34	; 0x22
    2950:	01 97       	sbiw	r24, 0x01	; 1
    2952:	9a a3       	std	Y+34, r25	; 0x22
    2954:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2956:	89 a1       	ldd	r24, Y+33	; 0x21
    2958:	9a a1       	ldd	r25, Y+34	; 0x22
    295a:	00 97       	sbiw	r24, 0x00	; 0
    295c:	69 f7       	brne	.-38     	; 0x2938 <LCD_displayCharacter+0x5d2>
    295e:	14 c0       	rjmp	.+40     	; 0x2988 <LCD_displayCharacter+0x622>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2960:	6b a1       	ldd	r22, Y+35	; 0x23
    2962:	7c a1       	ldd	r23, Y+36	; 0x24
    2964:	8d a1       	ldd	r24, Y+37	; 0x25
    2966:	9e a1       	ldd	r25, Y+38	; 0x26
    2968:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    296c:	dc 01       	movw	r26, r24
    296e:	cb 01       	movw	r24, r22
    2970:	9a a3       	std	Y+34, r25	; 0x22
    2972:	89 a3       	std	Y+33, r24	; 0x21
    2974:	89 a1       	ldd	r24, Y+33	; 0x21
    2976:	9a a1       	ldd	r25, Y+34	; 0x22
    2978:	9e 8f       	std	Y+30, r25	; 0x1e
    297a:	8d 8f       	std	Y+29, r24	; 0x1d
    297c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    297e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2980:	01 97       	sbiw	r24, 0x01	; 1
    2982:	f1 f7       	brne	.-4      	; 0x2980 <LCD_displayCharacter+0x61a>
    2984:	9e 8f       	std	Y+30, r25	; 0x1e
    2986:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* Delay for processing Tpw - Tdws = 190ns */

	/* Out the lowest 4 bits of the required data to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | ((data & 0x0F) << 4);
    2988:	ab e3       	ldi	r26, 0x3B	; 59
    298a:	b0 e0       	ldi	r27, 0x00	; 0
    298c:	eb e3       	ldi	r30, 0x3B	; 59
    298e:	f0 e0       	ldi	r31, 0x00	; 0
    2990:	80 81       	ld	r24, Z
    2992:	28 2f       	mov	r18, r24
    2994:	2f 70       	andi	r18, 0x0F	; 15
    2996:	fe 01       	movw	r30, r28
    2998:	ed 59       	subi	r30, 0x9D	; 157
    299a:	ff 4f       	sbci	r31, 0xFF	; 255
    299c:	80 81       	ld	r24, Z
    299e:	88 2f       	mov	r24, r24
    29a0:	90 e0       	ldi	r25, 0x00	; 0
    29a2:	82 95       	swap	r24
    29a4:	92 95       	swap	r25
    29a6:	90 7f       	andi	r25, 0xF0	; 240
    29a8:	98 27       	eor	r25, r24
    29aa:	80 7f       	andi	r24, 0xF0	; 240
    29ac:	98 27       	eor	r25, r24
    29ae:	82 2b       	or	r24, r18
    29b0:	8c 93       	st	X, r24
    29b2:	80 e0       	ldi	r24, 0x00	; 0
    29b4:	90 e0       	ldi	r25, 0x00	; 0
    29b6:	a0 e8       	ldi	r26, 0x80	; 128
    29b8:	bf e3       	ldi	r27, 0x3F	; 63
    29ba:	89 8f       	std	Y+25, r24	; 0x19
    29bc:	9a 8f       	std	Y+26, r25	; 0x1a
    29be:	ab 8f       	std	Y+27, r26	; 0x1b
    29c0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29c2:	69 8d       	ldd	r22, Y+25	; 0x19
    29c4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    29c6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    29c8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    29ca:	20 e0       	ldi	r18, 0x00	; 0
    29cc:	30 e0       	ldi	r19, 0x00	; 0
    29ce:	4a ef       	ldi	r20, 0xFA	; 250
    29d0:	54 e4       	ldi	r21, 0x44	; 68
    29d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29d6:	dc 01       	movw	r26, r24
    29d8:	cb 01       	movw	r24, r22
    29da:	8d 8b       	std	Y+21, r24	; 0x15
    29dc:	9e 8b       	std	Y+22, r25	; 0x16
    29de:	af 8b       	std	Y+23, r26	; 0x17
    29e0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    29e2:	6d 89       	ldd	r22, Y+21	; 0x15
    29e4:	7e 89       	ldd	r23, Y+22	; 0x16
    29e6:	8f 89       	ldd	r24, Y+23	; 0x17
    29e8:	98 8d       	ldd	r25, Y+24	; 0x18
    29ea:	20 e0       	ldi	r18, 0x00	; 0
    29ec:	30 e0       	ldi	r19, 0x00	; 0
    29ee:	40 e8       	ldi	r20, 0x80	; 128
    29f0:	5f e3       	ldi	r21, 0x3F	; 63
    29f2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29f6:	88 23       	and	r24, r24
    29f8:	2c f4       	brge	.+10     	; 0x2a04 <LCD_displayCharacter+0x69e>
		__ticks = 1;
    29fa:	81 e0       	ldi	r24, 0x01	; 1
    29fc:	90 e0       	ldi	r25, 0x00	; 0
    29fe:	9c 8b       	std	Y+20, r25	; 0x14
    2a00:	8b 8b       	std	Y+19, r24	; 0x13
    2a02:	3f c0       	rjmp	.+126    	; 0x2a82 <LCD_displayCharacter+0x71c>
	else if (__tmp > 65535)
    2a04:	6d 89       	ldd	r22, Y+21	; 0x15
    2a06:	7e 89       	ldd	r23, Y+22	; 0x16
    2a08:	8f 89       	ldd	r24, Y+23	; 0x17
    2a0a:	98 8d       	ldd	r25, Y+24	; 0x18
    2a0c:	20 e0       	ldi	r18, 0x00	; 0
    2a0e:	3f ef       	ldi	r19, 0xFF	; 255
    2a10:	4f e7       	ldi	r20, 0x7F	; 127
    2a12:	57 e4       	ldi	r21, 0x47	; 71
    2a14:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a18:	18 16       	cp	r1, r24
    2a1a:	4c f5       	brge	.+82     	; 0x2a6e <LCD_displayCharacter+0x708>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a1c:	69 8d       	ldd	r22, Y+25	; 0x19
    2a1e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a20:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a22:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a24:	20 e0       	ldi	r18, 0x00	; 0
    2a26:	30 e0       	ldi	r19, 0x00	; 0
    2a28:	40 e2       	ldi	r20, 0x20	; 32
    2a2a:	51 e4       	ldi	r21, 0x41	; 65
    2a2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a30:	dc 01       	movw	r26, r24
    2a32:	cb 01       	movw	r24, r22
    2a34:	bc 01       	movw	r22, r24
    2a36:	cd 01       	movw	r24, r26
    2a38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a3c:	dc 01       	movw	r26, r24
    2a3e:	cb 01       	movw	r24, r22
    2a40:	9c 8b       	std	Y+20, r25	; 0x14
    2a42:	8b 8b       	std	Y+19, r24	; 0x13
    2a44:	0f c0       	rjmp	.+30     	; 0x2a64 <LCD_displayCharacter+0x6fe>
    2a46:	88 ec       	ldi	r24, 0xC8	; 200
    2a48:	90 e0       	ldi	r25, 0x00	; 0
    2a4a:	9a 8b       	std	Y+18, r25	; 0x12
    2a4c:	89 8b       	std	Y+17, r24	; 0x11
    2a4e:	89 89       	ldd	r24, Y+17	; 0x11
    2a50:	9a 89       	ldd	r25, Y+18	; 0x12
    2a52:	01 97       	sbiw	r24, 0x01	; 1
    2a54:	f1 f7       	brne	.-4      	; 0x2a52 <LCD_displayCharacter+0x6ec>
    2a56:	9a 8b       	std	Y+18, r25	; 0x12
    2a58:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a5a:	8b 89       	ldd	r24, Y+19	; 0x13
    2a5c:	9c 89       	ldd	r25, Y+20	; 0x14
    2a5e:	01 97       	sbiw	r24, 0x01	; 1
    2a60:	9c 8b       	std	Y+20, r25	; 0x14
    2a62:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a64:	8b 89       	ldd	r24, Y+19	; 0x13
    2a66:	9c 89       	ldd	r25, Y+20	; 0x14
    2a68:	00 97       	sbiw	r24, 0x00	; 0
    2a6a:	69 f7       	brne	.-38     	; 0x2a46 <LCD_displayCharacter+0x6e0>
    2a6c:	14 c0       	rjmp	.+40     	; 0x2a96 <LCD_displayCharacter+0x730>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a6e:	6d 89       	ldd	r22, Y+21	; 0x15
    2a70:	7e 89       	ldd	r23, Y+22	; 0x16
    2a72:	8f 89       	ldd	r24, Y+23	; 0x17
    2a74:	98 8d       	ldd	r25, Y+24	; 0x18
    2a76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a7a:	dc 01       	movw	r26, r24
    2a7c:	cb 01       	movw	r24, r22
    2a7e:	9c 8b       	std	Y+20, r25	; 0x14
    2a80:	8b 8b       	std	Y+19, r24	; 0x13
    2a82:	8b 89       	ldd	r24, Y+19	; 0x13
    2a84:	9c 89       	ldd	r25, Y+20	; 0x14
    2a86:	98 8b       	std	Y+16, r25	; 0x10
    2a88:	8f 87       	std	Y+15, r24	; 0x0f
    2a8a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a8c:	98 89       	ldd	r25, Y+16	; 0x10
    2a8e:	01 97       	sbiw	r24, 0x01	; 1
    2a90:	f1 f7       	brne	.-4      	; 0x2a8e <LCD_displayCharacter+0x728>
    2a92:	98 8b       	std	Y+16, r25	; 0x10
    2a94:	8f 87       	std	Y+15, r24	; 0x0f
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | (data & 0x0F);
#endif

	_delay_ms(1); /* Delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E = 0 */
    2a96:	ab e3       	ldi	r26, 0x3B	; 59
    2a98:	b0 e0       	ldi	r27, 0x00	; 0
    2a9a:	eb e3       	ldi	r30, 0x3B	; 59
    2a9c:	f0 e0       	ldi	r31, 0x00	; 0
    2a9e:	80 81       	ld	r24, Z
    2aa0:	87 7f       	andi	r24, 0xF7	; 247
    2aa2:	8c 93       	st	X, r24
    2aa4:	80 e0       	ldi	r24, 0x00	; 0
    2aa6:	90 e0       	ldi	r25, 0x00	; 0
    2aa8:	a0 e8       	ldi	r26, 0x80	; 128
    2aaa:	bf e3       	ldi	r27, 0x3F	; 63
    2aac:	8b 87       	std	Y+11, r24	; 0x0b
    2aae:	9c 87       	std	Y+12, r25	; 0x0c
    2ab0:	ad 87       	std	Y+13, r26	; 0x0d
    2ab2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ab4:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ab6:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ab8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2aba:	9e 85       	ldd	r25, Y+14	; 0x0e
    2abc:	20 e0       	ldi	r18, 0x00	; 0
    2abe:	30 e0       	ldi	r19, 0x00	; 0
    2ac0:	4a ef       	ldi	r20, 0xFA	; 250
    2ac2:	54 e4       	ldi	r21, 0x44	; 68
    2ac4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ac8:	dc 01       	movw	r26, r24
    2aca:	cb 01       	movw	r24, r22
    2acc:	8f 83       	std	Y+7, r24	; 0x07
    2ace:	98 87       	std	Y+8, r25	; 0x08
    2ad0:	a9 87       	std	Y+9, r26	; 0x09
    2ad2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2ad4:	6f 81       	ldd	r22, Y+7	; 0x07
    2ad6:	78 85       	ldd	r23, Y+8	; 0x08
    2ad8:	89 85       	ldd	r24, Y+9	; 0x09
    2ada:	9a 85       	ldd	r25, Y+10	; 0x0a
    2adc:	20 e0       	ldi	r18, 0x00	; 0
    2ade:	30 e0       	ldi	r19, 0x00	; 0
    2ae0:	40 e8       	ldi	r20, 0x80	; 128
    2ae2:	5f e3       	ldi	r21, 0x3F	; 63
    2ae4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ae8:	88 23       	and	r24, r24
    2aea:	2c f4       	brge	.+10     	; 0x2af6 <LCD_displayCharacter+0x790>
		__ticks = 1;
    2aec:	81 e0       	ldi	r24, 0x01	; 1
    2aee:	90 e0       	ldi	r25, 0x00	; 0
    2af0:	9e 83       	std	Y+6, r25	; 0x06
    2af2:	8d 83       	std	Y+5, r24	; 0x05
    2af4:	3f c0       	rjmp	.+126    	; 0x2b74 <LCD_displayCharacter+0x80e>
	else if (__tmp > 65535)
    2af6:	6f 81       	ldd	r22, Y+7	; 0x07
    2af8:	78 85       	ldd	r23, Y+8	; 0x08
    2afa:	89 85       	ldd	r24, Y+9	; 0x09
    2afc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2afe:	20 e0       	ldi	r18, 0x00	; 0
    2b00:	3f ef       	ldi	r19, 0xFF	; 255
    2b02:	4f e7       	ldi	r20, 0x7F	; 127
    2b04:	57 e4       	ldi	r21, 0x47	; 71
    2b06:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b0a:	18 16       	cp	r1, r24
    2b0c:	4c f5       	brge	.+82     	; 0x2b60 <LCD_displayCharacter+0x7fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b0e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b10:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b12:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b14:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b16:	20 e0       	ldi	r18, 0x00	; 0
    2b18:	30 e0       	ldi	r19, 0x00	; 0
    2b1a:	40 e2       	ldi	r20, 0x20	; 32
    2b1c:	51 e4       	ldi	r21, 0x41	; 65
    2b1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b22:	dc 01       	movw	r26, r24
    2b24:	cb 01       	movw	r24, r22
    2b26:	bc 01       	movw	r22, r24
    2b28:	cd 01       	movw	r24, r26
    2b2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b2e:	dc 01       	movw	r26, r24
    2b30:	cb 01       	movw	r24, r22
    2b32:	9e 83       	std	Y+6, r25	; 0x06
    2b34:	8d 83       	std	Y+5, r24	; 0x05
    2b36:	0f c0       	rjmp	.+30     	; 0x2b56 <LCD_displayCharacter+0x7f0>
    2b38:	88 ec       	ldi	r24, 0xC8	; 200
    2b3a:	90 e0       	ldi	r25, 0x00	; 0
    2b3c:	9c 83       	std	Y+4, r25	; 0x04
    2b3e:	8b 83       	std	Y+3, r24	; 0x03
    2b40:	8b 81       	ldd	r24, Y+3	; 0x03
    2b42:	9c 81       	ldd	r25, Y+4	; 0x04
    2b44:	01 97       	sbiw	r24, 0x01	; 1
    2b46:	f1 f7       	brne	.-4      	; 0x2b44 <LCD_displayCharacter+0x7de>
    2b48:	9c 83       	std	Y+4, r25	; 0x04
    2b4a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b4c:	8d 81       	ldd	r24, Y+5	; 0x05
    2b4e:	9e 81       	ldd	r25, Y+6	; 0x06
    2b50:	01 97       	sbiw	r24, 0x01	; 1
    2b52:	9e 83       	std	Y+6, r25	; 0x06
    2b54:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b56:	8d 81       	ldd	r24, Y+5	; 0x05
    2b58:	9e 81       	ldd	r25, Y+6	; 0x06
    2b5a:	00 97       	sbiw	r24, 0x00	; 0
    2b5c:	69 f7       	brne	.-38     	; 0x2b38 <LCD_displayCharacter+0x7d2>
    2b5e:	14 c0       	rjmp	.+40     	; 0x2b88 <LCD_displayCharacter+0x822>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b60:	6f 81       	ldd	r22, Y+7	; 0x07
    2b62:	78 85       	ldd	r23, Y+8	; 0x08
    2b64:	89 85       	ldd	r24, Y+9	; 0x09
    2b66:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b6c:	dc 01       	movw	r26, r24
    2b6e:	cb 01       	movw	r24, r22
    2b70:	9e 83       	std	Y+6, r25	; 0x06
    2b72:	8d 83       	std	Y+5, r24	; 0x05
    2b74:	8d 81       	ldd	r24, Y+5	; 0x05
    2b76:	9e 81       	ldd	r25, Y+6	; 0x06
    2b78:	9a 83       	std	Y+2, r25	; 0x02
    2b7a:	89 83       	std	Y+1, r24	; 0x01
    2b7c:	89 81       	ldd	r24, Y+1	; 0x01
    2b7e:	9a 81       	ldd	r25, Y+2	; 0x02
    2b80:	01 97       	sbiw	r24, 0x01	; 1
    2b82:	f1 f7       	brne	.-4      	; 0x2b80 <LCD_displayCharacter+0x81a>
    2b84:	9a 83       	std	Y+2, r25	; 0x02
    2b86:	89 83       	std	Y+1, r24	; 0x01
	LCD_DATA_PORT = data; /* Out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* Delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* Disable LCD E = 0 */
	_delay_ms(1); /* Delay for processing Th = 13ns */
#endif
}
    2b88:	cd 59       	subi	r28, 0x9D	; 157
    2b8a:	df 4f       	sbci	r29, 0xFF	; 255
    2b8c:	0f b6       	in	r0, 0x3f	; 63
    2b8e:	f8 94       	cli
    2b90:	de bf       	out	0x3e, r29	; 62
    2b92:	0f be       	out	0x3f, r0	; 63
    2b94:	cd bf       	out	0x3d, r28	; 61
    2b96:	cf 91       	pop	r28
    2b98:	df 91       	pop	r29
    2b9a:	1f 91       	pop	r17
    2b9c:	0f 91       	pop	r16
    2b9e:	08 95       	ret

00002ba0 <LCD_displayString>:

void LCD_displayString(const uint8_t * Str)
{
    2ba0:	df 93       	push	r29
    2ba2:	cf 93       	push	r28
    2ba4:	00 d0       	rcall	.+0      	; 0x2ba6 <LCD_displayString+0x6>
    2ba6:	0f 92       	push	r0
    2ba8:	cd b7       	in	r28, 0x3d	; 61
    2baa:	de b7       	in	r29, 0x3e	; 62
    2bac:	9b 83       	std	Y+3, r25	; 0x03
    2bae:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t i = 0;
    2bb0:	19 82       	std	Y+1, r1	; 0x01
    2bb2:	0e c0       	rjmp	.+28     	; 0x2bd0 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2bb4:	89 81       	ldd	r24, Y+1	; 0x01
    2bb6:	28 2f       	mov	r18, r24
    2bb8:	30 e0       	ldi	r19, 0x00	; 0
    2bba:	8a 81       	ldd	r24, Y+2	; 0x02
    2bbc:	9b 81       	ldd	r25, Y+3	; 0x03
    2bbe:	fc 01       	movw	r30, r24
    2bc0:	e2 0f       	add	r30, r18
    2bc2:	f3 1f       	adc	r31, r19
    2bc4:	80 81       	ld	r24, Z
    2bc6:	0e 94 b3 11 	call	0x2366	; 0x2366 <LCD_displayCharacter>
		i++;
    2bca:	89 81       	ldd	r24, Y+1	; 0x01
    2bcc:	8f 5f       	subi	r24, 0xFF	; 255
    2bce:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const uint8_t * Str)
{
	uint8_t i = 0;
	while(Str[i] != '\0')
    2bd0:	89 81       	ldd	r24, Y+1	; 0x01
    2bd2:	28 2f       	mov	r18, r24
    2bd4:	30 e0       	ldi	r19, 0x00	; 0
    2bd6:	8a 81       	ldd	r24, Y+2	; 0x02
    2bd8:	9b 81       	ldd	r25, Y+3	; 0x03
    2bda:	fc 01       	movw	r30, r24
    2bdc:	e2 0f       	add	r30, r18
    2bde:	f3 1f       	adc	r31, r19
    2be0:	80 81       	ld	r24, Z
    2be2:	88 23       	and	r24, r24
    2be4:	39 f7       	brne	.-50     	; 0x2bb4 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(Str[i]);
		i++;
	}
}
    2be6:	0f 90       	pop	r0
    2be8:	0f 90       	pop	r0
    2bea:	0f 90       	pop	r0
    2bec:	cf 91       	pop	r28
    2bee:	df 91       	pop	r29
    2bf0:	08 95       	ret

00002bf2 <LCD_goToRowColumn>:

void LCD_goToRowColumn(uint8_t row, uint8_t col)
{
    2bf2:	df 93       	push	r29
    2bf4:	cf 93       	push	r28
    2bf6:	00 d0       	rcall	.+0      	; 0x2bf8 <LCD_goToRowColumn+0x6>
    2bf8:	00 d0       	rcall	.+0      	; 0x2bfa <LCD_goToRowColumn+0x8>
    2bfa:	0f 92       	push	r0
    2bfc:	cd b7       	in	r28, 0x3d	; 61
    2bfe:	de b7       	in	r29, 0x3e	; 62
    2c00:	8a 83       	std	Y+2, r24	; 0x02
    2c02:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t Address;
	
	/* First of all calculate the required address */
	switch(row)
    2c04:	8a 81       	ldd	r24, Y+2	; 0x02
    2c06:	28 2f       	mov	r18, r24
    2c08:	30 e0       	ldi	r19, 0x00	; 0
    2c0a:	3d 83       	std	Y+5, r19	; 0x05
    2c0c:	2c 83       	std	Y+4, r18	; 0x04
    2c0e:	8c 81       	ldd	r24, Y+4	; 0x04
    2c10:	9d 81       	ldd	r25, Y+5	; 0x05
    2c12:	81 30       	cpi	r24, 0x01	; 1
    2c14:	91 05       	cpc	r25, r1
    2c16:	c1 f0       	breq	.+48     	; 0x2c48 <LCD_goToRowColumn+0x56>
    2c18:	2c 81       	ldd	r18, Y+4	; 0x04
    2c1a:	3d 81       	ldd	r19, Y+5	; 0x05
    2c1c:	22 30       	cpi	r18, 0x02	; 2
    2c1e:	31 05       	cpc	r19, r1
    2c20:	2c f4       	brge	.+10     	; 0x2c2c <LCD_goToRowColumn+0x3a>
    2c22:	8c 81       	ldd	r24, Y+4	; 0x04
    2c24:	9d 81       	ldd	r25, Y+5	; 0x05
    2c26:	00 97       	sbiw	r24, 0x00	; 0
    2c28:	61 f0       	breq	.+24     	; 0x2c42 <LCD_goToRowColumn+0x50>
    2c2a:	19 c0       	rjmp	.+50     	; 0x2c5e <LCD_goToRowColumn+0x6c>
    2c2c:	2c 81       	ldd	r18, Y+4	; 0x04
    2c2e:	3d 81       	ldd	r19, Y+5	; 0x05
    2c30:	22 30       	cpi	r18, 0x02	; 2
    2c32:	31 05       	cpc	r19, r1
    2c34:	69 f0       	breq	.+26     	; 0x2c50 <LCD_goToRowColumn+0x5e>
    2c36:	8c 81       	ldd	r24, Y+4	; 0x04
    2c38:	9d 81       	ldd	r25, Y+5	; 0x05
    2c3a:	83 30       	cpi	r24, 0x03	; 3
    2c3c:	91 05       	cpc	r25, r1
    2c3e:	61 f0       	breq	.+24     	; 0x2c58 <LCD_goToRowColumn+0x66>
    2c40:	0e c0       	rjmp	.+28     	; 0x2c5e <LCD_goToRowColumn+0x6c>
	{
		case 0:
				Address=col;
    2c42:	8b 81       	ldd	r24, Y+3	; 0x03
    2c44:	89 83       	std	Y+1, r24	; 0x01
    2c46:	0b c0       	rjmp	.+22     	; 0x2c5e <LCD_goToRowColumn+0x6c>
				break;
		case 1:
				Address=col+0x40;
    2c48:	8b 81       	ldd	r24, Y+3	; 0x03
    2c4a:	80 5c       	subi	r24, 0xC0	; 192
    2c4c:	89 83       	std	Y+1, r24	; 0x01
    2c4e:	07 c0       	rjmp	.+14     	; 0x2c5e <LCD_goToRowColumn+0x6c>
				break;
		case 2:
				Address=col+0x10;
    2c50:	8b 81       	ldd	r24, Y+3	; 0x03
    2c52:	80 5f       	subi	r24, 0xF0	; 240
    2c54:	89 83       	std	Y+1, r24	; 0x01
    2c56:	03 c0       	rjmp	.+6      	; 0x2c5e <LCD_goToRowColumn+0x6c>
				break;
		case 3:
				Address=col+0x50;
    2c58:	8b 81       	ldd	r24, Y+3	; 0x03
    2c5a:	80 5b       	subi	r24, 0xB0	; 176
    2c5c:	89 83       	std	Y+1, r24	; 0x01
	}					
	/* 
	 * To write to a specific address in the LCD 
	 * we need to apply the corresponding command 0b10000000+Address 
	 */
	LCD_sendCommand(Address | SET_CURSOR_LOCATION); 
    2c5e:	89 81       	ldd	r24, Y+1	; 0x01
    2c60:	80 68       	ori	r24, 0x80	; 128
    2c62:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <LCD_sendCommand>
}
    2c66:	0f 90       	pop	r0
    2c68:	0f 90       	pop	r0
    2c6a:	0f 90       	pop	r0
    2c6c:	0f 90       	pop	r0
    2c6e:	0f 90       	pop	r0
    2c70:	cf 91       	pop	r28
    2c72:	df 91       	pop	r29
    2c74:	08 95       	ret

00002c76 <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8_t row, uint8_t col, const char * Str)
{
    2c76:	df 93       	push	r29
    2c78:	cf 93       	push	r28
    2c7a:	00 d0       	rcall	.+0      	; 0x2c7c <LCD_displayStringRowColumn+0x6>
    2c7c:	00 d0       	rcall	.+0      	; 0x2c7e <LCD_displayStringRowColumn+0x8>
    2c7e:	cd b7       	in	r28, 0x3d	; 61
    2c80:	de b7       	in	r29, 0x3e	; 62
    2c82:	89 83       	std	Y+1, r24	; 0x01
    2c84:	6a 83       	std	Y+2, r22	; 0x02
    2c86:	5c 83       	std	Y+4, r21	; 0x04
    2c88:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(row, col); /* Go to to the required LCD position */
    2c8a:	89 81       	ldd	r24, Y+1	; 0x01
    2c8c:	6a 81       	ldd	r22, Y+2	; 0x02
    2c8e:	0e 94 f9 15 	call	0x2bf2	; 0x2bf2 <LCD_goToRowColumn>
	LCD_displayString(Str); /* Display the string */
    2c92:	8b 81       	ldd	r24, Y+3	; 0x03
    2c94:	9c 81       	ldd	r25, Y+4	; 0x04
    2c96:	0e 94 d0 15 	call	0x2ba0	; 0x2ba0 <LCD_displayString>
}
    2c9a:	0f 90       	pop	r0
    2c9c:	0f 90       	pop	r0
    2c9e:	0f 90       	pop	r0
    2ca0:	0f 90       	pop	r0
    2ca2:	cf 91       	pop	r28
    2ca4:	df 91       	pop	r29
    2ca6:	08 95       	ret

00002ca8 <LCD_intgerToString>:

void LCD_intgerToString(uint32_t data)
{
    2ca8:	df 93       	push	r29
    2caa:	cf 93       	push	r28
    2cac:	cd b7       	in	r28, 0x3d	; 61
    2cae:	de b7       	in	r29, 0x3e	; 62
    2cb0:	64 97       	sbiw	r28, 0x14	; 20
    2cb2:	0f b6       	in	r0, 0x3f	; 63
    2cb4:	f8 94       	cli
    2cb6:	de bf       	out	0x3e, r29	; 62
    2cb8:	0f be       	out	0x3f, r0	; 63
    2cba:	cd bf       	out	0x3d, r28	; 61
    2cbc:	69 8b       	std	Y+17, r22	; 0x11
    2cbe:	7a 8b       	std	Y+18, r23	; 0x12
    2cc0:	8b 8b       	std	Y+19, r24	; 0x13
    2cc2:	9c 8b       	std	Y+20, r25	; 0x14
   char buff[16]; /* String to hold the ASCII result */
   itoa(data, buff, 10); /* 10 for decimal */
    2cc4:	89 89       	ldd	r24, Y+17	; 0x11
    2cc6:	9a 89       	ldd	r25, Y+18	; 0x12
    2cc8:	9e 01       	movw	r18, r28
    2cca:	2f 5f       	subi	r18, 0xFF	; 255
    2ccc:	3f 4f       	sbci	r19, 0xFF	; 255
    2cce:	b9 01       	movw	r22, r18
    2cd0:	4a e0       	ldi	r20, 0x0A	; 10
    2cd2:	50 e0       	ldi	r21, 0x00	; 0
    2cd4:	0e 94 20 19 	call	0x3240	; 0x3240 <itoa>
   LCD_displayString(buff);
    2cd8:	ce 01       	movw	r24, r28
    2cda:	01 96       	adiw	r24, 0x01	; 1
    2cdc:	0e 94 d0 15 	call	0x2ba0	; 0x2ba0 <LCD_displayString>
}
    2ce0:	64 96       	adiw	r28, 0x14	; 20
    2ce2:	0f b6       	in	r0, 0x3f	; 63
    2ce4:	f8 94       	cli
    2ce6:	de bf       	out	0x3e, r29	; 62
    2ce8:	0f be       	out	0x3f, r0	; 63
    2cea:	cd bf       	out	0x3d, r28	; 61
    2cec:	cf 91       	pop	r28
    2cee:	df 91       	pop	r29
    2cf0:	08 95       	ret

00002cf2 <LCD_clearScreen>:

void LCD_clearScreen(void)
{
    2cf2:	df 93       	push	r29
    2cf4:	cf 93       	push	r28
    2cf6:	cd b7       	in	r28, 0x3d	; 61
    2cf8:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND); /* Clear display */
    2cfa:	81 e0       	ldi	r24, 0x01	; 1
    2cfc:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <LCD_sendCommand>
}
    2d00:	cf 91       	pop	r28
    2d02:	df 91       	pop	r29
    2d04:	08 95       	ret

00002d06 <EEPROM_init>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 ******************************************************************************************/
void EEPROM_init(void)
{
    2d06:	df 93       	push	r29
    2d08:	cf 93       	push	r28
    2d0a:	cd b7       	in	r28, 0x3d	; 61
    2d0c:	de b7       	in	r29, 0x3e	; 62
    2d0e:	2b 97       	sbiw	r28, 0x0b	; 11
    2d10:	0f b6       	in	r0, 0x3f	; 63
    2d12:	f8 94       	cli
    2d14:	de bf       	out	0x3e, r29	; 62
    2d16:	0f be       	out	0x3f, r0	; 63
    2d18:	cd bf       	out	0x3d, r28	; 61
	/* TWI Driver Configurations */
	TWI_ConfigType TWI_Config = {0x01,SCL_FREQ_400KBPS,PRESCALER_1};
    2d1a:	ce 01       	movw	r24, r28
    2d1c:	01 96       	adiw	r24, 0x01	; 1
    2d1e:	98 87       	std	Y+8, r25	; 0x08
    2d20:	8f 83       	std	Y+7, r24	; 0x07
    2d22:	e4 e9       	ldi	r30, 0x94	; 148
    2d24:	f0 e0       	ldi	r31, 0x00	; 0
    2d26:	fa 87       	std	Y+10, r31	; 0x0a
    2d28:	e9 87       	std	Y+9, r30	; 0x09
    2d2a:	f6 e0       	ldi	r31, 0x06	; 6
    2d2c:	fb 87       	std	Y+11, r31	; 0x0b
    2d2e:	e9 85       	ldd	r30, Y+9	; 0x09
    2d30:	fa 85       	ldd	r31, Y+10	; 0x0a
    2d32:	00 80       	ld	r0, Z
    2d34:	89 85       	ldd	r24, Y+9	; 0x09
    2d36:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d38:	01 96       	adiw	r24, 0x01	; 1
    2d3a:	9a 87       	std	Y+10, r25	; 0x0a
    2d3c:	89 87       	std	Y+9, r24	; 0x09
    2d3e:	ef 81       	ldd	r30, Y+7	; 0x07
    2d40:	f8 85       	ldd	r31, Y+8	; 0x08
    2d42:	00 82       	st	Z, r0
    2d44:	8f 81       	ldd	r24, Y+7	; 0x07
    2d46:	98 85       	ldd	r25, Y+8	; 0x08
    2d48:	01 96       	adiw	r24, 0x01	; 1
    2d4a:	98 87       	std	Y+8, r25	; 0x08
    2d4c:	8f 83       	std	Y+7, r24	; 0x07
    2d4e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2d50:	91 50       	subi	r25, 0x01	; 1
    2d52:	9b 87       	std	Y+11, r25	; 0x0b
    2d54:	eb 85       	ldd	r30, Y+11	; 0x0b
    2d56:	ee 23       	and	r30, r30
    2d58:	51 f7       	brne	.-44     	; 0x2d2e <EEPROM_init+0x28>

	/* Just initialize the I2C(TWI) module inside the MC */
	TWI_init(&TWI_Config);
    2d5a:	ce 01       	movw	r24, r28
    2d5c:	01 96       	adiw	r24, 0x01	; 1
    2d5e:	0e 94 bc 07 	call	0xf78	; 0xf78 <TWI_init>
}
    2d62:	2b 96       	adiw	r28, 0x0b	; 11
    2d64:	0f b6       	in	r0, 0x3f	; 63
    2d66:	f8 94       	cli
    2d68:	de bf       	out	0x3e, r29	; 62
    2d6a:	0f be       	out	0x3f, r0	; 63
    2d6c:	cd bf       	out	0x3d, r28	; 61
    2d6e:	cf 91       	pop	r28
    2d70:	df 91       	pop	r29
    2d72:	08 95       	ret

00002d74 <EEPROM_writeByte>:
 * [in/out]		 	None
 *
 * [Returns]:       Status of this function (SUCCESS, ERROR)
 ******************************************************************************************/
uint8_t EEPROM_writeByte(uint16_t u16addr, uint8_t u8data)
{
    2d74:	df 93       	push	r29
    2d76:	cf 93       	push	r28
    2d78:	00 d0       	rcall	.+0      	; 0x2d7a <EEPROM_writeByte+0x6>
    2d7a:	00 d0       	rcall	.+0      	; 0x2d7c <EEPROM_writeByte+0x8>
    2d7c:	cd b7       	in	r28, 0x3d	; 61
    2d7e:	de b7       	in	r29, 0x3e	; 62
    2d80:	9a 83       	std	Y+2, r25	; 0x02
    2d82:	89 83       	std	Y+1, r24	; 0x01
    2d84:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    2d86:	0e 94 21 08 	call	0x1042	; 0x1042 <TWI_start>
    if (TWI_getStatus() != TW_START)
    2d8a:	0e 94 79 08 	call	0x10f2	; 0x10f2 <TWI_getStatus>
    2d8e:	88 30       	cpi	r24, 0x08	; 8
    2d90:	11 f0       	breq	.+4      	; 0x2d96 <EEPROM_writeByte+0x22>
        return ERROR;
    2d92:	1c 82       	std	Y+4, r1	; 0x04
    2d94:	28 c0       	rjmp	.+80     	; 0x2de6 <EEPROM_writeByte+0x72>
		
    /*
     * Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write)
     */
    TWI_write((uint8_t)(0xA0 | ((u16addr & 0x0700)>>7)));
    2d96:	89 81       	ldd	r24, Y+1	; 0x01
    2d98:	9a 81       	ldd	r25, Y+2	; 0x02
    2d9a:	80 70       	andi	r24, 0x00	; 0
    2d9c:	97 70       	andi	r25, 0x07	; 7
    2d9e:	88 0f       	add	r24, r24
    2da0:	89 2f       	mov	r24, r25
    2da2:	88 1f       	adc	r24, r24
    2da4:	99 0b       	sbc	r25, r25
    2da6:	91 95       	neg	r25
    2da8:	80 6a       	ori	r24, 0xA0	; 160
    2daa:	0e 94 3c 08 	call	0x1078	; 0x1078 <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_W_ACK)
    2dae:	0e 94 79 08 	call	0x10f2	; 0x10f2 <TWI_getStatus>
    2db2:	88 31       	cpi	r24, 0x18	; 24
    2db4:	11 f0       	breq	.+4      	; 0x2dba <EEPROM_writeByte+0x46>
        return ERROR; 
    2db6:	1c 82       	std	Y+4, r1	; 0x04
    2db8:	16 c0       	rjmp	.+44     	; 0x2de6 <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_write((uint8_t)(u16addr));
    2dba:	89 81       	ldd	r24, Y+1	; 0x01
    2dbc:	0e 94 3c 08 	call	0x1078	; 0x1078 <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
    2dc0:	0e 94 79 08 	call	0x10f2	; 0x10f2 <TWI_getStatus>
    2dc4:	88 32       	cpi	r24, 0x28	; 40
    2dc6:	11 f0       	breq	.+4      	; 0x2dcc <EEPROM_writeByte+0x58>
        return ERROR;
    2dc8:	1c 82       	std	Y+4, r1	; 0x04
    2dca:	0d c0       	rjmp	.+26     	; 0x2de6 <EEPROM_writeByte+0x72>
		
    /* Write byte to EEPROM */
    TWI_write(u8data);
    2dcc:	8b 81       	ldd	r24, Y+3	; 0x03
    2dce:	0e 94 3c 08 	call	0x1078	; 0x1078 <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
    2dd2:	0e 94 79 08 	call	0x10f2	; 0x10f2 <TWI_getStatus>
    2dd6:	88 32       	cpi	r24, 0x28	; 40
    2dd8:	11 f0       	breq	.+4      	; 0x2dde <EEPROM_writeByte+0x6a>
        return ERROR;
    2dda:	1c 82       	std	Y+4, r1	; 0x04
    2ddc:	04 c0       	rjmp	.+8      	; 0x2de6 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    2dde:	0e 94 31 08 	call	0x1062	; 0x1062 <TWI_stop>
	
    return SUCCESS;
    2de2:	81 e0       	ldi	r24, 0x01	; 1
    2de4:	8c 83       	std	Y+4, r24	; 0x04
    2de6:	8c 81       	ldd	r24, Y+4	; 0x04
}
    2de8:	0f 90       	pop	r0
    2dea:	0f 90       	pop	r0
    2dec:	0f 90       	pop	r0
    2dee:	0f 90       	pop	r0
    2df0:	cf 91       	pop	r28
    2df2:	df 91       	pop	r29
    2df4:	08 95       	ret

00002df6 <EEPROM_readByte>:
 * [in/out]		 	None
 *
 * [Returns]:       Status of this function (SUCCESS, ERROR)
 ******************************************************************************************/
uint8_t EEPROM_readByte(uint16_t u16addr, uint8_t * u8data)
{
    2df6:	df 93       	push	r29
    2df8:	cf 93       	push	r28
    2dfa:	00 d0       	rcall	.+0      	; 0x2dfc <EEPROM_readByte+0x6>
    2dfc:	00 d0       	rcall	.+0      	; 0x2dfe <EEPROM_readByte+0x8>
    2dfe:	0f 92       	push	r0
    2e00:	cd b7       	in	r28, 0x3d	; 61
    2e02:	de b7       	in	r29, 0x3e	; 62
    2e04:	9a 83       	std	Y+2, r25	; 0x02
    2e06:	89 83       	std	Y+1, r24	; 0x01
    2e08:	7c 83       	std	Y+4, r23	; 0x04
    2e0a:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    2e0c:	0e 94 21 08 	call	0x1042	; 0x1042 <TWI_start>
    if (TWI_getStatus() != TW_START)
    2e10:	0e 94 79 08 	call	0x10f2	; 0x10f2 <TWI_getStatus>
    2e14:	88 30       	cpi	r24, 0x08	; 8
    2e16:	11 f0       	breq	.+4      	; 0x2e1c <EEPROM_readByte+0x26>
        return ERROR;
    2e18:	1d 82       	std	Y+5, r1	; 0x05
    2e1a:	44 c0       	rjmp	.+136    	; 0x2ea4 <EEPROM_readByte+0xae>
		
    /*
     * Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write)
     */
    TWI_write((uint8_t)((0xA0) | ((u16addr & 0x0700)>>7)));
    2e1c:	89 81       	ldd	r24, Y+1	; 0x01
    2e1e:	9a 81       	ldd	r25, Y+2	; 0x02
    2e20:	80 70       	andi	r24, 0x00	; 0
    2e22:	97 70       	andi	r25, 0x07	; 7
    2e24:	88 0f       	add	r24, r24
    2e26:	89 2f       	mov	r24, r25
    2e28:	88 1f       	adc	r24, r24
    2e2a:	99 0b       	sbc	r25, r25
    2e2c:	91 95       	neg	r25
    2e2e:	80 6a       	ori	r24, 0xA0	; 160
    2e30:	0e 94 3c 08 	call	0x1078	; 0x1078 <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_W_ACK)
    2e34:	0e 94 79 08 	call	0x10f2	; 0x10f2 <TWI_getStatus>
    2e38:	88 31       	cpi	r24, 0x18	; 24
    2e3a:	11 f0       	breq	.+4      	; 0x2e40 <EEPROM_readByte+0x4a>
        return ERROR;
    2e3c:	1d 82       	std	Y+5, r1	; 0x05
    2e3e:	32 c0       	rjmp	.+100    	; 0x2ea4 <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_write((uint8_t)(u16addr));
    2e40:	89 81       	ldd	r24, Y+1	; 0x01
    2e42:	0e 94 3c 08 	call	0x1078	; 0x1078 <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
    2e46:	0e 94 79 08 	call	0x10f2	; 0x10f2 <TWI_getStatus>
    2e4a:	88 32       	cpi	r24, 0x28	; 40
    2e4c:	11 f0       	breq	.+4      	; 0x2e52 <EEPROM_readByte+0x5c>
        return ERROR;
    2e4e:	1d 82       	std	Y+5, r1	; 0x05
    2e50:	29 c0       	rjmp	.+82     	; 0x2ea4 <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    2e52:	0e 94 21 08 	call	0x1042	; 0x1042 <TWI_start>
    if (TWI_getStatus() != TW_REP_START)
    2e56:	0e 94 79 08 	call	0x10f2	; 0x10f2 <TWI_getStatus>
    2e5a:	80 31       	cpi	r24, 0x10	; 16
    2e5c:	11 f0       	breq	.+4      	; 0x2e62 <EEPROM_readByte+0x6c>
        return ERROR;
    2e5e:	1d 82       	std	Y+5, r1	; 0x05
    2e60:	21 c0       	rjmp	.+66     	; 0x2ea4 <EEPROM_readByte+0xae>
		
    /*
     * Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read)
     */
    TWI_write((uint8_t)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    2e62:	89 81       	ldd	r24, Y+1	; 0x01
    2e64:	9a 81       	ldd	r25, Y+2	; 0x02
    2e66:	80 70       	andi	r24, 0x00	; 0
    2e68:	97 70       	andi	r25, 0x07	; 7
    2e6a:	88 0f       	add	r24, r24
    2e6c:	89 2f       	mov	r24, r25
    2e6e:	88 1f       	adc	r24, r24
    2e70:	99 0b       	sbc	r25, r25
    2e72:	91 95       	neg	r25
    2e74:	81 6a       	ori	r24, 0xA1	; 161
    2e76:	0e 94 3c 08 	call	0x1078	; 0x1078 <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_R_ACK)
    2e7a:	0e 94 79 08 	call	0x10f2	; 0x10f2 <TWI_getStatus>
    2e7e:	80 34       	cpi	r24, 0x40	; 64
    2e80:	11 f0       	breq	.+4      	; 0x2e86 <EEPROM_readByte+0x90>
        return ERROR;
    2e82:	1d 82       	std	Y+5, r1	; 0x05
    2e84:	0f c0       	rjmp	.+30     	; 0x2ea4 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readWithNACK();
    2e86:	0e 94 66 08 	call	0x10cc	; 0x10cc <TWI_readWithNACK>
    2e8a:	eb 81       	ldd	r30, Y+3	; 0x03
    2e8c:	fc 81       	ldd	r31, Y+4	; 0x04
    2e8e:	80 83       	st	Z, r24
    if (TWI_getStatus() != TW_MR_DATA_NACK)
    2e90:	0e 94 79 08 	call	0x10f2	; 0x10f2 <TWI_getStatus>
    2e94:	88 35       	cpi	r24, 0x58	; 88
    2e96:	11 f0       	breq	.+4      	; 0x2e9c <EEPROM_readByte+0xa6>
        return ERROR;
    2e98:	1d 82       	std	Y+5, r1	; 0x05
    2e9a:	04 c0       	rjmp	.+8      	; 0x2ea4 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    2e9c:	0e 94 31 08 	call	0x1062	; 0x1062 <TWI_stop>
    return SUCCESS;
    2ea0:	81 e0       	ldi	r24, 0x01	; 1
    2ea2:	8d 83       	std	Y+5, r24	; 0x05
    2ea4:	8d 81       	ldd	r24, Y+5	; 0x05
}
    2ea6:	0f 90       	pop	r0
    2ea8:	0f 90       	pop	r0
    2eaa:	0f 90       	pop	r0
    2eac:	0f 90       	pop	r0
    2eae:	0f 90       	pop	r0
    2eb0:	cf 91       	pop	r28
    2eb2:	df 91       	pop	r29
    2eb4:	08 95       	ret

00002eb6 <App_init>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 *******************************************************************************/
void App_init(void)
{
    2eb6:	df 93       	push	r29
    2eb8:	cf 93       	push	r28
    2eba:	cd b7       	in	r28, 0x3d	; 61
    2ebc:	de b7       	in	r29, 0x3e	; 62
    2ebe:	2d 97       	sbiw	r28, 0x0d	; 13
    2ec0:	0f b6       	in	r0, 0x3f	; 63
    2ec2:	f8 94       	cli
    2ec4:	de bf       	out	0x3e, r29	; 62
    2ec6:	0f be       	out	0x3f, r0	; 63
    2ec8:	cd bf       	out	0x3d, r28	; 61
	UART_ConfigType uart_config = {BPS_9600, NORMAL_SPEED, EIGHT_BITS, DISABLED, ONE_BIT};
    2eca:	ce 01       	movw	r24, r28
    2ecc:	01 96       	adiw	r24, 0x01	; 1
    2ece:	9a 87       	std	Y+10, r25	; 0x0a
    2ed0:	89 87       	std	Y+9, r24	; 0x09
    2ed2:	ea e9       	ldi	r30, 0x9A	; 154
    2ed4:	f0 e0       	ldi	r31, 0x00	; 0
    2ed6:	fc 87       	std	Y+12, r31	; 0x0c
    2ed8:	eb 87       	std	Y+11, r30	; 0x0b
    2eda:	f8 e0       	ldi	r31, 0x08	; 8
    2edc:	fd 87       	std	Y+13, r31	; 0x0d
    2ede:	eb 85       	ldd	r30, Y+11	; 0x0b
    2ee0:	fc 85       	ldd	r31, Y+12	; 0x0c
    2ee2:	00 80       	ld	r0, Z
    2ee4:	8b 85       	ldd	r24, Y+11	; 0x0b
    2ee6:	9c 85       	ldd	r25, Y+12	; 0x0c
    2ee8:	01 96       	adiw	r24, 0x01	; 1
    2eea:	9c 87       	std	Y+12, r25	; 0x0c
    2eec:	8b 87       	std	Y+11, r24	; 0x0b
    2eee:	e9 85       	ldd	r30, Y+9	; 0x09
    2ef0:	fa 85       	ldd	r31, Y+10	; 0x0a
    2ef2:	00 82       	st	Z, r0
    2ef4:	89 85       	ldd	r24, Y+9	; 0x09
    2ef6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ef8:	01 96       	adiw	r24, 0x01	; 1
    2efa:	9a 87       	std	Y+10, r25	; 0x0a
    2efc:	89 87       	std	Y+9, r24	; 0x09
    2efe:	9d 85       	ldd	r25, Y+13	; 0x0d
    2f00:	91 50       	subi	r25, 0x01	; 1
    2f02:	9d 87       	std	Y+13, r25	; 0x0d
    2f04:	ed 85       	ldd	r30, Y+13	; 0x0d
    2f06:	ee 23       	and	r30, r30
    2f08:	51 f7       	brne	.-44     	; 0x2ede <App_init+0x28>
	UART_init(&uart_config);
    2f0a:	ce 01       	movw	r24, r28
    2f0c:	01 96       	adiw	r24, 0x01	; 1
    2f0e:	0e 94 a3 05 	call	0xb46	; 0xb46 <UART_init>

	EEPROM_init();	/* Initialize the external EEPROM */
    2f12:	0e 94 83 16 	call	0x2d06	; 0x2d06 <EEPROM_init>
}
    2f16:	2d 96       	adiw	r28, 0x0d	; 13
    2f18:	0f b6       	in	r0, 0x3f	; 63
    2f1a:	f8 94       	cli
    2f1c:	de bf       	out	0x3e, r29	; 62
    2f1e:	0f be       	out	0x3f, r0	; 63
    2f20:	cd bf       	out	0x3d, r28	; 61
    2f22:	cf 91       	pop	r28
    2f24:	df 91       	pop	r29
    2f26:	08 95       	ret

00002f28 <APP_convertDecimal>:
 * [in/out]		 	None
 *
 * [Returns]:       Unsigned long that contains the decimal value
 *******************************************************************************/
uint16_t APP_convertDecimal(uint16_t au16_num)
{
    2f28:	df 93       	push	r29
    2f2a:	cf 93       	push	r28
    2f2c:	cd b7       	in	r28, 0x3d	; 61
    2f2e:	de b7       	in	r29, 0x3e	; 62
    2f30:	28 97       	sbiw	r28, 0x08	; 8
    2f32:	0f b6       	in	r0, 0x3f	; 63
    2f34:	f8 94       	cli
    2f36:	de bf       	out	0x3e, r29	; 62
    2f38:	0f be       	out	0x3f, r0	; 63
    2f3a:	cd bf       	out	0x3d, r28	; 61
    2f3c:	98 87       	std	Y+8, r25	; 0x08
    2f3e:	8f 83       	std	Y+7, r24	; 0x07
    uint16_t decimal = 0;
    2f40:	1e 82       	std	Y+6, r1	; 0x06
    2f42:	1d 82       	std	Y+5, r1	; 0x05
    uint16_t i = 0;
    2f44:	1c 82       	std	Y+4, r1	; 0x04
    2f46:	1b 82       	std	Y+3, r1	; 0x03
    2f48:	30 c0       	rjmp	.+96     	; 0x2faa <APP_convertDecimal+0x82>
    uint16_t reminder;

    while (au16_num != 0)
    {
        reminder = au16_num % 10;
    2f4a:	8f 81       	ldd	r24, Y+7	; 0x07
    2f4c:	98 85       	ldd	r25, Y+8	; 0x08
    2f4e:	2a e0       	ldi	r18, 0x0A	; 10
    2f50:	30 e0       	ldi	r19, 0x00	; 0
    2f52:	b9 01       	movw	r22, r18
    2f54:	0e 94 8c 18 	call	0x3118	; 0x3118 <__udivmodhi4>
    2f58:	9a 83       	std	Y+2, r25	; 0x02
    2f5a:	89 83       	std	Y+1, r24	; 0x01
        au16_num /= 10;
    2f5c:	8f 81       	ldd	r24, Y+7	; 0x07
    2f5e:	98 85       	ldd	r25, Y+8	; 0x08
    2f60:	2a e0       	ldi	r18, 0x0A	; 10
    2f62:	30 e0       	ldi	r19, 0x00	; 0
    2f64:	b9 01       	movw	r22, r18
    2f66:	0e 94 8c 18 	call	0x3118	; 0x3118 <__udivmodhi4>
    2f6a:	cb 01       	movw	r24, r22
    2f6c:	98 87       	std	Y+8, r25	; 0x08
    2f6e:	8f 83       	std	Y+7, r24	; 0x07
        decimal += reminder *  power(2, i);
    2f70:	2b 81       	ldd	r18, Y+3	; 0x03
    2f72:	3c 81       	ldd	r19, Y+4	; 0x04
    2f74:	82 e0       	ldi	r24, 0x02	; 2
    2f76:	90 e0       	ldi	r25, 0x00	; 0
    2f78:	b9 01       	movw	r22, r18
    2f7a:	0e 94 e4 17 	call	0x2fc8	; 0x2fc8 <power>
    2f7e:	9c 01       	movw	r18, r24
    2f80:	89 81       	ldd	r24, Y+1	; 0x01
    2f82:	9a 81       	ldd	r25, Y+2	; 0x02
    2f84:	a9 01       	movw	r20, r18
    2f86:	48 9f       	mul	r20, r24
    2f88:	90 01       	movw	r18, r0
    2f8a:	49 9f       	mul	r20, r25
    2f8c:	30 0d       	add	r19, r0
    2f8e:	58 9f       	mul	r21, r24
    2f90:	30 0d       	add	r19, r0
    2f92:	11 24       	eor	r1, r1
    2f94:	8d 81       	ldd	r24, Y+5	; 0x05
    2f96:	9e 81       	ldd	r25, Y+6	; 0x06
    2f98:	82 0f       	add	r24, r18
    2f9a:	93 1f       	adc	r25, r19
    2f9c:	9e 83       	std	Y+6, r25	; 0x06
    2f9e:	8d 83       	std	Y+5, r24	; 0x05
        ++i;
    2fa0:	8b 81       	ldd	r24, Y+3	; 0x03
    2fa2:	9c 81       	ldd	r25, Y+4	; 0x04
    2fa4:	01 96       	adiw	r24, 0x01	; 1
    2fa6:	9c 83       	std	Y+4, r25	; 0x04
    2fa8:	8b 83       	std	Y+3, r24	; 0x03
{
    uint16_t decimal = 0;
    uint16_t i = 0;
    uint16_t reminder;

    while (au16_num != 0)
    2faa:	8f 81       	ldd	r24, Y+7	; 0x07
    2fac:	98 85       	ldd	r25, Y+8	; 0x08
    2fae:	00 97       	sbiw	r24, 0x00	; 0
    2fb0:	61 f6       	brne	.-104    	; 0x2f4a <APP_convertDecimal+0x22>
        au16_num /= 10;
        decimal += reminder *  power(2, i);
        ++i;
    }

  return decimal;
    2fb2:	8d 81       	ldd	r24, Y+5	; 0x05
    2fb4:	9e 81       	ldd	r25, Y+6	; 0x06
}
    2fb6:	28 96       	adiw	r28, 0x08	; 8
    2fb8:	0f b6       	in	r0, 0x3f	; 63
    2fba:	f8 94       	cli
    2fbc:	de bf       	out	0x3e, r29	; 62
    2fbe:	0f be       	out	0x3f, r0	; 63
    2fc0:	cd bf       	out	0x3d, r28	; 61
    2fc2:	cf 91       	pop	r28
    2fc4:	df 91       	pop	r29
    2fc6:	08 95       	ret

00002fc8 <power>:
 * [in/out]		 	None
 *
 * [Returns]:       Unsigned long that contains the power of the number
 *******************************************************************************/
uint16_t power(uint16_t au16_base, uint16_t au16_exponent)
{
    2fc8:	df 93       	push	r29
    2fca:	cf 93       	push	r28
    2fcc:	00 d0       	rcall	.+0      	; 0x2fce <power+0x6>
    2fce:	00 d0       	rcall	.+0      	; 0x2fd0 <power+0x8>
    2fd0:	00 d0       	rcall	.+0      	; 0x2fd2 <power+0xa>
    2fd2:	cd b7       	in	r28, 0x3d	; 61
    2fd4:	de b7       	in	r29, 0x3e	; 62
    2fd6:	9c 83       	std	Y+4, r25	; 0x04
    2fd8:	8b 83       	std	Y+3, r24	; 0x03
    2fda:	7e 83       	std	Y+6, r23	; 0x06
    2fdc:	6d 83       	std	Y+5, r22	; 0x05
	uint16_t result = 1;
    2fde:	81 e0       	ldi	r24, 0x01	; 1
    2fe0:	90 e0       	ldi	r25, 0x00	; 0
    2fe2:	9a 83       	std	Y+2, r25	; 0x02
    2fe4:	89 83       	std	Y+1, r24	; 0x01
    2fe6:	13 c0       	rjmp	.+38     	; 0x300e <power+0x46>

	for(; au16_exponent > 0; au16_exponent--)
	{
		result = result * au16_base;
    2fe8:	29 81       	ldd	r18, Y+1	; 0x01
    2fea:	3a 81       	ldd	r19, Y+2	; 0x02
    2fec:	8b 81       	ldd	r24, Y+3	; 0x03
    2fee:	9c 81       	ldd	r25, Y+4	; 0x04
    2ff0:	ac 01       	movw	r20, r24
    2ff2:	24 9f       	mul	r18, r20
    2ff4:	c0 01       	movw	r24, r0
    2ff6:	25 9f       	mul	r18, r21
    2ff8:	90 0d       	add	r25, r0
    2ffa:	34 9f       	mul	r19, r20
    2ffc:	90 0d       	add	r25, r0
    2ffe:	11 24       	eor	r1, r1
    3000:	9a 83       	std	Y+2, r25	; 0x02
    3002:	89 83       	std	Y+1, r24	; 0x01
 *******************************************************************************/
uint16_t power(uint16_t au16_base, uint16_t au16_exponent)
{
	uint16_t result = 1;

	for(; au16_exponent > 0; au16_exponent--)
    3004:	8d 81       	ldd	r24, Y+5	; 0x05
    3006:	9e 81       	ldd	r25, Y+6	; 0x06
    3008:	01 97       	sbiw	r24, 0x01	; 1
    300a:	9e 83       	std	Y+6, r25	; 0x06
    300c:	8d 83       	std	Y+5, r24	; 0x05
    300e:	8d 81       	ldd	r24, Y+5	; 0x05
    3010:	9e 81       	ldd	r25, Y+6	; 0x06
    3012:	00 97       	sbiw	r24, 0x00	; 0
    3014:	49 f7       	brne	.-46     	; 0x2fe8 <power+0x20>
	{
		result = result * au16_base;
	}
	return result;
    3016:	89 81       	ldd	r24, Y+1	; 0x01
    3018:	9a 81       	ldd	r25, Y+2	; 0x02
}
    301a:	26 96       	adiw	r28, 0x06	; 6
    301c:	0f b6       	in	r0, 0x3f	; 63
    301e:	f8 94       	cli
    3020:	de bf       	out	0x3e, r29	; 62
    3022:	0f be       	out	0x3f, r0	; 63
    3024:	cd bf       	out	0x3d, r28	; 61
    3026:	cf 91       	pop	r28
    3028:	df 91       	pop	r29
    302a:	08 95       	ret

0000302c <App_Update>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 *******************************************************************************/
void App_Update(void)
{
    302c:	df 93       	push	r29
    302e:	cf 93       	push	r28
    3030:	00 d0       	rcall	.+0      	; 0x3032 <App_Update+0x6>
    3032:	cd b7       	in	r28, 0x3d	; 61
    3034:	de b7       	in	r29, 0x3e	; 62
	uint16_t au8_value = 0;	/* local variable to store the address as integer */
    3036:	1a 82       	std	Y+2, r1	; 0x02
    3038:	19 82       	std	Y+1, r1	; 0x01

	UART_receiveString(gStr8_message);		/* Receive string from terminal */
    303a:	8d ea       	ldi	r24, 0xAD	; 173
    303c:	90 e0       	ldi	r25, 0x00	; 0
    303e:	0e 94 29 07 	call	0xe52	; 0xe52 <UART_receiveString>

	/* Check if the message is write or read */
	if(strcmp(gStr8_message, "WRITE") == IDENTICAL)
    3042:	8d ea       	ldi	r24, 0xAD	; 173
    3044:	90 e0       	ldi	r25, 0x00	; 0
    3046:	20 e6       	ldi	r18, 0x60	; 96
    3048:	30 e0       	ldi	r19, 0x00	; 0
    304a:	b9 01       	movw	r22, r18
    304c:	0e 94 17 19 	call	0x322e	; 0x322e <strcmp>
    3050:	00 97       	sbiw	r24, 0x00	; 0
    3052:	21 f5       	brne	.+72     	; 0x309c <App_Update+0x70>
	{
		UART_receiveString(gStr8_address);	/* Receive address from terminal */
    3054:	82 ea       	ldi	r24, 0xA2	; 162
    3056:	90 e0       	ldi	r25, 0x00	; 0
    3058:	0e 94 29 07 	call	0xe52	; 0xe52 <UART_receiveString>
		au8_value = atoi(gStr8_address);
    305c:	82 ea       	ldi	r24, 0xA2	; 162
    305e:	90 e0       	ldi	r25, 0x00	; 0
    3060:	0e 94 f9 18 	call	0x31f2	; 0x31f2 <atoi>
    3064:	9a 83       	std	Y+2, r25	; 0x02
    3066:	89 83       	std	Y+1, r24	; 0x01

		au8_value = APP_convertDecimal(au8_value);/* Convert the value from binary to decimal */
    3068:	89 81       	ldd	r24, Y+1	; 0x01
    306a:	9a 81       	ldd	r25, Y+2	; 0x02
    306c:	0e 94 94 17 	call	0x2f28	; 0x2f28 <APP_convertDecimal>
    3070:	9a 83       	std	Y+2, r25	; 0x02
    3072:	89 83       	std	Y+1, r24	; 0x01

		UART_sendString("OK\r");			/* Receive acknowledge from terminal */
    3074:	86 e6       	ldi	r24, 0x66	; 102
    3076:	90 e0       	ldi	r25, 0x00	; 0
    3078:	0e 94 00 07 	call	0xe00	; 0xe00 <UART_sendString>
		gu8_WriteData = UART_recieveByte();	/* Receive data from terminal */
    307c:	0e 94 f1 06 	call	0xde2	; 0xde2 <UART_recieveByte>
    3080:	80 93 ac 00 	sts	0x00AC, r24

		EEPROM_writeByte(au8_value, gu8_WriteData);	/* Write data in the external EEPROM */
    3084:	20 91 ac 00 	lds	r18, 0x00AC
    3088:	89 81       	ldd	r24, Y+1	; 0x01
    308a:	9a 81       	ldd	r25, Y+2	; 0x02
    308c:	62 2f       	mov	r22, r18
    308e:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <EEPROM_writeByte>
		UART_sendString("\rOK\r\r");
    3092:	8a e6       	ldi	r24, 0x6A	; 106
    3094:	90 e0       	ldi	r25, 0x00	; 0
    3096:	0e 94 00 07 	call	0xe00	; 0xe00 <UART_sendString>
    309a:	30 c0       	rjmp	.+96     	; 0x30fc <App_Update+0xd0>
	}
	else if(strcmp(gStr8_message, "READ") == IDENTICAL)
    309c:	8d ea       	ldi	r24, 0xAD	; 173
    309e:	90 e0       	ldi	r25, 0x00	; 0
    30a0:	20 e7       	ldi	r18, 0x70	; 112
    30a2:	30 e0       	ldi	r19, 0x00	; 0
    30a4:	b9 01       	movw	r22, r18
    30a6:	0e 94 17 19 	call	0x322e	; 0x322e <strcmp>
    30aa:	00 97       	sbiw	r24, 0x00	; 0
    30ac:	39 f5       	brne	.+78     	; 0x30fc <App_Update+0xd0>
	{
		UART_receiveString(gStr8_address);	/* Receive string from terminal */
    30ae:	82 ea       	ldi	r24, 0xA2	; 162
    30b0:	90 e0       	ldi	r25, 0x00	; 0
    30b2:	0e 94 29 07 	call	0xe52	; 0xe52 <UART_receiveString>
		au8_value = atoi(gStr8_address);
    30b6:	82 ea       	ldi	r24, 0xA2	; 162
    30b8:	90 e0       	ldi	r25, 0x00	; 0
    30ba:	0e 94 f9 18 	call	0x31f2	; 0x31f2 <atoi>
    30be:	9a 83       	std	Y+2, r25	; 0x02
    30c0:	89 83       	std	Y+1, r24	; 0x01

		au8_value = APP_convertDecimal(au8_value);/* Convert the value from binary to decimal */
    30c2:	89 81       	ldd	r24, Y+1	; 0x01
    30c4:	9a 81       	ldd	r25, Y+2	; 0x02
    30c6:	0e 94 94 17 	call	0x2f28	; 0x2f28 <APP_convertDecimal>
    30ca:	9a 83       	std	Y+2, r25	; 0x02
    30cc:	89 83       	std	Y+1, r24	; 0x01

		UART_sendString("OK\r");				/* Receive acknowledge from terminal */
    30ce:	86 e6       	ldi	r24, 0x66	; 102
    30d0:	90 e0       	ldi	r25, 0x00	; 0
    30d2:	0e 94 00 07 	call	0xe00	; 0xe00 <UART_sendString>
		EEPROM_readByte(au8_value, &gu8_ReadData);	/* Read data in the external EEPROM */
    30d6:	89 81       	ldd	r24, Y+1	; 0x01
    30d8:	9a 81       	ldd	r25, Y+2	; 0x02
    30da:	27 eb       	ldi	r18, 0xB7	; 183
    30dc:	30 e0       	ldi	r19, 0x00	; 0
    30de:	b9 01       	movw	r22, r18
    30e0:	0e 94 fb 16 	call	0x2df6	; 0x2df6 <EEPROM_readByte>

		UART_sendString("The data stored is ");
    30e4:	85 e7       	ldi	r24, 0x75	; 117
    30e6:	90 e0       	ldi	r25, 0x00	; 0
    30e8:	0e 94 00 07 	call	0xe00	; 0xe00 <UART_sendString>
		UART_sendByte(gu8_ReadData);
    30ec:	80 91 b7 00 	lds	r24, 0x00B7
    30f0:	0e 94 da 06 	call	0xdb4	; 0xdb4 <UART_sendByte>
		UART_sendString("\r\r");
    30f4:	89 e8       	ldi	r24, 0x89	; 137
    30f6:	90 e0       	ldi	r25, 0x00	; 0
    30f8:	0e 94 00 07 	call	0xe00	; 0xe00 <UART_sendString>
	}
}
    30fc:	0f 90       	pop	r0
    30fe:	0f 90       	pop	r0
    3100:	cf 91       	pop	r28
    3102:	df 91       	pop	r29
    3104:	08 95       	ret

00003106 <main>:
/*****************************************************************************************
 *                                MAIN FUNCTION                                          *
 *****************************************************************************************/

int main(void)
{
    3106:	df 93       	push	r29
    3108:	cf 93       	push	r28
    310a:	cd b7       	in	r28, 0x3d	; 61
    310c:	de b7       	in	r29, 0x3e	; 62
	/********************************************************************************
	 *                           SYSTEM INITIALIZATION                              *
	 ********************************************************************************/

	App_init();	/* Initialize the application */
    310e:	0e 94 5b 17 	call	0x2eb6	; 0x2eb6 <App_init>
	 *                        APPLICATION	(SUPER LOOP)						    *
	 ********************************************************************************/

	while(1)
	{
		App_Update();
    3112:	0e 94 16 18 	call	0x302c	; 0x302c <App_Update>
    3116:	fd cf       	rjmp	.-6      	; 0x3112 <main+0xc>

00003118 <__udivmodhi4>:
    3118:	aa 1b       	sub	r26, r26
    311a:	bb 1b       	sub	r27, r27
    311c:	51 e1       	ldi	r21, 0x11	; 17
    311e:	07 c0       	rjmp	.+14     	; 0x312e <__udivmodhi4_ep>

00003120 <__udivmodhi4_loop>:
    3120:	aa 1f       	adc	r26, r26
    3122:	bb 1f       	adc	r27, r27
    3124:	a6 17       	cp	r26, r22
    3126:	b7 07       	cpc	r27, r23
    3128:	10 f0       	brcs	.+4      	; 0x312e <__udivmodhi4_ep>
    312a:	a6 1b       	sub	r26, r22
    312c:	b7 0b       	sbc	r27, r23

0000312e <__udivmodhi4_ep>:
    312e:	88 1f       	adc	r24, r24
    3130:	99 1f       	adc	r25, r25
    3132:	5a 95       	dec	r21
    3134:	a9 f7       	brne	.-22     	; 0x3120 <__udivmodhi4_loop>
    3136:	80 95       	com	r24
    3138:	90 95       	com	r25
    313a:	bc 01       	movw	r22, r24
    313c:	cd 01       	movw	r24, r26
    313e:	08 95       	ret

00003140 <__udivmodsi4>:
    3140:	a1 e2       	ldi	r26, 0x21	; 33
    3142:	1a 2e       	mov	r1, r26
    3144:	aa 1b       	sub	r26, r26
    3146:	bb 1b       	sub	r27, r27
    3148:	fd 01       	movw	r30, r26
    314a:	0d c0       	rjmp	.+26     	; 0x3166 <__udivmodsi4_ep>

0000314c <__udivmodsi4_loop>:
    314c:	aa 1f       	adc	r26, r26
    314e:	bb 1f       	adc	r27, r27
    3150:	ee 1f       	adc	r30, r30
    3152:	ff 1f       	adc	r31, r31
    3154:	a2 17       	cp	r26, r18
    3156:	b3 07       	cpc	r27, r19
    3158:	e4 07       	cpc	r30, r20
    315a:	f5 07       	cpc	r31, r21
    315c:	20 f0       	brcs	.+8      	; 0x3166 <__udivmodsi4_ep>
    315e:	a2 1b       	sub	r26, r18
    3160:	b3 0b       	sbc	r27, r19
    3162:	e4 0b       	sbc	r30, r20
    3164:	f5 0b       	sbc	r31, r21

00003166 <__udivmodsi4_ep>:
    3166:	66 1f       	adc	r22, r22
    3168:	77 1f       	adc	r23, r23
    316a:	88 1f       	adc	r24, r24
    316c:	99 1f       	adc	r25, r25
    316e:	1a 94       	dec	r1
    3170:	69 f7       	brne	.-38     	; 0x314c <__udivmodsi4_loop>
    3172:	60 95       	com	r22
    3174:	70 95       	com	r23
    3176:	80 95       	com	r24
    3178:	90 95       	com	r25
    317a:	9b 01       	movw	r18, r22
    317c:	ac 01       	movw	r20, r24
    317e:	bd 01       	movw	r22, r26
    3180:	cf 01       	movw	r24, r30
    3182:	08 95       	ret

00003184 <__prologue_saves__>:
    3184:	2f 92       	push	r2
    3186:	3f 92       	push	r3
    3188:	4f 92       	push	r4
    318a:	5f 92       	push	r5
    318c:	6f 92       	push	r6
    318e:	7f 92       	push	r7
    3190:	8f 92       	push	r8
    3192:	9f 92       	push	r9
    3194:	af 92       	push	r10
    3196:	bf 92       	push	r11
    3198:	cf 92       	push	r12
    319a:	df 92       	push	r13
    319c:	ef 92       	push	r14
    319e:	ff 92       	push	r15
    31a0:	0f 93       	push	r16
    31a2:	1f 93       	push	r17
    31a4:	cf 93       	push	r28
    31a6:	df 93       	push	r29
    31a8:	cd b7       	in	r28, 0x3d	; 61
    31aa:	de b7       	in	r29, 0x3e	; 62
    31ac:	ca 1b       	sub	r28, r26
    31ae:	db 0b       	sbc	r29, r27
    31b0:	0f b6       	in	r0, 0x3f	; 63
    31b2:	f8 94       	cli
    31b4:	de bf       	out	0x3e, r29	; 62
    31b6:	0f be       	out	0x3f, r0	; 63
    31b8:	cd bf       	out	0x3d, r28	; 61
    31ba:	09 94       	ijmp

000031bc <__epilogue_restores__>:
    31bc:	2a 88       	ldd	r2, Y+18	; 0x12
    31be:	39 88       	ldd	r3, Y+17	; 0x11
    31c0:	48 88       	ldd	r4, Y+16	; 0x10
    31c2:	5f 84       	ldd	r5, Y+15	; 0x0f
    31c4:	6e 84       	ldd	r6, Y+14	; 0x0e
    31c6:	7d 84       	ldd	r7, Y+13	; 0x0d
    31c8:	8c 84       	ldd	r8, Y+12	; 0x0c
    31ca:	9b 84       	ldd	r9, Y+11	; 0x0b
    31cc:	aa 84       	ldd	r10, Y+10	; 0x0a
    31ce:	b9 84       	ldd	r11, Y+9	; 0x09
    31d0:	c8 84       	ldd	r12, Y+8	; 0x08
    31d2:	df 80       	ldd	r13, Y+7	; 0x07
    31d4:	ee 80       	ldd	r14, Y+6	; 0x06
    31d6:	fd 80       	ldd	r15, Y+5	; 0x05
    31d8:	0c 81       	ldd	r16, Y+4	; 0x04
    31da:	1b 81       	ldd	r17, Y+3	; 0x03
    31dc:	aa 81       	ldd	r26, Y+2	; 0x02
    31de:	b9 81       	ldd	r27, Y+1	; 0x01
    31e0:	ce 0f       	add	r28, r30
    31e2:	d1 1d       	adc	r29, r1
    31e4:	0f b6       	in	r0, 0x3f	; 63
    31e6:	f8 94       	cli
    31e8:	de bf       	out	0x3e, r29	; 62
    31ea:	0f be       	out	0x3f, r0	; 63
    31ec:	cd bf       	out	0x3d, r28	; 61
    31ee:	ed 01       	movw	r28, r26
    31f0:	08 95       	ret

000031f2 <atoi>:
    31f2:	fc 01       	movw	r30, r24
    31f4:	88 27       	eor	r24, r24
    31f6:	99 27       	eor	r25, r25
    31f8:	e8 94       	clt
    31fa:	21 91       	ld	r18, Z+
    31fc:	20 32       	cpi	r18, 0x20	; 32
    31fe:	e9 f3       	breq	.-6      	; 0x31fa <atoi+0x8>
    3200:	29 30       	cpi	r18, 0x09	; 9
    3202:	10 f0       	brcs	.+4      	; 0x3208 <atoi+0x16>
    3204:	2e 30       	cpi	r18, 0x0E	; 14
    3206:	c8 f3       	brcs	.-14     	; 0x31fa <atoi+0x8>
    3208:	2b 32       	cpi	r18, 0x2B	; 43
    320a:	41 f0       	breq	.+16     	; 0x321c <atoi+0x2a>
    320c:	2d 32       	cpi	r18, 0x2D	; 45
    320e:	39 f4       	brne	.+14     	; 0x321e <atoi+0x2c>
    3210:	68 94       	set
    3212:	04 c0       	rjmp	.+8      	; 0x321c <atoi+0x2a>
    3214:	0e 94 41 19 	call	0x3282	; 0x3282 <__mulhi_const_10>
    3218:	82 0f       	add	r24, r18
    321a:	91 1d       	adc	r25, r1
    321c:	21 91       	ld	r18, Z+
    321e:	20 53       	subi	r18, 0x30	; 48
    3220:	2a 30       	cpi	r18, 0x0A	; 10
    3222:	c0 f3       	brcs	.-16     	; 0x3214 <atoi+0x22>
    3224:	1e f4       	brtc	.+6      	; 0x322c <atoi+0x3a>
    3226:	90 95       	com	r25
    3228:	81 95       	neg	r24
    322a:	9f 4f       	sbci	r25, 0xFF	; 255
    322c:	08 95       	ret

0000322e <strcmp>:
    322e:	fb 01       	movw	r30, r22
    3230:	dc 01       	movw	r26, r24
    3232:	8d 91       	ld	r24, X+
    3234:	01 90       	ld	r0, Z+
    3236:	80 19       	sub	r24, r0
    3238:	01 10       	cpse	r0, r1
    323a:	d9 f3       	breq	.-10     	; 0x3232 <strcmp+0x4>
    323c:	99 0b       	sbc	r25, r25
    323e:	08 95       	ret

00003240 <itoa>:
    3240:	fb 01       	movw	r30, r22
    3242:	9f 01       	movw	r18, r30
    3244:	e8 94       	clt
    3246:	42 30       	cpi	r20, 0x02	; 2
    3248:	c4 f0       	brlt	.+48     	; 0x327a <itoa+0x3a>
    324a:	45 32       	cpi	r20, 0x25	; 37
    324c:	b4 f4       	brge	.+44     	; 0x327a <itoa+0x3a>
    324e:	4a 30       	cpi	r20, 0x0A	; 10
    3250:	29 f4       	brne	.+10     	; 0x325c <itoa+0x1c>
    3252:	97 fb       	bst	r25, 7
    3254:	1e f4       	brtc	.+6      	; 0x325c <itoa+0x1c>
    3256:	90 95       	com	r25
    3258:	81 95       	neg	r24
    325a:	9f 4f       	sbci	r25, 0xFF	; 255
    325c:	64 2f       	mov	r22, r20
    325e:	77 27       	eor	r23, r23
    3260:	0e 94 8c 18 	call	0x3118	; 0x3118 <__udivmodhi4>
    3264:	80 5d       	subi	r24, 0xD0	; 208
    3266:	8a 33       	cpi	r24, 0x3A	; 58
    3268:	0c f0       	brlt	.+2      	; 0x326c <itoa+0x2c>
    326a:	89 5d       	subi	r24, 0xD9	; 217
    326c:	81 93       	st	Z+, r24
    326e:	cb 01       	movw	r24, r22
    3270:	00 97       	sbiw	r24, 0x00	; 0
    3272:	a1 f7       	brne	.-24     	; 0x325c <itoa+0x1c>
    3274:	16 f4       	brtc	.+4      	; 0x327a <itoa+0x3a>
    3276:	5d e2       	ldi	r21, 0x2D	; 45
    3278:	51 93       	st	Z+, r21
    327a:	10 82       	st	Z, r1
    327c:	c9 01       	movw	r24, r18
    327e:	0c 94 49 19 	jmp	0x3292	; 0x3292 <strrev>

00003282 <__mulhi_const_10>:
    3282:	7a e0       	ldi	r23, 0x0A	; 10
    3284:	97 9f       	mul	r25, r23
    3286:	90 2d       	mov	r25, r0
    3288:	87 9f       	mul	r24, r23
    328a:	80 2d       	mov	r24, r0
    328c:	91 0d       	add	r25, r1
    328e:	11 24       	eor	r1, r1
    3290:	08 95       	ret

00003292 <strrev>:
    3292:	dc 01       	movw	r26, r24
    3294:	fc 01       	movw	r30, r24
    3296:	67 2f       	mov	r22, r23
    3298:	71 91       	ld	r23, Z+
    329a:	77 23       	and	r23, r23
    329c:	e1 f7       	brne	.-8      	; 0x3296 <strrev+0x4>
    329e:	32 97       	sbiw	r30, 0x02	; 2
    32a0:	04 c0       	rjmp	.+8      	; 0x32aa <strrev+0x18>
    32a2:	7c 91       	ld	r23, X
    32a4:	6d 93       	st	X+, r22
    32a6:	70 83       	st	Z, r23
    32a8:	62 91       	ld	r22, -Z
    32aa:	ae 17       	cp	r26, r30
    32ac:	bf 07       	cpc	r27, r31
    32ae:	c8 f3       	brcs	.-14     	; 0x32a2 <strrev+0x10>
    32b0:	08 95       	ret

000032b2 <_exit>:
    32b2:	f8 94       	cli

000032b4 <__stop_program>:
    32b4:	ff cf       	rjmp	.-2      	; 0x32b4 <__stop_program>
