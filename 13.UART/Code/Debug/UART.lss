
UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005b0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  000005b0  00000644  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  00800068  00800068  0000064c  2**0
                  ALLOC
  3 .stab         00000bc4  00000000  00000000  0000064c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000fff  00000000  00000000  00001210  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 eb       	ldi	r30, 0xB0	; 176
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a8 e6       	ldi	r26, 0x68	; 104
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 37       	cpi	r26, 0x7C	; 124
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 ab 02 	call	0x556	; 0x556 <main>
  8a:	0c 94 d6 02 	jmp	0x5ac	; 0x5ac <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <UART_init>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 ******************************************************************************************/
void UART_init(const UART_ConfigType * Config_Ptr)
{
  92:	0f 93       	push	r16
  94:	1f 93       	push	r17
  96:	df 93       	push	r29
  98:	cf 93       	push	r28
  9a:	00 d0       	rcall	.+0      	; 0x9c <UART_init+0xa>
  9c:	00 d0       	rcall	.+0      	; 0x9e <UART_init+0xc>
  9e:	cd b7       	in	r28, 0x3d	; 61
  a0:	de b7       	in	r29, 0x3e	; 62
  a2:	9a 83       	std	Y+2, r25	; 0x02
  a4:	89 83       	std	Y+1, r24	; 0x01
	/* Insert the required Mode in U2X bit in UCSRA Register */
	UCSRA = (UCSRA & 0xFD) | ( (Config_Ptr -> uart_Mode) << 1);
  a6:	ab e2       	ldi	r26, 0x2B	; 43
  a8:	b0 e0       	ldi	r27, 0x00	; 0
  aa:	eb e2       	ldi	r30, 0x2B	; 43
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	80 81       	ld	r24, Z
  b0:	28 2f       	mov	r18, r24
  b2:	2d 7f       	andi	r18, 0xFD	; 253
  b4:	e9 81       	ldd	r30, Y+1	; 0x01
  b6:	fa 81       	ldd	r31, Y+2	; 0x02
  b8:	84 81       	ldd	r24, Z+4	; 0x04
  ba:	88 2f       	mov	r24, r24
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	88 0f       	add	r24, r24
  c0:	99 1f       	adc	r25, r25
  c2:	82 2b       	or	r24, r18
  c4:	8c 93       	st	X, r24

	/* In Case of Nine Bit Data */
	if(Config_Ptr -> uart_DataBits == NINE_BITS)
  c6:	e9 81       	ldd	r30, Y+1	; 0x01
  c8:	fa 81       	ldd	r31, Y+2	; 0x02
  ca:	85 81       	ldd	r24, Z+5	; 0x05
  cc:	87 30       	cpi	r24, 0x07	; 7
  ce:	a1 f4       	brne	.+40     	; 0xf8 <UART_init+0x66>
	{
		/* Insert the last bit of required data bits in bit UCSZ2 in UCSRB Register */
		UCSRB = (UCSRB & 0xFB) | ( (Config_Ptr -> uart_DataBits) & 0x04);
  d0:	aa e2       	ldi	r26, 0x2A	; 42
  d2:	b0 e0       	ldi	r27, 0x00	; 0
  d4:	ea e2       	ldi	r30, 0x2A	; 42
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	80 81       	ld	r24, Z
  da:	98 2f       	mov	r25, r24
  dc:	9b 7f       	andi	r25, 0xFB	; 251
  de:	e9 81       	ldd	r30, Y+1	; 0x01
  e0:	fa 81       	ldd	r31, Y+2	; 0x02
  e2:	85 81       	ldd	r24, Z+5	; 0x05
  e4:	84 70       	andi	r24, 0x04	; 4
  e6:	89 2b       	or	r24, r25
  e8:	8c 93       	st	X, r24

		/* Two bits RXB8 & TXB8 must be Enabled in UCSRB Register */
		UCSRB |= (1 << RXB8) | (1 << TXB8);
  ea:	aa e2       	ldi	r26, 0x2A	; 42
  ec:	b0 e0       	ldi	r27, 0x00	; 0
  ee:	ea e2       	ldi	r30, 0x2A	; 42
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	80 81       	ld	r24, Z
  f4:	83 60       	ori	r24, 0x03	; 3
  f6:	8c 93       	st	X, r24

	/*
	 * Enable Transmitter & Receiver to be able to transmit and receive thought
	 * the UART driver
	 */
	UCSRB |= (1 << RXEN) | (1 << TXEN);
  f8:	aa e2       	ldi	r26, 0x2A	; 42
  fa:	b0 e0       	ldi	r27, 0x00	; 0
  fc:	ea e2       	ldi	r30, 0x2A	; 42
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	80 81       	ld	r24, Z
 102:	88 61       	ori	r24, 0x18	; 24
 104:	8c 93       	st	X, r24

	/* URSEL must be one when writing the UCSRC */
	UCSRC |= (1 << URSEL);
 106:	a0 e4       	ldi	r26, 0x40	; 64
 108:	b0 e0       	ldi	r27, 0x00	; 0
 10a:	e0 e4       	ldi	r30, 0x40	; 64
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	80 81       	ld	r24, Z
 110:	80 68       	ori	r24, 0x80	; 128
 112:	8c 93       	st	X, r24

	/*
	 * Insert the First two bits of required data bits in bits (UCSZ0, UCSZ1)
	 * in UCSRC Register in case of (5,6,7 or 8) Data bits
	 */
	UCSRC = (UCSRC & 0xF9) | ( (Config_Ptr -> uart_DataBits & 0x03) << 1);
 114:	a0 e4       	ldi	r26, 0x40	; 64
 116:	b0 e0       	ldi	r27, 0x00	; 0
 118:	e0 e4       	ldi	r30, 0x40	; 64
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	80 81       	ld	r24, Z
 11e:	28 2f       	mov	r18, r24
 120:	29 7f       	andi	r18, 0xF9	; 249
 122:	e9 81       	ldd	r30, Y+1	; 0x01
 124:	fa 81       	ldd	r31, Y+2	; 0x02
 126:	85 81       	ldd	r24, Z+5	; 0x05
 128:	88 2f       	mov	r24, r24
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	83 70       	andi	r24, 0x03	; 3
 12e:	90 70       	andi	r25, 0x00	; 0
 130:	88 0f       	add	r24, r24
 132:	99 1f       	adc	r25, r25
 134:	82 2b       	or	r24, r18
 136:	8c 93       	st	X, r24

	/* Insert the required parity type in bits (UPM0, UPM1) in UCSRC Register */
	UCSRC = (UCSRC & 0xCF) | ( (Config_Ptr -> uart_Parity) << 4);
 138:	a0 e4       	ldi	r26, 0x40	; 64
 13a:	b0 e0       	ldi	r27, 0x00	; 0
 13c:	e0 e4       	ldi	r30, 0x40	; 64
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	80 81       	ld	r24, Z
 142:	28 2f       	mov	r18, r24
 144:	2f 7c       	andi	r18, 0xCF	; 207
 146:	e9 81       	ldd	r30, Y+1	; 0x01
 148:	fa 81       	ldd	r31, Y+2	; 0x02
 14a:	86 81       	ldd	r24, Z+6	; 0x06
 14c:	88 2f       	mov	r24, r24
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	82 95       	swap	r24
 152:	92 95       	swap	r25
 154:	90 7f       	andi	r25, 0xF0	; 240
 156:	98 27       	eor	r25, r24
 158:	80 7f       	andi	r24, 0xF0	; 240
 15a:	98 27       	eor	r25, r24
 15c:	82 2b       	or	r24, r18
 15e:	8c 93       	st	X, r24

	/* Insert the required number of stop bit(s) in bit USBS in UCSRC Register */
	UCSRC = (UCSRC & 0xF7) | ( (Config_Ptr -> uart_StopBit) << 3);
 160:	a0 e4       	ldi	r26, 0x40	; 64
 162:	b0 e0       	ldi	r27, 0x00	; 0
 164:	e0 e4       	ldi	r30, 0x40	; 64
 166:	f0 e0       	ldi	r31, 0x00	; 0
 168:	80 81       	ld	r24, Z
 16a:	28 2f       	mov	r18, r24
 16c:	27 7f       	andi	r18, 0xF7	; 247
 16e:	e9 81       	ldd	r30, Y+1	; 0x01
 170:	fa 81       	ldd	r31, Y+2	; 0x02
 172:	87 81       	ldd	r24, Z+7	; 0x07
 174:	88 2f       	mov	r24, r24
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	88 0f       	add	r24, r24
 17a:	99 1f       	adc	r25, r25
 17c:	88 0f       	add	r24, r24
 17e:	99 1f       	adc	r25, r25
 180:	88 0f       	add	r24, r24
 182:	99 1f       	adc	r25, r25
 184:	82 2b       	or	r24, r18
 186:	8c 93       	st	X, r24
	/*
	 * This switch case is to choose between two Modes (Normal, Double Speed),
	 * then calculate and insert the required Baud rate in First 8 bits from the
	 * BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH
	 */
	switch(Config_Ptr -> uart_Mode)
 188:	e9 81       	ldd	r30, Y+1	; 0x01
 18a:	fa 81       	ldd	r31, Y+2	; 0x02
 18c:	84 81       	ldd	r24, Z+4	; 0x04
 18e:	28 2f       	mov	r18, r24
 190:	30 e0       	ldi	r19, 0x00	; 0
 192:	3c 83       	std	Y+4, r19	; 0x04
 194:	2b 83       	std	Y+3, r18	; 0x03
 196:	8b 81       	ldd	r24, Y+3	; 0x03
 198:	9c 81       	ldd	r25, Y+4	; 0x04
 19a:	00 97       	sbiw	r24, 0x00	; 0
 19c:	39 f0       	breq	.+14     	; 0x1ac <UART_init+0x11a>
 19e:	eb 81       	ldd	r30, Y+3	; 0x03
 1a0:	fc 81       	ldd	r31, Y+4	; 0x04
 1a2:	e1 30       	cpi	r30, 0x01	; 1
 1a4:	f1 05       	cpc	r31, r1
 1a6:	09 f4       	brne	.+2      	; 0x1aa <UART_init+0x118>
 1a8:	56 c0       	rjmp	.+172    	; 0x256 <UART_init+0x1c4>
 1aa:	a1 c0       	rjmp	.+322    	; 0x2ee <UART_init+0x25c>
	{
	case NORMAL_SPEED:	UBRRH = ( (((F_CPU / (Config_Ptr -> uart_BaudRate * 16UL))) - 1) >> 8 );
 1ac:	00 e4       	ldi	r16, 0x40	; 64
 1ae:	10 e0       	ldi	r17, 0x00	; 0
 1b0:	e9 81       	ldd	r30, Y+1	; 0x01
 1b2:	fa 81       	ldd	r31, Y+2	; 0x02
 1b4:	80 81       	ld	r24, Z
 1b6:	91 81       	ldd	r25, Z+1	; 0x01
 1b8:	a2 81       	ldd	r26, Z+2	; 0x02
 1ba:	b3 81       	ldd	r27, Z+3	; 0x03
 1bc:	88 0f       	add	r24, r24
 1be:	99 1f       	adc	r25, r25
 1c0:	aa 1f       	adc	r26, r26
 1c2:	bb 1f       	adc	r27, r27
 1c4:	88 0f       	add	r24, r24
 1c6:	99 1f       	adc	r25, r25
 1c8:	aa 1f       	adc	r26, r26
 1ca:	bb 1f       	adc	r27, r27
 1cc:	88 0f       	add	r24, r24
 1ce:	99 1f       	adc	r25, r25
 1d0:	aa 1f       	adc	r26, r26
 1d2:	bb 1f       	adc	r27, r27
 1d4:	88 0f       	add	r24, r24
 1d6:	99 1f       	adc	r25, r25
 1d8:	aa 1f       	adc	r26, r26
 1da:	bb 1f       	adc	r27, r27
 1dc:	9c 01       	movw	r18, r24
 1de:	ad 01       	movw	r20, r26
 1e0:	80 e0       	ldi	r24, 0x00	; 0
 1e2:	92 e1       	ldi	r25, 0x12	; 18
 1e4:	aa e7       	ldi	r26, 0x7A	; 122
 1e6:	b0 e0       	ldi	r27, 0x00	; 0
 1e8:	bc 01       	movw	r22, r24
 1ea:	cd 01       	movw	r24, r26
 1ec:	0e 94 b4 02 	call	0x568	; 0x568 <__udivmodsi4>
 1f0:	da 01       	movw	r26, r20
 1f2:	c9 01       	movw	r24, r18
 1f4:	01 97       	sbiw	r24, 0x01	; 1
 1f6:	a1 09       	sbc	r26, r1
 1f8:	b1 09       	sbc	r27, r1
 1fa:	89 2f       	mov	r24, r25
 1fc:	9a 2f       	mov	r25, r26
 1fe:	ab 2f       	mov	r26, r27
 200:	bb 27       	eor	r27, r27
 202:	f8 01       	movw	r30, r16
 204:	80 83       	st	Z, r24
						UBRRL = ( ((F_CPU / (Config_Ptr -> uart_BaudRate * 16UL))) - 1 );
 206:	09 e2       	ldi	r16, 0x29	; 41
 208:	10 e0       	ldi	r17, 0x00	; 0
 20a:	e9 81       	ldd	r30, Y+1	; 0x01
 20c:	fa 81       	ldd	r31, Y+2	; 0x02
 20e:	80 81       	ld	r24, Z
 210:	91 81       	ldd	r25, Z+1	; 0x01
 212:	a2 81       	ldd	r26, Z+2	; 0x02
 214:	b3 81       	ldd	r27, Z+3	; 0x03
 216:	88 0f       	add	r24, r24
 218:	99 1f       	adc	r25, r25
 21a:	aa 1f       	adc	r26, r26
 21c:	bb 1f       	adc	r27, r27
 21e:	88 0f       	add	r24, r24
 220:	99 1f       	adc	r25, r25
 222:	aa 1f       	adc	r26, r26
 224:	bb 1f       	adc	r27, r27
 226:	88 0f       	add	r24, r24
 228:	99 1f       	adc	r25, r25
 22a:	aa 1f       	adc	r26, r26
 22c:	bb 1f       	adc	r27, r27
 22e:	88 0f       	add	r24, r24
 230:	99 1f       	adc	r25, r25
 232:	aa 1f       	adc	r26, r26
 234:	bb 1f       	adc	r27, r27
 236:	9c 01       	movw	r18, r24
 238:	ad 01       	movw	r20, r26
 23a:	80 e0       	ldi	r24, 0x00	; 0
 23c:	92 e1       	ldi	r25, 0x12	; 18
 23e:	aa e7       	ldi	r26, 0x7A	; 122
 240:	b0 e0       	ldi	r27, 0x00	; 0
 242:	bc 01       	movw	r22, r24
 244:	cd 01       	movw	r24, r26
 246:	0e 94 b4 02 	call	0x568	; 0x568 <__udivmodsi4>
 24a:	da 01       	movw	r26, r20
 24c:	c9 01       	movw	r24, r18
 24e:	81 50       	subi	r24, 0x01	; 1
 250:	f8 01       	movw	r30, r16
 252:	80 83       	st	Z, r24
 254:	4c c0       	rjmp	.+152    	; 0x2ee <UART_init+0x25c>
						break;

	case DOUBLE_SPEED:	UBRRH = ( (((F_CPU / (Config_Ptr -> uart_BaudRate * 8UL))) - 1) >> 8 );
 256:	00 e4       	ldi	r16, 0x40	; 64
 258:	10 e0       	ldi	r17, 0x00	; 0
 25a:	e9 81       	ldd	r30, Y+1	; 0x01
 25c:	fa 81       	ldd	r31, Y+2	; 0x02
 25e:	80 81       	ld	r24, Z
 260:	91 81       	ldd	r25, Z+1	; 0x01
 262:	a2 81       	ldd	r26, Z+2	; 0x02
 264:	b3 81       	ldd	r27, Z+3	; 0x03
 266:	88 0f       	add	r24, r24
 268:	99 1f       	adc	r25, r25
 26a:	aa 1f       	adc	r26, r26
 26c:	bb 1f       	adc	r27, r27
 26e:	88 0f       	add	r24, r24
 270:	99 1f       	adc	r25, r25
 272:	aa 1f       	adc	r26, r26
 274:	bb 1f       	adc	r27, r27
 276:	88 0f       	add	r24, r24
 278:	99 1f       	adc	r25, r25
 27a:	aa 1f       	adc	r26, r26
 27c:	bb 1f       	adc	r27, r27
 27e:	9c 01       	movw	r18, r24
 280:	ad 01       	movw	r20, r26
 282:	80 e0       	ldi	r24, 0x00	; 0
 284:	92 e1       	ldi	r25, 0x12	; 18
 286:	aa e7       	ldi	r26, 0x7A	; 122
 288:	b0 e0       	ldi	r27, 0x00	; 0
 28a:	bc 01       	movw	r22, r24
 28c:	cd 01       	movw	r24, r26
 28e:	0e 94 b4 02 	call	0x568	; 0x568 <__udivmodsi4>
 292:	da 01       	movw	r26, r20
 294:	c9 01       	movw	r24, r18
 296:	01 97       	sbiw	r24, 0x01	; 1
 298:	a1 09       	sbc	r26, r1
 29a:	b1 09       	sbc	r27, r1
 29c:	89 2f       	mov	r24, r25
 29e:	9a 2f       	mov	r25, r26
 2a0:	ab 2f       	mov	r26, r27
 2a2:	bb 27       	eor	r27, r27
 2a4:	f8 01       	movw	r30, r16
 2a6:	80 83       	st	Z, r24
						UBRRL = ( ((F_CPU / (Config_Ptr -> uart_BaudRate * 8UL))) - 1 );
 2a8:	09 e2       	ldi	r16, 0x29	; 41
 2aa:	10 e0       	ldi	r17, 0x00	; 0
 2ac:	e9 81       	ldd	r30, Y+1	; 0x01
 2ae:	fa 81       	ldd	r31, Y+2	; 0x02
 2b0:	80 81       	ld	r24, Z
 2b2:	91 81       	ldd	r25, Z+1	; 0x01
 2b4:	a2 81       	ldd	r26, Z+2	; 0x02
 2b6:	b3 81       	ldd	r27, Z+3	; 0x03
 2b8:	88 0f       	add	r24, r24
 2ba:	99 1f       	adc	r25, r25
 2bc:	aa 1f       	adc	r26, r26
 2be:	bb 1f       	adc	r27, r27
 2c0:	88 0f       	add	r24, r24
 2c2:	99 1f       	adc	r25, r25
 2c4:	aa 1f       	adc	r26, r26
 2c6:	bb 1f       	adc	r27, r27
 2c8:	88 0f       	add	r24, r24
 2ca:	99 1f       	adc	r25, r25
 2cc:	aa 1f       	adc	r26, r26
 2ce:	bb 1f       	adc	r27, r27
 2d0:	9c 01       	movw	r18, r24
 2d2:	ad 01       	movw	r20, r26
 2d4:	80 e0       	ldi	r24, 0x00	; 0
 2d6:	92 e1       	ldi	r25, 0x12	; 18
 2d8:	aa e7       	ldi	r26, 0x7A	; 122
 2da:	b0 e0       	ldi	r27, 0x00	; 0
 2dc:	bc 01       	movw	r22, r24
 2de:	cd 01       	movw	r24, r26
 2e0:	0e 94 b4 02 	call	0x568	; 0x568 <__udivmodsi4>
 2e4:	da 01       	movw	r26, r20
 2e6:	c9 01       	movw	r24, r18
 2e8:	81 50       	subi	r24, 0x01	; 1
 2ea:	f8 01       	movw	r30, r16
 2ec:	80 83       	st	Z, r24
						break;
	}
}
 2ee:	0f 90       	pop	r0
 2f0:	0f 90       	pop	r0
 2f2:	0f 90       	pop	r0
 2f4:	0f 90       	pop	r0
 2f6:	cf 91       	pop	r28
 2f8:	df 91       	pop	r29
 2fa:	1f 91       	pop	r17
 2fc:	0f 91       	pop	r16
 2fe:	08 95       	ret

00000300 <UART_sendByte>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 ****************************************************************************************/
void UART_sendByte(const uint8_t au8_data)
{
 300:	df 93       	push	r29
 302:	cf 93       	push	r28
 304:	0f 92       	push	r0
 306:	cd b7       	in	r28, 0x3d	; 61
 308:	de b7       	in	r29, 0x3e	; 62
 30a:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the TX buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
 30c:	eb e2       	ldi	r30, 0x2B	; 43
 30e:	f0 e0       	ldi	r31, 0x00	; 0
 310:	80 81       	ld	r24, Z
 312:	88 2f       	mov	r24, r24
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	80 72       	andi	r24, 0x20	; 32
 318:	90 70       	andi	r25, 0x00	; 0
 31a:	00 97       	sbiw	r24, 0x00	; 0
 31c:	b9 f3       	breq	.-18     	; 0x30c <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE
	 * flag as the UDR register is not empty now
	 */
	UDR = au8_data;
 31e:	ec e2       	ldi	r30, 0x2C	; 44
 320:	f0 e0       	ldi	r31, 0x00	; 0
 322:	89 81       	ldd	r24, Y+1	; 0x01
 324:	80 83       	st	Z, r24
}
 326:	0f 90       	pop	r0
 328:	cf 91       	pop	r28
 32a:	df 91       	pop	r29
 32c:	08 95       	ret

0000032e <UART_recieveByte>:
 * [in/out]		 	None
 *
 * [Returns]:       The Byte that received through the UART
 ****************************************************************************************/
uint8_t UART_recieveByte(void)
{
 32e:	df 93       	push	r29
 330:	cf 93       	push	r28
 332:	cd b7       	in	r28, 0x3d	; 61
 334:	de b7       	in	r29, 0x3e	; 62
	/*
	 * RXC flag is set when the UART receive data so wait until this
	 * flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
 336:	eb e2       	ldi	r30, 0x2B	; 43
 338:	f0 e0       	ldi	r31, 0x00	; 0
 33a:	80 81       	ld	r24, Z
 33c:	88 23       	and	r24, r24
 33e:	dc f7       	brge	.-10     	; 0x336 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the RX buffer (UDR) and the RXC flag
	 * will be cleared after read this data
	 */
	return UDR;
 340:	ec e2       	ldi	r30, 0x2C	; 44
 342:	f0 e0       	ldi	r31, 0x00	; 0
 344:	80 81       	ld	r24, Z
}
 346:	cf 91       	pop	r28
 348:	df 91       	pop	r29
 34a:	08 95       	ret

0000034c <UART_sendString>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 ****************************************************************************************/
void UART_sendString(const uint8_t * aStr_message)
{
 34c:	df 93       	push	r29
 34e:	cf 93       	push	r28
 350:	00 d0       	rcall	.+0      	; 0x352 <UART_sendString+0x6>
 352:	0f 92       	push	r0
 354:	cd b7       	in	r28, 0x3d	; 61
 356:	de b7       	in	r29, 0x3e	; 62
 358:	9b 83       	std	Y+3, r25	; 0x03
 35a:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t i = 0;
 35c:	19 82       	std	Y+1, r1	; 0x01
 35e:	0e c0       	rjmp	.+28     	; 0x37c <UART_sendString+0x30>

	while(aStr_message[i] != '\0')
	{
		UART_sendByte(aStr_message[i]);
 360:	89 81       	ldd	r24, Y+1	; 0x01
 362:	28 2f       	mov	r18, r24
 364:	30 e0       	ldi	r19, 0x00	; 0
 366:	8a 81       	ldd	r24, Y+2	; 0x02
 368:	9b 81       	ldd	r25, Y+3	; 0x03
 36a:	fc 01       	movw	r30, r24
 36c:	e2 0f       	add	r30, r18
 36e:	f3 1f       	adc	r31, r19
 370:	80 81       	ld	r24, Z
 372:	0e 94 80 01 	call	0x300	; 0x300 <UART_sendByte>
		i++;
 376:	89 81       	ldd	r24, Y+1	; 0x01
 378:	8f 5f       	subi	r24, 0xFF	; 255
 37a:	89 83       	std	Y+1, r24	; 0x01
 ****************************************************************************************/
void UART_sendString(const uint8_t * aStr_message)
{
	uint8_t i = 0;

	while(aStr_message[i] != '\0')
 37c:	89 81       	ldd	r24, Y+1	; 0x01
 37e:	28 2f       	mov	r18, r24
 380:	30 e0       	ldi	r19, 0x00	; 0
 382:	8a 81       	ldd	r24, Y+2	; 0x02
 384:	9b 81       	ldd	r25, Y+3	; 0x03
 386:	fc 01       	movw	r30, r24
 388:	e2 0f       	add	r30, r18
 38a:	f3 1f       	adc	r31, r19
 38c:	80 81       	ld	r24, Z
 38e:	88 23       	and	r24, r24
 390:	39 f7       	brne	.-50     	; 0x360 <UART_sendString+0x14>
	{
		UART_sendByte(aStr_message[i]);
		i++;
	}
}
 392:	0f 90       	pop	r0
 394:	0f 90       	pop	r0
 396:	0f 90       	pop	r0
 398:	cf 91       	pop	r28
 39a:	df 91       	pop	r29
 39c:	08 95       	ret

0000039e <UART_receiveString>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 ****************************************************************************************/
void UART_receiveString(uint8_t * aStr_message)
{
 39e:	0f 93       	push	r16
 3a0:	1f 93       	push	r17
 3a2:	df 93       	push	r29
 3a4:	cf 93       	push	r28
 3a6:	00 d0       	rcall	.+0      	; 0x3a8 <UART_receiveString+0xa>
 3a8:	0f 92       	push	r0
 3aa:	cd b7       	in	r28, 0x3d	; 61
 3ac:	de b7       	in	r29, 0x3e	; 62
 3ae:	9b 83       	std	Y+3, r25	; 0x03
 3b0:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t i = 0;
 3b2:	19 82       	std	Y+1, r1	; 0x01

	aStr_message[i] = UART_recieveByte();
 3b4:	89 81       	ldd	r24, Y+1	; 0x01
 3b6:	28 2f       	mov	r18, r24
 3b8:	30 e0       	ldi	r19, 0x00	; 0
 3ba:	8a 81       	ldd	r24, Y+2	; 0x02
 3bc:	9b 81       	ldd	r25, Y+3	; 0x03
 3be:	8c 01       	movw	r16, r24
 3c0:	02 0f       	add	r16, r18
 3c2:	13 1f       	adc	r17, r19
 3c4:	0e 94 97 01 	call	0x32e	; 0x32e <UART_recieveByte>
 3c8:	f8 01       	movw	r30, r16
 3ca:	80 83       	st	Z, r24
 3cc:	0f c0       	rjmp	.+30     	; 0x3ec <UART_receiveString+0x4e>
	while(aStr_message[i] != '\r')
	{
		i++;
 3ce:	89 81       	ldd	r24, Y+1	; 0x01
 3d0:	8f 5f       	subi	r24, 0xFF	; 255
 3d2:	89 83       	std	Y+1, r24	; 0x01
		aStr_message[i] = UART_recieveByte();
 3d4:	89 81       	ldd	r24, Y+1	; 0x01
 3d6:	28 2f       	mov	r18, r24
 3d8:	30 e0       	ldi	r19, 0x00	; 0
 3da:	8a 81       	ldd	r24, Y+2	; 0x02
 3dc:	9b 81       	ldd	r25, Y+3	; 0x03
 3de:	8c 01       	movw	r16, r24
 3e0:	02 0f       	add	r16, r18
 3e2:	13 1f       	adc	r17, r19
 3e4:	0e 94 97 01 	call	0x32e	; 0x32e <UART_recieveByte>
 3e8:	f8 01       	movw	r30, r16
 3ea:	80 83       	st	Z, r24
void UART_receiveString(uint8_t * aStr_message)
{
	uint8_t i = 0;

	aStr_message[i] = UART_recieveByte();
	while(aStr_message[i] != '\r')
 3ec:	89 81       	ldd	r24, Y+1	; 0x01
 3ee:	28 2f       	mov	r18, r24
 3f0:	30 e0       	ldi	r19, 0x00	; 0
 3f2:	8a 81       	ldd	r24, Y+2	; 0x02
 3f4:	9b 81       	ldd	r25, Y+3	; 0x03
 3f6:	fc 01       	movw	r30, r24
 3f8:	e2 0f       	add	r30, r18
 3fa:	f3 1f       	adc	r31, r19
 3fc:	80 81       	ld	r24, Z
 3fe:	8d 30       	cpi	r24, 0x0D	; 13
 400:	31 f7       	brne	.-52     	; 0x3ce <UART_receiveString+0x30>
	{
		i++;
		aStr_message[i] = UART_recieveByte();
	}
	aStr_message[i] = '\0';
 402:	89 81       	ldd	r24, Y+1	; 0x01
 404:	28 2f       	mov	r18, r24
 406:	30 e0       	ldi	r19, 0x00	; 0
 408:	8a 81       	ldd	r24, Y+2	; 0x02
 40a:	9b 81       	ldd	r25, Y+3	; 0x03
 40c:	fc 01       	movw	r30, r24
 40e:	e2 0f       	add	r30, r18
 410:	f3 1f       	adc	r31, r19
 412:	10 82       	st	Z, r1
}
 414:	0f 90       	pop	r0
 416:	0f 90       	pop	r0
 418:	0f 90       	pop	r0
 41a:	cf 91       	pop	r28
 41c:	df 91       	pop	r29
 41e:	1f 91       	pop	r17
 420:	0f 91       	pop	r16
 422:	08 95       	ret

00000424 <UART_setParityType>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 ****************************************************************************************/
void UART_setParityType(const enuUART_ParityType_t enu_parityType)
{
 424:	df 93       	push	r29
 426:	cf 93       	push	r28
 428:	0f 92       	push	r0
 42a:	cd b7       	in	r28, 0x3d	; 61
 42c:	de b7       	in	r29, 0x3e	; 62
 42e:	89 83       	std	Y+1, r24	; 0x01
	/* Insert the required parity type in bits (UPM0, UPM1) in UCSRC Register */
	UCSRC = (UCSRC & 0xCF) | (enu_parityType << 4);
 430:	a0 e4       	ldi	r26, 0x40	; 64
 432:	b0 e0       	ldi	r27, 0x00	; 0
 434:	e0 e4       	ldi	r30, 0x40	; 64
 436:	f0 e0       	ldi	r31, 0x00	; 0
 438:	80 81       	ld	r24, Z
 43a:	28 2f       	mov	r18, r24
 43c:	2f 7c       	andi	r18, 0xCF	; 207
 43e:	89 81       	ldd	r24, Y+1	; 0x01
 440:	88 2f       	mov	r24, r24
 442:	90 e0       	ldi	r25, 0x00	; 0
 444:	82 95       	swap	r24
 446:	92 95       	swap	r25
 448:	90 7f       	andi	r25, 0xF0	; 240
 44a:	98 27       	eor	r25, r24
 44c:	80 7f       	andi	r24, 0xF0	; 240
 44e:	98 27       	eor	r25, r24
 450:	82 2b       	or	r24, r18
 452:	8c 93       	st	X, r24
}
 454:	0f 90       	pop	r0
 456:	cf 91       	pop	r28
 458:	df 91       	pop	r29
 45a:	08 95       	ret

0000045c <UART_setStopBit>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 ****************************************************************************************/
void UART_setStopBit(const enuUART_StopBit_t enu_stopBit)
{
 45c:	df 93       	push	r29
 45e:	cf 93       	push	r28
 460:	0f 92       	push	r0
 462:	cd b7       	in	r28, 0x3d	; 61
 464:	de b7       	in	r29, 0x3e	; 62
 466:	89 83       	std	Y+1, r24	; 0x01
	/* Insert the required number of stop bit(s) in bit USBS in UCSRC Register */
	UCSRC = (UCSRC & 0xF7) | ( enu_stopBit << 3);
 468:	a0 e4       	ldi	r26, 0x40	; 64
 46a:	b0 e0       	ldi	r27, 0x00	; 0
 46c:	e0 e4       	ldi	r30, 0x40	; 64
 46e:	f0 e0       	ldi	r31, 0x00	; 0
 470:	80 81       	ld	r24, Z
 472:	28 2f       	mov	r18, r24
 474:	27 7f       	andi	r18, 0xF7	; 247
 476:	89 81       	ldd	r24, Y+1	; 0x01
 478:	88 2f       	mov	r24, r24
 47a:	90 e0       	ldi	r25, 0x00	; 0
 47c:	88 0f       	add	r24, r24
 47e:	99 1f       	adc	r25, r25
 480:	88 0f       	add	r24, r24
 482:	99 1f       	adc	r25, r25
 484:	88 0f       	add	r24, r24
 486:	99 1f       	adc	r25, r25
 488:	82 2b       	or	r24, r18
 48a:	8c 93       	st	X, r24
}
 48c:	0f 90       	pop	r0
 48e:	cf 91       	pop	r28
 490:	df 91       	pop	r29
 492:	08 95       	ret

00000494 <UART_DeInit>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 ****************************************************************************************/
void UART_DeInit(void)
{
 494:	df 93       	push	r29
 496:	cf 93       	push	r28
 498:	cd b7       	in	r28, 0x3d	; 61
 49a:	de b7       	in	r29, 0x3e	; 62
	/* Reset All UART Registers to its initial value */
	UCSRA = 0x20;
 49c:	eb e2       	ldi	r30, 0x2B	; 43
 49e:	f0 e0       	ldi	r31, 0x00	; 0
 4a0:	80 e2       	ldi	r24, 0x20	; 32
 4a2:	80 83       	st	Z, r24
	UCSRB = 0;
 4a4:	ea e2       	ldi	r30, 0x2A	; 42
 4a6:	f0 e0       	ldi	r31, 0x00	; 0
 4a8:	10 82       	st	Z, r1
	UCSRC = 0x86;
 4aa:	e0 e4       	ldi	r30, 0x40	; 64
 4ac:	f0 e0       	ldi	r31, 0x00	; 0
 4ae:	86 e8       	ldi	r24, 0x86	; 134
 4b0:	80 83       	st	Z, r24

	/* Clear UART Baud Rate Registers */
	UBRRH = 0;
 4b2:	e0 e4       	ldi	r30, 0x40	; 64
 4b4:	f0 e0       	ldi	r31, 0x00	; 0
 4b6:	10 82       	st	Z, r1
	UBRRL = 0;
 4b8:	e9 e2       	ldi	r30, 0x29	; 41
 4ba:	f0 e0       	ldi	r31, 0x00	; 0
 4bc:	10 82       	st	Z, r1
}
 4be:	cf 91       	pop	r28
 4c0:	df 91       	pop	r29
 4c2:	08 95       	ret

000004c4 <App_init>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 *******************************************************************************/
void App_init(void)
{
 4c4:	df 93       	push	r29
 4c6:	cf 93       	push	r28
 4c8:	cd b7       	in	r28, 0x3d	; 61
 4ca:	de b7       	in	r29, 0x3e	; 62
 4cc:	2d 97       	sbiw	r28, 0x0d	; 13
 4ce:	0f b6       	in	r0, 0x3f	; 63
 4d0:	f8 94       	cli
 4d2:	de bf       	out	0x3e, r29	; 62
 4d4:	0f be       	out	0x3f, r0	; 63
 4d6:	cd bf       	out	0x3d, r28	; 61
	UART_ConfigType uart_config = {BPS_9600, NORMAL_SPEED, EIGHT_BITS, DISABLED, ONE_BIT};
 4d8:	ce 01       	movw	r24, r28
 4da:	01 96       	adiw	r24, 0x01	; 1
 4dc:	9a 87       	std	Y+10, r25	; 0x0a
 4de:	89 87       	std	Y+9, r24	; 0x09
 4e0:	e0 e6       	ldi	r30, 0x60	; 96
 4e2:	f0 e0       	ldi	r31, 0x00	; 0
 4e4:	fc 87       	std	Y+12, r31	; 0x0c
 4e6:	eb 87       	std	Y+11, r30	; 0x0b
 4e8:	f8 e0       	ldi	r31, 0x08	; 8
 4ea:	fd 87       	std	Y+13, r31	; 0x0d
 4ec:	eb 85       	ldd	r30, Y+11	; 0x0b
 4ee:	fc 85       	ldd	r31, Y+12	; 0x0c
 4f0:	00 80       	ld	r0, Z
 4f2:	8b 85       	ldd	r24, Y+11	; 0x0b
 4f4:	9c 85       	ldd	r25, Y+12	; 0x0c
 4f6:	01 96       	adiw	r24, 0x01	; 1
 4f8:	9c 87       	std	Y+12, r25	; 0x0c
 4fa:	8b 87       	std	Y+11, r24	; 0x0b
 4fc:	e9 85       	ldd	r30, Y+9	; 0x09
 4fe:	fa 85       	ldd	r31, Y+10	; 0x0a
 500:	00 82       	st	Z, r0
 502:	89 85       	ldd	r24, Y+9	; 0x09
 504:	9a 85       	ldd	r25, Y+10	; 0x0a
 506:	01 96       	adiw	r24, 0x01	; 1
 508:	9a 87       	std	Y+10, r25	; 0x0a
 50a:	89 87       	std	Y+9, r24	; 0x09
 50c:	9d 85       	ldd	r25, Y+13	; 0x0d
 50e:	91 50       	subi	r25, 0x01	; 1
 510:	9d 87       	std	Y+13, r25	; 0x0d
 512:	ed 85       	ldd	r30, Y+13	; 0x0d
 514:	ee 23       	and	r30, r30
 516:	51 f7       	brne	.-44     	; 0x4ec <App_init+0x28>
	UART_init(&uart_config);
 518:	ce 01       	movw	r24, r28
 51a:	01 96       	adiw	r24, 0x01	; 1
 51c:	0e 94 49 00 	call	0x92	; 0x92 <UART_init>
}
 520:	2d 96       	adiw	r28, 0x0d	; 13
 522:	0f b6       	in	r0, 0x3f	; 63
 524:	f8 94       	cli
 526:	de bf       	out	0x3e, r29	; 62
 528:	0f be       	out	0x3f, r0	; 63
 52a:	cd bf       	out	0x3d, r28	; 61
 52c:	cf 91       	pop	r28
 52e:	df 91       	pop	r29
 530:	08 95       	ret

00000532 <App_Update>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 *******************************************************************************/
void App_Update(void)
{
 532:	df 93       	push	r29
 534:	cf 93       	push	r28
 536:	cd b7       	in	r28, 0x3d	; 61
 538:	de b7       	in	r29, 0x3e	; 62
	UART_receiveString(gStr_message);/* Receive String from terminal */
 53a:	88 e6       	ldi	r24, 0x68	; 104
 53c:	90 e0       	ldi	r25, 0x00	; 0
 53e:	0e 94 cf 01 	call	0x39e	; 0x39e <UART_receiveString>
    UART_sendString(gStr_message);	 /* Resends the string to terminal */
 542:	88 e6       	ldi	r24, 0x68	; 104
 544:	90 e0       	ldi	r25, 0x00	; 0
 546:	0e 94 a6 01 	call	0x34c	; 0x34c <UART_sendString>
    UART_sendByte('\r');			 /* Send the new line to the terminal */
 54a:	8d e0       	ldi	r24, 0x0D	; 13
 54c:	0e 94 80 01 	call	0x300	; 0x300 <UART_sendByte>
}
 550:	cf 91       	pop	r28
 552:	df 91       	pop	r29
 554:	08 95       	ret

00000556 <main>:
/*****************************************************************************************
 *                                MAIN FUNCTION                                          *
 *****************************************************************************************/

int main(void)
{
 556:	df 93       	push	r29
 558:	cf 93       	push	r28
 55a:	cd b7       	in	r28, 0x3d	; 61
 55c:	de b7       	in	r29, 0x3e	; 62
	/********************************************************************************
	 *                           SYSTEM INITIALIZATION                              *
	 ********************************************************************************/

	App_init();	/* Test UART in simple application */
 55e:	0e 94 62 02 	call	0x4c4	; 0x4c4 <App_init>
	 *                        APPLICATION	(SUPER LOOP)						    *
	 ********************************************************************************/

	while(1)
	{
		App_Update();
 562:	0e 94 99 02 	call	0x532	; 0x532 <App_Update>
 566:	fd cf       	rjmp	.-6      	; 0x562 <main+0xc>

00000568 <__udivmodsi4>:
 568:	a1 e2       	ldi	r26, 0x21	; 33
 56a:	1a 2e       	mov	r1, r26
 56c:	aa 1b       	sub	r26, r26
 56e:	bb 1b       	sub	r27, r27
 570:	fd 01       	movw	r30, r26
 572:	0d c0       	rjmp	.+26     	; 0x58e <__udivmodsi4_ep>

00000574 <__udivmodsi4_loop>:
 574:	aa 1f       	adc	r26, r26
 576:	bb 1f       	adc	r27, r27
 578:	ee 1f       	adc	r30, r30
 57a:	ff 1f       	adc	r31, r31
 57c:	a2 17       	cp	r26, r18
 57e:	b3 07       	cpc	r27, r19
 580:	e4 07       	cpc	r30, r20
 582:	f5 07       	cpc	r31, r21
 584:	20 f0       	brcs	.+8      	; 0x58e <__udivmodsi4_ep>
 586:	a2 1b       	sub	r26, r18
 588:	b3 0b       	sbc	r27, r19
 58a:	e4 0b       	sbc	r30, r20
 58c:	f5 0b       	sbc	r31, r21

0000058e <__udivmodsi4_ep>:
 58e:	66 1f       	adc	r22, r22
 590:	77 1f       	adc	r23, r23
 592:	88 1f       	adc	r24, r24
 594:	99 1f       	adc	r25, r25
 596:	1a 94       	dec	r1
 598:	69 f7       	brne	.-38     	; 0x574 <__udivmodsi4_loop>
 59a:	60 95       	com	r22
 59c:	70 95       	com	r23
 59e:	80 95       	com	r24
 5a0:	90 95       	com	r25
 5a2:	9b 01       	movw	r18, r22
 5a4:	ac 01       	movw	r20, r24
 5a6:	bd 01       	movw	r22, r26
 5a8:	cf 01       	movw	r24, r30
 5aa:	08 95       	ret

000005ac <_exit>:
 5ac:	f8 94       	cli

000005ae <__stop_program>:
 5ae:	ff cf       	rjmp	.-2      	; 0x5ae <__stop_program>
