
Test_Timer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000011fc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000006  00800060  00800060  00001270  2**0
                  ALLOC
  2 .stab         00001b9c  00000000  00000000  00001270  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000f37  00000000  00000000  00002e0c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
       8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
       c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      10:	0c 94 75 06 	jmp	0xcea	; 0xcea <__vector_4>
      14:	0c 94 42 06 	jmp	0xc84	; 0xc84 <__vector_5>
      18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      1c:	0c 94 0f 06 	jmp	0xc1e	; 0xc1e <__vector_7>
      20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      24:	0c 94 dc 05 	jmp	0xbb8	; 0xbb8 <__vector_9>
      28:	0c 94 a9 05 	jmp	0xb52	; 0xb52 <__vector_10>
      2c:	0c 94 76 05 	jmp	0xaec	; 0xaec <__vector_11>
      30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	a6 36       	cpi	r26, 0x66	; 102
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
      70:	0e 94 61 05 	call	0xac2	; 0xac2 <main>
      74:	0c 94 fc 08 	jmp	0x11f8	; 0x11f8 <_exit>

00000078 <__bad_interrupt>:
      78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <BUTTON_init>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 *******************************************************************************/
void BUTTON_init(void)
{
      7c:	df 93       	push	r29
      7e:	cf 93       	push	r28
      80:	cd b7       	in	r28, 0x3d	; 61
      82:	de b7       	in	r29, 0x3e	; 62
	/* Configure BUTTON pin as an input pin */
	DIO_setPinDirection(BUTTON_PORT_NUM, BUTTON_PIN_NUM, INPUT);
      84:	82 e0       	ldi	r24, 0x02	; 2
      86:	64 e0       	ldi	r22, 0x04	; 4
      88:	40 e0       	ldi	r20, 0x00	; 0
      8a:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <DIO_setPinDirection>
}
      8e:	cf 91       	pop	r28
      90:	df 91       	pop	r29
      92:	08 95       	ret

00000094 <BUTTON_read>:
 * [in/out]		 	None
 *
 * [Returns]:       Unsigned character that hold the BUTTON state
 *******************************************************************************/
uint8_t BUTTON_read(void)
{
      94:	df 93       	push	r29
      96:	cf 93       	push	r28
      98:	00 d0       	rcall	.+0      	; 0x9a <BUTTON_read+0x6>
      9a:	cd b7       	in	r28, 0x3d	; 61
      9c:	de b7       	in	r29, 0x3e	; 62
	uint8_t button_state;

	/* Read the button state */
	DIO_readPin(BUTTON_PORT_NUM, BUTTON_PIN_NUM, &button_state);
      9e:	82 e0       	ldi	r24, 0x02	; 2
      a0:	64 e0       	ldi	r22, 0x04	; 4
      a2:	9e 01       	movw	r18, r28
      a4:	2f 5f       	subi	r18, 0xFF	; 255
      a6:	3f 4f       	sbci	r19, 0xFF	; 255
      a8:	a9 01       	movw	r20, r18
      aa:	0e 94 d7 03 	call	0x7ae	; 0x7ae <DIO_readPin>

	/* Check if the button is pressed or not */
	if(button_state == HIGH)
      ae:	89 81       	ldd	r24, Y+1	; 0x01
      b0:	81 30       	cpi	r24, 0x01	; 1
      b2:	19 f4       	brne	.+6      	; 0xba <BUTTON_read+0x26>
	{
		return BUTTON_PRESSED;		/* Button is pressed */
      b4:	81 e0       	ldi	r24, 0x01	; 1
      b6:	8a 83       	std	Y+2, r24	; 0x02
      b8:	01 c0       	rjmp	.+2      	; 0xbc <BUTTON_read+0x28>
	}
	else
	{
		return BUTTON_NOT_PRESSED;	/* Button is not pressed */
      ba:	1a 82       	std	Y+2, r1	; 0x02
      bc:	8a 81       	ldd	r24, Y+2	; 0x02
	}
}
      be:	0f 90       	pop	r0
      c0:	0f 90       	pop	r0
      c2:	cf 91       	pop	r28
      c4:	df 91       	pop	r29
      c6:	08 95       	ret

000000c8 <DIO_setPortDirection>:
 * [in/out]		 	None
 *
 * [Returns]:       Error state
 ******************************************************************************/
DIO_E_STATE_t DIO_setPortDirection(DIO_PortId port_ID, DIO_DirectionType port_Direction)
{
      c8:	df 93       	push	r29
      ca:	cf 93       	push	r28
      cc:	cd b7       	in	r28, 0x3d	; 61
      ce:	de b7       	in	r29, 0x3e	; 62
      d0:	27 97       	sbiw	r28, 0x07	; 7
      d2:	0f b6       	in	r0, 0x3f	; 63
      d4:	f8 94       	cli
      d6:	de bf       	out	0x3e, r29	; 62
      d8:	0f be       	out	0x3f, r0	; 63
      da:	cd bf       	out	0x3d, r28	; 61
      dc:	8a 83       	std	Y+2, r24	; 0x02
      de:	6b 83       	std	Y+3, r22	; 0x03
	DIO_E_STATE_t EN_ErrorState = E_NOT_OK;
      e0:	81 e0       	ldi	r24, 0x01	; 1
      e2:	89 83       	std	Y+1, r24	; 0x01

	/* Check if the PORT is input or output */
    if(port_Direction == HIGH)
      e4:	8b 81       	ldd	r24, Y+3	; 0x03
      e6:	81 30       	cpi	r24, 0x01	; 1
      e8:	d1 f5       	brne	.+116    	; 0x15e <DIO_setPortDirection+0x96>
    {
    	switch (port_ID)
      ea:	8a 81       	ldd	r24, Y+2	; 0x02
      ec:	28 2f       	mov	r18, r24
      ee:	30 e0       	ldi	r19, 0x00	; 0
      f0:	3f 83       	std	Y+7, r19	; 0x07
      f2:	2e 83       	std	Y+6, r18	; 0x06
      f4:	8e 81       	ldd	r24, Y+6	; 0x06
      f6:	9f 81       	ldd	r25, Y+7	; 0x07
      f8:	81 30       	cpi	r24, 0x01	; 1
      fa:	91 05       	cpc	r25, r1
      fc:	d9 f0       	breq	.+54     	; 0x134 <DIO_setPortDirection+0x6c>
      fe:	2e 81       	ldd	r18, Y+6	; 0x06
     100:	3f 81       	ldd	r19, Y+7	; 0x07
     102:	22 30       	cpi	r18, 0x02	; 2
     104:	31 05       	cpc	r19, r1
     106:	2c f4       	brge	.+10     	; 0x112 <DIO_setPortDirection+0x4a>
     108:	8e 81       	ldd	r24, Y+6	; 0x06
     10a:	9f 81       	ldd	r25, Y+7	; 0x07
     10c:	00 97       	sbiw	r24, 0x00	; 0
     10e:	61 f0       	breq	.+24     	; 0x128 <DIO_setPortDirection+0x60>
     110:	23 c0       	rjmp	.+70     	; 0x158 <DIO_setPortDirection+0x90>
     112:	2e 81       	ldd	r18, Y+6	; 0x06
     114:	3f 81       	ldd	r19, Y+7	; 0x07
     116:	22 30       	cpi	r18, 0x02	; 2
     118:	31 05       	cpc	r19, r1
     11a:	91 f0       	breq	.+36     	; 0x140 <DIO_setPortDirection+0x78>
     11c:	8e 81       	ldd	r24, Y+6	; 0x06
     11e:	9f 81       	ldd	r25, Y+7	; 0x07
     120:	83 30       	cpi	r24, 0x03	; 3
     122:	91 05       	cpc	r25, r1
     124:	99 f0       	breq	.+38     	; 0x14c <DIO_setPortDirection+0x84>
     126:	18 c0       	rjmp	.+48     	; 0x158 <DIO_setPortDirection+0x90>
		{
		case DIO_PORTA:
			DDRA_DIR_R = OUTPUT_PORT;
     128:	ea e3       	ldi	r30, 0x3A	; 58
     12a:	f0 e0       	ldi	r31, 0x00	; 0
     12c:	8f ef       	ldi	r24, 0xFF	; 255
     12e:	80 83       	st	Z, r24
			EN_ErrorState = DIO_E_PARAM_VALID;
     130:	19 82       	std	Y+1, r1	; 0x01
     132:	50 c0       	rjmp	.+160    	; 0x1d4 <DIO_setPortDirection+0x10c>
			break;
		case DIO_PORTB:
			DDRB_DIR_R = OUTPUT_PORT;
     134:	e7 e3       	ldi	r30, 0x37	; 55
     136:	f0 e0       	ldi	r31, 0x00	; 0
     138:	8f ef       	ldi	r24, 0xFF	; 255
     13a:	80 83       	st	Z, r24
			EN_ErrorState = DIO_E_PARAM_VALID;
     13c:	19 82       	std	Y+1, r1	; 0x01
     13e:	4a c0       	rjmp	.+148    	; 0x1d4 <DIO_setPortDirection+0x10c>
			break;
		case DIO_PORTC:
			DDRC_DIR_R = OUTPUT_PORT;
     140:	e4 e3       	ldi	r30, 0x34	; 52
     142:	f0 e0       	ldi	r31, 0x00	; 0
     144:	8f ef       	ldi	r24, 0xFF	; 255
     146:	80 83       	st	Z, r24
			EN_ErrorState = DIO_E_PARAM_VALID;
     148:	19 82       	std	Y+1, r1	; 0x01
     14a:	44 c0       	rjmp	.+136    	; 0x1d4 <DIO_setPortDirection+0x10c>
			break;
		case DIO_PORTD:
			DDRD_DIR_R = OUTPUT_PORT;
     14c:	e1 e3       	ldi	r30, 0x31	; 49
     14e:	f0 e0       	ldi	r31, 0x00	; 0
     150:	8f ef       	ldi	r24, 0xFF	; 255
     152:	80 83       	st	Z, r24
			EN_ErrorState = DIO_E_PARAM_VALID;
     154:	19 82       	std	Y+1, r1	; 0x01
     156:	3e c0       	rjmp	.+124    	; 0x1d4 <DIO_setPortDirection+0x10c>
			break;
		default:
			EN_ErrorState = DIO_E_PARAM_INVALID_PORT_ID;
     158:	81 e0       	ldi	r24, 0x01	; 1
     15a:	89 83       	std	Y+1, r24	; 0x01
     15c:	3b c0       	rjmp	.+118    	; 0x1d4 <DIO_setPortDirection+0x10c>
			break;
		}
    }
    else if(port_Direction == LOW)
     15e:	8b 81       	ldd	r24, Y+3	; 0x03
     160:	88 23       	and	r24, r24
     162:	b1 f5       	brne	.+108    	; 0x1d0 <DIO_setPortDirection+0x108>
    {
		switch (port_ID)
     164:	8a 81       	ldd	r24, Y+2	; 0x02
     166:	28 2f       	mov	r18, r24
     168:	30 e0       	ldi	r19, 0x00	; 0
     16a:	3d 83       	std	Y+5, r19	; 0x05
     16c:	2c 83       	std	Y+4, r18	; 0x04
     16e:	8c 81       	ldd	r24, Y+4	; 0x04
     170:	9d 81       	ldd	r25, Y+5	; 0x05
     172:	81 30       	cpi	r24, 0x01	; 1
     174:	91 05       	cpc	r25, r1
     176:	d1 f0       	breq	.+52     	; 0x1ac <DIO_setPortDirection+0xe4>
     178:	2c 81       	ldd	r18, Y+4	; 0x04
     17a:	3d 81       	ldd	r19, Y+5	; 0x05
     17c:	22 30       	cpi	r18, 0x02	; 2
     17e:	31 05       	cpc	r19, r1
     180:	2c f4       	brge	.+10     	; 0x18c <DIO_setPortDirection+0xc4>
     182:	8c 81       	ldd	r24, Y+4	; 0x04
     184:	9d 81       	ldd	r25, Y+5	; 0x05
     186:	00 97       	sbiw	r24, 0x00	; 0
     188:	61 f0       	breq	.+24     	; 0x1a2 <DIO_setPortDirection+0xda>
     18a:	1f c0       	rjmp	.+62     	; 0x1ca <DIO_setPortDirection+0x102>
     18c:	2c 81       	ldd	r18, Y+4	; 0x04
     18e:	3d 81       	ldd	r19, Y+5	; 0x05
     190:	22 30       	cpi	r18, 0x02	; 2
     192:	31 05       	cpc	r19, r1
     194:	81 f0       	breq	.+32     	; 0x1b6 <DIO_setPortDirection+0xee>
     196:	8c 81       	ldd	r24, Y+4	; 0x04
     198:	9d 81       	ldd	r25, Y+5	; 0x05
     19a:	83 30       	cpi	r24, 0x03	; 3
     19c:	91 05       	cpc	r25, r1
     19e:	81 f0       	breq	.+32     	; 0x1c0 <DIO_setPortDirection+0xf8>
     1a0:	14 c0       	rjmp	.+40     	; 0x1ca <DIO_setPortDirection+0x102>
		{
		case DIO_PORTA:
			DDRA_DIR_R = INPUT_PORT;
     1a2:	ea e3       	ldi	r30, 0x3A	; 58
     1a4:	f0 e0       	ldi	r31, 0x00	; 0
     1a6:	10 82       	st	Z, r1
			EN_ErrorState = DIO_E_PARAM_VALID;
     1a8:	19 82       	std	Y+1, r1	; 0x01
     1aa:	14 c0       	rjmp	.+40     	; 0x1d4 <DIO_setPortDirection+0x10c>
			break;
		case DIO_PORTB:
			DDRB_DIR_R = INPUT_PORT;
     1ac:	e7 e3       	ldi	r30, 0x37	; 55
     1ae:	f0 e0       	ldi	r31, 0x00	; 0
     1b0:	10 82       	st	Z, r1
			EN_ErrorState = DIO_E_PARAM_VALID;
     1b2:	19 82       	std	Y+1, r1	; 0x01
     1b4:	0f c0       	rjmp	.+30     	; 0x1d4 <DIO_setPortDirection+0x10c>
			break;
		case DIO_PORTC:
			DDRC_DIR_R = INPUT_PORT;
     1b6:	e4 e3       	ldi	r30, 0x34	; 52
     1b8:	f0 e0       	ldi	r31, 0x00	; 0
     1ba:	10 82       	st	Z, r1
			EN_ErrorState = DIO_E_PARAM_VALID;
     1bc:	19 82       	std	Y+1, r1	; 0x01
     1be:	0a c0       	rjmp	.+20     	; 0x1d4 <DIO_setPortDirection+0x10c>
			break;
		case DIO_PORTD:
			DDRD_DIR_R = INPUT_PORT;
     1c0:	e1 e3       	ldi	r30, 0x31	; 49
     1c2:	f0 e0       	ldi	r31, 0x00	; 0
     1c4:	10 82       	st	Z, r1
			EN_ErrorState = DIO_E_PARAM_VALID;
     1c6:	19 82       	std	Y+1, r1	; 0x01
     1c8:	05 c0       	rjmp	.+10     	; 0x1d4 <DIO_setPortDirection+0x10c>
			break;
		default:
			EN_ErrorState = DIO_E_PARAM_INVALID_PORT_ID;
     1ca:	81 e0       	ldi	r24, 0x01	; 1
     1cc:	89 83       	std	Y+1, r24	; 0x01
     1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <DIO_setPortDirection+0x10c>
			break;
		}
    }
    else
    {
    	EN_ErrorState = DIO_E_PARAM_INVALID_PORT_DIR;	/* Invalid port direction */
     1d0:	84 e0       	ldi	r24, 0x04	; 4
     1d2:	89 83       	std	Y+1, r24	; 0x01
    }
    return EN_ErrorState;
     1d4:	89 81       	ldd	r24, Y+1	; 0x01
}
     1d6:	27 96       	adiw	r28, 0x07	; 7
     1d8:	0f b6       	in	r0, 0x3f	; 63
     1da:	f8 94       	cli
     1dc:	de bf       	out	0x3e, r29	; 62
     1de:	0f be       	out	0x3f, r0	; 63
     1e0:	cd bf       	out	0x3d, r28	; 61
     1e2:	cf 91       	pop	r28
     1e4:	df 91       	pop	r29
     1e6:	08 95       	ret

000001e8 <DIO_setPinDirection>:
 * [in/out]		 	None
 *
 * [Returns]:       Error State
 ******************************************************************************/
DIO_E_STATE_t DIO_setPinDirection(DIO_PortId port_ID , DIO_PinId pin_ID, DIO_DirectionType pin_Direction)
{
     1e8:	df 93       	push	r29
     1ea:	cf 93       	push	r28
     1ec:	cd b7       	in	r28, 0x3d	; 61
     1ee:	de b7       	in	r29, 0x3e	; 62
     1f0:	28 97       	sbiw	r28, 0x08	; 8
     1f2:	0f b6       	in	r0, 0x3f	; 63
     1f4:	f8 94       	cli
     1f6:	de bf       	out	0x3e, r29	; 62
     1f8:	0f be       	out	0x3f, r0	; 63
     1fa:	cd bf       	out	0x3d, r28	; 61
     1fc:	8a 83       	std	Y+2, r24	; 0x02
     1fe:	6b 83       	std	Y+3, r22	; 0x03
     200:	4c 83       	std	Y+4, r20	; 0x04
	DIO_E_STATE_t EN_ErrorState = E_NOT_OK;
     202:	81 e0       	ldi	r24, 0x01	; 1
     204:	89 83       	std	Y+1, r24	; 0x01

	/* Check if the pin id is one of the existed pin or not */
	if ((pin_ID >= PIN_0) && (pin_ID <= PIN_7))
     206:	8b 81       	ldd	r24, Y+3	; 0x03
     208:	88 30       	cpi	r24, 0x08	; 8
     20a:	08 f0       	brcs	.+2      	; 0x20e <DIO_setPinDirection+0x26>
     20c:	fd c0       	rjmp	.+506    	; 0x408 <DIO_setPinDirection+0x220>
	{
		if (pin_Direction == OUTPUT)
     20e:	8c 81       	ldd	r24, Y+4	; 0x04
     210:	81 30       	cpi	r24, 0x01	; 1
     212:	09 f0       	breq	.+2      	; 0x216 <DIO_setPinDirection+0x2e>
     214:	77 c0       	rjmp	.+238    	; 0x304 <DIO_setPinDirection+0x11c>
		{
			switch (port_ID)
     216:	8a 81       	ldd	r24, Y+2	; 0x02
     218:	28 2f       	mov	r18, r24
     21a:	30 e0       	ldi	r19, 0x00	; 0
     21c:	38 87       	std	Y+8, r19	; 0x08
     21e:	2f 83       	std	Y+7, r18	; 0x07
     220:	8f 81       	ldd	r24, Y+7	; 0x07
     222:	98 85       	ldd	r25, Y+8	; 0x08
     224:	81 30       	cpi	r24, 0x01	; 1
     226:	91 05       	cpc	r25, r1
     228:	59 f1       	breq	.+86     	; 0x280 <DIO_setPinDirection+0x98>
     22a:	2f 81       	ldd	r18, Y+7	; 0x07
     22c:	38 85       	ldd	r19, Y+8	; 0x08
     22e:	22 30       	cpi	r18, 0x02	; 2
     230:	31 05       	cpc	r19, r1
     232:	2c f4       	brge	.+10     	; 0x23e <DIO_setPinDirection+0x56>
     234:	8f 81       	ldd	r24, Y+7	; 0x07
     236:	98 85       	ldd	r25, Y+8	; 0x08
     238:	00 97       	sbiw	r24, 0x00	; 0
     23a:	69 f0       	breq	.+26     	; 0x256 <DIO_setPinDirection+0x6e>
     23c:	60 c0       	rjmp	.+192    	; 0x2fe <DIO_setPinDirection+0x116>
     23e:	2f 81       	ldd	r18, Y+7	; 0x07
     240:	38 85       	ldd	r19, Y+8	; 0x08
     242:	22 30       	cpi	r18, 0x02	; 2
     244:	31 05       	cpc	r19, r1
     246:	89 f1       	breq	.+98     	; 0x2aa <DIO_setPinDirection+0xc2>
     248:	8f 81       	ldd	r24, Y+7	; 0x07
     24a:	98 85       	ldd	r25, Y+8	; 0x08
     24c:	83 30       	cpi	r24, 0x03	; 3
     24e:	91 05       	cpc	r25, r1
     250:	09 f4       	brne	.+2      	; 0x254 <DIO_setPinDirection+0x6c>
     252:	40 c0       	rjmp	.+128    	; 0x2d4 <DIO_setPinDirection+0xec>
     254:	54 c0       	rjmp	.+168    	; 0x2fe <DIO_setPinDirection+0x116>
			{
			case DIO_PORTA:
				SET_BIT(DDRA_DIR_R, pin_ID);
     256:	aa e3       	ldi	r26, 0x3A	; 58
     258:	b0 e0       	ldi	r27, 0x00	; 0
     25a:	ea e3       	ldi	r30, 0x3A	; 58
     25c:	f0 e0       	ldi	r31, 0x00	; 0
     25e:	80 81       	ld	r24, Z
     260:	48 2f       	mov	r20, r24
     262:	8b 81       	ldd	r24, Y+3	; 0x03
     264:	28 2f       	mov	r18, r24
     266:	30 e0       	ldi	r19, 0x00	; 0
     268:	81 e0       	ldi	r24, 0x01	; 1
     26a:	90 e0       	ldi	r25, 0x00	; 0
     26c:	02 2e       	mov	r0, r18
     26e:	02 c0       	rjmp	.+4      	; 0x274 <DIO_setPinDirection+0x8c>
     270:	88 0f       	add	r24, r24
     272:	99 1f       	adc	r25, r25
     274:	0a 94       	dec	r0
     276:	e2 f7       	brpl	.-8      	; 0x270 <DIO_setPinDirection+0x88>
     278:	84 2b       	or	r24, r20
     27a:	8c 93       	st	X, r24
				EN_ErrorState = DIO_E_PARAM_VALID;
     27c:	19 82       	std	Y+1, r1	; 0x01
     27e:	c6 c0       	rjmp	.+396    	; 0x40c <DIO_setPinDirection+0x224>
				break;
			case DIO_PORTB:
				SET_BIT(DDRB_DIR_R, pin_ID);
     280:	a7 e3       	ldi	r26, 0x37	; 55
     282:	b0 e0       	ldi	r27, 0x00	; 0
     284:	e7 e3       	ldi	r30, 0x37	; 55
     286:	f0 e0       	ldi	r31, 0x00	; 0
     288:	80 81       	ld	r24, Z
     28a:	48 2f       	mov	r20, r24
     28c:	8b 81       	ldd	r24, Y+3	; 0x03
     28e:	28 2f       	mov	r18, r24
     290:	30 e0       	ldi	r19, 0x00	; 0
     292:	81 e0       	ldi	r24, 0x01	; 1
     294:	90 e0       	ldi	r25, 0x00	; 0
     296:	02 2e       	mov	r0, r18
     298:	02 c0       	rjmp	.+4      	; 0x29e <DIO_setPinDirection+0xb6>
     29a:	88 0f       	add	r24, r24
     29c:	99 1f       	adc	r25, r25
     29e:	0a 94       	dec	r0
     2a0:	e2 f7       	brpl	.-8      	; 0x29a <DIO_setPinDirection+0xb2>
     2a2:	84 2b       	or	r24, r20
     2a4:	8c 93       	st	X, r24
				EN_ErrorState = DIO_E_PARAM_VALID;
     2a6:	19 82       	std	Y+1, r1	; 0x01
     2a8:	b1 c0       	rjmp	.+354    	; 0x40c <DIO_setPinDirection+0x224>
				break;
			case DIO_PORTC:
				SET_BIT(DDRC_DIR_R, pin_ID);
     2aa:	a4 e3       	ldi	r26, 0x34	; 52
     2ac:	b0 e0       	ldi	r27, 0x00	; 0
     2ae:	e4 e3       	ldi	r30, 0x34	; 52
     2b0:	f0 e0       	ldi	r31, 0x00	; 0
     2b2:	80 81       	ld	r24, Z
     2b4:	48 2f       	mov	r20, r24
     2b6:	8b 81       	ldd	r24, Y+3	; 0x03
     2b8:	28 2f       	mov	r18, r24
     2ba:	30 e0       	ldi	r19, 0x00	; 0
     2bc:	81 e0       	ldi	r24, 0x01	; 1
     2be:	90 e0       	ldi	r25, 0x00	; 0
     2c0:	02 2e       	mov	r0, r18
     2c2:	02 c0       	rjmp	.+4      	; 0x2c8 <DIO_setPinDirection+0xe0>
     2c4:	88 0f       	add	r24, r24
     2c6:	99 1f       	adc	r25, r25
     2c8:	0a 94       	dec	r0
     2ca:	e2 f7       	brpl	.-8      	; 0x2c4 <DIO_setPinDirection+0xdc>
     2cc:	84 2b       	or	r24, r20
     2ce:	8c 93       	st	X, r24
				EN_ErrorState = DIO_E_PARAM_VALID;
     2d0:	19 82       	std	Y+1, r1	; 0x01
     2d2:	9c c0       	rjmp	.+312    	; 0x40c <DIO_setPinDirection+0x224>
				break;
			case DIO_PORTD:
				SET_BIT(DDRD_DIR_R, pin_ID);
     2d4:	a1 e3       	ldi	r26, 0x31	; 49
     2d6:	b0 e0       	ldi	r27, 0x00	; 0
     2d8:	e1 e3       	ldi	r30, 0x31	; 49
     2da:	f0 e0       	ldi	r31, 0x00	; 0
     2dc:	80 81       	ld	r24, Z
     2de:	48 2f       	mov	r20, r24
     2e0:	8b 81       	ldd	r24, Y+3	; 0x03
     2e2:	28 2f       	mov	r18, r24
     2e4:	30 e0       	ldi	r19, 0x00	; 0
     2e6:	81 e0       	ldi	r24, 0x01	; 1
     2e8:	90 e0       	ldi	r25, 0x00	; 0
     2ea:	02 2e       	mov	r0, r18
     2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <DIO_setPinDirection+0x10a>
     2ee:	88 0f       	add	r24, r24
     2f0:	99 1f       	adc	r25, r25
     2f2:	0a 94       	dec	r0
     2f4:	e2 f7       	brpl	.-8      	; 0x2ee <DIO_setPinDirection+0x106>
     2f6:	84 2b       	or	r24, r20
     2f8:	8c 93       	st	X, r24
				EN_ErrorState = DIO_E_PARAM_VALID;
     2fa:	19 82       	std	Y+1, r1	; 0x01
     2fc:	87 c0       	rjmp	.+270    	; 0x40c <DIO_setPinDirection+0x224>
				break;
            default:
            	EN_ErrorState = DIO_E_PARAM_INVALID_PORT_ID;	/* Invalid port id */
     2fe:	81 e0       	ldi	r24, 0x01	; 1
     300:	89 83       	std	Y+1, r24	; 0x01
     302:	84 c0       	rjmp	.+264    	; 0x40c <DIO_setPinDirection+0x224>
                break;
			}
		}
		else if (pin_Direction == INPUT)
     304:	8c 81       	ldd	r24, Y+4	; 0x04
     306:	88 23       	and	r24, r24
     308:	09 f0       	breq	.+2      	; 0x30c <DIO_setPinDirection+0x124>
     30a:	7b c0       	rjmp	.+246    	; 0x402 <DIO_setPinDirection+0x21a>
		{
			switch (port_ID)
     30c:	8a 81       	ldd	r24, Y+2	; 0x02
     30e:	28 2f       	mov	r18, r24
     310:	30 e0       	ldi	r19, 0x00	; 0
     312:	3e 83       	std	Y+6, r19	; 0x06
     314:	2d 83       	std	Y+5, r18	; 0x05
     316:	8d 81       	ldd	r24, Y+5	; 0x05
     318:	9e 81       	ldd	r25, Y+6	; 0x06
     31a:	81 30       	cpi	r24, 0x01	; 1
     31c:	91 05       	cpc	r25, r1
     31e:	61 f1       	breq	.+88     	; 0x378 <DIO_setPinDirection+0x190>
     320:	2d 81       	ldd	r18, Y+5	; 0x05
     322:	3e 81       	ldd	r19, Y+6	; 0x06
     324:	22 30       	cpi	r18, 0x02	; 2
     326:	31 05       	cpc	r19, r1
     328:	2c f4       	brge	.+10     	; 0x334 <DIO_setPinDirection+0x14c>
     32a:	8d 81       	ldd	r24, Y+5	; 0x05
     32c:	9e 81       	ldd	r25, Y+6	; 0x06
     32e:	00 97       	sbiw	r24, 0x00	; 0
     330:	69 f0       	breq	.+26     	; 0x34c <DIO_setPinDirection+0x164>
     332:	64 c0       	rjmp	.+200    	; 0x3fc <DIO_setPinDirection+0x214>
     334:	2d 81       	ldd	r18, Y+5	; 0x05
     336:	3e 81       	ldd	r19, Y+6	; 0x06
     338:	22 30       	cpi	r18, 0x02	; 2
     33a:	31 05       	cpc	r19, r1
     33c:	99 f1       	breq	.+102    	; 0x3a4 <DIO_setPinDirection+0x1bc>
     33e:	8d 81       	ldd	r24, Y+5	; 0x05
     340:	9e 81       	ldd	r25, Y+6	; 0x06
     342:	83 30       	cpi	r24, 0x03	; 3
     344:	91 05       	cpc	r25, r1
     346:	09 f4       	brne	.+2      	; 0x34a <DIO_setPinDirection+0x162>
     348:	43 c0       	rjmp	.+134    	; 0x3d0 <DIO_setPinDirection+0x1e8>
     34a:	58 c0       	rjmp	.+176    	; 0x3fc <DIO_setPinDirection+0x214>
			{
			case DIO_PORTA:
				CLEAR_BIT(DDRA_DIR_R, pin_ID);
     34c:	aa e3       	ldi	r26, 0x3A	; 58
     34e:	b0 e0       	ldi	r27, 0x00	; 0
     350:	ea e3       	ldi	r30, 0x3A	; 58
     352:	f0 e0       	ldi	r31, 0x00	; 0
     354:	80 81       	ld	r24, Z
     356:	48 2f       	mov	r20, r24
     358:	8b 81       	ldd	r24, Y+3	; 0x03
     35a:	28 2f       	mov	r18, r24
     35c:	30 e0       	ldi	r19, 0x00	; 0
     35e:	81 e0       	ldi	r24, 0x01	; 1
     360:	90 e0       	ldi	r25, 0x00	; 0
     362:	02 2e       	mov	r0, r18
     364:	02 c0       	rjmp	.+4      	; 0x36a <DIO_setPinDirection+0x182>
     366:	88 0f       	add	r24, r24
     368:	99 1f       	adc	r25, r25
     36a:	0a 94       	dec	r0
     36c:	e2 f7       	brpl	.-8      	; 0x366 <DIO_setPinDirection+0x17e>
     36e:	80 95       	com	r24
     370:	84 23       	and	r24, r20
     372:	8c 93       	st	X, r24
				EN_ErrorState = DIO_E_PARAM_VALID;
     374:	19 82       	std	Y+1, r1	; 0x01
     376:	4a c0       	rjmp	.+148    	; 0x40c <DIO_setPinDirection+0x224>
				break;
			case DIO_PORTB:
				CLEAR_BIT(DDRB_DIR_R, pin_ID);
     378:	a7 e3       	ldi	r26, 0x37	; 55
     37a:	b0 e0       	ldi	r27, 0x00	; 0
     37c:	e7 e3       	ldi	r30, 0x37	; 55
     37e:	f0 e0       	ldi	r31, 0x00	; 0
     380:	80 81       	ld	r24, Z
     382:	48 2f       	mov	r20, r24
     384:	8b 81       	ldd	r24, Y+3	; 0x03
     386:	28 2f       	mov	r18, r24
     388:	30 e0       	ldi	r19, 0x00	; 0
     38a:	81 e0       	ldi	r24, 0x01	; 1
     38c:	90 e0       	ldi	r25, 0x00	; 0
     38e:	02 2e       	mov	r0, r18
     390:	02 c0       	rjmp	.+4      	; 0x396 <DIO_setPinDirection+0x1ae>
     392:	88 0f       	add	r24, r24
     394:	99 1f       	adc	r25, r25
     396:	0a 94       	dec	r0
     398:	e2 f7       	brpl	.-8      	; 0x392 <DIO_setPinDirection+0x1aa>
     39a:	80 95       	com	r24
     39c:	84 23       	and	r24, r20
     39e:	8c 93       	st	X, r24
				EN_ErrorState = DIO_E_PARAM_VALID;
     3a0:	19 82       	std	Y+1, r1	; 0x01
     3a2:	34 c0       	rjmp	.+104    	; 0x40c <DIO_setPinDirection+0x224>
				break;
			case DIO_PORTC:
				CLEAR_BIT(DDRC_DIR_R, pin_ID);
     3a4:	a4 e3       	ldi	r26, 0x34	; 52
     3a6:	b0 e0       	ldi	r27, 0x00	; 0
     3a8:	e4 e3       	ldi	r30, 0x34	; 52
     3aa:	f0 e0       	ldi	r31, 0x00	; 0
     3ac:	80 81       	ld	r24, Z
     3ae:	48 2f       	mov	r20, r24
     3b0:	8b 81       	ldd	r24, Y+3	; 0x03
     3b2:	28 2f       	mov	r18, r24
     3b4:	30 e0       	ldi	r19, 0x00	; 0
     3b6:	81 e0       	ldi	r24, 0x01	; 1
     3b8:	90 e0       	ldi	r25, 0x00	; 0
     3ba:	02 2e       	mov	r0, r18
     3bc:	02 c0       	rjmp	.+4      	; 0x3c2 <DIO_setPinDirection+0x1da>
     3be:	88 0f       	add	r24, r24
     3c0:	99 1f       	adc	r25, r25
     3c2:	0a 94       	dec	r0
     3c4:	e2 f7       	brpl	.-8      	; 0x3be <DIO_setPinDirection+0x1d6>
     3c6:	80 95       	com	r24
     3c8:	84 23       	and	r24, r20
     3ca:	8c 93       	st	X, r24
				EN_ErrorState = DIO_E_PARAM_VALID;
     3cc:	19 82       	std	Y+1, r1	; 0x01
     3ce:	1e c0       	rjmp	.+60     	; 0x40c <DIO_setPinDirection+0x224>
				break;
			case DIO_PORTD:
				CLEAR_BIT(DDRD_DIR_R, pin_ID);
     3d0:	a1 e3       	ldi	r26, 0x31	; 49
     3d2:	b0 e0       	ldi	r27, 0x00	; 0
     3d4:	e1 e3       	ldi	r30, 0x31	; 49
     3d6:	f0 e0       	ldi	r31, 0x00	; 0
     3d8:	80 81       	ld	r24, Z
     3da:	48 2f       	mov	r20, r24
     3dc:	8b 81       	ldd	r24, Y+3	; 0x03
     3de:	28 2f       	mov	r18, r24
     3e0:	30 e0       	ldi	r19, 0x00	; 0
     3e2:	81 e0       	ldi	r24, 0x01	; 1
     3e4:	90 e0       	ldi	r25, 0x00	; 0
     3e6:	02 2e       	mov	r0, r18
     3e8:	02 c0       	rjmp	.+4      	; 0x3ee <DIO_setPinDirection+0x206>
     3ea:	88 0f       	add	r24, r24
     3ec:	99 1f       	adc	r25, r25
     3ee:	0a 94       	dec	r0
     3f0:	e2 f7       	brpl	.-8      	; 0x3ea <DIO_setPinDirection+0x202>
     3f2:	80 95       	com	r24
     3f4:	84 23       	and	r24, r20
     3f6:	8c 93       	st	X, r24
				EN_ErrorState = DIO_E_PARAM_VALID;
     3f8:	19 82       	std	Y+1, r1	; 0x01
     3fa:	08 c0       	rjmp	.+16     	; 0x40c <DIO_setPinDirection+0x224>
				break;
            default:
            	EN_ErrorState = DIO_E_PARAM_INVALID_PORT_ID;	/* Invalid port id */
     3fc:	81 e0       	ldi	r24, 0x01	; 1
     3fe:	89 83       	std	Y+1, r24	; 0x01
     400:	05 c0       	rjmp	.+10     	; 0x40c <DIO_setPinDirection+0x224>
                break;
			}
		}
		else
		{
			EN_ErrorState = DIO_E_PARAM_INVALID_PORT_DIR;	/* Invalid port direction */
     402:	84 e0       	ldi	r24, 0x04	; 4
     404:	89 83       	std	Y+1, r24	; 0x01
     406:	02 c0       	rjmp	.+4      	; 0x40c <DIO_setPinDirection+0x224>
		}
	}
	else
	{
		EN_ErrorState = DIO_E_PARAM_INVALID_PIN_ID;	/* Invalid pin id */
     408:	82 e0       	ldi	r24, 0x02	; 2
     40a:	89 83       	std	Y+1, r24	; 0x01
	}
	return EN_ErrorState;
     40c:	89 81       	ldd	r24, Y+1	; 0x01
}
     40e:	28 96       	adiw	r28, 0x08	; 8
     410:	0f b6       	in	r0, 0x3f	; 63
     412:	f8 94       	cli
     414:	de bf       	out	0x3e, r29	; 62
     416:	0f be       	out	0x3f, r0	; 63
     418:	cd bf       	out	0x3d, r28	; 61
     41a:	cf 91       	pop	r28
     41c:	df 91       	pop	r29
     41e:	08 95       	ret

00000420 <DIO_writePort>:
 * [in/out]		 	None
 *
 * [Returns]:       Error State
 ******************************************************************************/
DIO_E_STATE_t DIO_writePort(DIO_PortId port_ID, uint8_t port_Value)
{
     420:	df 93       	push	r29
     422:	cf 93       	push	r28
     424:	00 d0       	rcall	.+0      	; 0x426 <DIO_writePort+0x6>
     426:	00 d0       	rcall	.+0      	; 0x428 <DIO_writePort+0x8>
     428:	0f 92       	push	r0
     42a:	cd b7       	in	r28, 0x3d	; 61
     42c:	de b7       	in	r29, 0x3e	; 62
     42e:	8a 83       	std	Y+2, r24	; 0x02
     430:	6b 83       	std	Y+3, r22	; 0x03
	DIO_E_STATE_t EN_ErrorState = E_NOT_OK;
     432:	81 e0       	ldi	r24, 0x01	; 1
     434:	89 83       	std	Y+1, r24	; 0x01

    switch (port_ID)
     436:	8a 81       	ldd	r24, Y+2	; 0x02
     438:	28 2f       	mov	r18, r24
     43a:	30 e0       	ldi	r19, 0x00	; 0
     43c:	3d 83       	std	Y+5, r19	; 0x05
     43e:	2c 83       	std	Y+4, r18	; 0x04
     440:	8c 81       	ldd	r24, Y+4	; 0x04
     442:	9d 81       	ldd	r25, Y+5	; 0x05
     444:	81 30       	cpi	r24, 0x01	; 1
     446:	91 05       	cpc	r25, r1
     448:	d9 f0       	breq	.+54     	; 0x480 <DIO_writePort+0x60>
     44a:	2c 81       	ldd	r18, Y+4	; 0x04
     44c:	3d 81       	ldd	r19, Y+5	; 0x05
     44e:	22 30       	cpi	r18, 0x02	; 2
     450:	31 05       	cpc	r19, r1
     452:	2c f4       	brge	.+10     	; 0x45e <DIO_writePort+0x3e>
     454:	8c 81       	ldd	r24, Y+4	; 0x04
     456:	9d 81       	ldd	r25, Y+5	; 0x05
     458:	00 97       	sbiw	r24, 0x00	; 0
     45a:	61 f0       	breq	.+24     	; 0x474 <DIO_writePort+0x54>
     45c:	23 c0       	rjmp	.+70     	; 0x4a4 <DIO_writePort+0x84>
     45e:	2c 81       	ldd	r18, Y+4	; 0x04
     460:	3d 81       	ldd	r19, Y+5	; 0x05
     462:	22 30       	cpi	r18, 0x02	; 2
     464:	31 05       	cpc	r19, r1
     466:	91 f0       	breq	.+36     	; 0x48c <DIO_writePort+0x6c>
     468:	8c 81       	ldd	r24, Y+4	; 0x04
     46a:	9d 81       	ldd	r25, Y+5	; 0x05
     46c:	83 30       	cpi	r24, 0x03	; 3
     46e:	91 05       	cpc	r25, r1
     470:	99 f0       	breq	.+38     	; 0x498 <DIO_writePort+0x78>
     472:	18 c0       	rjmp	.+48     	; 0x4a4 <DIO_writePort+0x84>
    {
    case DIO_PORTA:
        PORTA_DATA_R = port_Value;
     474:	eb e3       	ldi	r30, 0x3B	; 59
     476:	f0 e0       	ldi	r31, 0x00	; 0
     478:	8b 81       	ldd	r24, Y+3	; 0x03
     47a:	80 83       	st	Z, r24
        EN_ErrorState = DIO_E_PARAM_VALID;
     47c:	19 82       	std	Y+1, r1	; 0x01
     47e:	14 c0       	rjmp	.+40     	; 0x4a8 <DIO_writePort+0x88>
        break;
    case DIO_PORTB:
        PORTB_DATA_R = port_Value;
     480:	e8 e3       	ldi	r30, 0x38	; 56
     482:	f0 e0       	ldi	r31, 0x00	; 0
     484:	8b 81       	ldd	r24, Y+3	; 0x03
     486:	80 83       	st	Z, r24
        EN_ErrorState = DIO_E_PARAM_VALID;
     488:	19 82       	std	Y+1, r1	; 0x01
     48a:	0e c0       	rjmp	.+28     	; 0x4a8 <DIO_writePort+0x88>
        break;
    case DIO_PORTC:
        PORTC_DATA_R = port_Value;
     48c:	e5 e3       	ldi	r30, 0x35	; 53
     48e:	f0 e0       	ldi	r31, 0x00	; 0
     490:	8b 81       	ldd	r24, Y+3	; 0x03
     492:	80 83       	st	Z, r24
        EN_ErrorState = DIO_E_PARAM_VALID;
     494:	19 82       	std	Y+1, r1	; 0x01
     496:	08 c0       	rjmp	.+16     	; 0x4a8 <DIO_writePort+0x88>
        break;
    case DIO_PORTD:
        PORTD_DATA_R = port_Value;
     498:	e2 e3       	ldi	r30, 0x32	; 50
     49a:	f0 e0       	ldi	r31, 0x00	; 0
     49c:	8b 81       	ldd	r24, Y+3	; 0x03
     49e:	80 83       	st	Z, r24
        EN_ErrorState = DIO_E_PARAM_VALID;
     4a0:	19 82       	std	Y+1, r1	; 0x01
     4a2:	02 c0       	rjmp	.+4      	; 0x4a8 <DIO_writePort+0x88>
        break;
    default:
    	EN_ErrorState = DIO_E_PARAM_INVALID_PORT_ID;	/* Invalid port id */
     4a4:	81 e0       	ldi	r24, 0x01	; 1
     4a6:	89 83       	std	Y+1, r24	; 0x01
        break;
    }
    return EN_ErrorState;
     4a8:	89 81       	ldd	r24, Y+1	; 0x01
}
     4aa:	0f 90       	pop	r0
     4ac:	0f 90       	pop	r0
     4ae:	0f 90       	pop	r0
     4b0:	0f 90       	pop	r0
     4b2:	0f 90       	pop	r0
     4b4:	cf 91       	pop	r28
     4b6:	df 91       	pop	r29
     4b8:	08 95       	ret

000004ba <DIO_writePin>:
 * [in/out]		 	None
 *
 * [Returns]:       Error State
 ******************************************************************************/
DIO_E_STATE_t DIO_writePin(DIO_PortId port_ID, DIO_PinId pin_ID, uint8_t pin_Value)
{
     4ba:	df 93       	push	r29
     4bc:	cf 93       	push	r28
     4be:	cd b7       	in	r28, 0x3d	; 61
     4c0:	de b7       	in	r29, 0x3e	; 62
     4c2:	28 97       	sbiw	r28, 0x08	; 8
     4c4:	0f b6       	in	r0, 0x3f	; 63
     4c6:	f8 94       	cli
     4c8:	de bf       	out	0x3e, r29	; 62
     4ca:	0f be       	out	0x3f, r0	; 63
     4cc:	cd bf       	out	0x3d, r28	; 61
     4ce:	8a 83       	std	Y+2, r24	; 0x02
     4d0:	6b 83       	std	Y+3, r22	; 0x03
     4d2:	4c 83       	std	Y+4, r20	; 0x04
	DIO_E_STATE_t EN_ErrorState = E_NOT_OK;
     4d4:	81 e0       	ldi	r24, 0x01	; 1
     4d6:	89 83       	std	Y+1, r24	; 0x01

	/* Check if the pin id is one of the existed pin or not */
	if ((pin_ID >= PIN_0) && (pin_ID <= PIN_7))
     4d8:	8b 81       	ldd	r24, Y+3	; 0x03
     4da:	88 30       	cpi	r24, 0x08	; 8
     4dc:	08 f0       	brcs	.+2      	; 0x4e0 <DIO_writePin+0x26>
     4de:	fd c0       	rjmp	.+506    	; 0x6da <DIO_writePin+0x220>
	{
		if (pin_Value == HIGH)
     4e0:	8c 81       	ldd	r24, Y+4	; 0x04
     4e2:	81 30       	cpi	r24, 0x01	; 1
     4e4:	09 f0       	breq	.+2      	; 0x4e8 <DIO_writePin+0x2e>
     4e6:	77 c0       	rjmp	.+238    	; 0x5d6 <DIO_writePin+0x11c>
		{
			switch (port_ID)
     4e8:	8a 81       	ldd	r24, Y+2	; 0x02
     4ea:	28 2f       	mov	r18, r24
     4ec:	30 e0       	ldi	r19, 0x00	; 0
     4ee:	38 87       	std	Y+8, r19	; 0x08
     4f0:	2f 83       	std	Y+7, r18	; 0x07
     4f2:	8f 81       	ldd	r24, Y+7	; 0x07
     4f4:	98 85       	ldd	r25, Y+8	; 0x08
     4f6:	81 30       	cpi	r24, 0x01	; 1
     4f8:	91 05       	cpc	r25, r1
     4fa:	59 f1       	breq	.+86     	; 0x552 <DIO_writePin+0x98>
     4fc:	2f 81       	ldd	r18, Y+7	; 0x07
     4fe:	38 85       	ldd	r19, Y+8	; 0x08
     500:	22 30       	cpi	r18, 0x02	; 2
     502:	31 05       	cpc	r19, r1
     504:	2c f4       	brge	.+10     	; 0x510 <DIO_writePin+0x56>
     506:	8f 81       	ldd	r24, Y+7	; 0x07
     508:	98 85       	ldd	r25, Y+8	; 0x08
     50a:	00 97       	sbiw	r24, 0x00	; 0
     50c:	69 f0       	breq	.+26     	; 0x528 <DIO_writePin+0x6e>
     50e:	60 c0       	rjmp	.+192    	; 0x5d0 <DIO_writePin+0x116>
     510:	2f 81       	ldd	r18, Y+7	; 0x07
     512:	38 85       	ldd	r19, Y+8	; 0x08
     514:	22 30       	cpi	r18, 0x02	; 2
     516:	31 05       	cpc	r19, r1
     518:	89 f1       	breq	.+98     	; 0x57c <DIO_writePin+0xc2>
     51a:	8f 81       	ldd	r24, Y+7	; 0x07
     51c:	98 85       	ldd	r25, Y+8	; 0x08
     51e:	83 30       	cpi	r24, 0x03	; 3
     520:	91 05       	cpc	r25, r1
     522:	09 f4       	brne	.+2      	; 0x526 <DIO_writePin+0x6c>
     524:	40 c0       	rjmp	.+128    	; 0x5a6 <DIO_writePin+0xec>
     526:	54 c0       	rjmp	.+168    	; 0x5d0 <DIO_writePin+0x116>
			{
			case DIO_PORTA:
				SET_BIT(PORTA_DATA_R, pin_ID);
     528:	ab e3       	ldi	r26, 0x3B	; 59
     52a:	b0 e0       	ldi	r27, 0x00	; 0
     52c:	eb e3       	ldi	r30, 0x3B	; 59
     52e:	f0 e0       	ldi	r31, 0x00	; 0
     530:	80 81       	ld	r24, Z
     532:	48 2f       	mov	r20, r24
     534:	8b 81       	ldd	r24, Y+3	; 0x03
     536:	28 2f       	mov	r18, r24
     538:	30 e0       	ldi	r19, 0x00	; 0
     53a:	81 e0       	ldi	r24, 0x01	; 1
     53c:	90 e0       	ldi	r25, 0x00	; 0
     53e:	02 2e       	mov	r0, r18
     540:	02 c0       	rjmp	.+4      	; 0x546 <DIO_writePin+0x8c>
     542:	88 0f       	add	r24, r24
     544:	99 1f       	adc	r25, r25
     546:	0a 94       	dec	r0
     548:	e2 f7       	brpl	.-8      	; 0x542 <DIO_writePin+0x88>
     54a:	84 2b       	or	r24, r20
     54c:	8c 93       	st	X, r24
				EN_ErrorState = DIO_E_PARAM_VALID;
     54e:	19 82       	std	Y+1, r1	; 0x01
     550:	c6 c0       	rjmp	.+396    	; 0x6de <DIO_writePin+0x224>
				break;
			case DIO_PORTB:
				SET_BIT(PORTB_DATA_R, pin_ID);
     552:	a8 e3       	ldi	r26, 0x38	; 56
     554:	b0 e0       	ldi	r27, 0x00	; 0
     556:	e8 e3       	ldi	r30, 0x38	; 56
     558:	f0 e0       	ldi	r31, 0x00	; 0
     55a:	80 81       	ld	r24, Z
     55c:	48 2f       	mov	r20, r24
     55e:	8b 81       	ldd	r24, Y+3	; 0x03
     560:	28 2f       	mov	r18, r24
     562:	30 e0       	ldi	r19, 0x00	; 0
     564:	81 e0       	ldi	r24, 0x01	; 1
     566:	90 e0       	ldi	r25, 0x00	; 0
     568:	02 2e       	mov	r0, r18
     56a:	02 c0       	rjmp	.+4      	; 0x570 <DIO_writePin+0xb6>
     56c:	88 0f       	add	r24, r24
     56e:	99 1f       	adc	r25, r25
     570:	0a 94       	dec	r0
     572:	e2 f7       	brpl	.-8      	; 0x56c <DIO_writePin+0xb2>
     574:	84 2b       	or	r24, r20
     576:	8c 93       	st	X, r24
				EN_ErrorState = DIO_E_PARAM_VALID;
     578:	19 82       	std	Y+1, r1	; 0x01
     57a:	b1 c0       	rjmp	.+354    	; 0x6de <DIO_writePin+0x224>
				break;
			case DIO_PORTC:
				SET_BIT(PORTC_DATA_R, pin_ID);
     57c:	a5 e3       	ldi	r26, 0x35	; 53
     57e:	b0 e0       	ldi	r27, 0x00	; 0
     580:	e5 e3       	ldi	r30, 0x35	; 53
     582:	f0 e0       	ldi	r31, 0x00	; 0
     584:	80 81       	ld	r24, Z
     586:	48 2f       	mov	r20, r24
     588:	8b 81       	ldd	r24, Y+3	; 0x03
     58a:	28 2f       	mov	r18, r24
     58c:	30 e0       	ldi	r19, 0x00	; 0
     58e:	81 e0       	ldi	r24, 0x01	; 1
     590:	90 e0       	ldi	r25, 0x00	; 0
     592:	02 2e       	mov	r0, r18
     594:	02 c0       	rjmp	.+4      	; 0x59a <DIO_writePin+0xe0>
     596:	88 0f       	add	r24, r24
     598:	99 1f       	adc	r25, r25
     59a:	0a 94       	dec	r0
     59c:	e2 f7       	brpl	.-8      	; 0x596 <DIO_writePin+0xdc>
     59e:	84 2b       	or	r24, r20
     5a0:	8c 93       	st	X, r24
				EN_ErrorState = DIO_E_PARAM_VALID;
     5a2:	19 82       	std	Y+1, r1	; 0x01
     5a4:	9c c0       	rjmp	.+312    	; 0x6de <DIO_writePin+0x224>
				break;
			case DIO_PORTD:
				SET_BIT(PORTD_DATA_R, pin_ID);
     5a6:	a2 e3       	ldi	r26, 0x32	; 50
     5a8:	b0 e0       	ldi	r27, 0x00	; 0
     5aa:	e2 e3       	ldi	r30, 0x32	; 50
     5ac:	f0 e0       	ldi	r31, 0x00	; 0
     5ae:	80 81       	ld	r24, Z
     5b0:	48 2f       	mov	r20, r24
     5b2:	8b 81       	ldd	r24, Y+3	; 0x03
     5b4:	28 2f       	mov	r18, r24
     5b6:	30 e0       	ldi	r19, 0x00	; 0
     5b8:	81 e0       	ldi	r24, 0x01	; 1
     5ba:	90 e0       	ldi	r25, 0x00	; 0
     5bc:	02 2e       	mov	r0, r18
     5be:	02 c0       	rjmp	.+4      	; 0x5c4 <DIO_writePin+0x10a>
     5c0:	88 0f       	add	r24, r24
     5c2:	99 1f       	adc	r25, r25
     5c4:	0a 94       	dec	r0
     5c6:	e2 f7       	brpl	.-8      	; 0x5c0 <DIO_writePin+0x106>
     5c8:	84 2b       	or	r24, r20
     5ca:	8c 93       	st	X, r24
				EN_ErrorState = DIO_E_PARAM_VALID;
     5cc:	19 82       	std	Y+1, r1	; 0x01
     5ce:	87 c0       	rjmp	.+270    	; 0x6de <DIO_writePin+0x224>
				break;
            default:
            	EN_ErrorState = DIO_E_PARAM_INVALID_PORT_ID;	/* Invalid port id */
     5d0:	81 e0       	ldi	r24, 0x01	; 1
     5d2:	89 83       	std	Y+1, r24	; 0x01
     5d4:	84 c0       	rjmp	.+264    	; 0x6de <DIO_writePin+0x224>
                break;
			}
		}
		else if (pin_Value == LOW)
     5d6:	8c 81       	ldd	r24, Y+4	; 0x04
     5d8:	88 23       	and	r24, r24
     5da:	09 f0       	breq	.+2      	; 0x5de <DIO_writePin+0x124>
     5dc:	7b c0       	rjmp	.+246    	; 0x6d4 <DIO_writePin+0x21a>
		{
			switch (port_ID)
     5de:	8a 81       	ldd	r24, Y+2	; 0x02
     5e0:	28 2f       	mov	r18, r24
     5e2:	30 e0       	ldi	r19, 0x00	; 0
     5e4:	3e 83       	std	Y+6, r19	; 0x06
     5e6:	2d 83       	std	Y+5, r18	; 0x05
     5e8:	8d 81       	ldd	r24, Y+5	; 0x05
     5ea:	9e 81       	ldd	r25, Y+6	; 0x06
     5ec:	81 30       	cpi	r24, 0x01	; 1
     5ee:	91 05       	cpc	r25, r1
     5f0:	61 f1       	breq	.+88     	; 0x64a <DIO_writePin+0x190>
     5f2:	2d 81       	ldd	r18, Y+5	; 0x05
     5f4:	3e 81       	ldd	r19, Y+6	; 0x06
     5f6:	22 30       	cpi	r18, 0x02	; 2
     5f8:	31 05       	cpc	r19, r1
     5fa:	2c f4       	brge	.+10     	; 0x606 <DIO_writePin+0x14c>
     5fc:	8d 81       	ldd	r24, Y+5	; 0x05
     5fe:	9e 81       	ldd	r25, Y+6	; 0x06
     600:	00 97       	sbiw	r24, 0x00	; 0
     602:	69 f0       	breq	.+26     	; 0x61e <DIO_writePin+0x164>
     604:	64 c0       	rjmp	.+200    	; 0x6ce <DIO_writePin+0x214>
     606:	2d 81       	ldd	r18, Y+5	; 0x05
     608:	3e 81       	ldd	r19, Y+6	; 0x06
     60a:	22 30       	cpi	r18, 0x02	; 2
     60c:	31 05       	cpc	r19, r1
     60e:	99 f1       	breq	.+102    	; 0x676 <DIO_writePin+0x1bc>
     610:	8d 81       	ldd	r24, Y+5	; 0x05
     612:	9e 81       	ldd	r25, Y+6	; 0x06
     614:	83 30       	cpi	r24, 0x03	; 3
     616:	91 05       	cpc	r25, r1
     618:	09 f4       	brne	.+2      	; 0x61c <DIO_writePin+0x162>
     61a:	43 c0       	rjmp	.+134    	; 0x6a2 <DIO_writePin+0x1e8>
     61c:	58 c0       	rjmp	.+176    	; 0x6ce <DIO_writePin+0x214>
			{
			case DIO_PORTA:
				CLEAR_BIT(PORTA_DATA_R, pin_ID);
     61e:	ab e3       	ldi	r26, 0x3B	; 59
     620:	b0 e0       	ldi	r27, 0x00	; 0
     622:	eb e3       	ldi	r30, 0x3B	; 59
     624:	f0 e0       	ldi	r31, 0x00	; 0
     626:	80 81       	ld	r24, Z
     628:	48 2f       	mov	r20, r24
     62a:	8b 81       	ldd	r24, Y+3	; 0x03
     62c:	28 2f       	mov	r18, r24
     62e:	30 e0       	ldi	r19, 0x00	; 0
     630:	81 e0       	ldi	r24, 0x01	; 1
     632:	90 e0       	ldi	r25, 0x00	; 0
     634:	02 2e       	mov	r0, r18
     636:	02 c0       	rjmp	.+4      	; 0x63c <DIO_writePin+0x182>
     638:	88 0f       	add	r24, r24
     63a:	99 1f       	adc	r25, r25
     63c:	0a 94       	dec	r0
     63e:	e2 f7       	brpl	.-8      	; 0x638 <DIO_writePin+0x17e>
     640:	80 95       	com	r24
     642:	84 23       	and	r24, r20
     644:	8c 93       	st	X, r24
				EN_ErrorState = DIO_E_PARAM_VALID;
     646:	19 82       	std	Y+1, r1	; 0x01
     648:	4a c0       	rjmp	.+148    	; 0x6de <DIO_writePin+0x224>
				break;
			case DIO_PORTB:
				CLEAR_BIT(PORTB_DATA_R, pin_ID);
     64a:	a8 e3       	ldi	r26, 0x38	; 56
     64c:	b0 e0       	ldi	r27, 0x00	; 0
     64e:	e8 e3       	ldi	r30, 0x38	; 56
     650:	f0 e0       	ldi	r31, 0x00	; 0
     652:	80 81       	ld	r24, Z
     654:	48 2f       	mov	r20, r24
     656:	8b 81       	ldd	r24, Y+3	; 0x03
     658:	28 2f       	mov	r18, r24
     65a:	30 e0       	ldi	r19, 0x00	; 0
     65c:	81 e0       	ldi	r24, 0x01	; 1
     65e:	90 e0       	ldi	r25, 0x00	; 0
     660:	02 2e       	mov	r0, r18
     662:	02 c0       	rjmp	.+4      	; 0x668 <DIO_writePin+0x1ae>
     664:	88 0f       	add	r24, r24
     666:	99 1f       	adc	r25, r25
     668:	0a 94       	dec	r0
     66a:	e2 f7       	brpl	.-8      	; 0x664 <DIO_writePin+0x1aa>
     66c:	80 95       	com	r24
     66e:	84 23       	and	r24, r20
     670:	8c 93       	st	X, r24
				EN_ErrorState = DIO_E_PARAM_VALID;
     672:	19 82       	std	Y+1, r1	; 0x01
     674:	34 c0       	rjmp	.+104    	; 0x6de <DIO_writePin+0x224>
				break;
			case DIO_PORTC:
				CLEAR_BIT(PORTC_DATA_R, pin_ID);
     676:	a5 e3       	ldi	r26, 0x35	; 53
     678:	b0 e0       	ldi	r27, 0x00	; 0
     67a:	e5 e3       	ldi	r30, 0x35	; 53
     67c:	f0 e0       	ldi	r31, 0x00	; 0
     67e:	80 81       	ld	r24, Z
     680:	48 2f       	mov	r20, r24
     682:	8b 81       	ldd	r24, Y+3	; 0x03
     684:	28 2f       	mov	r18, r24
     686:	30 e0       	ldi	r19, 0x00	; 0
     688:	81 e0       	ldi	r24, 0x01	; 1
     68a:	90 e0       	ldi	r25, 0x00	; 0
     68c:	02 2e       	mov	r0, r18
     68e:	02 c0       	rjmp	.+4      	; 0x694 <DIO_writePin+0x1da>
     690:	88 0f       	add	r24, r24
     692:	99 1f       	adc	r25, r25
     694:	0a 94       	dec	r0
     696:	e2 f7       	brpl	.-8      	; 0x690 <DIO_writePin+0x1d6>
     698:	80 95       	com	r24
     69a:	84 23       	and	r24, r20
     69c:	8c 93       	st	X, r24
				EN_ErrorState = DIO_E_PARAM_VALID;
     69e:	19 82       	std	Y+1, r1	; 0x01
     6a0:	1e c0       	rjmp	.+60     	; 0x6de <DIO_writePin+0x224>
				break;
			case DIO_PORTD:
				CLEAR_BIT(PORTD_DATA_R, pin_ID);
     6a2:	a2 e3       	ldi	r26, 0x32	; 50
     6a4:	b0 e0       	ldi	r27, 0x00	; 0
     6a6:	e2 e3       	ldi	r30, 0x32	; 50
     6a8:	f0 e0       	ldi	r31, 0x00	; 0
     6aa:	80 81       	ld	r24, Z
     6ac:	48 2f       	mov	r20, r24
     6ae:	8b 81       	ldd	r24, Y+3	; 0x03
     6b0:	28 2f       	mov	r18, r24
     6b2:	30 e0       	ldi	r19, 0x00	; 0
     6b4:	81 e0       	ldi	r24, 0x01	; 1
     6b6:	90 e0       	ldi	r25, 0x00	; 0
     6b8:	02 2e       	mov	r0, r18
     6ba:	02 c0       	rjmp	.+4      	; 0x6c0 <DIO_writePin+0x206>
     6bc:	88 0f       	add	r24, r24
     6be:	99 1f       	adc	r25, r25
     6c0:	0a 94       	dec	r0
     6c2:	e2 f7       	brpl	.-8      	; 0x6bc <DIO_writePin+0x202>
     6c4:	80 95       	com	r24
     6c6:	84 23       	and	r24, r20
     6c8:	8c 93       	st	X, r24
				EN_ErrorState = DIO_E_PARAM_VALID;
     6ca:	19 82       	std	Y+1, r1	; 0x01
     6cc:	08 c0       	rjmp	.+16     	; 0x6de <DIO_writePin+0x224>
				break;
            default:
            	EN_ErrorState = DIO_E_PARAM_INVALID_PORT_ID;	/* Invalid port id */
     6ce:	81 e0       	ldi	r24, 0x01	; 1
     6d0:	89 83       	std	Y+1, r24	; 0x01
     6d2:	05 c0       	rjmp	.+10     	; 0x6de <DIO_writePin+0x224>
                break;
			}
		}
		else
        {
			EN_ErrorState = DIO_E_PARAM_INVALID_PORT_DIR;	/* Invalid port direction */
     6d4:	84 e0       	ldi	r24, 0x04	; 4
     6d6:	89 83       	std	Y+1, r24	; 0x01
     6d8:	02 c0       	rjmp	.+4      	; 0x6de <DIO_writePin+0x224>
		}
	}
	else
	{
		EN_ErrorState = DIO_E_PARAM_INVALID_PIN_ID;	/* Invalid pin id */
     6da:	82 e0       	ldi	r24, 0x02	; 2
     6dc:	89 83       	std	Y+1, r24	; 0x01
	}
	return EN_ErrorState;
     6de:	89 81       	ldd	r24, Y+1	; 0x01
}
     6e0:	28 96       	adiw	r28, 0x08	; 8
     6e2:	0f b6       	in	r0, 0x3f	; 63
     6e4:	f8 94       	cli
     6e6:	de bf       	out	0x3e, r29	; 62
     6e8:	0f be       	out	0x3f, r0	; 63
     6ea:	cd bf       	out	0x3d, r28	; 61
     6ec:	cf 91       	pop	r28
     6ee:	df 91       	pop	r29
     6f0:	08 95       	ret

000006f2 <DIO_readPort>:
 * [in/out]		 	None
 *
 * [Returns]:       Error State
 ******************************************************************************/
DIO_E_STATE_t DIO_readPort(DIO_PortId port_ID, uint8_t * port_State)
{
     6f2:	df 93       	push	r29
     6f4:	cf 93       	push	r28
     6f6:	00 d0       	rcall	.+0      	; 0x6f8 <DIO_readPort+0x6>
     6f8:	00 d0       	rcall	.+0      	; 0x6fa <DIO_readPort+0x8>
     6fa:	00 d0       	rcall	.+0      	; 0x6fc <DIO_readPort+0xa>
     6fc:	cd b7       	in	r28, 0x3d	; 61
     6fe:	de b7       	in	r29, 0x3e	; 62
     700:	8a 83       	std	Y+2, r24	; 0x02
     702:	7c 83       	std	Y+4, r23	; 0x04
     704:	6b 83       	std	Y+3, r22	; 0x03
	DIO_E_STATE_t EN_ErrorState = E_NOT_OK;
     706:	81 e0       	ldi	r24, 0x01	; 1
     708:	89 83       	std	Y+1, r24	; 0x01

	/* Check if the pointer is NULL pointer or not */
	if(port_State == NULL_PTR)
     70a:	8b 81       	ldd	r24, Y+3	; 0x03
     70c:	9c 81       	ldd	r25, Y+4	; 0x04
     70e:	00 97       	sbiw	r24, 0x00	; 0
     710:	19 f4       	brne	.+6      	; 0x718 <DIO_readPort+0x26>
    {
		EN_ErrorState = DIO_E_PARAM_POINTER;	/* Invalid pointer */
     712:	85 e0       	ldi	r24, 0x05	; 5
     714:	89 83       	std	Y+1, r24	; 0x01
     716:	41 c0       	rjmp	.+130    	; 0x79a <DIO_readPort+0xa8>
	}
	else
	{
		switch (port_ID)
     718:	8a 81       	ldd	r24, Y+2	; 0x02
     71a:	28 2f       	mov	r18, r24
     71c:	30 e0       	ldi	r19, 0x00	; 0
     71e:	3e 83       	std	Y+6, r19	; 0x06
     720:	2d 83       	std	Y+5, r18	; 0x05
     722:	8d 81       	ldd	r24, Y+5	; 0x05
     724:	9e 81       	ldd	r25, Y+6	; 0x06
     726:	81 30       	cpi	r24, 0x01	; 1
     728:	91 05       	cpc	r25, r1
     72a:	e9 f0       	breq	.+58     	; 0x766 <DIO_readPort+0x74>
     72c:	2d 81       	ldd	r18, Y+5	; 0x05
     72e:	3e 81       	ldd	r19, Y+6	; 0x06
     730:	22 30       	cpi	r18, 0x02	; 2
     732:	31 05       	cpc	r19, r1
     734:	2c f4       	brge	.+10     	; 0x740 <DIO_readPort+0x4e>
     736:	8d 81       	ldd	r24, Y+5	; 0x05
     738:	9e 81       	ldd	r25, Y+6	; 0x06
     73a:	00 97       	sbiw	r24, 0x00	; 0
     73c:	61 f0       	breq	.+24     	; 0x756 <DIO_readPort+0x64>
     73e:	2b c0       	rjmp	.+86     	; 0x796 <DIO_readPort+0xa4>
     740:	2d 81       	ldd	r18, Y+5	; 0x05
     742:	3e 81       	ldd	r19, Y+6	; 0x06
     744:	22 30       	cpi	r18, 0x02	; 2
     746:	31 05       	cpc	r19, r1
     748:	b1 f0       	breq	.+44     	; 0x776 <DIO_readPort+0x84>
     74a:	8d 81       	ldd	r24, Y+5	; 0x05
     74c:	9e 81       	ldd	r25, Y+6	; 0x06
     74e:	83 30       	cpi	r24, 0x03	; 3
     750:	91 05       	cpc	r25, r1
     752:	c9 f0       	breq	.+50     	; 0x786 <DIO_readPort+0x94>
     754:	20 c0       	rjmp	.+64     	; 0x796 <DIO_readPort+0xa4>
		{
		case DIO_PORTA:
			*port_State = PINA_INPUT_R;
     756:	e9 e3       	ldi	r30, 0x39	; 57
     758:	f0 e0       	ldi	r31, 0x00	; 0
     75a:	80 81       	ld	r24, Z
     75c:	eb 81       	ldd	r30, Y+3	; 0x03
     75e:	fc 81       	ldd	r31, Y+4	; 0x04
     760:	80 83       	st	Z, r24
			EN_ErrorState = DIO_E_PARAM_VALID;
     762:	19 82       	std	Y+1, r1	; 0x01
     764:	1a c0       	rjmp	.+52     	; 0x79a <DIO_readPort+0xa8>
			break;
		case DIO_PORTB:
			*port_State = PINB_INPUT_R;
     766:	e6 e3       	ldi	r30, 0x36	; 54
     768:	f0 e0       	ldi	r31, 0x00	; 0
     76a:	80 81       	ld	r24, Z
     76c:	eb 81       	ldd	r30, Y+3	; 0x03
     76e:	fc 81       	ldd	r31, Y+4	; 0x04
     770:	80 83       	st	Z, r24
			EN_ErrorState = DIO_E_PARAM_VALID;;
     772:	19 82       	std	Y+1, r1	; 0x01
     774:	12 c0       	rjmp	.+36     	; 0x79a <DIO_readPort+0xa8>
			break;
		case DIO_PORTC:
			*port_State = PINC_INPUT_R;
     776:	e3 e3       	ldi	r30, 0x33	; 51
     778:	f0 e0       	ldi	r31, 0x00	; 0
     77a:	80 81       	ld	r24, Z
     77c:	eb 81       	ldd	r30, Y+3	; 0x03
     77e:	fc 81       	ldd	r31, Y+4	; 0x04
     780:	80 83       	st	Z, r24
			EN_ErrorState = DIO_E_PARAM_VALID;
     782:	19 82       	std	Y+1, r1	; 0x01
     784:	0a c0       	rjmp	.+20     	; 0x79a <DIO_readPort+0xa8>
			break;
		case DIO_PORTD:
			*port_State = PIND_INPUT_R;
     786:	e0 e3       	ldi	r30, 0x30	; 48
     788:	f0 e0       	ldi	r31, 0x00	; 0
     78a:	80 81       	ld	r24, Z
     78c:	eb 81       	ldd	r30, Y+3	; 0x03
     78e:	fc 81       	ldd	r31, Y+4	; 0x04
     790:	80 83       	st	Z, r24
			EN_ErrorState = DIO_E_PARAM_VALID;
     792:	19 82       	std	Y+1, r1	; 0x01
     794:	02 c0       	rjmp	.+4      	; 0x79a <DIO_readPort+0xa8>
			break;
		default:
			EN_ErrorState = DIO_E_PARAM_INVALID_PORT_ID;	/* Invalid port id */
     796:	81 e0       	ldi	r24, 0x01	; 1
     798:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return EN_ErrorState;
     79a:	89 81       	ldd	r24, Y+1	; 0x01
}
     79c:	26 96       	adiw	r28, 0x06	; 6
     79e:	0f b6       	in	r0, 0x3f	; 63
     7a0:	f8 94       	cli
     7a2:	de bf       	out	0x3e, r29	; 62
     7a4:	0f be       	out	0x3f, r0	; 63
     7a6:	cd bf       	out	0x3d, r28	; 61
     7a8:	cf 91       	pop	r28
     7aa:	df 91       	pop	r29
     7ac:	08 95       	ret

000007ae <DIO_readPin>:
 * [in/out]		 	None
 *
 * [Returns]:       Error State
 ******************************************************************************/
DIO_E_STATE_t DIO_readPin(DIO_PortId port_ID, DIO_PinId pin_ID, uint8_t * PinState)
{
     7ae:	df 93       	push	r29
     7b0:	cf 93       	push	r28
     7b2:	cd b7       	in	r28, 0x3d	; 61
     7b4:	de b7       	in	r29, 0x3e	; 62
     7b6:	27 97       	sbiw	r28, 0x07	; 7
     7b8:	0f b6       	in	r0, 0x3f	; 63
     7ba:	f8 94       	cli
     7bc:	de bf       	out	0x3e, r29	; 62
     7be:	0f be       	out	0x3f, r0	; 63
     7c0:	cd bf       	out	0x3d, r28	; 61
     7c2:	8a 83       	std	Y+2, r24	; 0x02
     7c4:	6b 83       	std	Y+3, r22	; 0x03
     7c6:	5d 83       	std	Y+5, r21	; 0x05
     7c8:	4c 83       	std	Y+4, r20	; 0x04
	DIO_E_STATE_t EN_ErrorState = E_NOT_OK;
     7ca:	81 e0       	ldi	r24, 0x01	; 1
     7cc:	89 83       	std	Y+1, r24	; 0x01

	/* Check if the pointer is NULL pointer or not */
	if(PinState == NULL_PTR)
     7ce:	8c 81       	ldd	r24, Y+4	; 0x04
     7d0:	9d 81       	ldd	r25, Y+5	; 0x05
     7d2:	00 97       	sbiw	r24, 0x00	; 0
     7d4:	19 f4       	brne	.+6      	; 0x7dc <DIO_readPin+0x2e>
    {
		EN_ErrorState = DIO_E_PARAM_POINTER;
     7d6:	85 e0       	ldi	r24, 0x05	; 5
     7d8:	89 83       	std	Y+1, r24	; 0x01
     7da:	af c0       	rjmp	.+350    	; 0x93a <__stack+0xdb>
	}
	else
	{
        if((pin_ID >= PIN_0) && (pin_ID <= PIN_7))
     7dc:	8b 81       	ldd	r24, Y+3	; 0x03
     7de:	88 30       	cpi	r24, 0x08	; 8
     7e0:	08 f0       	brcs	.+2      	; 0x7e4 <DIO_readPin+0x36>
     7e2:	a9 c0       	rjmp	.+338    	; 0x936 <__stack+0xd7>
        {
            switch (port_ID)
     7e4:	8a 81       	ldd	r24, Y+2	; 0x02
     7e6:	28 2f       	mov	r18, r24
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	3f 83       	std	Y+7, r19	; 0x07
     7ec:	2e 83       	std	Y+6, r18	; 0x06
     7ee:	4e 81       	ldd	r20, Y+6	; 0x06
     7f0:	5f 81       	ldd	r21, Y+7	; 0x07
     7f2:	41 30       	cpi	r20, 0x01	; 1
     7f4:	51 05       	cpc	r21, r1
     7f6:	c9 f1       	breq	.+114    	; 0x86a <__stack+0xb>
     7f8:	8e 81       	ldd	r24, Y+6	; 0x06
     7fa:	9f 81       	ldd	r25, Y+7	; 0x07
     7fc:	82 30       	cpi	r24, 0x02	; 2
     7fe:	91 05       	cpc	r25, r1
     800:	34 f4       	brge	.+12     	; 0x80e <DIO_readPin+0x60>
     802:	2e 81       	ldd	r18, Y+6	; 0x06
     804:	3f 81       	ldd	r19, Y+7	; 0x07
     806:	21 15       	cp	r18, r1
     808:	31 05       	cpc	r19, r1
     80a:	71 f0       	breq	.+28     	; 0x828 <DIO_readPin+0x7a>
     80c:	91 c0       	rjmp	.+290    	; 0x930 <__stack+0xd1>
     80e:	4e 81       	ldd	r20, Y+6	; 0x06
     810:	5f 81       	ldd	r21, Y+7	; 0x07
     812:	42 30       	cpi	r20, 0x02	; 2
     814:	51 05       	cpc	r21, r1
     816:	09 f4       	brne	.+2      	; 0x81a <DIO_readPin+0x6c>
     818:	49 c0       	rjmp	.+146    	; 0x8ac <__stack+0x4d>
     81a:	8e 81       	ldd	r24, Y+6	; 0x06
     81c:	9f 81       	ldd	r25, Y+7	; 0x07
     81e:	83 30       	cpi	r24, 0x03	; 3
     820:	91 05       	cpc	r25, r1
     822:	09 f4       	brne	.+2      	; 0x826 <DIO_readPin+0x78>
     824:	64 c0       	rjmp	.+200    	; 0x8ee <__stack+0x8f>
     826:	84 c0       	rjmp	.+264    	; 0x930 <__stack+0xd1>
            {
            case DIO_PORTA:
                *PinState = READ_BIT(PINA_INPUT_R, pin_ID);
     828:	e9 e3       	ldi	r30, 0x39	; 57
     82a:	f0 e0       	ldi	r31, 0x00	; 0
     82c:	80 81       	ld	r24, Z
     82e:	48 2f       	mov	r20, r24
     830:	50 e0       	ldi	r21, 0x00	; 0
     832:	8b 81       	ldd	r24, Y+3	; 0x03
     834:	28 2f       	mov	r18, r24
     836:	30 e0       	ldi	r19, 0x00	; 0
     838:	81 e0       	ldi	r24, 0x01	; 1
     83a:	90 e0       	ldi	r25, 0x00	; 0
     83c:	02 c0       	rjmp	.+4      	; 0x842 <DIO_readPin+0x94>
     83e:	88 0f       	add	r24, r24
     840:	99 1f       	adc	r25, r25
     842:	2a 95       	dec	r18
     844:	e2 f7       	brpl	.-8      	; 0x83e <DIO_readPin+0x90>
     846:	9a 01       	movw	r18, r20
     848:	28 23       	and	r18, r24
     84a:	39 23       	and	r19, r25
     84c:	8b 81       	ldd	r24, Y+3	; 0x03
     84e:	88 2f       	mov	r24, r24
     850:	90 e0       	ldi	r25, 0x00	; 0
     852:	a9 01       	movw	r20, r18
     854:	02 c0       	rjmp	.+4      	; 0x85a <DIO_readPin+0xac>
     856:	55 95       	asr	r21
     858:	47 95       	ror	r20
     85a:	8a 95       	dec	r24
     85c:	e2 f7       	brpl	.-8      	; 0x856 <DIO_readPin+0xa8>
     85e:	ca 01       	movw	r24, r20
     860:	ec 81       	ldd	r30, Y+4	; 0x04
     862:	fd 81       	ldd	r31, Y+5	; 0x05
     864:	80 83       	st	Z, r24
                EN_ErrorState = DIO_E_PARAM_VALID;
     866:	19 82       	std	Y+1, r1	; 0x01
     868:	68 c0       	rjmp	.+208    	; 0x93a <__stack+0xdb>
                break;
            case DIO_PORTB:
                *PinState = READ_BIT(PINB_INPUT_R, pin_ID);
     86a:	e6 e3       	ldi	r30, 0x36	; 54
     86c:	f0 e0       	ldi	r31, 0x00	; 0
     86e:	80 81       	ld	r24, Z
     870:	48 2f       	mov	r20, r24
     872:	50 e0       	ldi	r21, 0x00	; 0
     874:	8b 81       	ldd	r24, Y+3	; 0x03
     876:	28 2f       	mov	r18, r24
     878:	30 e0       	ldi	r19, 0x00	; 0
     87a:	81 e0       	ldi	r24, 0x01	; 1
     87c:	90 e0       	ldi	r25, 0x00	; 0
     87e:	02 c0       	rjmp	.+4      	; 0x884 <__stack+0x25>
     880:	88 0f       	add	r24, r24
     882:	99 1f       	adc	r25, r25
     884:	2a 95       	dec	r18
     886:	e2 f7       	brpl	.-8      	; 0x880 <__stack+0x21>
     888:	9a 01       	movw	r18, r20
     88a:	28 23       	and	r18, r24
     88c:	39 23       	and	r19, r25
     88e:	8b 81       	ldd	r24, Y+3	; 0x03
     890:	88 2f       	mov	r24, r24
     892:	90 e0       	ldi	r25, 0x00	; 0
     894:	a9 01       	movw	r20, r18
     896:	02 c0       	rjmp	.+4      	; 0x89c <__stack+0x3d>
     898:	55 95       	asr	r21
     89a:	47 95       	ror	r20
     89c:	8a 95       	dec	r24
     89e:	e2 f7       	brpl	.-8      	; 0x898 <__stack+0x39>
     8a0:	ca 01       	movw	r24, r20
     8a2:	ec 81       	ldd	r30, Y+4	; 0x04
     8a4:	fd 81       	ldd	r31, Y+5	; 0x05
     8a6:	80 83       	st	Z, r24
                EN_ErrorState = DIO_E_PARAM_VALID;
     8a8:	19 82       	std	Y+1, r1	; 0x01
     8aa:	47 c0       	rjmp	.+142    	; 0x93a <__stack+0xdb>
                break;
            case DIO_PORTC:
                *PinState = READ_BIT(PINC_INPUT_R, pin_ID);
     8ac:	e3 e3       	ldi	r30, 0x33	; 51
     8ae:	f0 e0       	ldi	r31, 0x00	; 0
     8b0:	80 81       	ld	r24, Z
     8b2:	48 2f       	mov	r20, r24
     8b4:	50 e0       	ldi	r21, 0x00	; 0
     8b6:	8b 81       	ldd	r24, Y+3	; 0x03
     8b8:	28 2f       	mov	r18, r24
     8ba:	30 e0       	ldi	r19, 0x00	; 0
     8bc:	81 e0       	ldi	r24, 0x01	; 1
     8be:	90 e0       	ldi	r25, 0x00	; 0
     8c0:	02 c0       	rjmp	.+4      	; 0x8c6 <__stack+0x67>
     8c2:	88 0f       	add	r24, r24
     8c4:	99 1f       	adc	r25, r25
     8c6:	2a 95       	dec	r18
     8c8:	e2 f7       	brpl	.-8      	; 0x8c2 <__stack+0x63>
     8ca:	9a 01       	movw	r18, r20
     8cc:	28 23       	and	r18, r24
     8ce:	39 23       	and	r19, r25
     8d0:	8b 81       	ldd	r24, Y+3	; 0x03
     8d2:	88 2f       	mov	r24, r24
     8d4:	90 e0       	ldi	r25, 0x00	; 0
     8d6:	a9 01       	movw	r20, r18
     8d8:	02 c0       	rjmp	.+4      	; 0x8de <__stack+0x7f>
     8da:	55 95       	asr	r21
     8dc:	47 95       	ror	r20
     8de:	8a 95       	dec	r24
     8e0:	e2 f7       	brpl	.-8      	; 0x8da <__stack+0x7b>
     8e2:	ca 01       	movw	r24, r20
     8e4:	ec 81       	ldd	r30, Y+4	; 0x04
     8e6:	fd 81       	ldd	r31, Y+5	; 0x05
     8e8:	80 83       	st	Z, r24
                EN_ErrorState = DIO_E_PARAM_VALID;
     8ea:	19 82       	std	Y+1, r1	; 0x01
     8ec:	26 c0       	rjmp	.+76     	; 0x93a <__stack+0xdb>
                break;
            case DIO_PORTD:
                *PinState = READ_BIT(PIND_INPUT_R, pin_ID);
     8ee:	e0 e3       	ldi	r30, 0x30	; 48
     8f0:	f0 e0       	ldi	r31, 0x00	; 0
     8f2:	80 81       	ld	r24, Z
     8f4:	48 2f       	mov	r20, r24
     8f6:	50 e0       	ldi	r21, 0x00	; 0
     8f8:	8b 81       	ldd	r24, Y+3	; 0x03
     8fa:	28 2f       	mov	r18, r24
     8fc:	30 e0       	ldi	r19, 0x00	; 0
     8fe:	81 e0       	ldi	r24, 0x01	; 1
     900:	90 e0       	ldi	r25, 0x00	; 0
     902:	02 c0       	rjmp	.+4      	; 0x908 <__stack+0xa9>
     904:	88 0f       	add	r24, r24
     906:	99 1f       	adc	r25, r25
     908:	2a 95       	dec	r18
     90a:	e2 f7       	brpl	.-8      	; 0x904 <__stack+0xa5>
     90c:	9a 01       	movw	r18, r20
     90e:	28 23       	and	r18, r24
     910:	39 23       	and	r19, r25
     912:	8b 81       	ldd	r24, Y+3	; 0x03
     914:	88 2f       	mov	r24, r24
     916:	90 e0       	ldi	r25, 0x00	; 0
     918:	a9 01       	movw	r20, r18
     91a:	02 c0       	rjmp	.+4      	; 0x920 <__stack+0xc1>
     91c:	55 95       	asr	r21
     91e:	47 95       	ror	r20
     920:	8a 95       	dec	r24
     922:	e2 f7       	brpl	.-8      	; 0x91c <__stack+0xbd>
     924:	ca 01       	movw	r24, r20
     926:	ec 81       	ldd	r30, Y+4	; 0x04
     928:	fd 81       	ldd	r31, Y+5	; 0x05
     92a:	80 83       	st	Z, r24
                EN_ErrorState = DIO_E_PARAM_VALID;
     92c:	19 82       	std	Y+1, r1	; 0x01
     92e:	05 c0       	rjmp	.+10     	; 0x93a <__stack+0xdb>
                break;
            default:
            	EN_ErrorState = DIO_E_PARAM_INVALID_PORT_ID;	/* Invalid port id */
     930:	81 e0       	ldi	r24, 0x01	; 1
     932:	89 83       	std	Y+1, r24	; 0x01
     934:	02 c0       	rjmp	.+4      	; 0x93a <__stack+0xdb>
                break;
            }
        }
        else
        {
        	EN_ErrorState = DIO_E_PARAM_INVALID_PIN_ID;	/* Invalid pin id */
     936:	82 e0       	ldi	r24, 0x02	; 2
     938:	89 83       	std	Y+1, r24	; 0x01
        }
	}
    return EN_ErrorState;
     93a:	89 81       	ldd	r24, Y+1	; 0x01
}
     93c:	27 96       	adiw	r28, 0x07	; 7
     93e:	0f b6       	in	r0, 0x3f	; 63
     940:	f8 94       	cli
     942:	de bf       	out	0x3e, r29	; 62
     944:	0f be       	out	0x3f, r0	; 63
     946:	cd bf       	out	0x3d, r28	; 61
     948:	cf 91       	pop	r28
     94a:	df 91       	pop	r29
     94c:	08 95       	ret

0000094e <DIO_TogglePin>:
 * [in/out]		 	None
 *
 * [Returns]:       Error State
 ******************************************************************************/
DIO_E_STATE_t DIO_TogglePin(DIO_PortId port_ID, DIO_PinId pin_ID)
{
     94e:	df 93       	push	r29
     950:	cf 93       	push	r28
     952:	00 d0       	rcall	.+0      	; 0x954 <DIO_TogglePin+0x6>
     954:	00 d0       	rcall	.+0      	; 0x956 <DIO_TogglePin+0x8>
     956:	0f 92       	push	r0
     958:	cd b7       	in	r28, 0x3d	; 61
     95a:	de b7       	in	r29, 0x3e	; 62
     95c:	8a 83       	std	Y+2, r24	; 0x02
     95e:	6b 83       	std	Y+3, r22	; 0x03
	DIO_E_STATE_t EN_ErrorState = E_NOT_OK;
     960:	81 e0       	ldi	r24, 0x01	; 1
     962:	89 83       	std	Y+1, r24	; 0x01

	/* Check if the pointer is NULL pointer or not */
    if ((pin_ID >= PIN_0) && (pin_ID <= PIN_7))
     964:	8b 81       	ldd	r24, Y+3	; 0x03
     966:	88 30       	cpi	r24, 0x08	; 8
     968:	08 f0       	brcs	.+2      	; 0x96c <DIO_TogglePin+0x1e>
     96a:	77 c0       	rjmp	.+238    	; 0xa5a <DIO_TogglePin+0x10c>
    {
        switch (port_ID)
     96c:	8a 81       	ldd	r24, Y+2	; 0x02
     96e:	28 2f       	mov	r18, r24
     970:	30 e0       	ldi	r19, 0x00	; 0
     972:	3d 83       	std	Y+5, r19	; 0x05
     974:	2c 83       	std	Y+4, r18	; 0x04
     976:	8c 81       	ldd	r24, Y+4	; 0x04
     978:	9d 81       	ldd	r25, Y+5	; 0x05
     97a:	81 30       	cpi	r24, 0x01	; 1
     97c:	91 05       	cpc	r25, r1
     97e:	59 f1       	breq	.+86     	; 0x9d6 <DIO_TogglePin+0x88>
     980:	2c 81       	ldd	r18, Y+4	; 0x04
     982:	3d 81       	ldd	r19, Y+5	; 0x05
     984:	22 30       	cpi	r18, 0x02	; 2
     986:	31 05       	cpc	r19, r1
     988:	2c f4       	brge	.+10     	; 0x994 <DIO_TogglePin+0x46>
     98a:	8c 81       	ldd	r24, Y+4	; 0x04
     98c:	9d 81       	ldd	r25, Y+5	; 0x05
     98e:	00 97       	sbiw	r24, 0x00	; 0
     990:	69 f0       	breq	.+26     	; 0x9ac <DIO_TogglePin+0x5e>
     992:	60 c0       	rjmp	.+192    	; 0xa54 <DIO_TogglePin+0x106>
     994:	2c 81       	ldd	r18, Y+4	; 0x04
     996:	3d 81       	ldd	r19, Y+5	; 0x05
     998:	22 30       	cpi	r18, 0x02	; 2
     99a:	31 05       	cpc	r19, r1
     99c:	89 f1       	breq	.+98     	; 0xa00 <DIO_TogglePin+0xb2>
     99e:	8c 81       	ldd	r24, Y+4	; 0x04
     9a0:	9d 81       	ldd	r25, Y+5	; 0x05
     9a2:	83 30       	cpi	r24, 0x03	; 3
     9a4:	91 05       	cpc	r25, r1
     9a6:	09 f4       	brne	.+2      	; 0x9aa <DIO_TogglePin+0x5c>
     9a8:	40 c0       	rjmp	.+128    	; 0xa2a <DIO_TogglePin+0xdc>
     9aa:	54 c0       	rjmp	.+168    	; 0xa54 <DIO_TogglePin+0x106>
        {
        case DIO_PORTA:
            TOGGLE_BIT(PORTA_DATA_R, pin_ID);
     9ac:	ab e3       	ldi	r26, 0x3B	; 59
     9ae:	b0 e0       	ldi	r27, 0x00	; 0
     9b0:	eb e3       	ldi	r30, 0x3B	; 59
     9b2:	f0 e0       	ldi	r31, 0x00	; 0
     9b4:	80 81       	ld	r24, Z
     9b6:	48 2f       	mov	r20, r24
     9b8:	8b 81       	ldd	r24, Y+3	; 0x03
     9ba:	28 2f       	mov	r18, r24
     9bc:	30 e0       	ldi	r19, 0x00	; 0
     9be:	81 e0       	ldi	r24, 0x01	; 1
     9c0:	90 e0       	ldi	r25, 0x00	; 0
     9c2:	02 2e       	mov	r0, r18
     9c4:	02 c0       	rjmp	.+4      	; 0x9ca <DIO_TogglePin+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	0a 94       	dec	r0
     9cc:	e2 f7       	brpl	.-8      	; 0x9c6 <DIO_TogglePin+0x78>
     9ce:	84 27       	eor	r24, r20
     9d0:	8c 93       	st	X, r24
            EN_ErrorState = DIO_E_PARAM_VALID;
     9d2:	19 82       	std	Y+1, r1	; 0x01
     9d4:	44 c0       	rjmp	.+136    	; 0xa5e <DIO_TogglePin+0x110>
            break;
        case DIO_PORTB:
        	TOGGLE_BIT(PORTB_DATA_R, pin_ID);
     9d6:	a8 e3       	ldi	r26, 0x38	; 56
     9d8:	b0 e0       	ldi	r27, 0x00	; 0
     9da:	e8 e3       	ldi	r30, 0x38	; 56
     9dc:	f0 e0       	ldi	r31, 0x00	; 0
     9de:	80 81       	ld	r24, Z
     9e0:	48 2f       	mov	r20, r24
     9e2:	8b 81       	ldd	r24, Y+3	; 0x03
     9e4:	28 2f       	mov	r18, r24
     9e6:	30 e0       	ldi	r19, 0x00	; 0
     9e8:	81 e0       	ldi	r24, 0x01	; 1
     9ea:	90 e0       	ldi	r25, 0x00	; 0
     9ec:	02 2e       	mov	r0, r18
     9ee:	02 c0       	rjmp	.+4      	; 0x9f4 <DIO_TogglePin+0xa6>
     9f0:	88 0f       	add	r24, r24
     9f2:	99 1f       	adc	r25, r25
     9f4:	0a 94       	dec	r0
     9f6:	e2 f7       	brpl	.-8      	; 0x9f0 <DIO_TogglePin+0xa2>
     9f8:	84 27       	eor	r24, r20
     9fa:	8c 93       	st	X, r24
            EN_ErrorState = DIO_E_PARAM_VALID;
     9fc:	19 82       	std	Y+1, r1	; 0x01
     9fe:	2f c0       	rjmp	.+94     	; 0xa5e <DIO_TogglePin+0x110>
            break;
        case DIO_PORTC:
        	TOGGLE_BIT(PORTC_DATA_R, pin_ID);
     a00:	a5 e3       	ldi	r26, 0x35	; 53
     a02:	b0 e0       	ldi	r27, 0x00	; 0
     a04:	e5 e3       	ldi	r30, 0x35	; 53
     a06:	f0 e0       	ldi	r31, 0x00	; 0
     a08:	80 81       	ld	r24, Z
     a0a:	48 2f       	mov	r20, r24
     a0c:	8b 81       	ldd	r24, Y+3	; 0x03
     a0e:	28 2f       	mov	r18, r24
     a10:	30 e0       	ldi	r19, 0x00	; 0
     a12:	81 e0       	ldi	r24, 0x01	; 1
     a14:	90 e0       	ldi	r25, 0x00	; 0
     a16:	02 2e       	mov	r0, r18
     a18:	02 c0       	rjmp	.+4      	; 0xa1e <DIO_TogglePin+0xd0>
     a1a:	88 0f       	add	r24, r24
     a1c:	99 1f       	adc	r25, r25
     a1e:	0a 94       	dec	r0
     a20:	e2 f7       	brpl	.-8      	; 0xa1a <DIO_TogglePin+0xcc>
     a22:	84 27       	eor	r24, r20
     a24:	8c 93       	st	X, r24
            EN_ErrorState = DIO_E_PARAM_VALID;
     a26:	19 82       	std	Y+1, r1	; 0x01
     a28:	1a c0       	rjmp	.+52     	; 0xa5e <DIO_TogglePin+0x110>
            break;
        case DIO_PORTD:
        	TOGGLE_BIT(PORTD_DATA_R, pin_ID);
     a2a:	a2 e3       	ldi	r26, 0x32	; 50
     a2c:	b0 e0       	ldi	r27, 0x00	; 0
     a2e:	e2 e3       	ldi	r30, 0x32	; 50
     a30:	f0 e0       	ldi	r31, 0x00	; 0
     a32:	80 81       	ld	r24, Z
     a34:	48 2f       	mov	r20, r24
     a36:	8b 81       	ldd	r24, Y+3	; 0x03
     a38:	28 2f       	mov	r18, r24
     a3a:	30 e0       	ldi	r19, 0x00	; 0
     a3c:	81 e0       	ldi	r24, 0x01	; 1
     a3e:	90 e0       	ldi	r25, 0x00	; 0
     a40:	02 2e       	mov	r0, r18
     a42:	02 c0       	rjmp	.+4      	; 0xa48 <DIO_TogglePin+0xfa>
     a44:	88 0f       	add	r24, r24
     a46:	99 1f       	adc	r25, r25
     a48:	0a 94       	dec	r0
     a4a:	e2 f7       	brpl	.-8      	; 0xa44 <DIO_TogglePin+0xf6>
     a4c:	84 27       	eor	r24, r20
     a4e:	8c 93       	st	X, r24
            EN_ErrorState = DIO_E_PARAM_VALID;
     a50:	19 82       	std	Y+1, r1	; 0x01
     a52:	05 c0       	rjmp	.+10     	; 0xa5e <DIO_TogglePin+0x110>
            break;
        default:
        	EN_ErrorState = E_NOT_OK;	/* Invalid port id */
     a54:	81 e0       	ldi	r24, 0x01	; 1
     a56:	89 83       	std	Y+1, r24	; 0x01
     a58:	02 c0       	rjmp	.+4      	; 0xa5e <DIO_TogglePin+0x110>
            break;
        }
    }
    else
    {
    	EN_ErrorState = DIO_E_PARAM_INVALID_PIN_ID;	/* Invalid pin id */
     a5a:	82 e0       	ldi	r24, 0x02	; 2
     a5c:	89 83       	std	Y+1, r24	; 0x01
    }
    return EN_ErrorState;
     a5e:	89 81       	ldd	r24, Y+1	; 0x01
}
     a60:	0f 90       	pop	r0
     a62:	0f 90       	pop	r0
     a64:	0f 90       	pop	r0
     a66:	0f 90       	pop	r0
     a68:	0f 90       	pop	r0
     a6a:	cf 91       	pop	r28
     a6c:	df 91       	pop	r29
     a6e:	08 95       	ret

00000a70 <LED_init>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 *******************************************************************************/
void LED_init(void)
{
     a70:	df 93       	push	r29
     a72:	cf 93       	push	r28
     a74:	cd b7       	in	r28, 0x3d	; 61
     a76:	de b7       	in	r29, 0x3e	; 62
	/* Configure LED pin as an output pin */
	DIO_setPinDirection(LED_PORT_NUM, LED_PIN_NUM, OUTPUT);
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	64 e0       	ldi	r22, 0x04	; 4
     a7c:	41 e0       	ldi	r20, 0x01	; 1
     a7e:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <DIO_setPinDirection>
	/* Turn off LED at the beginning as the initial state */
	DIO_writePin(LED_PORT_NUM, LED_PIN_NUM, LOW);
     a82:	81 e0       	ldi	r24, 0x01	; 1
     a84:	64 e0       	ldi	r22, 0x04	; 4
     a86:	40 e0       	ldi	r20, 0x00	; 0
     a88:	0e 94 5d 02 	call	0x4ba	; 0x4ba <DIO_writePin>
}
     a8c:	cf 91       	pop	r28
     a8e:	df 91       	pop	r29
     a90:	08 95       	ret

00000a92 <LED_turnOn>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 *******************************************************************************/
void LED_turnOn(void)
{
     a92:	df 93       	push	r29
     a94:	cf 93       	push	r28
     a96:	cd b7       	in	r28, 0x3d	; 61
     a98:	de b7       	in	r29, 0x3e	; 62
	DIO_writePin(LED_PORT_NUM, LED_PIN_NUM, HIGH);	/* Turn On LED */
     a9a:	81 e0       	ldi	r24, 0x01	; 1
     a9c:	64 e0       	ldi	r22, 0x04	; 4
     a9e:	41 e0       	ldi	r20, 0x01	; 1
     aa0:	0e 94 5d 02 	call	0x4ba	; 0x4ba <DIO_writePin>
}
     aa4:	cf 91       	pop	r28
     aa6:	df 91       	pop	r29
     aa8:	08 95       	ret

00000aaa <LED_turnOff>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 *******************************************************************************/
void LED_turnOff(void)
{
     aaa:	df 93       	push	r29
     aac:	cf 93       	push	r28
     aae:	cd b7       	in	r28, 0x3d	; 61
     ab0:	de b7       	in	r29, 0x3e	; 62
	DIO_writePin(LED_PORT_NUM, LED_PIN_NUM, LOW);	/* Turn Off LED */
     ab2:	81 e0       	ldi	r24, 0x01	; 1
     ab4:	64 e0       	ldi	r22, 0x04	; 4
     ab6:	40 e0       	ldi	r20, 0x00	; 0
     ab8:	0e 94 5d 02 	call	0x4ba	; 0x4ba <DIO_writePin>
}
     abc:	cf 91       	pop	r28
     abe:	df 91       	pop	r29
     ac0:	08 95       	ret

00000ac2 <main>:
/*****************************************************************************************
 *                                MAIN FUNCTION                                          *
 *****************************************************************************************/

int main(void)
{
     ac2:	df 93       	push	r29
     ac4:	cf 93       	push	r28
     ac6:	0f 92       	push	r0
     ac8:	cd b7       	in	r28, 0x3d	; 61
     aca:	de b7       	in	r29, 0x3e	; 62
	 *                           SYSTEM INITIALIZATION                              *
	 ********************************************************************************/

	uint8_t button_state;	/* Local variable to store the button state */

	BUTTON_init(); 			/* BUTTON Driver Initialization */
     acc:	0e 94 3e 00 	call	0x7c	; 0x7c <BUTTON_init>

	LED_init();				/* LED Driver Initialization */
     ad0:	0e 94 38 05 	call	0xa70	; 0xa70 <LED_init>
	 *                        APPLICATION	(SUPER LOOP)						    *
	 ********************************************************************************/

	while(1)
	{
		button_state = BUTTON_read();
     ad4:	0e 94 4a 00 	call	0x94	; 0x94 <BUTTON_read>
     ad8:	89 83       	std	Y+1, r24	; 0x01

		if(button_state == HIGH) /* Check if the button is pressed or not */
     ada:	89 81       	ldd	r24, Y+1	; 0x01
     adc:	81 30       	cpi	r24, 0x01	; 1
     ade:	19 f4       	brne	.+6      	; 0xae6 <main+0x24>
		{
			LED_turnOn();		 /* Turn on the LED */
     ae0:	0e 94 49 05 	call	0xa92	; 0xa92 <LED_turnOn>
     ae4:	f7 cf       	rjmp	.-18     	; 0xad4 <main+0x12>
		}
		else
		{
			LED_turnOff();		 /* Turn off the LED */
     ae6:	0e 94 55 05 	call	0xaaa	; 0xaaa <LED_turnOff>
     aea:	f4 cf       	rjmp	.-24     	; 0xad4 <main+0x12>

00000aec <__vector_11>:
/************************************************************************************
 *                                     TIMER0                                       *
 ************************************************************************************/

ISR(TIMER0_OVF_vect)
{
     aec:	1f 92       	push	r1
     aee:	0f 92       	push	r0
     af0:	0f b6       	in	r0, 0x3f	; 63
     af2:	0f 92       	push	r0
     af4:	11 24       	eor	r1, r1
     af6:	2f 93       	push	r18
     af8:	3f 93       	push	r19
     afa:	4f 93       	push	r20
     afc:	5f 93       	push	r21
     afe:	6f 93       	push	r22
     b00:	7f 93       	push	r23
     b02:	8f 93       	push	r24
     b04:	9f 93       	push	r25
     b06:	af 93       	push	r26
     b08:	bf 93       	push	r27
     b0a:	ef 93       	push	r30
     b0c:	ff 93       	push	r31
     b0e:	df 93       	push	r29
     b10:	cf 93       	push	r28
     b12:	cd b7       	in	r28, 0x3d	; 61
     b14:	de b7       	in	r29, 0x3e	; 62
	/* Check if Pointer is not a NULL one, to avoid Segmentation fault */
	if(g_callBackPtrTimer0 != NULL_PTR)
     b16:	80 91 60 00 	lds	r24, 0x0060
     b1a:	90 91 61 00 	lds	r25, 0x0061
     b1e:	00 97       	sbiw	r24, 0x00	; 0
     b20:	29 f0       	breq	.+10     	; 0xb2c <__vector_11+0x40>
	{
		/*
		 * Call the callback function in the application after the overflow has
		 * occurred in TIMER0 (NORMAL MODE)
		 */
		(*g_callBackPtrTimer0)();
     b22:	e0 91 60 00 	lds	r30, 0x0060
     b26:	f0 91 61 00 	lds	r31, 0x0061
     b2a:	09 95       	icall
	}
}
     b2c:	cf 91       	pop	r28
     b2e:	df 91       	pop	r29
     b30:	ff 91       	pop	r31
     b32:	ef 91       	pop	r30
     b34:	bf 91       	pop	r27
     b36:	af 91       	pop	r26
     b38:	9f 91       	pop	r25
     b3a:	8f 91       	pop	r24
     b3c:	7f 91       	pop	r23
     b3e:	6f 91       	pop	r22
     b40:	5f 91       	pop	r21
     b42:	4f 91       	pop	r20
     b44:	3f 91       	pop	r19
     b46:	2f 91       	pop	r18
     b48:	0f 90       	pop	r0
     b4a:	0f be       	out	0x3f, r0	; 63
     b4c:	0f 90       	pop	r0
     b4e:	1f 90       	pop	r1
     b50:	18 95       	reti

00000b52 <__vector_10>:

ISR(TIMER0_COMP_vect)
{
     b52:	1f 92       	push	r1
     b54:	0f 92       	push	r0
     b56:	0f b6       	in	r0, 0x3f	; 63
     b58:	0f 92       	push	r0
     b5a:	11 24       	eor	r1, r1
     b5c:	2f 93       	push	r18
     b5e:	3f 93       	push	r19
     b60:	4f 93       	push	r20
     b62:	5f 93       	push	r21
     b64:	6f 93       	push	r22
     b66:	7f 93       	push	r23
     b68:	8f 93       	push	r24
     b6a:	9f 93       	push	r25
     b6c:	af 93       	push	r26
     b6e:	bf 93       	push	r27
     b70:	ef 93       	push	r30
     b72:	ff 93       	push	r31
     b74:	df 93       	push	r29
     b76:	cf 93       	push	r28
     b78:	cd b7       	in	r28, 0x3d	; 61
     b7a:	de b7       	in	r29, 0x3e	; 62
	/* Check if Pointer is not a NULL one, to avoid Segmentation fault */
	if(g_callBackPtrTimer0 != NULL_PTR)
     b7c:	80 91 60 00 	lds	r24, 0x0060
     b80:	90 91 61 00 	lds	r25, 0x0061
     b84:	00 97       	sbiw	r24, 0x00	; 0
     b86:	29 f0       	breq	.+10     	; 0xb92 <__vector_10+0x40>
	{
		/*
		 * Call the callback function in the application after the compare match has
		 * occurred in TIMER0 (COMPARE MODE)
		 */
		(*g_callBackPtrTimer0)();
     b88:	e0 91 60 00 	lds	r30, 0x0060
     b8c:	f0 91 61 00 	lds	r31, 0x0061
     b90:	09 95       	icall
	}
}
     b92:	cf 91       	pop	r28
     b94:	df 91       	pop	r29
     b96:	ff 91       	pop	r31
     b98:	ef 91       	pop	r30
     b9a:	bf 91       	pop	r27
     b9c:	af 91       	pop	r26
     b9e:	9f 91       	pop	r25
     ba0:	8f 91       	pop	r24
     ba2:	7f 91       	pop	r23
     ba4:	6f 91       	pop	r22
     ba6:	5f 91       	pop	r21
     ba8:	4f 91       	pop	r20
     baa:	3f 91       	pop	r19
     bac:	2f 91       	pop	r18
     bae:	0f 90       	pop	r0
     bb0:	0f be       	out	0x3f, r0	; 63
     bb2:	0f 90       	pop	r0
     bb4:	1f 90       	pop	r1
     bb6:	18 95       	reti

00000bb8 <__vector_9>:
/************************************************************************************
 *                                       TIMER1                                     *
 ************************************************************************************/

ISR(TIMER1_OVF_vect)
{
     bb8:	1f 92       	push	r1
     bba:	0f 92       	push	r0
     bbc:	0f b6       	in	r0, 0x3f	; 63
     bbe:	0f 92       	push	r0
     bc0:	11 24       	eor	r1, r1
     bc2:	2f 93       	push	r18
     bc4:	3f 93       	push	r19
     bc6:	4f 93       	push	r20
     bc8:	5f 93       	push	r21
     bca:	6f 93       	push	r22
     bcc:	7f 93       	push	r23
     bce:	8f 93       	push	r24
     bd0:	9f 93       	push	r25
     bd2:	af 93       	push	r26
     bd4:	bf 93       	push	r27
     bd6:	ef 93       	push	r30
     bd8:	ff 93       	push	r31
     bda:	df 93       	push	r29
     bdc:	cf 93       	push	r28
     bde:	cd b7       	in	r28, 0x3d	; 61
     be0:	de b7       	in	r29, 0x3e	; 62
	/* Check if Pointer is not a NULL one, to avoid Segmentation fault */
	if(g_callBackPtrTimer1 != NULL_PTR)
     be2:	80 91 62 00 	lds	r24, 0x0062
     be6:	90 91 63 00 	lds	r25, 0x0063
     bea:	00 97       	sbiw	r24, 0x00	; 0
     bec:	29 f0       	breq	.+10     	; 0xbf8 <__vector_9+0x40>
	{
		/*
		 * Call the callback function in the application after the overflow has
		 * occurred in TIMER1 (NORMAL MODE)
		 */
		(*g_callBackPtrTimer1)();
     bee:	e0 91 62 00 	lds	r30, 0x0062
     bf2:	f0 91 63 00 	lds	r31, 0x0063
     bf6:	09 95       	icall
	}
}
     bf8:	cf 91       	pop	r28
     bfa:	df 91       	pop	r29
     bfc:	ff 91       	pop	r31
     bfe:	ef 91       	pop	r30
     c00:	bf 91       	pop	r27
     c02:	af 91       	pop	r26
     c04:	9f 91       	pop	r25
     c06:	8f 91       	pop	r24
     c08:	7f 91       	pop	r23
     c0a:	6f 91       	pop	r22
     c0c:	5f 91       	pop	r21
     c0e:	4f 91       	pop	r20
     c10:	3f 91       	pop	r19
     c12:	2f 91       	pop	r18
     c14:	0f 90       	pop	r0
     c16:	0f be       	out	0x3f, r0	; 63
     c18:	0f 90       	pop	r0
     c1a:	1f 90       	pop	r1
     c1c:	18 95       	reti

00000c1e <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
     c1e:	1f 92       	push	r1
     c20:	0f 92       	push	r0
     c22:	0f b6       	in	r0, 0x3f	; 63
     c24:	0f 92       	push	r0
     c26:	11 24       	eor	r1, r1
     c28:	2f 93       	push	r18
     c2a:	3f 93       	push	r19
     c2c:	4f 93       	push	r20
     c2e:	5f 93       	push	r21
     c30:	6f 93       	push	r22
     c32:	7f 93       	push	r23
     c34:	8f 93       	push	r24
     c36:	9f 93       	push	r25
     c38:	af 93       	push	r26
     c3a:	bf 93       	push	r27
     c3c:	ef 93       	push	r30
     c3e:	ff 93       	push	r31
     c40:	df 93       	push	r29
     c42:	cf 93       	push	r28
     c44:	cd b7       	in	r28, 0x3d	; 61
     c46:	de b7       	in	r29, 0x3e	; 62
	/* Check if Pointer is not a NULL one, to avoid Segmentation fault */
	if(g_callBackPtrTimer1 != NULL_PTR)
     c48:	80 91 62 00 	lds	r24, 0x0062
     c4c:	90 91 63 00 	lds	r25, 0x0063
     c50:	00 97       	sbiw	r24, 0x00	; 0
     c52:	29 f0       	breq	.+10     	; 0xc5e <__vector_7+0x40>
	{
		/*
		 * Call the callback function in the application after the compare match has
		 * occurred in TIMER1 Channel A (COMPARE MODE)
		 */
		(*g_callBackPtrTimer1)();
     c54:	e0 91 62 00 	lds	r30, 0x0062
     c58:	f0 91 63 00 	lds	r31, 0x0063
     c5c:	09 95       	icall
	}
}
     c5e:	cf 91       	pop	r28
     c60:	df 91       	pop	r29
     c62:	ff 91       	pop	r31
     c64:	ef 91       	pop	r30
     c66:	bf 91       	pop	r27
     c68:	af 91       	pop	r26
     c6a:	9f 91       	pop	r25
     c6c:	8f 91       	pop	r24
     c6e:	7f 91       	pop	r23
     c70:	6f 91       	pop	r22
     c72:	5f 91       	pop	r21
     c74:	4f 91       	pop	r20
     c76:	3f 91       	pop	r19
     c78:	2f 91       	pop	r18
     c7a:	0f 90       	pop	r0
     c7c:	0f be       	out	0x3f, r0	; 63
     c7e:	0f 90       	pop	r0
     c80:	1f 90       	pop	r1
     c82:	18 95       	reti

00000c84 <__vector_5>:
/************************************************************************************
 *                                       TIMER2                                     *
 ************************************************************************************/

ISR(TIMER2_OVF_vect)
{
     c84:	1f 92       	push	r1
     c86:	0f 92       	push	r0
     c88:	0f b6       	in	r0, 0x3f	; 63
     c8a:	0f 92       	push	r0
     c8c:	11 24       	eor	r1, r1
     c8e:	2f 93       	push	r18
     c90:	3f 93       	push	r19
     c92:	4f 93       	push	r20
     c94:	5f 93       	push	r21
     c96:	6f 93       	push	r22
     c98:	7f 93       	push	r23
     c9a:	8f 93       	push	r24
     c9c:	9f 93       	push	r25
     c9e:	af 93       	push	r26
     ca0:	bf 93       	push	r27
     ca2:	ef 93       	push	r30
     ca4:	ff 93       	push	r31
     ca6:	df 93       	push	r29
     ca8:	cf 93       	push	r28
     caa:	cd b7       	in	r28, 0x3d	; 61
     cac:	de b7       	in	r29, 0x3e	; 62
	/* Check if Pointer is not a NULL one, to avoid Segmentation fault */
	if(g_callBackPtrTimer2 != NULL_PTR)
     cae:	80 91 64 00 	lds	r24, 0x0064
     cb2:	90 91 65 00 	lds	r25, 0x0065
     cb6:	00 97       	sbiw	r24, 0x00	; 0
     cb8:	29 f0       	breq	.+10     	; 0xcc4 <__vector_5+0x40>
	{
		/*
		 * Call the callback function in the application after the overflow has
		 * occurred in TIMER2 (NORMAL MODE)
		 */
		(*g_callBackPtrTimer2)();
     cba:	e0 91 64 00 	lds	r30, 0x0064
     cbe:	f0 91 65 00 	lds	r31, 0x0065
     cc2:	09 95       	icall
	}
}
     cc4:	cf 91       	pop	r28
     cc6:	df 91       	pop	r29
     cc8:	ff 91       	pop	r31
     cca:	ef 91       	pop	r30
     ccc:	bf 91       	pop	r27
     cce:	af 91       	pop	r26
     cd0:	9f 91       	pop	r25
     cd2:	8f 91       	pop	r24
     cd4:	7f 91       	pop	r23
     cd6:	6f 91       	pop	r22
     cd8:	5f 91       	pop	r21
     cda:	4f 91       	pop	r20
     cdc:	3f 91       	pop	r19
     cde:	2f 91       	pop	r18
     ce0:	0f 90       	pop	r0
     ce2:	0f be       	out	0x3f, r0	; 63
     ce4:	0f 90       	pop	r0
     ce6:	1f 90       	pop	r1
     ce8:	18 95       	reti

00000cea <__vector_4>:

ISR(TIMER2_COMP_vect)
{
     cea:	1f 92       	push	r1
     cec:	0f 92       	push	r0
     cee:	0f b6       	in	r0, 0x3f	; 63
     cf0:	0f 92       	push	r0
     cf2:	11 24       	eor	r1, r1
     cf4:	2f 93       	push	r18
     cf6:	3f 93       	push	r19
     cf8:	4f 93       	push	r20
     cfa:	5f 93       	push	r21
     cfc:	6f 93       	push	r22
     cfe:	7f 93       	push	r23
     d00:	8f 93       	push	r24
     d02:	9f 93       	push	r25
     d04:	af 93       	push	r26
     d06:	bf 93       	push	r27
     d08:	ef 93       	push	r30
     d0a:	ff 93       	push	r31
     d0c:	df 93       	push	r29
     d0e:	cf 93       	push	r28
     d10:	cd b7       	in	r28, 0x3d	; 61
     d12:	de b7       	in	r29, 0x3e	; 62
	/* Check if Pointer is not a NULL one, to avoid Segmentation fault */
	if(g_callBackPtrTimer2 != NULL_PTR)
     d14:	80 91 64 00 	lds	r24, 0x0064
     d18:	90 91 65 00 	lds	r25, 0x0065
     d1c:	00 97       	sbiw	r24, 0x00	; 0
     d1e:	29 f0       	breq	.+10     	; 0xd2a <__vector_4+0x40>
	{
		/*
		 * Call the callback function in the application after the compare match has
		 * occurred in TIMER2 (COMPARE MODE)
		 */
		(*g_callBackPtrTimer2)();
     d20:	e0 91 64 00 	lds	r30, 0x0064
     d24:	f0 91 65 00 	lds	r31, 0x0065
     d28:	09 95       	icall
	}
}
     d2a:	cf 91       	pop	r28
     d2c:	df 91       	pop	r29
     d2e:	ff 91       	pop	r31
     d30:	ef 91       	pop	r30
     d32:	bf 91       	pop	r27
     d34:	af 91       	pop	r26
     d36:	9f 91       	pop	r25
     d38:	8f 91       	pop	r24
     d3a:	7f 91       	pop	r23
     d3c:	6f 91       	pop	r22
     d3e:	5f 91       	pop	r21
     d40:	4f 91       	pop	r20
     d42:	3f 91       	pop	r19
     d44:	2f 91       	pop	r18
     d46:	0f 90       	pop	r0
     d48:	0f be       	out	0x3f, r0	; 63
     d4a:	0f 90       	pop	r0
     d4c:	1f 90       	pop	r1
     d4e:	18 95       	reti

00000d50 <TIMER_init>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 *************************************************************************************/
TIMER_E_STATE_t TIMER_init(const TIMER_ConfigType * Config_Ptr)
{
     d50:	df 93       	push	r29
     d52:	cf 93       	push	r28
     d54:	cd b7       	in	r28, 0x3d	; 61
     d56:	de b7       	in	r29, 0x3e	; 62
     d58:	2b 97       	sbiw	r28, 0x0b	; 11
     d5a:	0f b6       	in	r0, 0x3f	; 63
     d5c:	f8 94       	cli
     d5e:	de bf       	out	0x3e, r29	; 62
     d60:	0f be       	out	0x3f, r0	; 63
     d62:	cd bf       	out	0x3d, r28	; 61
     d64:	9b 83       	std	Y+3, r25	; 0x03
     d66:	8a 83       	std	Y+2, r24	; 0x02
	TIMER_E_STATE_t u8_ERROR_STAT = E_NOT_OK;
     d68:	81 e0       	ldi	r24, 0x01	; 1
     d6a:	89 83       	std	Y+1, r24	; 0x01

	switch(Config_Ptr -> timer_ID)
     d6c:	ea 81       	ldd	r30, Y+2	; 0x02
     d6e:	fb 81       	ldd	r31, Y+3	; 0x03
     d70:	84 81       	ldd	r24, Z+4	; 0x04
     d72:	28 2f       	mov	r18, r24
     d74:	30 e0       	ldi	r19, 0x00	; 0
     d76:	3b 87       	std	Y+11, r19	; 0x0b
     d78:	2a 87       	std	Y+10, r18	; 0x0a
     d7a:	8a 85       	ldd	r24, Y+10	; 0x0a
     d7c:	9b 85       	ldd	r25, Y+11	; 0x0b
     d7e:	81 30       	cpi	r24, 0x01	; 1
     d80:	91 05       	cpc	r25, r1
     d82:	09 f4       	brne	.+2      	; 0xd86 <TIMER_init+0x36>
     d84:	50 c0       	rjmp	.+160    	; 0xe26 <TIMER_init+0xd6>
     d86:	2a 85       	ldd	r18, Y+10	; 0x0a
     d88:	3b 85       	ldd	r19, Y+11	; 0x0b
     d8a:	22 30       	cpi	r18, 0x02	; 2
     d8c:	31 05       	cpc	r19, r1
     d8e:	09 f4       	brne	.+2      	; 0xd92 <TIMER_init+0x42>
     d90:	9f c0       	rjmp	.+318    	; 0xed0 <TIMER_init+0x180>
     d92:	8a 85       	ldd	r24, Y+10	; 0x0a
     d94:	9b 85       	ldd	r25, Y+11	; 0x0b
     d96:	00 97       	sbiw	r24, 0x00	; 0
     d98:	09 f0       	breq	.+2      	; 0xd9c <TIMER_init+0x4c>
     d9a:	dc c0       	rjmp	.+440    	; 0xf54 <TIMER_init+0x204>

		/*
		 * Clear All timer register before doing any operation,
		 * to ensure that timer will work correctly
		 */
		TCNT0_R = 0x00;
     d9c:	e2 e5       	ldi	r30, 0x52	; 82
     d9e:	f0 e0       	ldi	r31, 0x00	; 0
     da0:	10 82       	st	Z, r1
		TCCR0_R = 0x00;
     da2:	e3 e5       	ldi	r30, 0x53	; 83
     da4:	f0 e0       	ldi	r31, 0x00	; 0
     da6:	10 82       	st	Z, r1
		OCR0_R  = 0x00;
     da8:	ec e5       	ldi	r30, 0x5C	; 92
     daa:	f0 e0       	ldi	r31, 0x00	; 0
     dac:	10 82       	st	Z, r1
		/*
		 * Insert the required initial value in the TCNT0 register
		 * TIMER0 is (8-bit), so mask the initial value with 0xFF to ensure that it
		 * does not exceed 255
		 */
		TCNT0_R = ( (Config_Ptr -> intialValue) & 0xFF);
     dae:	a2 e5       	ldi	r26, 0x52	; 82
     db0:	b0 e0       	ldi	r27, 0x00	; 0
     db2:	ea 81       	ldd	r30, Y+2	; 0x02
     db4:	fb 81       	ldd	r31, Y+3	; 0x03
     db6:	80 81       	ld	r24, Z
     db8:	91 81       	ldd	r25, Z+1	; 0x01
     dba:	8c 93       	st	X, r24

		switch(Config_Ptr -> timer_Mode)
     dbc:	ea 81       	ldd	r30, Y+2	; 0x02
     dbe:	fb 81       	ldd	r31, Y+3	; 0x03
     dc0:	85 81       	ldd	r24, Z+5	; 0x05
     dc2:	28 2f       	mov	r18, r24
     dc4:	30 e0       	ldi	r19, 0x00	; 0
     dc6:	39 87       	std	Y+9, r19	; 0x09
     dc8:	28 87       	std	Y+8, r18	; 0x08
     dca:	88 85       	ldd	r24, Y+8	; 0x08
     dcc:	99 85       	ldd	r25, Y+9	; 0x09
     dce:	00 97       	sbiw	r24, 0x00	; 0
     dd0:	31 f0       	breq	.+12     	; 0xdde <TIMER_init+0x8e>
     dd2:	28 85       	ldd	r18, Y+8	; 0x08
     dd4:	39 85       	ldd	r19, Y+9	; 0x09
     dd6:	21 30       	cpi	r18, 0x01	; 1
     dd8:	31 05       	cpc	r19, r1
     dda:	71 f0       	breq	.+28     	; 0xdf8 <TIMER_init+0xa8>
     ddc:	21 c0       	rjmp	.+66     	; 0xe20 <TIMER_init+0xd0>
		 * 	- Normal Mode  (COM01 = 0 & COM00 = 0) in TCCR0 register
		 * 	- Enable TIMER0 Overflow Interrupt (TOIE0) bit in TIMSK register
		 */
		case NORMAL:

			TCCR0_R  = (1 << FOC0_BIT);
     dde:	e3 e5       	ldi	r30, 0x53	; 83
     de0:	f0 e0       	ldi	r31, 0x00	; 0
     de2:	80 e8       	ldi	r24, 0x80	; 128
     de4:	80 83       	st	Z, r24
			TIMSK_R |= (1 << TOIE0_BIT);
     de6:	a9 e5       	ldi	r26, 0x59	; 89
     de8:	b0 e0       	ldi	r27, 0x00	; 0
     dea:	e9 e5       	ldi	r30, 0x59	; 89
     dec:	f0 e0       	ldi	r31, 0x00	; 0
     dee:	80 81       	ld	r24, Z
     df0:	81 60       	ori	r24, 0x01	; 1
     df2:	8c 93       	st	X, r24
			u8_ERROR_STAT = E_TIMER_SUCCESS;
     df4:	19 82       	std	Y+1, r1	; 0x01
     df6:	b0 c0       	rjmp	.+352    	; 0xf58 <TIMER_init+0x208>
		 * 	- Normal  Mode (COM01 = 0 & COM00 = 0) in TCCR0 register
		 * 	- Enable TIMER0 Compare Match Interrupt (OCIE0) bit in TIMSK register
		 */
		case COMPARE:

			OCR0_R   = ( (Config_Ptr -> compareValue) & 0xFF);
     df8:	ac e5       	ldi	r26, 0x5C	; 92
     dfa:	b0 e0       	ldi	r27, 0x00	; 0
     dfc:	ea 81       	ldd	r30, Y+2	; 0x02
     dfe:	fb 81       	ldd	r31, Y+3	; 0x03
     e00:	82 81       	ldd	r24, Z+2	; 0x02
     e02:	93 81       	ldd	r25, Z+3	; 0x03
     e04:	8c 93       	st	X, r24
			TCCR0_R  = (1 << FOC0_BIT) | (1 << WGM01_BIT);
     e06:	e3 e5       	ldi	r30, 0x53	; 83
     e08:	f0 e0       	ldi	r31, 0x00	; 0
     e0a:	88 e8       	ldi	r24, 0x88	; 136
     e0c:	80 83       	st	Z, r24
			TIMSK_R |= (1 << OCIE0_BIT);
     e0e:	a9 e5       	ldi	r26, 0x59	; 89
     e10:	b0 e0       	ldi	r27, 0x00	; 0
     e12:	e9 e5       	ldi	r30, 0x59	; 89
     e14:	f0 e0       	ldi	r31, 0x00	; 0
     e16:	80 81       	ld	r24, Z
     e18:	82 60       	ori	r24, 0x02	; 2
     e1a:	8c 93       	st	X, r24
			u8_ERROR_STAT = E_TIMER_SUCCESS;
     e1c:	19 82       	std	Y+1, r1	; 0x01
     e1e:	9c c0       	rjmp	.+312    	; 0xf58 <TIMER_init+0x208>
			break;

		default:

			u8_ERROR_STAT = E_TIMER_INVALID_MODE;
     e20:	82 e0       	ldi	r24, 0x02	; 2
     e22:	89 83       	std	Y+1, r24	; 0x01
     e24:	99 c0       	rjmp	.+306    	; 0xf58 <TIMER_init+0x208>

		/*
		 * Clear All timer register before doing any operation,
		 * to ensure that timer will work correctly
		 */
		TCNT1_R  = 0x0000;
     e26:	ec e4       	ldi	r30, 0x4C	; 76
     e28:	f0 e0       	ldi	r31, 0x00	; 0
     e2a:	11 82       	std	Z+1, r1	; 0x01
     e2c:	10 82       	st	Z, r1
		OCR1A_R  = 0x0000;
     e2e:	ea e4       	ldi	r30, 0x4A	; 74
     e30:	f0 e0       	ldi	r31, 0x00	; 0
     e32:	11 82       	std	Z+1, r1	; 0x01
     e34:	10 82       	st	Z, r1
		TCCR1A_R = 0x00;
     e36:	ef e4       	ldi	r30, 0x4F	; 79
     e38:	f0 e0       	ldi	r31, 0x00	; 0
     e3a:	10 82       	st	Z, r1
		TCCR1B_R = 0x00;
     e3c:	ee e4       	ldi	r30, 0x4E	; 78
     e3e:	f0 e0       	ldi	r31, 0x00	; 0
     e40:	10 82       	st	Z, r1
		/*
		 * Insert the required initial value in the TCNT1 register
		 * TIMER1 is (16-bit), so mask the initial value with 0xFFFF to ensure that it
		 * does not exceed 65535
		 */
		TCNT1_R = ( (Config_Ptr -> intialValue) & 0xFFFF);
     e42:	ac e4       	ldi	r26, 0x4C	; 76
     e44:	b0 e0       	ldi	r27, 0x00	; 0
     e46:	ea 81       	ldd	r30, Y+2	; 0x02
     e48:	fb 81       	ldd	r31, Y+3	; 0x03
     e4a:	80 81       	ld	r24, Z
     e4c:	91 81       	ldd	r25, Z+1	; 0x01
     e4e:	11 96       	adiw	r26, 0x01	; 1
     e50:	9c 93       	st	X, r25
     e52:	8e 93       	st	-X, r24

		switch(Config_Ptr -> timer_Mode)
     e54:	ea 81       	ldd	r30, Y+2	; 0x02
     e56:	fb 81       	ldd	r31, Y+3	; 0x03
     e58:	85 81       	ldd	r24, Z+5	; 0x05
     e5a:	28 2f       	mov	r18, r24
     e5c:	30 e0       	ldi	r19, 0x00	; 0
     e5e:	3f 83       	std	Y+7, r19	; 0x07
     e60:	2e 83       	std	Y+6, r18	; 0x06
     e62:	8e 81       	ldd	r24, Y+6	; 0x06
     e64:	9f 81       	ldd	r25, Y+7	; 0x07
     e66:	00 97       	sbiw	r24, 0x00	; 0
     e68:	31 f0       	breq	.+12     	; 0xe76 <TIMER_init+0x126>
     e6a:	2e 81       	ldd	r18, Y+6	; 0x06
     e6c:	3f 81       	ldd	r19, Y+7	; 0x07
     e6e:	21 30       	cpi	r18, 0x01	; 1
     e70:	31 05       	cpc	r19, r1
     e72:	71 f0       	breq	.+28     	; 0xe90 <TIMER_init+0x140>
     e74:	2a c0       	rjmp	.+84     	; 0xeca <TIMER_init+0x17a>
		 * 	- Normal  Mode (WGM10 = 0 & WGM11 = 0 & WGM12 = 0 & WGM13 = 0)
		 * 	- Enable TIMER1 Overflow Interrupt (TOIE1) bit in TIMSK register
		 */
		case NORMAL:

			TCCR1A_R = (1 << FOC1A_BIT)  | (1 << FOC1B_BIT);
     e76:	ef e4       	ldi	r30, 0x4F	; 79
     e78:	f0 e0       	ldi	r31, 0x00	; 0
     e7a:	8c e0       	ldi	r24, 0x0C	; 12
     e7c:	80 83       	st	Z, r24
			TIMSK_R |= (1 << TOIE1_BIT);
     e7e:	a9 e5       	ldi	r26, 0x59	; 89
     e80:	b0 e0       	ldi	r27, 0x00	; 0
     e82:	e9 e5       	ldi	r30, 0x59	; 89
     e84:	f0 e0       	ldi	r31, 0x00	; 0
     e86:	80 81       	ld	r24, Z
     e88:	84 60       	ori	r24, 0x04	; 4
     e8a:	8c 93       	st	X, r24
			u8_ERROR_STAT = E_TIMER_SUCCESS;
     e8c:	19 82       	std	Y+1, r1	; 0x01
     e8e:	64 c0       	rjmp	.+200    	; 0xf58 <TIMER_init+0x208>
		 *	- Compare Mode (WGM10 = 0 & WGM11 = 0 & WGM12 = 1 & WGM13 = 0)
		 * 	- Enable TIMER2 Compare Match Interrupt (OCIE1A) bit in TIMSK register
		 */
		case COMPARE:

			OCR1A_R   = ( (Config_Ptr -> compareValue) & 0xFFFF);
     e90:	aa e4       	ldi	r26, 0x4A	; 74
     e92:	b0 e0       	ldi	r27, 0x00	; 0
     e94:	ea 81       	ldd	r30, Y+2	; 0x02
     e96:	fb 81       	ldd	r31, Y+3	; 0x03
     e98:	82 81       	ldd	r24, Z+2	; 0x02
     e9a:	93 81       	ldd	r25, Z+3	; 0x03
     e9c:	11 96       	adiw	r26, 0x01	; 1
     e9e:	9c 93       	st	X, r25
     ea0:	8e 93       	st	-X, r24
			TCCR1A_R  = (1 << FOC1A_BIT) | (1 << FOC1B_BIT);
     ea2:	ef e4       	ldi	r30, 0x4F	; 79
     ea4:	f0 e0       	ldi	r31, 0x00	; 0
     ea6:	8c e0       	ldi	r24, 0x0C	; 12
     ea8:	80 83       	st	Z, r24
			TCCR1B_R |= (1 << WGM12_BIT);
     eaa:	ae e4       	ldi	r26, 0x4E	; 78
     eac:	b0 e0       	ldi	r27, 0x00	; 0
     eae:	ee e4       	ldi	r30, 0x4E	; 78
     eb0:	f0 e0       	ldi	r31, 0x00	; 0
     eb2:	80 81       	ld	r24, Z
     eb4:	88 60       	ori	r24, 0x08	; 8
     eb6:	8c 93       	st	X, r24
			TIMSK_R  |= (1 << OCIE1A_BIT);
     eb8:	a9 e5       	ldi	r26, 0x59	; 89
     eba:	b0 e0       	ldi	r27, 0x00	; 0
     ebc:	e9 e5       	ldi	r30, 0x59	; 89
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	80 81       	ld	r24, Z
     ec2:	80 61       	ori	r24, 0x10	; 16
     ec4:	8c 93       	st	X, r24
			u8_ERROR_STAT = E_TIMER_SUCCESS;
     ec6:	19 82       	std	Y+1, r1	; 0x01
     ec8:	47 c0       	rjmp	.+142    	; 0xf58 <TIMER_init+0x208>
			break;

		default:
			u8_ERROR_STAT = E_TIMER_INVALID_MODE;
     eca:	82 e0       	ldi	r24, 0x02	; 2
     ecc:	89 83       	std	Y+1, r24	; 0x01
     ece:	44 c0       	rjmp	.+136    	; 0xf58 <TIMER_init+0x208>

		/*
		 * Clear All timer register before doing any operation,
		 * to ensure that timer will work correctly
		 */
		TCNT2_R = 0x00;
     ed0:	e4 e4       	ldi	r30, 0x44	; 68
     ed2:	f0 e0       	ldi	r31, 0x00	; 0
     ed4:	10 82       	st	Z, r1
		TCCR2_R = 0x00;
     ed6:	e5 e4       	ldi	r30, 0x45	; 69
     ed8:	f0 e0       	ldi	r31, 0x00	; 0
     eda:	10 82       	st	Z, r1
		OCR2_R  = 0x00;
     edc:	e3 e4       	ldi	r30, 0x43	; 67
     ede:	f0 e0       	ldi	r31, 0x00	; 0
     ee0:	10 82       	st	Z, r1
		/*
		 * Insert the required initial value in the TCNT2 register
		 * TIMER2 is (8-bit), so mask the initial value with 0xFF to ensure that it
	     * does not exceed 255
		 */
		TCNT2_R = ( (Config_Ptr -> intialValue) & 0xFF);
     ee2:	a4 e4       	ldi	r26, 0x44	; 68
     ee4:	b0 e0       	ldi	r27, 0x00	; 0
     ee6:	ea 81       	ldd	r30, Y+2	; 0x02
     ee8:	fb 81       	ldd	r31, Y+3	; 0x03
     eea:	80 81       	ld	r24, Z
     eec:	91 81       	ldd	r25, Z+1	; 0x01
     eee:	8c 93       	st	X, r24

		switch(Config_Ptr -> timer_Mode)
     ef0:	ea 81       	ldd	r30, Y+2	; 0x02
     ef2:	fb 81       	ldd	r31, Y+3	; 0x03
     ef4:	85 81       	ldd	r24, Z+5	; 0x05
     ef6:	28 2f       	mov	r18, r24
     ef8:	30 e0       	ldi	r19, 0x00	; 0
     efa:	3d 83       	std	Y+5, r19	; 0x05
     efc:	2c 83       	std	Y+4, r18	; 0x04
     efe:	8c 81       	ldd	r24, Y+4	; 0x04
     f00:	9d 81       	ldd	r25, Y+5	; 0x05
     f02:	00 97       	sbiw	r24, 0x00	; 0
     f04:	31 f0       	breq	.+12     	; 0xf12 <TIMER_init+0x1c2>
     f06:	2c 81       	ldd	r18, Y+4	; 0x04
     f08:	3d 81       	ldd	r19, Y+5	; 0x05
     f0a:	21 30       	cpi	r18, 0x01	; 1
     f0c:	31 05       	cpc	r19, r1
     f0e:	71 f0       	breq	.+28     	; 0xf2c <TIMER_init+0x1dc>
     f10:	23 c0       	rjmp	.+70     	; 0xf58 <TIMER_init+0x208>
		 * 	- Normal  Mode (COM21 = 0 & COM20 = 0) in TCCR2 register
		 * 	- Enable TIMER2 Overflow Interrupt (TOIE2) bit in TIMSK register
		 */
		case NORMAL:

			TCCR2_R  = (1 << FOC2_BIT);
     f12:	e5 e4       	ldi	r30, 0x45	; 69
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	80 e8       	ldi	r24, 0x80	; 128
     f18:	80 83       	st	Z, r24
			TIMSK_R |= (1 << TOIE2_BIT);
     f1a:	a9 e5       	ldi	r26, 0x59	; 89
     f1c:	b0 e0       	ldi	r27, 0x00	; 0
     f1e:	e9 e5       	ldi	r30, 0x59	; 89
     f20:	f0 e0       	ldi	r31, 0x00	; 0
     f22:	80 81       	ld	r24, Z
     f24:	80 64       	ori	r24, 0x40	; 64
     f26:	8c 93       	st	X, r24
			u8_ERROR_STAT = E_TIMER_SUCCESS;
     f28:	19 82       	std	Y+1, r1	; 0x01
     f2a:	16 c0       	rjmp	.+44     	; 0xf58 <TIMER_init+0x208>
		 * 	- Normal  Mode (COM21 = 0 & COM20 = 0) in TCCR2 register
		 * 	- Enable TIMER2 Compare Match Interrupt (OCIE2) bit in TIMSK register
		 */
		case COMPARE:

			OCR2_R   = ( (Config_Ptr -> compareValue) & 0xFF);
     f2c:	a3 e4       	ldi	r26, 0x43	; 67
     f2e:	b0 e0       	ldi	r27, 0x00	; 0
     f30:	ea 81       	ldd	r30, Y+2	; 0x02
     f32:	fb 81       	ldd	r31, Y+3	; 0x03
     f34:	82 81       	ldd	r24, Z+2	; 0x02
     f36:	93 81       	ldd	r25, Z+3	; 0x03
     f38:	8c 93       	st	X, r24
			TCCR2_R  = (1 << FOC2_BIT) | (1 << WGM21_BIT);
     f3a:	e5 e4       	ldi	r30, 0x45	; 69
     f3c:	f0 e0       	ldi	r31, 0x00	; 0
     f3e:	88 e8       	ldi	r24, 0x88	; 136
     f40:	80 83       	st	Z, r24
			TIMSK_R |= (1 << OCIE2_BIT);
     f42:	a9 e5       	ldi	r26, 0x59	; 89
     f44:	b0 e0       	ldi	r27, 0x00	; 0
     f46:	e9 e5       	ldi	r30, 0x59	; 89
     f48:	f0 e0       	ldi	r31, 0x00	; 0
     f4a:	80 81       	ld	r24, Z
     f4c:	80 68       	ori	r24, 0x80	; 128
     f4e:	8c 93       	st	X, r24
			u8_ERROR_STAT = E_TIMER_SUCCESS;
     f50:	19 82       	std	Y+1, r1	; 0x01
     f52:	02 c0       	rjmp	.+4      	; 0xf58 <TIMER_init+0x208>

		}	/* END CASE OF TIMER2 */
		break;

	default:
		u8_ERROR_STAT = E_TIMER_INVALID_ID;
     f54:	81 e0       	ldi	r24, 0x01	; 1
     f56:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return u8_ERROR_STAT;
     f58:	89 81       	ldd	r24, Y+1	; 0x01
}
     f5a:	2b 96       	adiw	r28, 0x0b	; 11
     f5c:	0f b6       	in	r0, 0x3f	; 63
     f5e:	f8 94       	cli
     f60:	de bf       	out	0x3e, r29	; 62
     f62:	0f be       	out	0x3f, r0	; 63
     f64:	cd bf       	out	0x3d, r28	; 61
     f66:	cf 91       	pop	r28
     f68:	df 91       	pop	r29
     f6a:	08 95       	ret

00000f6c <TIMER_setCallBack>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 *************************************************************************************/
void TIMER_setCallBack(void(*a_ptr)(void), const TIMER_ID a_timerID)
{
     f6c:	df 93       	push	r29
     f6e:	cf 93       	push	r28
     f70:	00 d0       	rcall	.+0      	; 0xf72 <TIMER_setCallBack+0x6>
     f72:	00 d0       	rcall	.+0      	; 0xf74 <TIMER_setCallBack+0x8>
     f74:	0f 92       	push	r0
     f76:	cd b7       	in	r28, 0x3d	; 61
     f78:	de b7       	in	r29, 0x3e	; 62
     f7a:	9a 83       	std	Y+2, r25	; 0x02
     f7c:	89 83       	std	Y+1, r24	; 0x01
     f7e:	6b 83       	std	Y+3, r22	; 0x03
	switch(a_timerID)
     f80:	8b 81       	ldd	r24, Y+3	; 0x03
     f82:	28 2f       	mov	r18, r24
     f84:	30 e0       	ldi	r19, 0x00	; 0
     f86:	3d 83       	std	Y+5, r19	; 0x05
     f88:	2c 83       	std	Y+4, r18	; 0x04
     f8a:	8c 81       	ldd	r24, Y+4	; 0x04
     f8c:	9d 81       	ldd	r25, Y+5	; 0x05
     f8e:	81 30       	cpi	r24, 0x01	; 1
     f90:	91 05       	cpc	r25, r1
     f92:	81 f0       	breq	.+32     	; 0xfb4 <TIMER_setCallBack+0x48>
     f94:	2c 81       	ldd	r18, Y+4	; 0x04
     f96:	3d 81       	ldd	r19, Y+5	; 0x05
     f98:	22 30       	cpi	r18, 0x02	; 2
     f9a:	31 05       	cpc	r19, r1
     f9c:	91 f0       	breq	.+36     	; 0xfc2 <TIMER_setCallBack+0x56>
     f9e:	8c 81       	ldd	r24, Y+4	; 0x04
     fa0:	9d 81       	ldd	r25, Y+5	; 0x05
     fa2:	00 97       	sbiw	r24, 0x00	; 0
     fa4:	a1 f4       	brne	.+40     	; 0xfce <TIMER_setCallBack+0x62>
	{

	case TIMER_0:

		/* Save the address of the Call back function of TIMER0 in a global variable */
		g_callBackPtrTimer0 = a_ptr;
     fa6:	89 81       	ldd	r24, Y+1	; 0x01
     fa8:	9a 81       	ldd	r25, Y+2	; 0x02
     faa:	90 93 61 00 	sts	0x0061, r25
     fae:	80 93 60 00 	sts	0x0060, r24
     fb2:	0d c0       	rjmp	.+26     	; 0xfce <TIMER_setCallBack+0x62>
		break;

	case TIMER_1:

		/* Save the address of the Call back function of TIMER1 in a global variable */
		g_callBackPtrTimer1 = a_ptr;
     fb4:	89 81       	ldd	r24, Y+1	; 0x01
     fb6:	9a 81       	ldd	r25, Y+2	; 0x02
     fb8:	90 93 63 00 	sts	0x0063, r25
     fbc:	80 93 62 00 	sts	0x0062, r24
     fc0:	06 c0       	rjmp	.+12     	; 0xfce <TIMER_setCallBack+0x62>
		break;

	case TIMER_2:

		/* Save the address of the Call back function of TIMER2 in a global variable */
		g_callBackPtrTimer2 = a_ptr;
     fc2:	89 81       	ldd	r24, Y+1	; 0x01
     fc4:	9a 81       	ldd	r25, Y+2	; 0x02
     fc6:	90 93 65 00 	sts	0x0065, r25
     fca:	80 93 64 00 	sts	0x0064, r24
		break;
	}
}
     fce:	0f 90       	pop	r0
     fd0:	0f 90       	pop	r0
     fd2:	0f 90       	pop	r0
     fd4:	0f 90       	pop	r0
     fd6:	0f 90       	pop	r0
     fd8:	cf 91       	pop	r28
     fda:	df 91       	pop	r29
     fdc:	08 95       	ret

00000fde <TIMER_stop>:
 * [in/out]		 	None
 *
 * [Returns]:       Error state
 *******************************************************************************/
TIMER_E_STATE_t TIMER_stop(const TIMER_ID a_timerID)
{
     fde:	df 93       	push	r29
     fe0:	cf 93       	push	r28
     fe2:	00 d0       	rcall	.+0      	; 0xfe4 <TIMER_stop+0x6>
     fe4:	00 d0       	rcall	.+0      	; 0xfe6 <TIMER_stop+0x8>
     fe6:	cd b7       	in	r28, 0x3d	; 61
     fe8:	de b7       	in	r29, 0x3e	; 62
     fea:	8a 83       	std	Y+2, r24	; 0x02
	TIMER_E_STATE_t u8_ERROR_STAT = E_NOT_OK;
     fec:	81 e0       	ldi	r24, 0x01	; 1
     fee:	89 83       	std	Y+1, r24	; 0x01

	switch(a_timerID)
     ff0:	8a 81       	ldd	r24, Y+2	; 0x02
     ff2:	28 2f       	mov	r18, r24
     ff4:	30 e0       	ldi	r19, 0x00	; 0
     ff6:	3c 83       	std	Y+4, r19	; 0x04
     ff8:	2b 83       	std	Y+3, r18	; 0x03
     ffa:	8b 81       	ldd	r24, Y+3	; 0x03
     ffc:	9c 81       	ldd	r25, Y+4	; 0x04
     ffe:	81 30       	cpi	r24, 0x01	; 1
    1000:	91 05       	cpc	r25, r1
    1002:	91 f0       	breq	.+36     	; 0x1028 <TIMER_stop+0x4a>
    1004:	2b 81       	ldd	r18, Y+3	; 0x03
    1006:	3c 81       	ldd	r19, Y+4	; 0x04
    1008:	22 30       	cpi	r18, 0x02	; 2
    100a:	31 05       	cpc	r19, r1
    100c:	b1 f0       	breq	.+44     	; 0x103a <TIMER_stop+0x5c>
    100e:	8b 81       	ldd	r24, Y+3	; 0x03
    1010:	9c 81       	ldd	r25, Y+4	; 0x04
    1012:	00 97       	sbiw	r24, 0x00	; 0
    1014:	d9 f4       	brne	.+54     	; 0x104c <TIMER_stop+0x6e>
	{

	case TIMER_0:

		TCCR0_R  = ( TCCR0_R & 0xF8 );	/* Clear Clock bits in TIMER0 */
    1016:	a3 e5       	ldi	r26, 0x53	; 83
    1018:	b0 e0       	ldi	r27, 0x00	; 0
    101a:	e3 e5       	ldi	r30, 0x53	; 83
    101c:	f0 e0       	ldi	r31, 0x00	; 0
    101e:	80 81       	ld	r24, Z
    1020:	88 7f       	andi	r24, 0xF8	; 248
    1022:	8c 93       	st	X, r24
		u8_ERROR_STAT = E_TIMER_SUCCESS;	/* Update the error state with error */
    1024:	19 82       	std	Y+1, r1	; 0x01
    1026:	14 c0       	rjmp	.+40     	; 0x1050 <TIMER_stop+0x72>
		break;

	case TIMER_1:

		TCCR1B_R = (TCCR1B_R & 0xF8);	/* Clear Clock bits in TIMER1 */
    1028:	ae e4       	ldi	r26, 0x4E	; 78
    102a:	b0 e0       	ldi	r27, 0x00	; 0
    102c:	ee e4       	ldi	r30, 0x4E	; 78
    102e:	f0 e0       	ldi	r31, 0x00	; 0
    1030:	80 81       	ld	r24, Z
    1032:	88 7f       	andi	r24, 0xF8	; 248
    1034:	8c 93       	st	X, r24
		u8_ERROR_STAT = E_TIMER_SUCCESS;	/* Update the error state with error */
    1036:	19 82       	std	Y+1, r1	; 0x01
    1038:	0b c0       	rjmp	.+22     	; 0x1050 <TIMER_stop+0x72>
		break;

	case TIMER_2:

		TCCR2_R  = ( TCCR2_R & 0xF8 );	/* Clear Clock bits in TIMER2 */
    103a:	a5 e4       	ldi	r26, 0x45	; 69
    103c:	b0 e0       	ldi	r27, 0x00	; 0
    103e:	e5 e4       	ldi	r30, 0x45	; 69
    1040:	f0 e0       	ldi	r31, 0x00	; 0
    1042:	80 81       	ld	r24, Z
    1044:	88 7f       	andi	r24, 0xF8	; 248
    1046:	8c 93       	st	X, r24
		u8_ERROR_STAT = E_TIMER_SUCCESS;	/* Update the error state with error */
    1048:	19 82       	std	Y+1, r1	; 0x01
    104a:	02 c0       	rjmp	.+4      	; 0x1050 <TIMER_stop+0x72>
		break;

	default:
		u8_ERROR_STAT = E_TIMER_INVALID_ID;
    104c:	81 e0       	ldi	r24, 0x01	; 1
    104e:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return u8_ERROR_STAT;
    1050:	89 81       	ldd	r24, Y+1	; 0x01
}
    1052:	0f 90       	pop	r0
    1054:	0f 90       	pop	r0
    1056:	0f 90       	pop	r0
    1058:	0f 90       	pop	r0
    105a:	cf 91       	pop	r28
    105c:	df 91       	pop	r29
    105e:	08 95       	ret

00001060 <TIMER_DeInit>:
 * [in/out]		 	None
 *
 * [Returns]:       Error state
 ****************************************************************************************/
TIMER_E_STATE_t TIMER_DeInit(const TIMER_ID a_timerID)
{
    1060:	df 93       	push	r29
    1062:	cf 93       	push	r28
    1064:	00 d0       	rcall	.+0      	; 0x1066 <TIMER_DeInit+0x6>
    1066:	00 d0       	rcall	.+0      	; 0x1068 <TIMER_DeInit+0x8>
    1068:	cd b7       	in	r28, 0x3d	; 61
    106a:	de b7       	in	r29, 0x3e	; 62
    106c:	8a 83       	std	Y+2, r24	; 0x02
	TIMER_E_STATE_t u8_ERROR_STAT = E_NOT_OK;
    106e:	81 e0       	ldi	r24, 0x01	; 1
    1070:	89 83       	std	Y+1, r24	; 0x01

	switch(a_timerID)
    1072:	8a 81       	ldd	r24, Y+2	; 0x02
    1074:	28 2f       	mov	r18, r24
    1076:	30 e0       	ldi	r19, 0x00	; 0
    1078:	3c 83       	std	Y+4, r19	; 0x04
    107a:	2b 83       	std	Y+3, r18	; 0x03
    107c:	8b 81       	ldd	r24, Y+3	; 0x03
    107e:	9c 81       	ldd	r25, Y+4	; 0x04
    1080:	81 30       	cpi	r24, 0x01	; 1
    1082:	91 05       	cpc	r25, r1
    1084:	19 f1       	breq	.+70     	; 0x10cc <TIMER_DeInit+0x6c>
    1086:	2b 81       	ldd	r18, Y+3	; 0x03
    1088:	3c 81       	ldd	r19, Y+4	; 0x04
    108a:	22 30       	cpi	r18, 0x02	; 2
    108c:	31 05       	cpc	r19, r1
    108e:	e1 f1       	breq	.+120    	; 0x1108 <TIMER_DeInit+0xa8>
    1090:	8b 81       	ldd	r24, Y+3	; 0x03
    1092:	9c 81       	ldd	r25, Y+4	; 0x04
    1094:	00 97       	sbiw	r24, 0x00	; 0
    1096:	09 f0       	breq	.+2      	; 0x109a <TIMER_DeInit+0x3a>
    1098:	50 c0       	rjmp	.+160    	; 0x113a <TIMER_DeInit+0xda>
	{

	case TIMER_0:

		/* Clear All TIMER0 Register */
		TCNT0_R = 0x00;
    109a:	e2 e5       	ldi	r30, 0x52	; 82
    109c:	f0 e0       	ldi	r31, 0x00	; 0
    109e:	10 82       	st	Z, r1
		TCCR0_R = 0x00;
    10a0:	e3 e5       	ldi	r30, 0x53	; 83
    10a2:	f0 e0       	ldi	r31, 0x00	; 0
    10a4:	10 82       	st	Z, r1
		OCR0_R  = 0x00;
    10a6:	ec e5       	ldi	r30, 0x5C	; 92
    10a8:	f0 e0       	ldi	r31, 0x00	; 0
    10aa:	10 82       	st	Z, r1

		/* Disable TIMER0 Interrupt Enable */
		TIMSK_R &= ~(1 << TOIE0_BIT) & ~(1 << OCIE0_BIT);
    10ac:	a9 e5       	ldi	r26, 0x59	; 89
    10ae:	b0 e0       	ldi	r27, 0x00	; 0
    10b0:	e9 e5       	ldi	r30, 0x59	; 89
    10b2:	f0 e0       	ldi	r31, 0x00	; 0
    10b4:	80 81       	ld	r24, Z
    10b6:	8c 7f       	andi	r24, 0xFC	; 252
    10b8:	8c 93       	st	X, r24

		/* Disable TIMER0 Interrupt Flag, by writing a logic one */
		TIFR_R |= (1 << OCF0_BIT) | (1 << TOV0_BIT);
    10ba:	a8 e5       	ldi	r26, 0x58	; 88
    10bc:	b0 e0       	ldi	r27, 0x00	; 0
    10be:	e8 e5       	ldi	r30, 0x58	; 88
    10c0:	f0 e0       	ldi	r31, 0x00	; 0
    10c2:	80 81       	ld	r24, Z
    10c4:	83 60       	ori	r24, 0x03	; 3
    10c6:	8c 93       	st	X, r24

		/* Update the error state with No error */
		u8_ERROR_STAT = E_TIMER_SUCCESS;
    10c8:	19 82       	std	Y+1, r1	; 0x01
    10ca:	39 c0       	rjmp	.+114    	; 0x113e <TIMER_DeInit+0xde>
		break;

	case TIMER_1:

		/* Clear All TIMER1 Register */
		TCNT1_R  = 0x0000;
    10cc:	ec e4       	ldi	r30, 0x4C	; 76
    10ce:	f0 e0       	ldi	r31, 0x00	; 0
    10d0:	11 82       	std	Z+1, r1	; 0x01
    10d2:	10 82       	st	Z, r1
		OCR1A_R  = 0x0000;
    10d4:	ea e4       	ldi	r30, 0x4A	; 74
    10d6:	f0 e0       	ldi	r31, 0x00	; 0
    10d8:	11 82       	std	Z+1, r1	; 0x01
    10da:	10 82       	st	Z, r1
		TCCR1A_R = 0x00;
    10dc:	ef e4       	ldi	r30, 0x4F	; 79
    10de:	f0 e0       	ldi	r31, 0x00	; 0
    10e0:	10 82       	st	Z, r1
		TCCR1B_R = 0x00;
    10e2:	ee e4       	ldi	r30, 0x4E	; 78
    10e4:	f0 e0       	ldi	r31, 0x00	; 0
    10e6:	10 82       	st	Z, r1

		/* Disable TIMER1 Interrupt Enable */
		TIMSK_R &= ~(1 << TOIE1_BIT) & ~(1 << OCIE1A_BIT);
    10e8:	a9 e5       	ldi	r26, 0x59	; 89
    10ea:	b0 e0       	ldi	r27, 0x00	; 0
    10ec:	e9 e5       	ldi	r30, 0x59	; 89
    10ee:	f0 e0       	ldi	r31, 0x00	; 0
    10f0:	80 81       	ld	r24, Z
    10f2:	8b 7e       	andi	r24, 0xEB	; 235
    10f4:	8c 93       	st	X, r24

		/* Disable TIMER1 Interrupt Flag, by writing a logic one */
		TIFR_R |= (1 << OCF1A_BIT) | (1 << OCF1B_BIT) | (1 << TOV1_BIT);
    10f6:	a8 e5       	ldi	r26, 0x58	; 88
    10f8:	b0 e0       	ldi	r27, 0x00	; 0
    10fa:	e8 e5       	ldi	r30, 0x58	; 88
    10fc:	f0 e0       	ldi	r31, 0x00	; 0
    10fe:	80 81       	ld	r24, Z
    1100:	8c 61       	ori	r24, 0x1C	; 28
    1102:	8c 93       	st	X, r24

		/* Update the error state with No error */
		u8_ERROR_STAT = E_TIMER_SUCCESS;
    1104:	19 82       	std	Y+1, r1	; 0x01
    1106:	1b c0       	rjmp	.+54     	; 0x113e <TIMER_DeInit+0xde>
		break;

	case TIMER_2:

		/* Clear All TIMER2 Register */
		TCNT2_R = 0x00;
    1108:	e4 e4       	ldi	r30, 0x44	; 68
    110a:	f0 e0       	ldi	r31, 0x00	; 0
    110c:	10 82       	st	Z, r1
		TCCR2_R = 0x00;
    110e:	e5 e4       	ldi	r30, 0x45	; 69
    1110:	f0 e0       	ldi	r31, 0x00	; 0
    1112:	10 82       	st	Z, r1
		OCR2_R  = 0x00;
    1114:	e3 e4       	ldi	r30, 0x43	; 67
    1116:	f0 e0       	ldi	r31, 0x00	; 0
    1118:	10 82       	st	Z, r1

		/* Disable TIMER2 Interrupt Flags */
		TIMSK_R &= ~(1 << TOIE2_BIT) & ~(1 << OCIE2_BIT);
    111a:	a9 e5       	ldi	r26, 0x59	; 89
    111c:	b0 e0       	ldi	r27, 0x00	; 0
    111e:	e9 e5       	ldi	r30, 0x59	; 89
    1120:	f0 e0       	ldi	r31, 0x00	; 0
    1122:	80 81       	ld	r24, Z
    1124:	8f 73       	andi	r24, 0x3F	; 63
    1126:	8c 93       	st	X, r24

		/* Disable TIMER2 Interrupt Flag, by writing a logic one */
		TIFR_R |= (1 << OCF2_BIT) | (1 << TOV2_BIT);
    1128:	a8 e5       	ldi	r26, 0x58	; 88
    112a:	b0 e0       	ldi	r27, 0x00	; 0
    112c:	e8 e5       	ldi	r30, 0x58	; 88
    112e:	f0 e0       	ldi	r31, 0x00	; 0
    1130:	80 81       	ld	r24, Z
    1132:	80 6c       	ori	r24, 0xC0	; 192
    1134:	8c 93       	st	X, r24

		/* Update the error state with No error */
		u8_ERROR_STAT = E_TIMER_SUCCESS;
    1136:	19 82       	std	Y+1, r1	; 0x01
    1138:	02 c0       	rjmp	.+4      	; 0x113e <TIMER_DeInit+0xde>
		break;

	default:

		/* Update the error state with error */
		u8_ERROR_STAT = E_TIMER_INVALID_ID;
    113a:	81 e0       	ldi	r24, 0x01	; 1
    113c:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return u8_ERROR_STAT;
    113e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1140:	0f 90       	pop	r0
    1142:	0f 90       	pop	r0
    1144:	0f 90       	pop	r0
    1146:	0f 90       	pop	r0
    1148:	cf 91       	pop	r28
    114a:	df 91       	pop	r29
    114c:	08 95       	ret

0000114e <TIMER_start>:
 * [in/out]		 	None
 *
 * [Returns]:       Error state
 ******************************************************************************/
TIMER_E_STATE_t TIMER_start(const TIMER_ConfigType * Config_Ptr)
{
    114e:	df 93       	push	r29
    1150:	cf 93       	push	r28
    1152:	00 d0       	rcall	.+0      	; 0x1154 <TIMER_start+0x6>
    1154:	00 d0       	rcall	.+0      	; 0x1156 <TIMER_start+0x8>
    1156:	0f 92       	push	r0
    1158:	cd b7       	in	r28, 0x3d	; 61
    115a:	de b7       	in	r29, 0x3e	; 62
    115c:	9b 83       	std	Y+3, r25	; 0x03
    115e:	8a 83       	std	Y+2, r24	; 0x02
	TIMER_E_STATE_t u8_ERROR_STAT = E_NOT_OK;
    1160:	81 e0       	ldi	r24, 0x01	; 1
    1162:	89 83       	std	Y+1, r24	; 0x01

	switch(Config_Ptr -> timer_ID)
    1164:	ea 81       	ldd	r30, Y+2	; 0x02
    1166:	fb 81       	ldd	r31, Y+3	; 0x03
    1168:	84 81       	ldd	r24, Z+4	; 0x04
    116a:	28 2f       	mov	r18, r24
    116c:	30 e0       	ldi	r19, 0x00	; 0
    116e:	3d 83       	std	Y+5, r19	; 0x05
    1170:	2c 83       	std	Y+4, r18	; 0x04
    1172:	8c 81       	ldd	r24, Y+4	; 0x04
    1174:	9d 81       	ldd	r25, Y+5	; 0x05
    1176:	81 30       	cpi	r24, 0x01	; 1
    1178:	91 05       	cpc	r25, r1
    117a:	b9 f0       	breq	.+46     	; 0x11aa <TIMER_start+0x5c>
    117c:	2c 81       	ldd	r18, Y+4	; 0x04
    117e:	3d 81       	ldd	r19, Y+5	; 0x05
    1180:	22 30       	cpi	r18, 0x02	; 2
    1182:	31 05       	cpc	r19, r1
    1184:	01 f1       	breq	.+64     	; 0x11c6 <TIMER_start+0x78>
    1186:	8c 81       	ldd	r24, Y+4	; 0x04
    1188:	9d 81       	ldd	r25, Y+5	; 0x05
    118a:	00 97       	sbiw	r24, 0x00	; 0
    118c:	51 f5       	brne	.+84     	; 0x11e2 <TIMER_start+0x94>
	{

	 /* Insert the required Clock in the First three bits (CS02, CS01, CS00) in TCCR0 register */
	case TIMER_0:
		TCCR0_R  = (TCCR0_R & 0xF8) | (Config_Ptr -> timer_Clock);
    118e:	a3 e5       	ldi	r26, 0x53	; 83
    1190:	b0 e0       	ldi	r27, 0x00	; 0
    1192:	e3 e5       	ldi	r30, 0x53	; 83
    1194:	f0 e0       	ldi	r31, 0x00	; 0
    1196:	80 81       	ld	r24, Z
    1198:	98 2f       	mov	r25, r24
    119a:	98 7f       	andi	r25, 0xF8	; 248
    119c:	ea 81       	ldd	r30, Y+2	; 0x02
    119e:	fb 81       	ldd	r31, Y+3	; 0x03
    11a0:	86 81       	ldd	r24, Z+6	; 0x06
    11a2:	89 2b       	or	r24, r25
    11a4:	8c 93       	st	X, r24
		u8_ERROR_STAT = E_TIMER_SUCCESS;	/* Update the error state with error */
    11a6:	19 82       	std	Y+1, r1	; 0x01
    11a8:	1e c0       	rjmp	.+60     	; 0x11e6 <TIMER_start+0x98>
		break;

	/* Insert the required Clock in the First three bits (CS12, CS11, CS10) in TCCR1B register */
	case TIMER_1:
		TCCR1B_R  = (TCCR1B_R & 0xF8) | (Config_Ptr -> timer_Clock);
    11aa:	ae e4       	ldi	r26, 0x4E	; 78
    11ac:	b0 e0       	ldi	r27, 0x00	; 0
    11ae:	ee e4       	ldi	r30, 0x4E	; 78
    11b0:	f0 e0       	ldi	r31, 0x00	; 0
    11b2:	80 81       	ld	r24, Z
    11b4:	98 2f       	mov	r25, r24
    11b6:	98 7f       	andi	r25, 0xF8	; 248
    11b8:	ea 81       	ldd	r30, Y+2	; 0x02
    11ba:	fb 81       	ldd	r31, Y+3	; 0x03
    11bc:	86 81       	ldd	r24, Z+6	; 0x06
    11be:	89 2b       	or	r24, r25
    11c0:	8c 93       	st	X, r24
		u8_ERROR_STAT = E_TIMER_SUCCESS;	/* Update the error state with error */
    11c2:	19 82       	std	Y+1, r1	; 0x01
    11c4:	10 c0       	rjmp	.+32     	; 0x11e6 <TIMER_start+0x98>
		break;

	/* Insert the required Clock in the First three bits (CS22, CS21, CS20) in TCCR2 register */
	case TIMER_2:
		TCCR2_R  = (TCCR2_R & 0xF8) | (Config_Ptr -> timer_Clock);
    11c6:	a5 e4       	ldi	r26, 0x45	; 69
    11c8:	b0 e0       	ldi	r27, 0x00	; 0
    11ca:	e5 e4       	ldi	r30, 0x45	; 69
    11cc:	f0 e0       	ldi	r31, 0x00	; 0
    11ce:	80 81       	ld	r24, Z
    11d0:	98 2f       	mov	r25, r24
    11d2:	98 7f       	andi	r25, 0xF8	; 248
    11d4:	ea 81       	ldd	r30, Y+2	; 0x02
    11d6:	fb 81       	ldd	r31, Y+3	; 0x03
    11d8:	86 81       	ldd	r24, Z+6	; 0x06
    11da:	89 2b       	or	r24, r25
    11dc:	8c 93       	st	X, r24
		u8_ERROR_STAT = E_TIMER_SUCCESS;	/* Update the error state with error */
    11de:	19 82       	std	Y+1, r1	; 0x01
    11e0:	02 c0       	rjmp	.+4      	; 0x11e6 <TIMER_start+0x98>
		break;

	default:
		u8_ERROR_STAT = E_TIMER_INVALID_ID;
    11e2:	81 e0       	ldi	r24, 0x01	; 1
    11e4:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return u8_ERROR_STAT;
    11e6:	89 81       	ldd	r24, Y+1	; 0x01
}
    11e8:	0f 90       	pop	r0
    11ea:	0f 90       	pop	r0
    11ec:	0f 90       	pop	r0
    11ee:	0f 90       	pop	r0
    11f0:	0f 90       	pop	r0
    11f2:	cf 91       	pop	r28
    11f4:	df 91       	pop	r29
    11f6:	08 95       	ret

000011f8 <_exit>:
    11f8:	f8 94       	cli

000011fa <__stop_program>:
    11fa:	ff cf       	rjmp	.-2      	; 0x11fa <__stop_program>
