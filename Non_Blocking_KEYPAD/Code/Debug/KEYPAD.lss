
KEYPAD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000325c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  0000325c  000032f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  00800070  00800070  00003300  2**0
                  ALLOC
  3 .stab         000031a4  00000000  00000000  00003300  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002081  00000000  00000000  000064a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00008525  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00008665  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000087d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000a41e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000b309  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000c0b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000c218  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000c4a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000cc73  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 a2 06 	jmp	0xd44	; 0xd44 <__vector_4>
      14:	0c 94 6f 06 	jmp	0xcde	; 0xcde <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 3c 06 	jmp	0xc78	; 0xc78 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 09 06 	jmp	0xc12	; 0xc12 <__vector_9>
      28:	0c 94 d6 05 	jmp	0xbac	; 0xbac <__vector_10>
      2c:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e5       	ldi	r30, 0x5C	; 92
      68:	f2 e3       	ldi	r31, 0x32	; 50
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 37       	cpi	r26, 0x70	; 112
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 e7       	ldi	r26, 0x70	; 112
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 37       	cpi	r26, 0x79	; 121
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a7 18 	call	0x314e	; 0x314e <main>
      8a:	0c 94 2c 19 	jmp	0x3258	; 0x3258 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 b0 18 	jmp	0x3160	; 0x3160 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 cc 18 	jmp	0x3198	; 0x3198 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 bc 18 	jmp	0x3178	; 0x3178 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 d8 18 	jmp	0x31b0	; 0x31b0 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 bc 18 	jmp	0x3178	; 0x3178 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 d8 18 	jmp	0x31b0	; 0x31b0 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 b0 18 	jmp	0x3160	; 0x3160 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 cc 18 	jmp	0x3198	; 0x3198 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 bc 18 	jmp	0x3178	; 0x3178 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 d8 18 	jmp	0x31b0	; 0x31b0 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 bc 18 	jmp	0x3178	; 0x3178 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 d8 18 	jmp	0x31b0	; 0x31b0 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 bc 18 	jmp	0x3178	; 0x3178 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 d8 18 	jmp	0x31b0	; 0x31b0 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 c0 18 	jmp	0x3180	; 0x3180 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 dc 18 	jmp	0x31b8	; 0x31b8 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <__vector_11>:
/************************************************************************************
 *                                     TIMER0                                       *
 ************************************************************************************/

ISR(TIMER0_OVF_vect)
{
     b46:	1f 92       	push	r1
     b48:	0f 92       	push	r0
     b4a:	0f b6       	in	r0, 0x3f	; 63
     b4c:	0f 92       	push	r0
     b4e:	11 24       	eor	r1, r1
     b50:	2f 93       	push	r18
     b52:	3f 93       	push	r19
     b54:	4f 93       	push	r20
     b56:	5f 93       	push	r21
     b58:	6f 93       	push	r22
     b5a:	7f 93       	push	r23
     b5c:	8f 93       	push	r24
     b5e:	9f 93       	push	r25
     b60:	af 93       	push	r26
     b62:	bf 93       	push	r27
     b64:	ef 93       	push	r30
     b66:	ff 93       	push	r31
     b68:	df 93       	push	r29
     b6a:	cf 93       	push	r28
     b6c:	cd b7       	in	r28, 0x3d	; 61
     b6e:	de b7       	in	r29, 0x3e	; 62
	/* Check if Pointer is not a NULL one, to avoid Segmentation fault */
	if(g_callBackPtrTimer0 != NULL_PTR)
     b70:	80 91 70 00 	lds	r24, 0x0070
     b74:	90 91 71 00 	lds	r25, 0x0071
     b78:	00 97       	sbiw	r24, 0x00	; 0
     b7a:	29 f0       	breq	.+10     	; 0xb86 <__vector_11+0x40>
	{
		/*
		 * Call the callback function in the application after the overflow has
		 * occurred in TIMER0 (NORMAL MODE)
		 */
		(*g_callBackPtrTimer0)();
     b7c:	e0 91 70 00 	lds	r30, 0x0070
     b80:	f0 91 71 00 	lds	r31, 0x0071
     b84:	09 95       	icall
	}
}
     b86:	cf 91       	pop	r28
     b88:	df 91       	pop	r29
     b8a:	ff 91       	pop	r31
     b8c:	ef 91       	pop	r30
     b8e:	bf 91       	pop	r27
     b90:	af 91       	pop	r26
     b92:	9f 91       	pop	r25
     b94:	8f 91       	pop	r24
     b96:	7f 91       	pop	r23
     b98:	6f 91       	pop	r22
     b9a:	5f 91       	pop	r21
     b9c:	4f 91       	pop	r20
     b9e:	3f 91       	pop	r19
     ba0:	2f 91       	pop	r18
     ba2:	0f 90       	pop	r0
     ba4:	0f be       	out	0x3f, r0	; 63
     ba6:	0f 90       	pop	r0
     ba8:	1f 90       	pop	r1
     baa:	18 95       	reti

00000bac <__vector_10>:

ISR(TIMER0_COMP_vect)
{
     bac:	1f 92       	push	r1
     bae:	0f 92       	push	r0
     bb0:	0f b6       	in	r0, 0x3f	; 63
     bb2:	0f 92       	push	r0
     bb4:	11 24       	eor	r1, r1
     bb6:	2f 93       	push	r18
     bb8:	3f 93       	push	r19
     bba:	4f 93       	push	r20
     bbc:	5f 93       	push	r21
     bbe:	6f 93       	push	r22
     bc0:	7f 93       	push	r23
     bc2:	8f 93       	push	r24
     bc4:	9f 93       	push	r25
     bc6:	af 93       	push	r26
     bc8:	bf 93       	push	r27
     bca:	ef 93       	push	r30
     bcc:	ff 93       	push	r31
     bce:	df 93       	push	r29
     bd0:	cf 93       	push	r28
     bd2:	cd b7       	in	r28, 0x3d	; 61
     bd4:	de b7       	in	r29, 0x3e	; 62
	/* Check if Pointer is not a NULL one, to avoid Segmentation fault */
	if(g_callBackPtrTimer0 != NULL_PTR)
     bd6:	80 91 70 00 	lds	r24, 0x0070
     bda:	90 91 71 00 	lds	r25, 0x0071
     bde:	00 97       	sbiw	r24, 0x00	; 0
     be0:	29 f0       	breq	.+10     	; 0xbec <__vector_10+0x40>
	{
		/*
		 * Call the callback function in the application after the compare match has
		 * occurred in TIMER0 (COMPARE MODE)
		 */
		(*g_callBackPtrTimer0)();
     be2:	e0 91 70 00 	lds	r30, 0x0070
     be6:	f0 91 71 00 	lds	r31, 0x0071
     bea:	09 95       	icall
	}
}
     bec:	cf 91       	pop	r28
     bee:	df 91       	pop	r29
     bf0:	ff 91       	pop	r31
     bf2:	ef 91       	pop	r30
     bf4:	bf 91       	pop	r27
     bf6:	af 91       	pop	r26
     bf8:	9f 91       	pop	r25
     bfa:	8f 91       	pop	r24
     bfc:	7f 91       	pop	r23
     bfe:	6f 91       	pop	r22
     c00:	5f 91       	pop	r21
     c02:	4f 91       	pop	r20
     c04:	3f 91       	pop	r19
     c06:	2f 91       	pop	r18
     c08:	0f 90       	pop	r0
     c0a:	0f be       	out	0x3f, r0	; 63
     c0c:	0f 90       	pop	r0
     c0e:	1f 90       	pop	r1
     c10:	18 95       	reti

00000c12 <__vector_9>:
/************************************************************************************
 *                                       TIMER1                                     *
 ************************************************************************************/

ISR(TIMER1_OVF_vect)
{
     c12:	1f 92       	push	r1
     c14:	0f 92       	push	r0
     c16:	0f b6       	in	r0, 0x3f	; 63
     c18:	0f 92       	push	r0
     c1a:	11 24       	eor	r1, r1
     c1c:	2f 93       	push	r18
     c1e:	3f 93       	push	r19
     c20:	4f 93       	push	r20
     c22:	5f 93       	push	r21
     c24:	6f 93       	push	r22
     c26:	7f 93       	push	r23
     c28:	8f 93       	push	r24
     c2a:	9f 93       	push	r25
     c2c:	af 93       	push	r26
     c2e:	bf 93       	push	r27
     c30:	ef 93       	push	r30
     c32:	ff 93       	push	r31
     c34:	df 93       	push	r29
     c36:	cf 93       	push	r28
     c38:	cd b7       	in	r28, 0x3d	; 61
     c3a:	de b7       	in	r29, 0x3e	; 62
	/* Check if Pointer is not a NULL one, to avoid Segmentation fault */
	if(g_callBackPtrTimer1 != NULL_PTR)
     c3c:	80 91 72 00 	lds	r24, 0x0072
     c40:	90 91 73 00 	lds	r25, 0x0073
     c44:	00 97       	sbiw	r24, 0x00	; 0
     c46:	29 f0       	breq	.+10     	; 0xc52 <__vector_9+0x40>
	{
		/*
		 * Call the callback function in the application after the overflow has
		 * occurred in TIMER1 (NORMAL MODE)
		 */
		(*g_callBackPtrTimer1)();
     c48:	e0 91 72 00 	lds	r30, 0x0072
     c4c:	f0 91 73 00 	lds	r31, 0x0073
     c50:	09 95       	icall
	}
}
     c52:	cf 91       	pop	r28
     c54:	df 91       	pop	r29
     c56:	ff 91       	pop	r31
     c58:	ef 91       	pop	r30
     c5a:	bf 91       	pop	r27
     c5c:	af 91       	pop	r26
     c5e:	9f 91       	pop	r25
     c60:	8f 91       	pop	r24
     c62:	7f 91       	pop	r23
     c64:	6f 91       	pop	r22
     c66:	5f 91       	pop	r21
     c68:	4f 91       	pop	r20
     c6a:	3f 91       	pop	r19
     c6c:	2f 91       	pop	r18
     c6e:	0f 90       	pop	r0
     c70:	0f be       	out	0x3f, r0	; 63
     c72:	0f 90       	pop	r0
     c74:	1f 90       	pop	r1
     c76:	18 95       	reti

00000c78 <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
     c78:	1f 92       	push	r1
     c7a:	0f 92       	push	r0
     c7c:	0f b6       	in	r0, 0x3f	; 63
     c7e:	0f 92       	push	r0
     c80:	11 24       	eor	r1, r1
     c82:	2f 93       	push	r18
     c84:	3f 93       	push	r19
     c86:	4f 93       	push	r20
     c88:	5f 93       	push	r21
     c8a:	6f 93       	push	r22
     c8c:	7f 93       	push	r23
     c8e:	8f 93       	push	r24
     c90:	9f 93       	push	r25
     c92:	af 93       	push	r26
     c94:	bf 93       	push	r27
     c96:	ef 93       	push	r30
     c98:	ff 93       	push	r31
     c9a:	df 93       	push	r29
     c9c:	cf 93       	push	r28
     c9e:	cd b7       	in	r28, 0x3d	; 61
     ca0:	de b7       	in	r29, 0x3e	; 62
	/* Check if Pointer is not a NULL one, to avoid Segmentation fault */
	if(g_callBackPtrTimer1 != NULL_PTR)
     ca2:	80 91 72 00 	lds	r24, 0x0072
     ca6:	90 91 73 00 	lds	r25, 0x0073
     caa:	00 97       	sbiw	r24, 0x00	; 0
     cac:	29 f0       	breq	.+10     	; 0xcb8 <__vector_7+0x40>
	{
		/*
		 * Call the callback function in the application after the compare match has
		 * occurred in TIMER1 Channel A (COMPARE MODE)
		 */
		(*g_callBackPtrTimer1)();
     cae:	e0 91 72 00 	lds	r30, 0x0072
     cb2:	f0 91 73 00 	lds	r31, 0x0073
     cb6:	09 95       	icall
	}
}
     cb8:	cf 91       	pop	r28
     cba:	df 91       	pop	r29
     cbc:	ff 91       	pop	r31
     cbe:	ef 91       	pop	r30
     cc0:	bf 91       	pop	r27
     cc2:	af 91       	pop	r26
     cc4:	9f 91       	pop	r25
     cc6:	8f 91       	pop	r24
     cc8:	7f 91       	pop	r23
     cca:	6f 91       	pop	r22
     ccc:	5f 91       	pop	r21
     cce:	4f 91       	pop	r20
     cd0:	3f 91       	pop	r19
     cd2:	2f 91       	pop	r18
     cd4:	0f 90       	pop	r0
     cd6:	0f be       	out	0x3f, r0	; 63
     cd8:	0f 90       	pop	r0
     cda:	1f 90       	pop	r1
     cdc:	18 95       	reti

00000cde <__vector_5>:
/************************************************************************************
 *                                       TIMER2                                     *
 ************************************************************************************/

ISR(TIMER2_OVF_vect)
{
     cde:	1f 92       	push	r1
     ce0:	0f 92       	push	r0
     ce2:	0f b6       	in	r0, 0x3f	; 63
     ce4:	0f 92       	push	r0
     ce6:	11 24       	eor	r1, r1
     ce8:	2f 93       	push	r18
     cea:	3f 93       	push	r19
     cec:	4f 93       	push	r20
     cee:	5f 93       	push	r21
     cf0:	6f 93       	push	r22
     cf2:	7f 93       	push	r23
     cf4:	8f 93       	push	r24
     cf6:	9f 93       	push	r25
     cf8:	af 93       	push	r26
     cfa:	bf 93       	push	r27
     cfc:	ef 93       	push	r30
     cfe:	ff 93       	push	r31
     d00:	df 93       	push	r29
     d02:	cf 93       	push	r28
     d04:	cd b7       	in	r28, 0x3d	; 61
     d06:	de b7       	in	r29, 0x3e	; 62
	/* Check if Pointer is not a NULL one, to avoid Segmentation fault */
	if(g_callBackPtrTimer2 != NULL_PTR)
     d08:	80 91 74 00 	lds	r24, 0x0074
     d0c:	90 91 75 00 	lds	r25, 0x0075
     d10:	00 97       	sbiw	r24, 0x00	; 0
     d12:	29 f0       	breq	.+10     	; 0xd1e <__vector_5+0x40>
	{
		/*
		 * Call the callback function in the application after the overflow has
		 * occurred in TIMER2 (NORMAL MODE)
		 */
		(*g_callBackPtrTimer2)();
     d14:	e0 91 74 00 	lds	r30, 0x0074
     d18:	f0 91 75 00 	lds	r31, 0x0075
     d1c:	09 95       	icall
	}
}
     d1e:	cf 91       	pop	r28
     d20:	df 91       	pop	r29
     d22:	ff 91       	pop	r31
     d24:	ef 91       	pop	r30
     d26:	bf 91       	pop	r27
     d28:	af 91       	pop	r26
     d2a:	9f 91       	pop	r25
     d2c:	8f 91       	pop	r24
     d2e:	7f 91       	pop	r23
     d30:	6f 91       	pop	r22
     d32:	5f 91       	pop	r21
     d34:	4f 91       	pop	r20
     d36:	3f 91       	pop	r19
     d38:	2f 91       	pop	r18
     d3a:	0f 90       	pop	r0
     d3c:	0f be       	out	0x3f, r0	; 63
     d3e:	0f 90       	pop	r0
     d40:	1f 90       	pop	r1
     d42:	18 95       	reti

00000d44 <__vector_4>:

ISR(TIMER2_COMP_vect)
{
     d44:	1f 92       	push	r1
     d46:	0f 92       	push	r0
     d48:	0f b6       	in	r0, 0x3f	; 63
     d4a:	0f 92       	push	r0
     d4c:	11 24       	eor	r1, r1
     d4e:	2f 93       	push	r18
     d50:	3f 93       	push	r19
     d52:	4f 93       	push	r20
     d54:	5f 93       	push	r21
     d56:	6f 93       	push	r22
     d58:	7f 93       	push	r23
     d5a:	8f 93       	push	r24
     d5c:	9f 93       	push	r25
     d5e:	af 93       	push	r26
     d60:	bf 93       	push	r27
     d62:	ef 93       	push	r30
     d64:	ff 93       	push	r31
     d66:	df 93       	push	r29
     d68:	cf 93       	push	r28
     d6a:	cd b7       	in	r28, 0x3d	; 61
     d6c:	de b7       	in	r29, 0x3e	; 62
	/* Check if Pointer is not a NULL one, to avoid Segmentation fault */
	if(g_callBackPtrTimer2 != NULL_PTR)
     d6e:	80 91 74 00 	lds	r24, 0x0074
     d72:	90 91 75 00 	lds	r25, 0x0075
     d76:	00 97       	sbiw	r24, 0x00	; 0
     d78:	29 f0       	breq	.+10     	; 0xd84 <__vector_4+0x40>
	{
		/*
		 * Call the callback function in the application after the compare match has
		 * occurred in TIMER2 (COMPARE MODE)
		 */
		(*g_callBackPtrTimer2)();
     d7a:	e0 91 74 00 	lds	r30, 0x0074
     d7e:	f0 91 75 00 	lds	r31, 0x0075
     d82:	09 95       	icall
	}
}
     d84:	cf 91       	pop	r28
     d86:	df 91       	pop	r29
     d88:	ff 91       	pop	r31
     d8a:	ef 91       	pop	r30
     d8c:	bf 91       	pop	r27
     d8e:	af 91       	pop	r26
     d90:	9f 91       	pop	r25
     d92:	8f 91       	pop	r24
     d94:	7f 91       	pop	r23
     d96:	6f 91       	pop	r22
     d98:	5f 91       	pop	r21
     d9a:	4f 91       	pop	r20
     d9c:	3f 91       	pop	r19
     d9e:	2f 91       	pop	r18
     da0:	0f 90       	pop	r0
     da2:	0f be       	out	0x3f, r0	; 63
     da4:	0f 90       	pop	r0
     da6:	1f 90       	pop	r1
     da8:	18 95       	reti

00000daa <TIMER_init>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 *************************************************************************************/
enuTIMER_E_STATE_t TIMER_init(const strTIMER_ConfigType_t * Config_Ptr)
{
     daa:	df 93       	push	r29
     dac:	cf 93       	push	r28
     dae:	cd b7       	in	r28, 0x3d	; 61
     db0:	de b7       	in	r29, 0x3e	; 62
     db2:	2b 97       	sbiw	r28, 0x0b	; 11
     db4:	0f b6       	in	r0, 0x3f	; 63
     db6:	f8 94       	cli
     db8:	de bf       	out	0x3e, r29	; 62
     dba:	0f be       	out	0x3f, r0	; 63
     dbc:	cd bf       	out	0x3d, r28	; 61
     dbe:	9b 83       	std	Y+3, r25	; 0x03
     dc0:	8a 83       	std	Y+2, r24	; 0x02
	enuTIMER_E_STATE_t enu_ErrorState = E_NOT_OK;
     dc2:	81 e0       	ldi	r24, 0x01	; 1
     dc4:	89 83       	std	Y+1, r24	; 0x01

	switch(Config_Ptr -> timer_ID)
     dc6:	ea 81       	ldd	r30, Y+2	; 0x02
     dc8:	fb 81       	ldd	r31, Y+3	; 0x03
     dca:	84 81       	ldd	r24, Z+4	; 0x04
     dcc:	28 2f       	mov	r18, r24
     dce:	30 e0       	ldi	r19, 0x00	; 0
     dd0:	3b 87       	std	Y+11, r19	; 0x0b
     dd2:	2a 87       	std	Y+10, r18	; 0x0a
     dd4:	8a 85       	ldd	r24, Y+10	; 0x0a
     dd6:	9b 85       	ldd	r25, Y+11	; 0x0b
     dd8:	81 30       	cpi	r24, 0x01	; 1
     dda:	91 05       	cpc	r25, r1
     ddc:	09 f4       	brne	.+2      	; 0xde0 <TIMER_init+0x36>
     dde:	50 c0       	rjmp	.+160    	; 0xe80 <TIMER_init+0xd6>
     de0:	2a 85       	ldd	r18, Y+10	; 0x0a
     de2:	3b 85       	ldd	r19, Y+11	; 0x0b
     de4:	22 30       	cpi	r18, 0x02	; 2
     de6:	31 05       	cpc	r19, r1
     de8:	09 f4       	brne	.+2      	; 0xdec <TIMER_init+0x42>
     dea:	9f c0       	rjmp	.+318    	; 0xf2a <TIMER_init+0x180>
     dec:	8a 85       	ldd	r24, Y+10	; 0x0a
     dee:	9b 85       	ldd	r25, Y+11	; 0x0b
     df0:	00 97       	sbiw	r24, 0x00	; 0
     df2:	09 f0       	breq	.+2      	; 0xdf6 <TIMER_init+0x4c>
     df4:	df c0       	rjmp	.+446    	; 0xfb4 <TIMER_init+0x20a>

		/*
		 * Clear All timer register before doing any operation,
		 * to ensure that timer will work correctly
		 */
		TCNT0_R = 0x00;
     df6:	e2 e5       	ldi	r30, 0x52	; 82
     df8:	f0 e0       	ldi	r31, 0x00	; 0
     dfa:	10 82       	st	Z, r1
		TCCR0_R = 0x00;
     dfc:	e3 e5       	ldi	r30, 0x53	; 83
     dfe:	f0 e0       	ldi	r31, 0x00	; 0
     e00:	10 82       	st	Z, r1
		OCR0_R  = 0x00;
     e02:	ec e5       	ldi	r30, 0x5C	; 92
     e04:	f0 e0       	ldi	r31, 0x00	; 0
     e06:	10 82       	st	Z, r1
		/*
		 * Insert the required initial value in the TCNT0 register
		 * TIMER0 is (8-bit), so mask the initial value with 0xFF to ensure that it
		 * does not exceed 255
		 */
		TCNT0_R = ( (Config_Ptr -> intialValue) & 0xFF);
     e08:	a2 e5       	ldi	r26, 0x52	; 82
     e0a:	b0 e0       	ldi	r27, 0x00	; 0
     e0c:	ea 81       	ldd	r30, Y+2	; 0x02
     e0e:	fb 81       	ldd	r31, Y+3	; 0x03
     e10:	80 81       	ld	r24, Z
     e12:	91 81       	ldd	r25, Z+1	; 0x01
     e14:	8c 93       	st	X, r24

		switch(Config_Ptr -> timer_Mode)
     e16:	ea 81       	ldd	r30, Y+2	; 0x02
     e18:	fb 81       	ldd	r31, Y+3	; 0x03
     e1a:	85 81       	ldd	r24, Z+5	; 0x05
     e1c:	28 2f       	mov	r18, r24
     e1e:	30 e0       	ldi	r19, 0x00	; 0
     e20:	39 87       	std	Y+9, r19	; 0x09
     e22:	28 87       	std	Y+8, r18	; 0x08
     e24:	88 85       	ldd	r24, Y+8	; 0x08
     e26:	99 85       	ldd	r25, Y+9	; 0x09
     e28:	00 97       	sbiw	r24, 0x00	; 0
     e2a:	31 f0       	breq	.+12     	; 0xe38 <TIMER_init+0x8e>
     e2c:	28 85       	ldd	r18, Y+8	; 0x08
     e2e:	39 85       	ldd	r19, Y+9	; 0x09
     e30:	21 30       	cpi	r18, 0x01	; 1
     e32:	31 05       	cpc	r19, r1
     e34:	71 f0       	breq	.+28     	; 0xe52 <TIMER_init+0xa8>
     e36:	21 c0       	rjmp	.+66     	; 0xe7a <TIMER_init+0xd0>
		 * 	- Normal Mode  (COM01 = 0 & COM00 = 0) in TCCR0 register
		 * 	- Enable TIMER0 Overflow Interrupt (TOIE0) bit in TIMSK register
		 */
		case NORMAL:

			TCCR0_R  = (1 << FOC0_BIT);
     e38:	e3 e5       	ldi	r30, 0x53	; 83
     e3a:	f0 e0       	ldi	r31, 0x00	; 0
     e3c:	80 e8       	ldi	r24, 0x80	; 128
     e3e:	80 83       	st	Z, r24
			TIMSK_R |= (1 << TOIE0_BIT);
     e40:	a9 e5       	ldi	r26, 0x59	; 89
     e42:	b0 e0       	ldi	r27, 0x00	; 0
     e44:	e9 e5       	ldi	r30, 0x59	; 89
     e46:	f0 e0       	ldi	r31, 0x00	; 0
     e48:	80 81       	ld	r24, Z
     e4a:	81 60       	ori	r24, 0x01	; 1
     e4c:	8c 93       	st	X, r24
			enu_ErrorState = TIMER_E_PARAM_VALID;
     e4e:	19 82       	std	Y+1, r1	; 0x01
     e50:	b3 c0       	rjmp	.+358    	; 0xfb8 <TIMER_init+0x20e>
		 * 	- Normal  Mode (COM01 = 0 & COM00 = 0) in TCCR0 register
		 * 	- Enable TIMER0 Compare Match Interrupt (OCIE0) bit in TIMSK register
		 */
		case COMPARE:

			OCR0_R   = ( (Config_Ptr -> compareValue) & 0xFF);
     e52:	ac e5       	ldi	r26, 0x5C	; 92
     e54:	b0 e0       	ldi	r27, 0x00	; 0
     e56:	ea 81       	ldd	r30, Y+2	; 0x02
     e58:	fb 81       	ldd	r31, Y+3	; 0x03
     e5a:	82 81       	ldd	r24, Z+2	; 0x02
     e5c:	93 81       	ldd	r25, Z+3	; 0x03
     e5e:	8c 93       	st	X, r24
			TCCR0_R  = (1 << FOC0_BIT) | (1 << WGM01_BIT);
     e60:	e3 e5       	ldi	r30, 0x53	; 83
     e62:	f0 e0       	ldi	r31, 0x00	; 0
     e64:	88 e8       	ldi	r24, 0x88	; 136
     e66:	80 83       	st	Z, r24
			TIMSK_R |= (1 << OCIE0_BIT);
     e68:	a9 e5       	ldi	r26, 0x59	; 89
     e6a:	b0 e0       	ldi	r27, 0x00	; 0
     e6c:	e9 e5       	ldi	r30, 0x59	; 89
     e6e:	f0 e0       	ldi	r31, 0x00	; 0
     e70:	80 81       	ld	r24, Z
     e72:	82 60       	ori	r24, 0x02	; 2
     e74:	8c 93       	st	X, r24
			enu_ErrorState = TIMER_E_PARAM_VALID;
     e76:	19 82       	std	Y+1, r1	; 0x01
     e78:	9f c0       	rjmp	.+318    	; 0xfb8 <TIMER_init+0x20e>
			break;

		default:

			enu_ErrorState = TIMER_E_PARAM_INVALID_MODE;
     e7a:	82 e0       	ldi	r24, 0x02	; 2
     e7c:	89 83       	std	Y+1, r24	; 0x01
     e7e:	9c c0       	rjmp	.+312    	; 0xfb8 <TIMER_init+0x20e>

		/*
		 * Clear All timer register before doing any operation,
		 * to ensure that timer will work correctly
		 */
		TCNT1_R  = 0x0000;
     e80:	ec e4       	ldi	r30, 0x4C	; 76
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	11 82       	std	Z+1, r1	; 0x01
     e86:	10 82       	st	Z, r1
		OCR1A_R  = 0x0000;
     e88:	ea e4       	ldi	r30, 0x4A	; 74
     e8a:	f0 e0       	ldi	r31, 0x00	; 0
     e8c:	11 82       	std	Z+1, r1	; 0x01
     e8e:	10 82       	st	Z, r1
		TCCR1A_R = 0x00;
     e90:	ef e4       	ldi	r30, 0x4F	; 79
     e92:	f0 e0       	ldi	r31, 0x00	; 0
     e94:	10 82       	st	Z, r1
		TCCR1B_R = 0x00;
     e96:	ee e4       	ldi	r30, 0x4E	; 78
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	10 82       	st	Z, r1
		/*
		 * Insert the required initial value in the TCNT1 register
		 * TIMER1 is (16-bit), so mask the initial value with 0xFFFF to ensure that it
		 * does not exceed 65535
		 */
		TCNT1_R = ( (Config_Ptr -> intialValue) & 0xFFFF);
     e9c:	ac e4       	ldi	r26, 0x4C	; 76
     e9e:	b0 e0       	ldi	r27, 0x00	; 0
     ea0:	ea 81       	ldd	r30, Y+2	; 0x02
     ea2:	fb 81       	ldd	r31, Y+3	; 0x03
     ea4:	80 81       	ld	r24, Z
     ea6:	91 81       	ldd	r25, Z+1	; 0x01
     ea8:	11 96       	adiw	r26, 0x01	; 1
     eaa:	9c 93       	st	X, r25
     eac:	8e 93       	st	-X, r24

		switch(Config_Ptr -> timer_Mode)
     eae:	ea 81       	ldd	r30, Y+2	; 0x02
     eb0:	fb 81       	ldd	r31, Y+3	; 0x03
     eb2:	85 81       	ldd	r24, Z+5	; 0x05
     eb4:	28 2f       	mov	r18, r24
     eb6:	30 e0       	ldi	r19, 0x00	; 0
     eb8:	3f 83       	std	Y+7, r19	; 0x07
     eba:	2e 83       	std	Y+6, r18	; 0x06
     ebc:	8e 81       	ldd	r24, Y+6	; 0x06
     ebe:	9f 81       	ldd	r25, Y+7	; 0x07
     ec0:	00 97       	sbiw	r24, 0x00	; 0
     ec2:	31 f0       	breq	.+12     	; 0xed0 <TIMER_init+0x126>
     ec4:	2e 81       	ldd	r18, Y+6	; 0x06
     ec6:	3f 81       	ldd	r19, Y+7	; 0x07
     ec8:	21 30       	cpi	r18, 0x01	; 1
     eca:	31 05       	cpc	r19, r1
     ecc:	71 f0       	breq	.+28     	; 0xeea <TIMER_init+0x140>
     ece:	2a c0       	rjmp	.+84     	; 0xf24 <TIMER_init+0x17a>
		 * 	- Normal  Mode (WGM10 = 0 & WGM11 = 0 & WGM12 = 0 & WGM13 = 0)
		 * 	- Enable TIMER1 Overflow Interrupt (TOIE1) bit in TIMSK register
		 */
		case NORMAL:

			TCCR1A_R = (1 << FOC1A_BIT)  | (1 << FOC1B_BIT);
     ed0:	ef e4       	ldi	r30, 0x4F	; 79
     ed2:	f0 e0       	ldi	r31, 0x00	; 0
     ed4:	8c e0       	ldi	r24, 0x0C	; 12
     ed6:	80 83       	st	Z, r24
			TIMSK_R |= (1 << TOIE1_BIT);
     ed8:	a9 e5       	ldi	r26, 0x59	; 89
     eda:	b0 e0       	ldi	r27, 0x00	; 0
     edc:	e9 e5       	ldi	r30, 0x59	; 89
     ede:	f0 e0       	ldi	r31, 0x00	; 0
     ee0:	80 81       	ld	r24, Z
     ee2:	84 60       	ori	r24, 0x04	; 4
     ee4:	8c 93       	st	X, r24
			enu_ErrorState = TIMER_E_PARAM_VALID;
     ee6:	19 82       	std	Y+1, r1	; 0x01
     ee8:	67 c0       	rjmp	.+206    	; 0xfb8 <TIMER_init+0x20e>
		 *	- Compare Mode (WGM10 = 0 & WGM11 = 0 & WGM12 = 1 & WGM13 = 0)
		 * 	- Enable TIMER2 Compare Match Interrupt (OCIE1A) bit in TIMSK register
		 */
		case COMPARE:

			OCR1A_R   = ( (Config_Ptr -> compareValue) & 0xFFFF);
     eea:	aa e4       	ldi	r26, 0x4A	; 74
     eec:	b0 e0       	ldi	r27, 0x00	; 0
     eee:	ea 81       	ldd	r30, Y+2	; 0x02
     ef0:	fb 81       	ldd	r31, Y+3	; 0x03
     ef2:	82 81       	ldd	r24, Z+2	; 0x02
     ef4:	93 81       	ldd	r25, Z+3	; 0x03
     ef6:	11 96       	adiw	r26, 0x01	; 1
     ef8:	9c 93       	st	X, r25
     efa:	8e 93       	st	-X, r24
			TCCR1A_R  = (1 << FOC1A_BIT) | (1 << FOC1B_BIT);
     efc:	ef e4       	ldi	r30, 0x4F	; 79
     efe:	f0 e0       	ldi	r31, 0x00	; 0
     f00:	8c e0       	ldi	r24, 0x0C	; 12
     f02:	80 83       	st	Z, r24
			TCCR1B_R |= (1 << WGM12_BIT);
     f04:	ae e4       	ldi	r26, 0x4E	; 78
     f06:	b0 e0       	ldi	r27, 0x00	; 0
     f08:	ee e4       	ldi	r30, 0x4E	; 78
     f0a:	f0 e0       	ldi	r31, 0x00	; 0
     f0c:	80 81       	ld	r24, Z
     f0e:	88 60       	ori	r24, 0x08	; 8
     f10:	8c 93       	st	X, r24
			TIMSK_R  |= (1 << OCIE1A_BIT);
     f12:	a9 e5       	ldi	r26, 0x59	; 89
     f14:	b0 e0       	ldi	r27, 0x00	; 0
     f16:	e9 e5       	ldi	r30, 0x59	; 89
     f18:	f0 e0       	ldi	r31, 0x00	; 0
     f1a:	80 81       	ld	r24, Z
     f1c:	80 61       	ori	r24, 0x10	; 16
     f1e:	8c 93       	st	X, r24
			enu_ErrorState = TIMER_E_PARAM_VALID;
     f20:	19 82       	std	Y+1, r1	; 0x01
     f22:	4a c0       	rjmp	.+148    	; 0xfb8 <TIMER_init+0x20e>
			break;

		default:
			enu_ErrorState = TIMER_E_PARAM_INVALID_MODE;
     f24:	82 e0       	ldi	r24, 0x02	; 2
     f26:	89 83       	std	Y+1, r24	; 0x01
     f28:	47 c0       	rjmp	.+142    	; 0xfb8 <TIMER_init+0x20e>

		/*
		 * Clear All timer register before doing any operation,
		 * to ensure that timer will work correctly
		 */
		TCNT2_R = 0x00;
     f2a:	e4 e4       	ldi	r30, 0x44	; 68
     f2c:	f0 e0       	ldi	r31, 0x00	; 0
     f2e:	10 82       	st	Z, r1
		TCCR2_R = 0x00;
     f30:	e5 e4       	ldi	r30, 0x45	; 69
     f32:	f0 e0       	ldi	r31, 0x00	; 0
     f34:	10 82       	st	Z, r1
		OCR2_R  = 0x00;
     f36:	e3 e4       	ldi	r30, 0x43	; 67
     f38:	f0 e0       	ldi	r31, 0x00	; 0
     f3a:	10 82       	st	Z, r1
		/*
		 * Insert the required initial value in the TCNT2 register
		 * TIMER2 is (8-bit), so mask the initial value with 0xFF to ensure that it
	     * does not exceed 255
		 */
		TCNT2_R = ( (Config_Ptr -> intialValue) & 0xFF);
     f3c:	a4 e4       	ldi	r26, 0x44	; 68
     f3e:	b0 e0       	ldi	r27, 0x00	; 0
     f40:	ea 81       	ldd	r30, Y+2	; 0x02
     f42:	fb 81       	ldd	r31, Y+3	; 0x03
     f44:	80 81       	ld	r24, Z
     f46:	91 81       	ldd	r25, Z+1	; 0x01
     f48:	8c 93       	st	X, r24

		switch(Config_Ptr -> timer_Mode)
     f4a:	ea 81       	ldd	r30, Y+2	; 0x02
     f4c:	fb 81       	ldd	r31, Y+3	; 0x03
     f4e:	85 81       	ldd	r24, Z+5	; 0x05
     f50:	28 2f       	mov	r18, r24
     f52:	30 e0       	ldi	r19, 0x00	; 0
     f54:	3d 83       	std	Y+5, r19	; 0x05
     f56:	2c 83       	std	Y+4, r18	; 0x04
     f58:	8c 81       	ldd	r24, Y+4	; 0x04
     f5a:	9d 81       	ldd	r25, Y+5	; 0x05
     f5c:	00 97       	sbiw	r24, 0x00	; 0
     f5e:	31 f0       	breq	.+12     	; 0xf6c <TIMER_init+0x1c2>
     f60:	2c 81       	ldd	r18, Y+4	; 0x04
     f62:	3d 81       	ldd	r19, Y+5	; 0x05
     f64:	21 30       	cpi	r18, 0x01	; 1
     f66:	31 05       	cpc	r19, r1
     f68:	71 f0       	breq	.+28     	; 0xf86 <TIMER_init+0x1dc>
     f6a:	21 c0       	rjmp	.+66     	; 0xfae <TIMER_init+0x204>
		 * 	- Normal  Mode (COM21 = 0 & COM20 = 0) in TCCR2 register
		 * 	- Enable TIMER2 Overflow Interrupt (TOIE2) bit in TIMSK register
		 */
		case NORMAL:

			TCCR2_R  = (1 << FOC2_BIT);
     f6c:	e5 e4       	ldi	r30, 0x45	; 69
     f6e:	f0 e0       	ldi	r31, 0x00	; 0
     f70:	80 e8       	ldi	r24, 0x80	; 128
     f72:	80 83       	st	Z, r24
			TIMSK_R |= (1 << TOIE2_BIT);
     f74:	a9 e5       	ldi	r26, 0x59	; 89
     f76:	b0 e0       	ldi	r27, 0x00	; 0
     f78:	e9 e5       	ldi	r30, 0x59	; 89
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	80 81       	ld	r24, Z
     f7e:	80 64       	ori	r24, 0x40	; 64
     f80:	8c 93       	st	X, r24
			enu_ErrorState = TIMER_E_PARAM_VALID;
     f82:	19 82       	std	Y+1, r1	; 0x01
     f84:	19 c0       	rjmp	.+50     	; 0xfb8 <TIMER_init+0x20e>
		 * 	- Normal  Mode (COM21 = 0 & COM20 = 0) in TCCR2 register
		 * 	- Enable TIMER2 Compare Match Interrupt (OCIE2) bit in TIMSK register
		 */
		case COMPARE:

			OCR2_R   = ( (Config_Ptr -> compareValue) & 0xFF);
     f86:	a3 e4       	ldi	r26, 0x43	; 67
     f88:	b0 e0       	ldi	r27, 0x00	; 0
     f8a:	ea 81       	ldd	r30, Y+2	; 0x02
     f8c:	fb 81       	ldd	r31, Y+3	; 0x03
     f8e:	82 81       	ldd	r24, Z+2	; 0x02
     f90:	93 81       	ldd	r25, Z+3	; 0x03
     f92:	8c 93       	st	X, r24
			TCCR2_R  = (1 << FOC2_BIT) | (1 << WGM21_BIT);
     f94:	e5 e4       	ldi	r30, 0x45	; 69
     f96:	f0 e0       	ldi	r31, 0x00	; 0
     f98:	88 e8       	ldi	r24, 0x88	; 136
     f9a:	80 83       	st	Z, r24
			TIMSK_R |= (1 << OCIE2_BIT);
     f9c:	a9 e5       	ldi	r26, 0x59	; 89
     f9e:	b0 e0       	ldi	r27, 0x00	; 0
     fa0:	e9 e5       	ldi	r30, 0x59	; 89
     fa2:	f0 e0       	ldi	r31, 0x00	; 0
     fa4:	80 81       	ld	r24, Z
     fa6:	80 68       	ori	r24, 0x80	; 128
     fa8:	8c 93       	st	X, r24
			enu_ErrorState = TIMER_E_PARAM_VALID;
     faa:	19 82       	std	Y+1, r1	; 0x01
     fac:	05 c0       	rjmp	.+10     	; 0xfb8 <TIMER_init+0x20e>
			break;

		default:

			enu_ErrorState = TIMER_E_PARAM_INVALID_MODE;
     fae:	82 e0       	ldi	r24, 0x02	; 2
     fb0:	89 83       	std	Y+1, r24	; 0x01
     fb2:	02 c0       	rjmp	.+4      	; 0xfb8 <TIMER_init+0x20e>
			break;
		}	/* END CASE OF TIMER2 */
		break;

	default:
		enu_ErrorState = TIMER_E_PARAM_INVALID_ID;	/* Invalid timer id */
     fb4:	81 e0       	ldi	r24, 0x01	; 1
     fb6:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return enu_ErrorState;
     fb8:	89 81       	ldd	r24, Y+1	; 0x01
}
     fba:	2b 96       	adiw	r28, 0x0b	; 11
     fbc:	0f b6       	in	r0, 0x3f	; 63
     fbe:	f8 94       	cli
     fc0:	de bf       	out	0x3e, r29	; 62
     fc2:	0f be       	out	0x3f, r0	; 63
     fc4:	cd bf       	out	0x3d, r28	; 61
     fc6:	cf 91       	pop	r28
     fc8:	df 91       	pop	r29
     fca:	08 95       	ret

00000fcc <TIMER_setCallBack>:
 * [in/out]		 	None
 *
 * [Returns]:       Error State
 ******************************************************************************/
enuTIMER_E_STATE_t TIMER_setCallBack(void(*a_ptr)(void), const enuTIMER_ID_t enu_timerID)
{
     fcc:	df 93       	push	r29
     fce:	cf 93       	push	r28
     fd0:	00 d0       	rcall	.+0      	; 0xfd2 <TIMER_setCallBack+0x6>
     fd2:	00 d0       	rcall	.+0      	; 0xfd4 <TIMER_setCallBack+0x8>
     fd4:	00 d0       	rcall	.+0      	; 0xfd6 <TIMER_setCallBack+0xa>
     fd6:	cd b7       	in	r28, 0x3d	; 61
     fd8:	de b7       	in	r29, 0x3e	; 62
     fda:	9b 83       	std	Y+3, r25	; 0x03
     fdc:	8a 83       	std	Y+2, r24	; 0x02
     fde:	6c 83       	std	Y+4, r22	; 0x04
	enuTIMER_E_STATE_t enu_ErrorState = E_NOT_OK;
     fe0:	81 e0       	ldi	r24, 0x01	; 1
     fe2:	89 83       	std	Y+1, r24	; 0x01

	if(a_ptr == NULL_PTR)
     fe4:	8a 81       	ldd	r24, Y+2	; 0x02
     fe6:	9b 81       	ldd	r25, Y+3	; 0x03
     fe8:	00 97       	sbiw	r24, 0x00	; 0
     fea:	19 f4       	brne	.+6      	; 0xff2 <TIMER_setCallBack+0x26>
	{
		enu_ErrorState = TIMER_E_PARAM_POINTER;	/* Invalid pointer "NULL" */
     fec:	83 e0       	ldi	r24, 0x03	; 3
     fee:	89 83       	std	Y+1, r24	; 0x01
     ff0:	2a c0       	rjmp	.+84     	; 0x1046 <TIMER_setCallBack+0x7a>
	}
	else
	{
		switch(enu_timerID)
     ff2:	8c 81       	ldd	r24, Y+4	; 0x04
     ff4:	28 2f       	mov	r18, r24
     ff6:	30 e0       	ldi	r19, 0x00	; 0
     ff8:	3e 83       	std	Y+6, r19	; 0x06
     ffa:	2d 83       	std	Y+5, r18	; 0x05
     ffc:	8d 81       	ldd	r24, Y+5	; 0x05
     ffe:	9e 81       	ldd	r25, Y+6	; 0x06
    1000:	81 30       	cpi	r24, 0x01	; 1
    1002:	91 05       	cpc	r25, r1
    1004:	89 f0       	breq	.+34     	; 0x1028 <TIMER_setCallBack+0x5c>
    1006:	2d 81       	ldd	r18, Y+5	; 0x05
    1008:	3e 81       	ldd	r19, Y+6	; 0x06
    100a:	22 30       	cpi	r18, 0x02	; 2
    100c:	31 05       	cpc	r19, r1
    100e:	a1 f0       	breq	.+40     	; 0x1038 <TIMER_setCallBack+0x6c>
    1010:	8d 81       	ldd	r24, Y+5	; 0x05
    1012:	9e 81       	ldd	r25, Y+6	; 0x06
    1014:	00 97       	sbiw	r24, 0x00	; 0
    1016:	b9 f4       	brne	.+46     	; 0x1046 <TIMER_setCallBack+0x7a>
		{

		case TIMER_0:

			/* Save the address of the Call back function of TIMER0 in a global variable */
			g_callBackPtrTimer0 = a_ptr;
    1018:	8a 81       	ldd	r24, Y+2	; 0x02
    101a:	9b 81       	ldd	r25, Y+3	; 0x03
    101c:	90 93 71 00 	sts	0x0071, r25
    1020:	80 93 70 00 	sts	0x0070, r24
			enu_ErrorState = TIMER_E_PARAM_VALID;
    1024:	19 82       	std	Y+1, r1	; 0x01
    1026:	0f c0       	rjmp	.+30     	; 0x1046 <TIMER_setCallBack+0x7a>
			break;

		case TIMER_1:

			/* Save the address of the Call back function of TIMER1 in a global variable */
			g_callBackPtrTimer1 = a_ptr;
    1028:	8a 81       	ldd	r24, Y+2	; 0x02
    102a:	9b 81       	ldd	r25, Y+3	; 0x03
    102c:	90 93 73 00 	sts	0x0073, r25
    1030:	80 93 72 00 	sts	0x0072, r24
			enu_ErrorState = TIMER_E_PARAM_VALID;
    1034:	19 82       	std	Y+1, r1	; 0x01
    1036:	07 c0       	rjmp	.+14     	; 0x1046 <TIMER_setCallBack+0x7a>
			break;

		case TIMER_2:

			/* Save the address of the Call back function of TIMER2 in a global variable */
			g_callBackPtrTimer2 = a_ptr;
    1038:	8a 81       	ldd	r24, Y+2	; 0x02
    103a:	9b 81       	ldd	r25, Y+3	; 0x03
    103c:	90 93 75 00 	sts	0x0075, r25
    1040:	80 93 74 00 	sts	0x0074, r24
			enu_ErrorState = TIMER_E_PARAM_VALID;
    1044:	19 82       	std	Y+1, r1	; 0x01
		default:
			break;
			enu_ErrorState = TIMER_E_PARAM_INVALID_ID;	/* Invalid timer id */
		}
	}
	return enu_ErrorState;
    1046:	89 81       	ldd	r24, Y+1	; 0x01
}
    1048:	26 96       	adiw	r28, 0x06	; 6
    104a:	0f b6       	in	r0, 0x3f	; 63
    104c:	f8 94       	cli
    104e:	de bf       	out	0x3e, r29	; 62
    1050:	0f be       	out	0x3f, r0	; 63
    1052:	cd bf       	out	0x3d, r28	; 61
    1054:	cf 91       	pop	r28
    1056:	df 91       	pop	r29
    1058:	08 95       	ret

0000105a <TIMER_start>:
 * [in/out]		 	None
 *
 * [Returns]:       Error state
 ******************************************************************************/
enuTIMER_E_STATE_t TIMER_start(const enuTIMER_ID_t enu_timerID, const enuTIMER_Clock_t enu_timerClock)
{
    105a:	df 93       	push	r29
    105c:	cf 93       	push	r28
    105e:	00 d0       	rcall	.+0      	; 0x1060 <TIMER_start+0x6>
    1060:	00 d0       	rcall	.+0      	; 0x1062 <TIMER_start+0x8>
    1062:	0f 92       	push	r0
    1064:	cd b7       	in	r28, 0x3d	; 61
    1066:	de b7       	in	r29, 0x3e	; 62
    1068:	8a 83       	std	Y+2, r24	; 0x02
    106a:	6b 83       	std	Y+3, r22	; 0x03
	enuTIMER_E_STATE_t enu_ErrorState = E_NOT_OK;
    106c:	81 e0       	ldi	r24, 0x01	; 1
    106e:	89 83       	std	Y+1, r24	; 0x01

	switch(enu_timerID)
    1070:	8a 81       	ldd	r24, Y+2	; 0x02
    1072:	28 2f       	mov	r18, r24
    1074:	30 e0       	ldi	r19, 0x00	; 0
    1076:	3d 83       	std	Y+5, r19	; 0x05
    1078:	2c 83       	std	Y+4, r18	; 0x04
    107a:	8c 81       	ldd	r24, Y+4	; 0x04
    107c:	9d 81       	ldd	r25, Y+5	; 0x05
    107e:	81 30       	cpi	r24, 0x01	; 1
    1080:	91 05       	cpc	r25, r1
    1082:	a9 f0       	breq	.+42     	; 0x10ae <TIMER_start+0x54>
    1084:	2c 81       	ldd	r18, Y+4	; 0x04
    1086:	3d 81       	ldd	r19, Y+5	; 0x05
    1088:	22 30       	cpi	r18, 0x02	; 2
    108a:	31 05       	cpc	r19, r1
    108c:	e1 f0       	breq	.+56     	; 0x10c6 <TIMER_start+0x6c>
    108e:	8c 81       	ldd	r24, Y+4	; 0x04
    1090:	9d 81       	ldd	r25, Y+5	; 0x05
    1092:	00 97       	sbiw	r24, 0x00	; 0
    1094:	21 f5       	brne	.+72     	; 0x10de <TIMER_start+0x84>
	{

	 /* Insert the required Clock in the First three bits (CS02, CS01, CS00) in TCCR0 register */
	case TIMER_0:
		TCCR0_R  = (TCCR0_R & 0xF8) | (enu_timerClock);
    1096:	a3 e5       	ldi	r26, 0x53	; 83
    1098:	b0 e0       	ldi	r27, 0x00	; 0
    109a:	e3 e5       	ldi	r30, 0x53	; 83
    109c:	f0 e0       	ldi	r31, 0x00	; 0
    109e:	80 81       	ld	r24, Z
    10a0:	98 2f       	mov	r25, r24
    10a2:	98 7f       	andi	r25, 0xF8	; 248
    10a4:	8b 81       	ldd	r24, Y+3	; 0x03
    10a6:	89 2b       	or	r24, r25
    10a8:	8c 93       	st	X, r24
		enu_ErrorState = TIMER_E_PARAM_VALID;	/* Update the error state with no error */
    10aa:	19 82       	std	Y+1, r1	; 0x01
    10ac:	1a c0       	rjmp	.+52     	; 0x10e2 <TIMER_start+0x88>
		break;

	/* Insert the required Clock in the First three bits (CS12, CS11, CS10) in TCCR1B register */
	case TIMER_1:
		TCCR1B_R  = (TCCR1B_R & 0xF8) | (enu_timerClock);
    10ae:	ae e4       	ldi	r26, 0x4E	; 78
    10b0:	b0 e0       	ldi	r27, 0x00	; 0
    10b2:	ee e4       	ldi	r30, 0x4E	; 78
    10b4:	f0 e0       	ldi	r31, 0x00	; 0
    10b6:	80 81       	ld	r24, Z
    10b8:	98 2f       	mov	r25, r24
    10ba:	98 7f       	andi	r25, 0xF8	; 248
    10bc:	8b 81       	ldd	r24, Y+3	; 0x03
    10be:	89 2b       	or	r24, r25
    10c0:	8c 93       	st	X, r24
		enu_ErrorState = TIMER_E_PARAM_VALID;	/* Update the error state with no error */
    10c2:	19 82       	std	Y+1, r1	; 0x01
    10c4:	0e c0       	rjmp	.+28     	; 0x10e2 <TIMER_start+0x88>
		break;

	/* Insert the required Clock in the First three bits (CS22, CS21, CS20) in TCCR2 register */
	case TIMER_2:
		TCCR2_R  = (TCCR2_R & 0xF8) | (enu_timerClock);
    10c6:	a5 e4       	ldi	r26, 0x45	; 69
    10c8:	b0 e0       	ldi	r27, 0x00	; 0
    10ca:	e5 e4       	ldi	r30, 0x45	; 69
    10cc:	f0 e0       	ldi	r31, 0x00	; 0
    10ce:	80 81       	ld	r24, Z
    10d0:	98 2f       	mov	r25, r24
    10d2:	98 7f       	andi	r25, 0xF8	; 248
    10d4:	8b 81       	ldd	r24, Y+3	; 0x03
    10d6:	89 2b       	or	r24, r25
    10d8:	8c 93       	st	X, r24
		enu_ErrorState = TIMER_E_PARAM_VALID;	/* Update the error state with no error */
    10da:	19 82       	std	Y+1, r1	; 0x01
    10dc:	02 c0       	rjmp	.+4      	; 0x10e2 <TIMER_start+0x88>
		break;

	default:
		enu_ErrorState = TIMER_E_PARAM_INVALID_ID;	/* Invalid timer id */
    10de:	81 e0       	ldi	r24, 0x01	; 1
    10e0:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return enu_ErrorState;
    10e2:	89 81       	ldd	r24, Y+1	; 0x01
}
    10e4:	0f 90       	pop	r0
    10e6:	0f 90       	pop	r0
    10e8:	0f 90       	pop	r0
    10ea:	0f 90       	pop	r0
    10ec:	0f 90       	pop	r0
    10ee:	cf 91       	pop	r28
    10f0:	df 91       	pop	r29
    10f2:	08 95       	ret

000010f4 <TIMER_stop>:
 * [in/out]		 	None
 *
 * [Returns]:       Error state
 ******************************************************************************/
enuTIMER_E_STATE_t TIMER_stop(const enuTIMER_ID_t enu_timerID)
{
    10f4:	df 93       	push	r29
    10f6:	cf 93       	push	r28
    10f8:	00 d0       	rcall	.+0      	; 0x10fa <TIMER_stop+0x6>
    10fa:	00 d0       	rcall	.+0      	; 0x10fc <TIMER_stop+0x8>
    10fc:	cd b7       	in	r28, 0x3d	; 61
    10fe:	de b7       	in	r29, 0x3e	; 62
    1100:	8a 83       	std	Y+2, r24	; 0x02
	enuTIMER_E_STATE_t enu_ErrorState = E_NOT_OK;
    1102:	81 e0       	ldi	r24, 0x01	; 1
    1104:	89 83       	std	Y+1, r24	; 0x01

	switch(enu_timerID)
    1106:	8a 81       	ldd	r24, Y+2	; 0x02
    1108:	28 2f       	mov	r18, r24
    110a:	30 e0       	ldi	r19, 0x00	; 0
    110c:	3c 83       	std	Y+4, r19	; 0x04
    110e:	2b 83       	std	Y+3, r18	; 0x03
    1110:	8b 81       	ldd	r24, Y+3	; 0x03
    1112:	9c 81       	ldd	r25, Y+4	; 0x04
    1114:	81 30       	cpi	r24, 0x01	; 1
    1116:	91 05       	cpc	r25, r1
    1118:	91 f0       	breq	.+36     	; 0x113e <TIMER_stop+0x4a>
    111a:	2b 81       	ldd	r18, Y+3	; 0x03
    111c:	3c 81       	ldd	r19, Y+4	; 0x04
    111e:	22 30       	cpi	r18, 0x02	; 2
    1120:	31 05       	cpc	r19, r1
    1122:	b1 f0       	breq	.+44     	; 0x1150 <TIMER_stop+0x5c>
    1124:	8b 81       	ldd	r24, Y+3	; 0x03
    1126:	9c 81       	ldd	r25, Y+4	; 0x04
    1128:	00 97       	sbiw	r24, 0x00	; 0
    112a:	d9 f4       	brne	.+54     	; 0x1162 <TIMER_stop+0x6e>
	{

	case TIMER_0:

		TCCR0_R  = (TCCR0_R & 0xF8);	/* Clear Clock bits in TIMER0 */
    112c:	a3 e5       	ldi	r26, 0x53	; 83
    112e:	b0 e0       	ldi	r27, 0x00	; 0
    1130:	e3 e5       	ldi	r30, 0x53	; 83
    1132:	f0 e0       	ldi	r31, 0x00	; 0
    1134:	80 81       	ld	r24, Z
    1136:	88 7f       	andi	r24, 0xF8	; 248
    1138:	8c 93       	st	X, r24
		enu_ErrorState = TIMER_E_PARAM_VALID;	/* Update the error state with no error */
    113a:	19 82       	std	Y+1, r1	; 0x01
    113c:	14 c0       	rjmp	.+40     	; 0x1166 <TIMER_stop+0x72>
		break;

	case TIMER_1:

		TCCR1B_R = (TCCR1B_R & 0xF8);	/* Clear Clock bits in TIMER1 */
    113e:	ae e4       	ldi	r26, 0x4E	; 78
    1140:	b0 e0       	ldi	r27, 0x00	; 0
    1142:	ee e4       	ldi	r30, 0x4E	; 78
    1144:	f0 e0       	ldi	r31, 0x00	; 0
    1146:	80 81       	ld	r24, Z
    1148:	88 7f       	andi	r24, 0xF8	; 248
    114a:	8c 93       	st	X, r24
		enu_ErrorState = TIMER_E_PARAM_VALID;	/* Update the error state with no error */
    114c:	19 82       	std	Y+1, r1	; 0x01
    114e:	0b c0       	rjmp	.+22     	; 0x1166 <TIMER_stop+0x72>
		break;

	case TIMER_2:

		TCCR2_R  = (TCCR2_R & 0xF8);	/* Clear Clock bits in TIMER2 */
    1150:	a5 e4       	ldi	r26, 0x45	; 69
    1152:	b0 e0       	ldi	r27, 0x00	; 0
    1154:	e5 e4       	ldi	r30, 0x45	; 69
    1156:	f0 e0       	ldi	r31, 0x00	; 0
    1158:	80 81       	ld	r24, Z
    115a:	88 7f       	andi	r24, 0xF8	; 248
    115c:	8c 93       	st	X, r24
		enu_ErrorState = TIMER_E_PARAM_VALID;	/* Update the error state with no error */
    115e:	19 82       	std	Y+1, r1	; 0x01
    1160:	02 c0       	rjmp	.+4      	; 0x1166 <TIMER_stop+0x72>
		break;

	default:
		enu_ErrorState = TIMER_E_PARAM_INVALID_ID;	/* Invalid timer id */
    1162:	81 e0       	ldi	r24, 0x01	; 1
    1164:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return enu_ErrorState;
    1166:	89 81       	ldd	r24, Y+1	; 0x01
}
    1168:	0f 90       	pop	r0
    116a:	0f 90       	pop	r0
    116c:	0f 90       	pop	r0
    116e:	0f 90       	pop	r0
    1170:	cf 91       	pop	r28
    1172:	df 91       	pop	r29
    1174:	08 95       	ret

00001176 <TIMER_DeInit>:
 * [in/out]		 	None
 *
 * [Returns]:       Error state
 ******************************************************************************/
enuTIMER_E_STATE_t TIMER_DeInit(const enuTIMER_ID_t enu_timerID)
{
    1176:	df 93       	push	r29
    1178:	cf 93       	push	r28
    117a:	00 d0       	rcall	.+0      	; 0x117c <TIMER_DeInit+0x6>
    117c:	00 d0       	rcall	.+0      	; 0x117e <TIMER_DeInit+0x8>
    117e:	cd b7       	in	r28, 0x3d	; 61
    1180:	de b7       	in	r29, 0x3e	; 62
    1182:	8a 83       	std	Y+2, r24	; 0x02
	enuTIMER_E_STATE_t enu_ErrorState = E_NOT_OK;
    1184:	81 e0       	ldi	r24, 0x01	; 1
    1186:	89 83       	std	Y+1, r24	; 0x01

	switch(enu_timerID)
    1188:	8a 81       	ldd	r24, Y+2	; 0x02
    118a:	28 2f       	mov	r18, r24
    118c:	30 e0       	ldi	r19, 0x00	; 0
    118e:	3c 83       	std	Y+4, r19	; 0x04
    1190:	2b 83       	std	Y+3, r18	; 0x03
    1192:	8b 81       	ldd	r24, Y+3	; 0x03
    1194:	9c 81       	ldd	r25, Y+4	; 0x04
    1196:	81 30       	cpi	r24, 0x01	; 1
    1198:	91 05       	cpc	r25, r1
    119a:	19 f1       	breq	.+70     	; 0x11e2 <TIMER_DeInit+0x6c>
    119c:	2b 81       	ldd	r18, Y+3	; 0x03
    119e:	3c 81       	ldd	r19, Y+4	; 0x04
    11a0:	22 30       	cpi	r18, 0x02	; 2
    11a2:	31 05       	cpc	r19, r1
    11a4:	e1 f1       	breq	.+120    	; 0x121e <TIMER_DeInit+0xa8>
    11a6:	8b 81       	ldd	r24, Y+3	; 0x03
    11a8:	9c 81       	ldd	r25, Y+4	; 0x04
    11aa:	00 97       	sbiw	r24, 0x00	; 0
    11ac:	09 f0       	breq	.+2      	; 0x11b0 <TIMER_DeInit+0x3a>
    11ae:	50 c0       	rjmp	.+160    	; 0x1250 <TIMER_DeInit+0xda>
	{

	case TIMER_0:

		/* Clear All TIMER0 Register */
		TCNT0_R = 0x00;
    11b0:	e2 e5       	ldi	r30, 0x52	; 82
    11b2:	f0 e0       	ldi	r31, 0x00	; 0
    11b4:	10 82       	st	Z, r1
		TCCR0_R = 0x00;
    11b6:	e3 e5       	ldi	r30, 0x53	; 83
    11b8:	f0 e0       	ldi	r31, 0x00	; 0
    11ba:	10 82       	st	Z, r1
		OCR0_R  = 0x00;
    11bc:	ec e5       	ldi	r30, 0x5C	; 92
    11be:	f0 e0       	ldi	r31, 0x00	; 0
    11c0:	10 82       	st	Z, r1

		/* Disable TIMER0 Interrupt Enable */
		TIMSK_R &= ~(1 << TOIE0_BIT) & ~(1 << OCIE0_BIT);
    11c2:	a9 e5       	ldi	r26, 0x59	; 89
    11c4:	b0 e0       	ldi	r27, 0x00	; 0
    11c6:	e9 e5       	ldi	r30, 0x59	; 89
    11c8:	f0 e0       	ldi	r31, 0x00	; 0
    11ca:	80 81       	ld	r24, Z
    11cc:	8c 7f       	andi	r24, 0xFC	; 252
    11ce:	8c 93       	st	X, r24

		/* Disable TIMER0 Interrupt Flag, by writing a logic one */
		TIFR_R |= (1 << OCF0_BIT) | (1 << TOV0_BIT);
    11d0:	a8 e5       	ldi	r26, 0x58	; 88
    11d2:	b0 e0       	ldi	r27, 0x00	; 0
    11d4:	e8 e5       	ldi	r30, 0x58	; 88
    11d6:	f0 e0       	ldi	r31, 0x00	; 0
    11d8:	80 81       	ld	r24, Z
    11da:	83 60       	ori	r24, 0x03	; 3
    11dc:	8c 93       	st	X, r24

		/* Update the error state with no error */
		enu_ErrorState = TIMER_E_PARAM_VALID;
    11de:	19 82       	std	Y+1, r1	; 0x01
    11e0:	39 c0       	rjmp	.+114    	; 0x1254 <TIMER_DeInit+0xde>
		break;

	case TIMER_1:

		/* Clear All TIMER1 Register */
		TCNT1_R  = 0x0000;
    11e2:	ec e4       	ldi	r30, 0x4C	; 76
    11e4:	f0 e0       	ldi	r31, 0x00	; 0
    11e6:	11 82       	std	Z+1, r1	; 0x01
    11e8:	10 82       	st	Z, r1
		OCR1A_R  = 0x0000;
    11ea:	ea e4       	ldi	r30, 0x4A	; 74
    11ec:	f0 e0       	ldi	r31, 0x00	; 0
    11ee:	11 82       	std	Z+1, r1	; 0x01
    11f0:	10 82       	st	Z, r1
		TCCR1A_R = 0x00;
    11f2:	ef e4       	ldi	r30, 0x4F	; 79
    11f4:	f0 e0       	ldi	r31, 0x00	; 0
    11f6:	10 82       	st	Z, r1
		TCCR1B_R = 0x00;
    11f8:	ee e4       	ldi	r30, 0x4E	; 78
    11fa:	f0 e0       	ldi	r31, 0x00	; 0
    11fc:	10 82       	st	Z, r1

		/* Disable TIMER1 Interrupt Enable */
		TIMSK_R &= ~(1 << TOIE1_BIT) & ~(1 << OCIE1A_BIT);
    11fe:	a9 e5       	ldi	r26, 0x59	; 89
    1200:	b0 e0       	ldi	r27, 0x00	; 0
    1202:	e9 e5       	ldi	r30, 0x59	; 89
    1204:	f0 e0       	ldi	r31, 0x00	; 0
    1206:	80 81       	ld	r24, Z
    1208:	8b 7e       	andi	r24, 0xEB	; 235
    120a:	8c 93       	st	X, r24

		/* Disable TIMER1 Interrupt Flag, by writing a logic one */
		TIFR_R |= (1 << OCF1A_BIT) | (1 << OCF1B_BIT) | (1 << TOV1_BIT);
    120c:	a8 e5       	ldi	r26, 0x58	; 88
    120e:	b0 e0       	ldi	r27, 0x00	; 0
    1210:	e8 e5       	ldi	r30, 0x58	; 88
    1212:	f0 e0       	ldi	r31, 0x00	; 0
    1214:	80 81       	ld	r24, Z
    1216:	8c 61       	ori	r24, 0x1C	; 28
    1218:	8c 93       	st	X, r24

		/* Update the error state with no error */
		enu_ErrorState = TIMER_E_PARAM_VALID;
    121a:	19 82       	std	Y+1, r1	; 0x01
    121c:	1b c0       	rjmp	.+54     	; 0x1254 <TIMER_DeInit+0xde>
		break;

	case TIMER_2:

		/* Clear All TIMER2 Register */
		TCNT2_R = 0x00;
    121e:	e4 e4       	ldi	r30, 0x44	; 68
    1220:	f0 e0       	ldi	r31, 0x00	; 0
    1222:	10 82       	st	Z, r1
		TCCR2_R = 0x00;
    1224:	e5 e4       	ldi	r30, 0x45	; 69
    1226:	f0 e0       	ldi	r31, 0x00	; 0
    1228:	10 82       	st	Z, r1
		OCR2_R  = 0x00;
    122a:	e3 e4       	ldi	r30, 0x43	; 67
    122c:	f0 e0       	ldi	r31, 0x00	; 0
    122e:	10 82       	st	Z, r1

		/* Disable TIMER2 Interrupt Flags */
		TIMSK_R &= ~(1 << TOIE2_BIT) & ~(1 << OCIE2_BIT);
    1230:	a9 e5       	ldi	r26, 0x59	; 89
    1232:	b0 e0       	ldi	r27, 0x00	; 0
    1234:	e9 e5       	ldi	r30, 0x59	; 89
    1236:	f0 e0       	ldi	r31, 0x00	; 0
    1238:	80 81       	ld	r24, Z
    123a:	8f 73       	andi	r24, 0x3F	; 63
    123c:	8c 93       	st	X, r24

		/* Disable TIMER2 Interrupt Flag, by writing a logic one */
		TIFR_R |= (1 << OCF2_BIT) | (1 << TOV2_BIT);
    123e:	a8 e5       	ldi	r26, 0x58	; 88
    1240:	b0 e0       	ldi	r27, 0x00	; 0
    1242:	e8 e5       	ldi	r30, 0x58	; 88
    1244:	f0 e0       	ldi	r31, 0x00	; 0
    1246:	80 81       	ld	r24, Z
    1248:	80 6c       	ori	r24, 0xC0	; 192
    124a:	8c 93       	st	X, r24

		/* Update the error state with no error */
		enu_ErrorState = TIMER_E_PARAM_VALID;
    124c:	19 82       	std	Y+1, r1	; 0x01
    124e:	02 c0       	rjmp	.+4      	; 0x1254 <TIMER_DeInit+0xde>
		break;

	default:

		/* Update the error state with error */
		enu_ErrorState = TIMER_E_PARAM_INVALID_ID;
    1250:	81 e0       	ldi	r24, 0x01	; 1
    1252:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return enu_ErrorState;
    1254:	89 81       	ldd	r24, Y+1	; 0x01
}
    1256:	0f 90       	pop	r0
    1258:	0f 90       	pop	r0
    125a:	0f 90       	pop	r0
    125c:	0f 90       	pop	r0
    125e:	cf 91       	pop	r28
    1260:	df 91       	pop	r29
    1262:	08 95       	ret

00001264 <DIO_setPortDirection>:
 * [in/out]		 	None
 *
 * [Returns]:       Error state
 ******************************************************************************/
enuDIO_E_STATE_t DIO_setPortDirection(enuDIO_PortId_t enu_portID, enuDIO_DirectionType_t enu_portDirection)
{
    1264:	df 93       	push	r29
    1266:	cf 93       	push	r28
    1268:	cd b7       	in	r28, 0x3d	; 61
    126a:	de b7       	in	r29, 0x3e	; 62
    126c:	27 97       	sbiw	r28, 0x07	; 7
    126e:	0f b6       	in	r0, 0x3f	; 63
    1270:	f8 94       	cli
    1272:	de bf       	out	0x3e, r29	; 62
    1274:	0f be       	out	0x3f, r0	; 63
    1276:	cd bf       	out	0x3d, r28	; 61
    1278:	8a 83       	std	Y+2, r24	; 0x02
    127a:	6b 83       	std	Y+3, r22	; 0x03
	enuDIO_E_STATE_t enu_ErrorState = E_NOT_OK;
    127c:	81 e0       	ldi	r24, 0x01	; 1
    127e:	89 83       	std	Y+1, r24	; 0x01

	/* Check if the PORT is input or output */
    if(enu_portDirection == HIGH)
    1280:	8b 81       	ldd	r24, Y+3	; 0x03
    1282:	81 30       	cpi	r24, 0x01	; 1
    1284:	d1 f5       	brne	.+116    	; 0x12fa <DIO_setPortDirection+0x96>
    {
    	switch (enu_portID)
    1286:	8a 81       	ldd	r24, Y+2	; 0x02
    1288:	28 2f       	mov	r18, r24
    128a:	30 e0       	ldi	r19, 0x00	; 0
    128c:	3f 83       	std	Y+7, r19	; 0x07
    128e:	2e 83       	std	Y+6, r18	; 0x06
    1290:	8e 81       	ldd	r24, Y+6	; 0x06
    1292:	9f 81       	ldd	r25, Y+7	; 0x07
    1294:	81 30       	cpi	r24, 0x01	; 1
    1296:	91 05       	cpc	r25, r1
    1298:	d9 f0       	breq	.+54     	; 0x12d0 <DIO_setPortDirection+0x6c>
    129a:	2e 81       	ldd	r18, Y+6	; 0x06
    129c:	3f 81       	ldd	r19, Y+7	; 0x07
    129e:	22 30       	cpi	r18, 0x02	; 2
    12a0:	31 05       	cpc	r19, r1
    12a2:	2c f4       	brge	.+10     	; 0x12ae <DIO_setPortDirection+0x4a>
    12a4:	8e 81       	ldd	r24, Y+6	; 0x06
    12a6:	9f 81       	ldd	r25, Y+7	; 0x07
    12a8:	00 97       	sbiw	r24, 0x00	; 0
    12aa:	61 f0       	breq	.+24     	; 0x12c4 <DIO_setPortDirection+0x60>
    12ac:	23 c0       	rjmp	.+70     	; 0x12f4 <DIO_setPortDirection+0x90>
    12ae:	2e 81       	ldd	r18, Y+6	; 0x06
    12b0:	3f 81       	ldd	r19, Y+7	; 0x07
    12b2:	22 30       	cpi	r18, 0x02	; 2
    12b4:	31 05       	cpc	r19, r1
    12b6:	91 f0       	breq	.+36     	; 0x12dc <DIO_setPortDirection+0x78>
    12b8:	8e 81       	ldd	r24, Y+6	; 0x06
    12ba:	9f 81       	ldd	r25, Y+7	; 0x07
    12bc:	83 30       	cpi	r24, 0x03	; 3
    12be:	91 05       	cpc	r25, r1
    12c0:	99 f0       	breq	.+38     	; 0x12e8 <DIO_setPortDirection+0x84>
    12c2:	18 c0       	rjmp	.+48     	; 0x12f4 <DIO_setPortDirection+0x90>
		{
		case DIO_PORTA:
			DDRA_DIR_R = OUTPUT_PORT;
    12c4:	ea e3       	ldi	r30, 0x3A	; 58
    12c6:	f0 e0       	ldi	r31, 0x00	; 0
    12c8:	8f ef       	ldi	r24, 0xFF	; 255
    12ca:	80 83       	st	Z, r24
			enu_ErrorState = DIO_E_PARAM_VALID;
    12cc:	19 82       	std	Y+1, r1	; 0x01
    12ce:	50 c0       	rjmp	.+160    	; 0x1370 <DIO_setPortDirection+0x10c>
			break;
		case DIO_PORTB:
			DDRB_DIR_R = OUTPUT_PORT;
    12d0:	e7 e3       	ldi	r30, 0x37	; 55
    12d2:	f0 e0       	ldi	r31, 0x00	; 0
    12d4:	8f ef       	ldi	r24, 0xFF	; 255
    12d6:	80 83       	st	Z, r24
			enu_ErrorState = DIO_E_PARAM_VALID;
    12d8:	19 82       	std	Y+1, r1	; 0x01
    12da:	4a c0       	rjmp	.+148    	; 0x1370 <DIO_setPortDirection+0x10c>
			break;
		case DIO_PORTC:
			DDRC_DIR_R = OUTPUT_PORT;
    12dc:	e4 e3       	ldi	r30, 0x34	; 52
    12de:	f0 e0       	ldi	r31, 0x00	; 0
    12e0:	8f ef       	ldi	r24, 0xFF	; 255
    12e2:	80 83       	st	Z, r24
			enu_ErrorState = DIO_E_PARAM_VALID;
    12e4:	19 82       	std	Y+1, r1	; 0x01
    12e6:	44 c0       	rjmp	.+136    	; 0x1370 <DIO_setPortDirection+0x10c>
			break;
		case DIO_PORTD:
			DDRD_DIR_R = OUTPUT_PORT;
    12e8:	e1 e3       	ldi	r30, 0x31	; 49
    12ea:	f0 e0       	ldi	r31, 0x00	; 0
    12ec:	8f ef       	ldi	r24, 0xFF	; 255
    12ee:	80 83       	st	Z, r24
			enu_ErrorState = DIO_E_PARAM_VALID;
    12f0:	19 82       	std	Y+1, r1	; 0x01
    12f2:	3e c0       	rjmp	.+124    	; 0x1370 <DIO_setPortDirection+0x10c>
			break;
		default:
			enu_ErrorState = DIO_E_PARAM_INVALID_PORT_ID;
    12f4:	81 e0       	ldi	r24, 0x01	; 1
    12f6:	89 83       	std	Y+1, r24	; 0x01
    12f8:	3b c0       	rjmp	.+118    	; 0x1370 <DIO_setPortDirection+0x10c>
			break;
		}
    }
    else if(enu_portDirection == LOW)
    12fa:	8b 81       	ldd	r24, Y+3	; 0x03
    12fc:	88 23       	and	r24, r24
    12fe:	b1 f5       	brne	.+108    	; 0x136c <DIO_setPortDirection+0x108>
    {
		switch (enu_portID)
    1300:	8a 81       	ldd	r24, Y+2	; 0x02
    1302:	28 2f       	mov	r18, r24
    1304:	30 e0       	ldi	r19, 0x00	; 0
    1306:	3d 83       	std	Y+5, r19	; 0x05
    1308:	2c 83       	std	Y+4, r18	; 0x04
    130a:	8c 81       	ldd	r24, Y+4	; 0x04
    130c:	9d 81       	ldd	r25, Y+5	; 0x05
    130e:	81 30       	cpi	r24, 0x01	; 1
    1310:	91 05       	cpc	r25, r1
    1312:	d1 f0       	breq	.+52     	; 0x1348 <DIO_setPortDirection+0xe4>
    1314:	2c 81       	ldd	r18, Y+4	; 0x04
    1316:	3d 81       	ldd	r19, Y+5	; 0x05
    1318:	22 30       	cpi	r18, 0x02	; 2
    131a:	31 05       	cpc	r19, r1
    131c:	2c f4       	brge	.+10     	; 0x1328 <DIO_setPortDirection+0xc4>
    131e:	8c 81       	ldd	r24, Y+4	; 0x04
    1320:	9d 81       	ldd	r25, Y+5	; 0x05
    1322:	00 97       	sbiw	r24, 0x00	; 0
    1324:	61 f0       	breq	.+24     	; 0x133e <DIO_setPortDirection+0xda>
    1326:	1f c0       	rjmp	.+62     	; 0x1366 <DIO_setPortDirection+0x102>
    1328:	2c 81       	ldd	r18, Y+4	; 0x04
    132a:	3d 81       	ldd	r19, Y+5	; 0x05
    132c:	22 30       	cpi	r18, 0x02	; 2
    132e:	31 05       	cpc	r19, r1
    1330:	81 f0       	breq	.+32     	; 0x1352 <DIO_setPortDirection+0xee>
    1332:	8c 81       	ldd	r24, Y+4	; 0x04
    1334:	9d 81       	ldd	r25, Y+5	; 0x05
    1336:	83 30       	cpi	r24, 0x03	; 3
    1338:	91 05       	cpc	r25, r1
    133a:	81 f0       	breq	.+32     	; 0x135c <DIO_setPortDirection+0xf8>
    133c:	14 c0       	rjmp	.+40     	; 0x1366 <DIO_setPortDirection+0x102>
		{
		case DIO_PORTA:
			DDRA_DIR_R = INPUT_PORT;
    133e:	ea e3       	ldi	r30, 0x3A	; 58
    1340:	f0 e0       	ldi	r31, 0x00	; 0
    1342:	10 82       	st	Z, r1
			enu_ErrorState = DIO_E_PARAM_VALID;
    1344:	19 82       	std	Y+1, r1	; 0x01
    1346:	14 c0       	rjmp	.+40     	; 0x1370 <DIO_setPortDirection+0x10c>
			break;
		case DIO_PORTB:
			DDRB_DIR_R = INPUT_PORT;
    1348:	e7 e3       	ldi	r30, 0x37	; 55
    134a:	f0 e0       	ldi	r31, 0x00	; 0
    134c:	10 82       	st	Z, r1
			enu_ErrorState = DIO_E_PARAM_VALID;
    134e:	19 82       	std	Y+1, r1	; 0x01
    1350:	0f c0       	rjmp	.+30     	; 0x1370 <DIO_setPortDirection+0x10c>
			break;
		case DIO_PORTC:
			DDRC_DIR_R = INPUT_PORT;
    1352:	e4 e3       	ldi	r30, 0x34	; 52
    1354:	f0 e0       	ldi	r31, 0x00	; 0
    1356:	10 82       	st	Z, r1
			enu_ErrorState = DIO_E_PARAM_VALID;
    1358:	19 82       	std	Y+1, r1	; 0x01
    135a:	0a c0       	rjmp	.+20     	; 0x1370 <DIO_setPortDirection+0x10c>
			break;
		case DIO_PORTD:
			DDRD_DIR_R = INPUT_PORT;
    135c:	e1 e3       	ldi	r30, 0x31	; 49
    135e:	f0 e0       	ldi	r31, 0x00	; 0
    1360:	10 82       	st	Z, r1
			enu_ErrorState = DIO_E_PARAM_VALID;
    1362:	19 82       	std	Y+1, r1	; 0x01
    1364:	05 c0       	rjmp	.+10     	; 0x1370 <DIO_setPortDirection+0x10c>
			break;
		default:
			enu_ErrorState = DIO_E_PARAM_INVALID_PORT_ID;
    1366:	81 e0       	ldi	r24, 0x01	; 1
    1368:	89 83       	std	Y+1, r24	; 0x01
    136a:	02 c0       	rjmp	.+4      	; 0x1370 <DIO_setPortDirection+0x10c>
			break;
		}
    }
    else
    {
    	enu_ErrorState = DIO_E_PARAM_INVALID_PORT_DIR;	/* Invalid port direction */
    136c:	84 e0       	ldi	r24, 0x04	; 4
    136e:	89 83       	std	Y+1, r24	; 0x01
    }
    return enu_ErrorState;
    1370:	89 81       	ldd	r24, Y+1	; 0x01
}
    1372:	27 96       	adiw	r28, 0x07	; 7
    1374:	0f b6       	in	r0, 0x3f	; 63
    1376:	f8 94       	cli
    1378:	de bf       	out	0x3e, r29	; 62
    137a:	0f be       	out	0x3f, r0	; 63
    137c:	cd bf       	out	0x3d, r28	; 61
    137e:	cf 91       	pop	r28
    1380:	df 91       	pop	r29
    1382:	08 95       	ret

00001384 <DIO_setPinDirection>:
 *
 * [Returns]:       Error State
 ******************************************************************************/
enuDIO_E_STATE_t DIO_setPinDirection(enuDIO_PortId_t enu_portID , enuDIO_PinId_t enu_pinID,
								     enuDIO_DirectionType_t enu_pinDirection)
{
    1384:	df 93       	push	r29
    1386:	cf 93       	push	r28
    1388:	cd b7       	in	r28, 0x3d	; 61
    138a:	de b7       	in	r29, 0x3e	; 62
    138c:	28 97       	sbiw	r28, 0x08	; 8
    138e:	0f b6       	in	r0, 0x3f	; 63
    1390:	f8 94       	cli
    1392:	de bf       	out	0x3e, r29	; 62
    1394:	0f be       	out	0x3f, r0	; 63
    1396:	cd bf       	out	0x3d, r28	; 61
    1398:	8a 83       	std	Y+2, r24	; 0x02
    139a:	6b 83       	std	Y+3, r22	; 0x03
    139c:	4c 83       	std	Y+4, r20	; 0x04
	enuDIO_E_STATE_t enu_ErrorState = E_NOT_OK;
    139e:	81 e0       	ldi	r24, 0x01	; 1
    13a0:	89 83       	std	Y+1, r24	; 0x01

	/* Check if the pin id is one of the existed pin or not */
	if ((enu_pinID >= PIN_0) && (enu_pinID <= PIN_7))
    13a2:	8b 81       	ldd	r24, Y+3	; 0x03
    13a4:	88 30       	cpi	r24, 0x08	; 8
    13a6:	08 f0       	brcs	.+2      	; 0x13aa <DIO_setPinDirection+0x26>
    13a8:	fd c0       	rjmp	.+506    	; 0x15a4 <DIO_setPinDirection+0x220>
	{
		if (enu_pinDirection == OUTPUT)
    13aa:	8c 81       	ldd	r24, Y+4	; 0x04
    13ac:	81 30       	cpi	r24, 0x01	; 1
    13ae:	09 f0       	breq	.+2      	; 0x13b2 <DIO_setPinDirection+0x2e>
    13b0:	77 c0       	rjmp	.+238    	; 0x14a0 <DIO_setPinDirection+0x11c>
		{
			switch (enu_portID)
    13b2:	8a 81       	ldd	r24, Y+2	; 0x02
    13b4:	28 2f       	mov	r18, r24
    13b6:	30 e0       	ldi	r19, 0x00	; 0
    13b8:	38 87       	std	Y+8, r19	; 0x08
    13ba:	2f 83       	std	Y+7, r18	; 0x07
    13bc:	8f 81       	ldd	r24, Y+7	; 0x07
    13be:	98 85       	ldd	r25, Y+8	; 0x08
    13c0:	81 30       	cpi	r24, 0x01	; 1
    13c2:	91 05       	cpc	r25, r1
    13c4:	59 f1       	breq	.+86     	; 0x141c <DIO_setPinDirection+0x98>
    13c6:	2f 81       	ldd	r18, Y+7	; 0x07
    13c8:	38 85       	ldd	r19, Y+8	; 0x08
    13ca:	22 30       	cpi	r18, 0x02	; 2
    13cc:	31 05       	cpc	r19, r1
    13ce:	2c f4       	brge	.+10     	; 0x13da <DIO_setPinDirection+0x56>
    13d0:	8f 81       	ldd	r24, Y+7	; 0x07
    13d2:	98 85       	ldd	r25, Y+8	; 0x08
    13d4:	00 97       	sbiw	r24, 0x00	; 0
    13d6:	69 f0       	breq	.+26     	; 0x13f2 <DIO_setPinDirection+0x6e>
    13d8:	60 c0       	rjmp	.+192    	; 0x149a <DIO_setPinDirection+0x116>
    13da:	2f 81       	ldd	r18, Y+7	; 0x07
    13dc:	38 85       	ldd	r19, Y+8	; 0x08
    13de:	22 30       	cpi	r18, 0x02	; 2
    13e0:	31 05       	cpc	r19, r1
    13e2:	89 f1       	breq	.+98     	; 0x1446 <DIO_setPinDirection+0xc2>
    13e4:	8f 81       	ldd	r24, Y+7	; 0x07
    13e6:	98 85       	ldd	r25, Y+8	; 0x08
    13e8:	83 30       	cpi	r24, 0x03	; 3
    13ea:	91 05       	cpc	r25, r1
    13ec:	09 f4       	brne	.+2      	; 0x13f0 <DIO_setPinDirection+0x6c>
    13ee:	40 c0       	rjmp	.+128    	; 0x1470 <DIO_setPinDirection+0xec>
    13f0:	54 c0       	rjmp	.+168    	; 0x149a <DIO_setPinDirection+0x116>
			{
			case DIO_PORTA:
				SET_BIT(DDRA_DIR_R, enu_pinID);
    13f2:	aa e3       	ldi	r26, 0x3A	; 58
    13f4:	b0 e0       	ldi	r27, 0x00	; 0
    13f6:	ea e3       	ldi	r30, 0x3A	; 58
    13f8:	f0 e0       	ldi	r31, 0x00	; 0
    13fa:	80 81       	ld	r24, Z
    13fc:	48 2f       	mov	r20, r24
    13fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1400:	28 2f       	mov	r18, r24
    1402:	30 e0       	ldi	r19, 0x00	; 0
    1404:	81 e0       	ldi	r24, 0x01	; 1
    1406:	90 e0       	ldi	r25, 0x00	; 0
    1408:	02 2e       	mov	r0, r18
    140a:	02 c0       	rjmp	.+4      	; 0x1410 <DIO_setPinDirection+0x8c>
    140c:	88 0f       	add	r24, r24
    140e:	99 1f       	adc	r25, r25
    1410:	0a 94       	dec	r0
    1412:	e2 f7       	brpl	.-8      	; 0x140c <DIO_setPinDirection+0x88>
    1414:	84 2b       	or	r24, r20
    1416:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
    1418:	19 82       	std	Y+1, r1	; 0x01
    141a:	c6 c0       	rjmp	.+396    	; 0x15a8 <DIO_setPinDirection+0x224>
				break;
			case DIO_PORTB:
				SET_BIT(DDRB_DIR_R, enu_pinID);
    141c:	a7 e3       	ldi	r26, 0x37	; 55
    141e:	b0 e0       	ldi	r27, 0x00	; 0
    1420:	e7 e3       	ldi	r30, 0x37	; 55
    1422:	f0 e0       	ldi	r31, 0x00	; 0
    1424:	80 81       	ld	r24, Z
    1426:	48 2f       	mov	r20, r24
    1428:	8b 81       	ldd	r24, Y+3	; 0x03
    142a:	28 2f       	mov	r18, r24
    142c:	30 e0       	ldi	r19, 0x00	; 0
    142e:	81 e0       	ldi	r24, 0x01	; 1
    1430:	90 e0       	ldi	r25, 0x00	; 0
    1432:	02 2e       	mov	r0, r18
    1434:	02 c0       	rjmp	.+4      	; 0x143a <DIO_setPinDirection+0xb6>
    1436:	88 0f       	add	r24, r24
    1438:	99 1f       	adc	r25, r25
    143a:	0a 94       	dec	r0
    143c:	e2 f7       	brpl	.-8      	; 0x1436 <DIO_setPinDirection+0xb2>
    143e:	84 2b       	or	r24, r20
    1440:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
    1442:	19 82       	std	Y+1, r1	; 0x01
    1444:	b1 c0       	rjmp	.+354    	; 0x15a8 <DIO_setPinDirection+0x224>
				break;
			case DIO_PORTC:
				SET_BIT(DDRC_DIR_R, enu_pinID);
    1446:	a4 e3       	ldi	r26, 0x34	; 52
    1448:	b0 e0       	ldi	r27, 0x00	; 0
    144a:	e4 e3       	ldi	r30, 0x34	; 52
    144c:	f0 e0       	ldi	r31, 0x00	; 0
    144e:	80 81       	ld	r24, Z
    1450:	48 2f       	mov	r20, r24
    1452:	8b 81       	ldd	r24, Y+3	; 0x03
    1454:	28 2f       	mov	r18, r24
    1456:	30 e0       	ldi	r19, 0x00	; 0
    1458:	81 e0       	ldi	r24, 0x01	; 1
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	02 2e       	mov	r0, r18
    145e:	02 c0       	rjmp	.+4      	; 0x1464 <DIO_setPinDirection+0xe0>
    1460:	88 0f       	add	r24, r24
    1462:	99 1f       	adc	r25, r25
    1464:	0a 94       	dec	r0
    1466:	e2 f7       	brpl	.-8      	; 0x1460 <DIO_setPinDirection+0xdc>
    1468:	84 2b       	or	r24, r20
    146a:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
    146c:	19 82       	std	Y+1, r1	; 0x01
    146e:	9c c0       	rjmp	.+312    	; 0x15a8 <DIO_setPinDirection+0x224>
				break;
			case DIO_PORTD:
				SET_BIT(DDRD_DIR_R, enu_pinID);
    1470:	a1 e3       	ldi	r26, 0x31	; 49
    1472:	b0 e0       	ldi	r27, 0x00	; 0
    1474:	e1 e3       	ldi	r30, 0x31	; 49
    1476:	f0 e0       	ldi	r31, 0x00	; 0
    1478:	80 81       	ld	r24, Z
    147a:	48 2f       	mov	r20, r24
    147c:	8b 81       	ldd	r24, Y+3	; 0x03
    147e:	28 2f       	mov	r18, r24
    1480:	30 e0       	ldi	r19, 0x00	; 0
    1482:	81 e0       	ldi	r24, 0x01	; 1
    1484:	90 e0       	ldi	r25, 0x00	; 0
    1486:	02 2e       	mov	r0, r18
    1488:	02 c0       	rjmp	.+4      	; 0x148e <DIO_setPinDirection+0x10a>
    148a:	88 0f       	add	r24, r24
    148c:	99 1f       	adc	r25, r25
    148e:	0a 94       	dec	r0
    1490:	e2 f7       	brpl	.-8      	; 0x148a <DIO_setPinDirection+0x106>
    1492:	84 2b       	or	r24, r20
    1494:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
    1496:	19 82       	std	Y+1, r1	; 0x01
    1498:	87 c0       	rjmp	.+270    	; 0x15a8 <DIO_setPinDirection+0x224>
				break;
            default:
            	enu_ErrorState = DIO_E_PARAM_INVALID_PORT_ID;	/* Invalid port id */
    149a:	81 e0       	ldi	r24, 0x01	; 1
    149c:	89 83       	std	Y+1, r24	; 0x01
    149e:	84 c0       	rjmp	.+264    	; 0x15a8 <DIO_setPinDirection+0x224>
                break;
			}
		}
		else if (enu_pinDirection == INPUT)
    14a0:	8c 81       	ldd	r24, Y+4	; 0x04
    14a2:	88 23       	and	r24, r24
    14a4:	09 f0       	breq	.+2      	; 0x14a8 <DIO_setPinDirection+0x124>
    14a6:	7b c0       	rjmp	.+246    	; 0x159e <DIO_setPinDirection+0x21a>
		{
			switch (enu_portID)
    14a8:	8a 81       	ldd	r24, Y+2	; 0x02
    14aa:	28 2f       	mov	r18, r24
    14ac:	30 e0       	ldi	r19, 0x00	; 0
    14ae:	3e 83       	std	Y+6, r19	; 0x06
    14b0:	2d 83       	std	Y+5, r18	; 0x05
    14b2:	8d 81       	ldd	r24, Y+5	; 0x05
    14b4:	9e 81       	ldd	r25, Y+6	; 0x06
    14b6:	81 30       	cpi	r24, 0x01	; 1
    14b8:	91 05       	cpc	r25, r1
    14ba:	61 f1       	breq	.+88     	; 0x1514 <DIO_setPinDirection+0x190>
    14bc:	2d 81       	ldd	r18, Y+5	; 0x05
    14be:	3e 81       	ldd	r19, Y+6	; 0x06
    14c0:	22 30       	cpi	r18, 0x02	; 2
    14c2:	31 05       	cpc	r19, r1
    14c4:	2c f4       	brge	.+10     	; 0x14d0 <DIO_setPinDirection+0x14c>
    14c6:	8d 81       	ldd	r24, Y+5	; 0x05
    14c8:	9e 81       	ldd	r25, Y+6	; 0x06
    14ca:	00 97       	sbiw	r24, 0x00	; 0
    14cc:	69 f0       	breq	.+26     	; 0x14e8 <DIO_setPinDirection+0x164>
    14ce:	64 c0       	rjmp	.+200    	; 0x1598 <DIO_setPinDirection+0x214>
    14d0:	2d 81       	ldd	r18, Y+5	; 0x05
    14d2:	3e 81       	ldd	r19, Y+6	; 0x06
    14d4:	22 30       	cpi	r18, 0x02	; 2
    14d6:	31 05       	cpc	r19, r1
    14d8:	99 f1       	breq	.+102    	; 0x1540 <DIO_setPinDirection+0x1bc>
    14da:	8d 81       	ldd	r24, Y+5	; 0x05
    14dc:	9e 81       	ldd	r25, Y+6	; 0x06
    14de:	83 30       	cpi	r24, 0x03	; 3
    14e0:	91 05       	cpc	r25, r1
    14e2:	09 f4       	brne	.+2      	; 0x14e6 <DIO_setPinDirection+0x162>
    14e4:	43 c0       	rjmp	.+134    	; 0x156c <DIO_setPinDirection+0x1e8>
    14e6:	58 c0       	rjmp	.+176    	; 0x1598 <DIO_setPinDirection+0x214>
			{
			case DIO_PORTA:
				CLEAR_BIT(DDRA_DIR_R, enu_pinID);
    14e8:	aa e3       	ldi	r26, 0x3A	; 58
    14ea:	b0 e0       	ldi	r27, 0x00	; 0
    14ec:	ea e3       	ldi	r30, 0x3A	; 58
    14ee:	f0 e0       	ldi	r31, 0x00	; 0
    14f0:	80 81       	ld	r24, Z
    14f2:	48 2f       	mov	r20, r24
    14f4:	8b 81       	ldd	r24, Y+3	; 0x03
    14f6:	28 2f       	mov	r18, r24
    14f8:	30 e0       	ldi	r19, 0x00	; 0
    14fa:	81 e0       	ldi	r24, 0x01	; 1
    14fc:	90 e0       	ldi	r25, 0x00	; 0
    14fe:	02 2e       	mov	r0, r18
    1500:	02 c0       	rjmp	.+4      	; 0x1506 <DIO_setPinDirection+0x182>
    1502:	88 0f       	add	r24, r24
    1504:	99 1f       	adc	r25, r25
    1506:	0a 94       	dec	r0
    1508:	e2 f7       	brpl	.-8      	; 0x1502 <DIO_setPinDirection+0x17e>
    150a:	80 95       	com	r24
    150c:	84 23       	and	r24, r20
    150e:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
    1510:	19 82       	std	Y+1, r1	; 0x01
    1512:	4a c0       	rjmp	.+148    	; 0x15a8 <DIO_setPinDirection+0x224>
				break;
			case DIO_PORTB:
				CLEAR_BIT(DDRB_DIR_R, enu_pinID);
    1514:	a7 e3       	ldi	r26, 0x37	; 55
    1516:	b0 e0       	ldi	r27, 0x00	; 0
    1518:	e7 e3       	ldi	r30, 0x37	; 55
    151a:	f0 e0       	ldi	r31, 0x00	; 0
    151c:	80 81       	ld	r24, Z
    151e:	48 2f       	mov	r20, r24
    1520:	8b 81       	ldd	r24, Y+3	; 0x03
    1522:	28 2f       	mov	r18, r24
    1524:	30 e0       	ldi	r19, 0x00	; 0
    1526:	81 e0       	ldi	r24, 0x01	; 1
    1528:	90 e0       	ldi	r25, 0x00	; 0
    152a:	02 2e       	mov	r0, r18
    152c:	02 c0       	rjmp	.+4      	; 0x1532 <DIO_setPinDirection+0x1ae>
    152e:	88 0f       	add	r24, r24
    1530:	99 1f       	adc	r25, r25
    1532:	0a 94       	dec	r0
    1534:	e2 f7       	brpl	.-8      	; 0x152e <DIO_setPinDirection+0x1aa>
    1536:	80 95       	com	r24
    1538:	84 23       	and	r24, r20
    153a:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
    153c:	19 82       	std	Y+1, r1	; 0x01
    153e:	34 c0       	rjmp	.+104    	; 0x15a8 <DIO_setPinDirection+0x224>
				break;
			case DIO_PORTC:
				CLEAR_BIT(DDRC_DIR_R, enu_pinID);
    1540:	a4 e3       	ldi	r26, 0x34	; 52
    1542:	b0 e0       	ldi	r27, 0x00	; 0
    1544:	e4 e3       	ldi	r30, 0x34	; 52
    1546:	f0 e0       	ldi	r31, 0x00	; 0
    1548:	80 81       	ld	r24, Z
    154a:	48 2f       	mov	r20, r24
    154c:	8b 81       	ldd	r24, Y+3	; 0x03
    154e:	28 2f       	mov	r18, r24
    1550:	30 e0       	ldi	r19, 0x00	; 0
    1552:	81 e0       	ldi	r24, 0x01	; 1
    1554:	90 e0       	ldi	r25, 0x00	; 0
    1556:	02 2e       	mov	r0, r18
    1558:	02 c0       	rjmp	.+4      	; 0x155e <DIO_setPinDirection+0x1da>
    155a:	88 0f       	add	r24, r24
    155c:	99 1f       	adc	r25, r25
    155e:	0a 94       	dec	r0
    1560:	e2 f7       	brpl	.-8      	; 0x155a <DIO_setPinDirection+0x1d6>
    1562:	80 95       	com	r24
    1564:	84 23       	and	r24, r20
    1566:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
    1568:	19 82       	std	Y+1, r1	; 0x01
    156a:	1e c0       	rjmp	.+60     	; 0x15a8 <DIO_setPinDirection+0x224>
				break;
			case DIO_PORTD:
				CLEAR_BIT(DDRD_DIR_R, enu_pinID);
    156c:	a1 e3       	ldi	r26, 0x31	; 49
    156e:	b0 e0       	ldi	r27, 0x00	; 0
    1570:	e1 e3       	ldi	r30, 0x31	; 49
    1572:	f0 e0       	ldi	r31, 0x00	; 0
    1574:	80 81       	ld	r24, Z
    1576:	48 2f       	mov	r20, r24
    1578:	8b 81       	ldd	r24, Y+3	; 0x03
    157a:	28 2f       	mov	r18, r24
    157c:	30 e0       	ldi	r19, 0x00	; 0
    157e:	81 e0       	ldi	r24, 0x01	; 1
    1580:	90 e0       	ldi	r25, 0x00	; 0
    1582:	02 2e       	mov	r0, r18
    1584:	02 c0       	rjmp	.+4      	; 0x158a <DIO_setPinDirection+0x206>
    1586:	88 0f       	add	r24, r24
    1588:	99 1f       	adc	r25, r25
    158a:	0a 94       	dec	r0
    158c:	e2 f7       	brpl	.-8      	; 0x1586 <DIO_setPinDirection+0x202>
    158e:	80 95       	com	r24
    1590:	84 23       	and	r24, r20
    1592:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
    1594:	19 82       	std	Y+1, r1	; 0x01
    1596:	08 c0       	rjmp	.+16     	; 0x15a8 <DIO_setPinDirection+0x224>
				break;
            default:
            	enu_ErrorState = DIO_E_PARAM_INVALID_PORT_ID;	/* Invalid port id */
    1598:	81 e0       	ldi	r24, 0x01	; 1
    159a:	89 83       	std	Y+1, r24	; 0x01
    159c:	05 c0       	rjmp	.+10     	; 0x15a8 <DIO_setPinDirection+0x224>
                break;
			}
		}
		else
		{
			enu_ErrorState = DIO_E_PARAM_INVALID_PORT_DIR;	/* Invalid port direction */
    159e:	84 e0       	ldi	r24, 0x04	; 4
    15a0:	89 83       	std	Y+1, r24	; 0x01
    15a2:	02 c0       	rjmp	.+4      	; 0x15a8 <DIO_setPinDirection+0x224>
		}
	}
	else
	{
		enu_ErrorState = DIO_E_PARAM_INVALID_PIN_ID;	/* Invalid pin id */
    15a4:	82 e0       	ldi	r24, 0x02	; 2
    15a6:	89 83       	std	Y+1, r24	; 0x01
	}
	return enu_ErrorState;
    15a8:	89 81       	ldd	r24, Y+1	; 0x01
}
    15aa:	28 96       	adiw	r28, 0x08	; 8
    15ac:	0f b6       	in	r0, 0x3f	; 63
    15ae:	f8 94       	cli
    15b0:	de bf       	out	0x3e, r29	; 62
    15b2:	0f be       	out	0x3f, r0	; 63
    15b4:	cd bf       	out	0x3d, r28	; 61
    15b6:	cf 91       	pop	r28
    15b8:	df 91       	pop	r29
    15ba:	08 95       	ret

000015bc <DIO_writePort>:
 * [in/out]		 	None
 *
 * [Returns]:       Error State
 ******************************************************************************/
enuDIO_E_STATE_t DIO_writePort(enuDIO_PortId_t enu_portID, uint8_t au8_portValue)
{
    15bc:	df 93       	push	r29
    15be:	cf 93       	push	r28
    15c0:	00 d0       	rcall	.+0      	; 0x15c2 <DIO_writePort+0x6>
    15c2:	00 d0       	rcall	.+0      	; 0x15c4 <DIO_writePort+0x8>
    15c4:	0f 92       	push	r0
    15c6:	cd b7       	in	r28, 0x3d	; 61
    15c8:	de b7       	in	r29, 0x3e	; 62
    15ca:	8a 83       	std	Y+2, r24	; 0x02
    15cc:	6b 83       	std	Y+3, r22	; 0x03
	enuDIO_E_STATE_t enu_ErrorState = E_NOT_OK;
    15ce:	81 e0       	ldi	r24, 0x01	; 1
    15d0:	89 83       	std	Y+1, r24	; 0x01

    switch (enu_portID)
    15d2:	8a 81       	ldd	r24, Y+2	; 0x02
    15d4:	28 2f       	mov	r18, r24
    15d6:	30 e0       	ldi	r19, 0x00	; 0
    15d8:	3d 83       	std	Y+5, r19	; 0x05
    15da:	2c 83       	std	Y+4, r18	; 0x04
    15dc:	8c 81       	ldd	r24, Y+4	; 0x04
    15de:	9d 81       	ldd	r25, Y+5	; 0x05
    15e0:	81 30       	cpi	r24, 0x01	; 1
    15e2:	91 05       	cpc	r25, r1
    15e4:	d9 f0       	breq	.+54     	; 0x161c <DIO_writePort+0x60>
    15e6:	2c 81       	ldd	r18, Y+4	; 0x04
    15e8:	3d 81       	ldd	r19, Y+5	; 0x05
    15ea:	22 30       	cpi	r18, 0x02	; 2
    15ec:	31 05       	cpc	r19, r1
    15ee:	2c f4       	brge	.+10     	; 0x15fa <DIO_writePort+0x3e>
    15f0:	8c 81       	ldd	r24, Y+4	; 0x04
    15f2:	9d 81       	ldd	r25, Y+5	; 0x05
    15f4:	00 97       	sbiw	r24, 0x00	; 0
    15f6:	61 f0       	breq	.+24     	; 0x1610 <DIO_writePort+0x54>
    15f8:	23 c0       	rjmp	.+70     	; 0x1640 <DIO_writePort+0x84>
    15fa:	2c 81       	ldd	r18, Y+4	; 0x04
    15fc:	3d 81       	ldd	r19, Y+5	; 0x05
    15fe:	22 30       	cpi	r18, 0x02	; 2
    1600:	31 05       	cpc	r19, r1
    1602:	91 f0       	breq	.+36     	; 0x1628 <DIO_writePort+0x6c>
    1604:	8c 81       	ldd	r24, Y+4	; 0x04
    1606:	9d 81       	ldd	r25, Y+5	; 0x05
    1608:	83 30       	cpi	r24, 0x03	; 3
    160a:	91 05       	cpc	r25, r1
    160c:	99 f0       	breq	.+38     	; 0x1634 <DIO_writePort+0x78>
    160e:	18 c0       	rjmp	.+48     	; 0x1640 <DIO_writePort+0x84>
    {
    case DIO_PORTA:
        PORTA_DATA_R = au8_portValue;
    1610:	eb e3       	ldi	r30, 0x3B	; 59
    1612:	f0 e0       	ldi	r31, 0x00	; 0
    1614:	8b 81       	ldd	r24, Y+3	; 0x03
    1616:	80 83       	st	Z, r24
        enu_ErrorState = DIO_E_PARAM_VALID;
    1618:	19 82       	std	Y+1, r1	; 0x01
    161a:	14 c0       	rjmp	.+40     	; 0x1644 <DIO_writePort+0x88>
        break;
    case DIO_PORTB:
        PORTB_DATA_R = au8_portValue;
    161c:	e8 e3       	ldi	r30, 0x38	; 56
    161e:	f0 e0       	ldi	r31, 0x00	; 0
    1620:	8b 81       	ldd	r24, Y+3	; 0x03
    1622:	80 83       	st	Z, r24
        enu_ErrorState = DIO_E_PARAM_VALID;
    1624:	19 82       	std	Y+1, r1	; 0x01
    1626:	0e c0       	rjmp	.+28     	; 0x1644 <DIO_writePort+0x88>
        break;
    case DIO_PORTC:
        PORTC_DATA_R = au8_portValue;
    1628:	e5 e3       	ldi	r30, 0x35	; 53
    162a:	f0 e0       	ldi	r31, 0x00	; 0
    162c:	8b 81       	ldd	r24, Y+3	; 0x03
    162e:	80 83       	st	Z, r24
        enu_ErrorState = DIO_E_PARAM_VALID;
    1630:	19 82       	std	Y+1, r1	; 0x01
    1632:	08 c0       	rjmp	.+16     	; 0x1644 <DIO_writePort+0x88>
        break;
    case DIO_PORTD:
        PORTD_DATA_R = au8_portValue;
    1634:	e2 e3       	ldi	r30, 0x32	; 50
    1636:	f0 e0       	ldi	r31, 0x00	; 0
    1638:	8b 81       	ldd	r24, Y+3	; 0x03
    163a:	80 83       	st	Z, r24
        enu_ErrorState = DIO_E_PARAM_VALID;
    163c:	19 82       	std	Y+1, r1	; 0x01
    163e:	02 c0       	rjmp	.+4      	; 0x1644 <DIO_writePort+0x88>
        break;
    default:
    	enu_ErrorState = DIO_E_PARAM_INVALID_PORT_ID;	/* Invalid port id */
    1640:	81 e0       	ldi	r24, 0x01	; 1
    1642:	89 83       	std	Y+1, r24	; 0x01
        break;
    }
    return enu_ErrorState;
    1644:	89 81       	ldd	r24, Y+1	; 0x01
}
    1646:	0f 90       	pop	r0
    1648:	0f 90       	pop	r0
    164a:	0f 90       	pop	r0
    164c:	0f 90       	pop	r0
    164e:	0f 90       	pop	r0
    1650:	cf 91       	pop	r28
    1652:	df 91       	pop	r29
    1654:	08 95       	ret

00001656 <DIO_writePin>:
 * [in/out]		 	None
 *
 * [Returns]:       Error State
 ******************************************************************************/
enuDIO_E_STATE_t DIO_writePin(enuDIO_PortId_t enu_portID, enuDIO_PinId_t enu_pinID, uint8_t au8_pinValue)
{
    1656:	df 93       	push	r29
    1658:	cf 93       	push	r28
    165a:	cd b7       	in	r28, 0x3d	; 61
    165c:	de b7       	in	r29, 0x3e	; 62
    165e:	28 97       	sbiw	r28, 0x08	; 8
    1660:	0f b6       	in	r0, 0x3f	; 63
    1662:	f8 94       	cli
    1664:	de bf       	out	0x3e, r29	; 62
    1666:	0f be       	out	0x3f, r0	; 63
    1668:	cd bf       	out	0x3d, r28	; 61
    166a:	8a 83       	std	Y+2, r24	; 0x02
    166c:	6b 83       	std	Y+3, r22	; 0x03
    166e:	4c 83       	std	Y+4, r20	; 0x04
	enuDIO_E_STATE_t enu_ErrorState = E_NOT_OK;
    1670:	81 e0       	ldi	r24, 0x01	; 1
    1672:	89 83       	std	Y+1, r24	; 0x01

	/* Check if the pin id is one of the existed pin or not */
	if ((enu_pinID >= PIN_0) && (enu_pinID <= PIN_7))
    1674:	8b 81       	ldd	r24, Y+3	; 0x03
    1676:	88 30       	cpi	r24, 0x08	; 8
    1678:	08 f0       	brcs	.+2      	; 0x167c <DIO_writePin+0x26>
    167a:	fd c0       	rjmp	.+506    	; 0x1876 <DIO_writePin+0x220>
	{
		if (au8_pinValue == HIGH)
    167c:	8c 81       	ldd	r24, Y+4	; 0x04
    167e:	81 30       	cpi	r24, 0x01	; 1
    1680:	09 f0       	breq	.+2      	; 0x1684 <DIO_writePin+0x2e>
    1682:	77 c0       	rjmp	.+238    	; 0x1772 <DIO_writePin+0x11c>
		{
			switch (enu_portID)
    1684:	8a 81       	ldd	r24, Y+2	; 0x02
    1686:	28 2f       	mov	r18, r24
    1688:	30 e0       	ldi	r19, 0x00	; 0
    168a:	38 87       	std	Y+8, r19	; 0x08
    168c:	2f 83       	std	Y+7, r18	; 0x07
    168e:	8f 81       	ldd	r24, Y+7	; 0x07
    1690:	98 85       	ldd	r25, Y+8	; 0x08
    1692:	81 30       	cpi	r24, 0x01	; 1
    1694:	91 05       	cpc	r25, r1
    1696:	59 f1       	breq	.+86     	; 0x16ee <DIO_writePin+0x98>
    1698:	2f 81       	ldd	r18, Y+7	; 0x07
    169a:	38 85       	ldd	r19, Y+8	; 0x08
    169c:	22 30       	cpi	r18, 0x02	; 2
    169e:	31 05       	cpc	r19, r1
    16a0:	2c f4       	brge	.+10     	; 0x16ac <DIO_writePin+0x56>
    16a2:	8f 81       	ldd	r24, Y+7	; 0x07
    16a4:	98 85       	ldd	r25, Y+8	; 0x08
    16a6:	00 97       	sbiw	r24, 0x00	; 0
    16a8:	69 f0       	breq	.+26     	; 0x16c4 <DIO_writePin+0x6e>
    16aa:	60 c0       	rjmp	.+192    	; 0x176c <DIO_writePin+0x116>
    16ac:	2f 81       	ldd	r18, Y+7	; 0x07
    16ae:	38 85       	ldd	r19, Y+8	; 0x08
    16b0:	22 30       	cpi	r18, 0x02	; 2
    16b2:	31 05       	cpc	r19, r1
    16b4:	89 f1       	breq	.+98     	; 0x1718 <DIO_writePin+0xc2>
    16b6:	8f 81       	ldd	r24, Y+7	; 0x07
    16b8:	98 85       	ldd	r25, Y+8	; 0x08
    16ba:	83 30       	cpi	r24, 0x03	; 3
    16bc:	91 05       	cpc	r25, r1
    16be:	09 f4       	brne	.+2      	; 0x16c2 <DIO_writePin+0x6c>
    16c0:	40 c0       	rjmp	.+128    	; 0x1742 <DIO_writePin+0xec>
    16c2:	54 c0       	rjmp	.+168    	; 0x176c <DIO_writePin+0x116>
			{
			case DIO_PORTA:
				SET_BIT(PORTA_DATA_R, enu_pinID);
    16c4:	ab e3       	ldi	r26, 0x3B	; 59
    16c6:	b0 e0       	ldi	r27, 0x00	; 0
    16c8:	eb e3       	ldi	r30, 0x3B	; 59
    16ca:	f0 e0       	ldi	r31, 0x00	; 0
    16cc:	80 81       	ld	r24, Z
    16ce:	48 2f       	mov	r20, r24
    16d0:	8b 81       	ldd	r24, Y+3	; 0x03
    16d2:	28 2f       	mov	r18, r24
    16d4:	30 e0       	ldi	r19, 0x00	; 0
    16d6:	81 e0       	ldi	r24, 0x01	; 1
    16d8:	90 e0       	ldi	r25, 0x00	; 0
    16da:	02 2e       	mov	r0, r18
    16dc:	02 c0       	rjmp	.+4      	; 0x16e2 <DIO_writePin+0x8c>
    16de:	88 0f       	add	r24, r24
    16e0:	99 1f       	adc	r25, r25
    16e2:	0a 94       	dec	r0
    16e4:	e2 f7       	brpl	.-8      	; 0x16de <DIO_writePin+0x88>
    16e6:	84 2b       	or	r24, r20
    16e8:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
    16ea:	19 82       	std	Y+1, r1	; 0x01
    16ec:	c6 c0       	rjmp	.+396    	; 0x187a <DIO_writePin+0x224>
				break;
			case DIO_PORTB:
				SET_BIT(PORTB_DATA_R, enu_pinID);
    16ee:	a8 e3       	ldi	r26, 0x38	; 56
    16f0:	b0 e0       	ldi	r27, 0x00	; 0
    16f2:	e8 e3       	ldi	r30, 0x38	; 56
    16f4:	f0 e0       	ldi	r31, 0x00	; 0
    16f6:	80 81       	ld	r24, Z
    16f8:	48 2f       	mov	r20, r24
    16fa:	8b 81       	ldd	r24, Y+3	; 0x03
    16fc:	28 2f       	mov	r18, r24
    16fe:	30 e0       	ldi	r19, 0x00	; 0
    1700:	81 e0       	ldi	r24, 0x01	; 1
    1702:	90 e0       	ldi	r25, 0x00	; 0
    1704:	02 2e       	mov	r0, r18
    1706:	02 c0       	rjmp	.+4      	; 0x170c <DIO_writePin+0xb6>
    1708:	88 0f       	add	r24, r24
    170a:	99 1f       	adc	r25, r25
    170c:	0a 94       	dec	r0
    170e:	e2 f7       	brpl	.-8      	; 0x1708 <DIO_writePin+0xb2>
    1710:	84 2b       	or	r24, r20
    1712:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
    1714:	19 82       	std	Y+1, r1	; 0x01
    1716:	b1 c0       	rjmp	.+354    	; 0x187a <DIO_writePin+0x224>
				break;
			case DIO_PORTC:
				SET_BIT(PORTC_DATA_R, enu_pinID);
    1718:	a5 e3       	ldi	r26, 0x35	; 53
    171a:	b0 e0       	ldi	r27, 0x00	; 0
    171c:	e5 e3       	ldi	r30, 0x35	; 53
    171e:	f0 e0       	ldi	r31, 0x00	; 0
    1720:	80 81       	ld	r24, Z
    1722:	48 2f       	mov	r20, r24
    1724:	8b 81       	ldd	r24, Y+3	; 0x03
    1726:	28 2f       	mov	r18, r24
    1728:	30 e0       	ldi	r19, 0x00	; 0
    172a:	81 e0       	ldi	r24, 0x01	; 1
    172c:	90 e0       	ldi	r25, 0x00	; 0
    172e:	02 2e       	mov	r0, r18
    1730:	02 c0       	rjmp	.+4      	; 0x1736 <DIO_writePin+0xe0>
    1732:	88 0f       	add	r24, r24
    1734:	99 1f       	adc	r25, r25
    1736:	0a 94       	dec	r0
    1738:	e2 f7       	brpl	.-8      	; 0x1732 <DIO_writePin+0xdc>
    173a:	84 2b       	or	r24, r20
    173c:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
    173e:	19 82       	std	Y+1, r1	; 0x01
    1740:	9c c0       	rjmp	.+312    	; 0x187a <DIO_writePin+0x224>
				break;
			case DIO_PORTD:
				SET_BIT(PORTD_DATA_R, enu_pinID);
    1742:	a2 e3       	ldi	r26, 0x32	; 50
    1744:	b0 e0       	ldi	r27, 0x00	; 0
    1746:	e2 e3       	ldi	r30, 0x32	; 50
    1748:	f0 e0       	ldi	r31, 0x00	; 0
    174a:	80 81       	ld	r24, Z
    174c:	48 2f       	mov	r20, r24
    174e:	8b 81       	ldd	r24, Y+3	; 0x03
    1750:	28 2f       	mov	r18, r24
    1752:	30 e0       	ldi	r19, 0x00	; 0
    1754:	81 e0       	ldi	r24, 0x01	; 1
    1756:	90 e0       	ldi	r25, 0x00	; 0
    1758:	02 2e       	mov	r0, r18
    175a:	02 c0       	rjmp	.+4      	; 0x1760 <DIO_writePin+0x10a>
    175c:	88 0f       	add	r24, r24
    175e:	99 1f       	adc	r25, r25
    1760:	0a 94       	dec	r0
    1762:	e2 f7       	brpl	.-8      	; 0x175c <DIO_writePin+0x106>
    1764:	84 2b       	or	r24, r20
    1766:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
    1768:	19 82       	std	Y+1, r1	; 0x01
    176a:	87 c0       	rjmp	.+270    	; 0x187a <DIO_writePin+0x224>
				break;
            default:
            	enu_ErrorState = DIO_E_PARAM_INVALID_PORT_ID;	/* Invalid port id */
    176c:	81 e0       	ldi	r24, 0x01	; 1
    176e:	89 83       	std	Y+1, r24	; 0x01
    1770:	84 c0       	rjmp	.+264    	; 0x187a <DIO_writePin+0x224>
                break;
			}
		}
		else if (au8_pinValue == LOW)
    1772:	8c 81       	ldd	r24, Y+4	; 0x04
    1774:	88 23       	and	r24, r24
    1776:	09 f0       	breq	.+2      	; 0x177a <DIO_writePin+0x124>
    1778:	7b c0       	rjmp	.+246    	; 0x1870 <DIO_writePin+0x21a>
		{
			switch (enu_portID)
    177a:	8a 81       	ldd	r24, Y+2	; 0x02
    177c:	28 2f       	mov	r18, r24
    177e:	30 e0       	ldi	r19, 0x00	; 0
    1780:	3e 83       	std	Y+6, r19	; 0x06
    1782:	2d 83       	std	Y+5, r18	; 0x05
    1784:	8d 81       	ldd	r24, Y+5	; 0x05
    1786:	9e 81       	ldd	r25, Y+6	; 0x06
    1788:	81 30       	cpi	r24, 0x01	; 1
    178a:	91 05       	cpc	r25, r1
    178c:	61 f1       	breq	.+88     	; 0x17e6 <DIO_writePin+0x190>
    178e:	2d 81       	ldd	r18, Y+5	; 0x05
    1790:	3e 81       	ldd	r19, Y+6	; 0x06
    1792:	22 30       	cpi	r18, 0x02	; 2
    1794:	31 05       	cpc	r19, r1
    1796:	2c f4       	brge	.+10     	; 0x17a2 <DIO_writePin+0x14c>
    1798:	8d 81       	ldd	r24, Y+5	; 0x05
    179a:	9e 81       	ldd	r25, Y+6	; 0x06
    179c:	00 97       	sbiw	r24, 0x00	; 0
    179e:	69 f0       	breq	.+26     	; 0x17ba <DIO_writePin+0x164>
    17a0:	64 c0       	rjmp	.+200    	; 0x186a <DIO_writePin+0x214>
    17a2:	2d 81       	ldd	r18, Y+5	; 0x05
    17a4:	3e 81       	ldd	r19, Y+6	; 0x06
    17a6:	22 30       	cpi	r18, 0x02	; 2
    17a8:	31 05       	cpc	r19, r1
    17aa:	99 f1       	breq	.+102    	; 0x1812 <DIO_writePin+0x1bc>
    17ac:	8d 81       	ldd	r24, Y+5	; 0x05
    17ae:	9e 81       	ldd	r25, Y+6	; 0x06
    17b0:	83 30       	cpi	r24, 0x03	; 3
    17b2:	91 05       	cpc	r25, r1
    17b4:	09 f4       	brne	.+2      	; 0x17b8 <DIO_writePin+0x162>
    17b6:	43 c0       	rjmp	.+134    	; 0x183e <DIO_writePin+0x1e8>
    17b8:	58 c0       	rjmp	.+176    	; 0x186a <DIO_writePin+0x214>
			{
			case DIO_PORTA:
				CLEAR_BIT(PORTA_DATA_R, enu_pinID);
    17ba:	ab e3       	ldi	r26, 0x3B	; 59
    17bc:	b0 e0       	ldi	r27, 0x00	; 0
    17be:	eb e3       	ldi	r30, 0x3B	; 59
    17c0:	f0 e0       	ldi	r31, 0x00	; 0
    17c2:	80 81       	ld	r24, Z
    17c4:	48 2f       	mov	r20, r24
    17c6:	8b 81       	ldd	r24, Y+3	; 0x03
    17c8:	28 2f       	mov	r18, r24
    17ca:	30 e0       	ldi	r19, 0x00	; 0
    17cc:	81 e0       	ldi	r24, 0x01	; 1
    17ce:	90 e0       	ldi	r25, 0x00	; 0
    17d0:	02 2e       	mov	r0, r18
    17d2:	02 c0       	rjmp	.+4      	; 0x17d8 <DIO_writePin+0x182>
    17d4:	88 0f       	add	r24, r24
    17d6:	99 1f       	adc	r25, r25
    17d8:	0a 94       	dec	r0
    17da:	e2 f7       	brpl	.-8      	; 0x17d4 <DIO_writePin+0x17e>
    17dc:	80 95       	com	r24
    17de:	84 23       	and	r24, r20
    17e0:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
    17e2:	19 82       	std	Y+1, r1	; 0x01
    17e4:	4a c0       	rjmp	.+148    	; 0x187a <DIO_writePin+0x224>
				break;
			case DIO_PORTB:
				CLEAR_BIT(PORTB_DATA_R, enu_pinID);
    17e6:	a8 e3       	ldi	r26, 0x38	; 56
    17e8:	b0 e0       	ldi	r27, 0x00	; 0
    17ea:	e8 e3       	ldi	r30, 0x38	; 56
    17ec:	f0 e0       	ldi	r31, 0x00	; 0
    17ee:	80 81       	ld	r24, Z
    17f0:	48 2f       	mov	r20, r24
    17f2:	8b 81       	ldd	r24, Y+3	; 0x03
    17f4:	28 2f       	mov	r18, r24
    17f6:	30 e0       	ldi	r19, 0x00	; 0
    17f8:	81 e0       	ldi	r24, 0x01	; 1
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	02 2e       	mov	r0, r18
    17fe:	02 c0       	rjmp	.+4      	; 0x1804 <DIO_writePin+0x1ae>
    1800:	88 0f       	add	r24, r24
    1802:	99 1f       	adc	r25, r25
    1804:	0a 94       	dec	r0
    1806:	e2 f7       	brpl	.-8      	; 0x1800 <DIO_writePin+0x1aa>
    1808:	80 95       	com	r24
    180a:	84 23       	and	r24, r20
    180c:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
    180e:	19 82       	std	Y+1, r1	; 0x01
    1810:	34 c0       	rjmp	.+104    	; 0x187a <DIO_writePin+0x224>
				break;
			case DIO_PORTC:
				CLEAR_BIT(PORTC_DATA_R, enu_pinID);
    1812:	a5 e3       	ldi	r26, 0x35	; 53
    1814:	b0 e0       	ldi	r27, 0x00	; 0
    1816:	e5 e3       	ldi	r30, 0x35	; 53
    1818:	f0 e0       	ldi	r31, 0x00	; 0
    181a:	80 81       	ld	r24, Z
    181c:	48 2f       	mov	r20, r24
    181e:	8b 81       	ldd	r24, Y+3	; 0x03
    1820:	28 2f       	mov	r18, r24
    1822:	30 e0       	ldi	r19, 0x00	; 0
    1824:	81 e0       	ldi	r24, 0x01	; 1
    1826:	90 e0       	ldi	r25, 0x00	; 0
    1828:	02 2e       	mov	r0, r18
    182a:	02 c0       	rjmp	.+4      	; 0x1830 <DIO_writePin+0x1da>
    182c:	88 0f       	add	r24, r24
    182e:	99 1f       	adc	r25, r25
    1830:	0a 94       	dec	r0
    1832:	e2 f7       	brpl	.-8      	; 0x182c <DIO_writePin+0x1d6>
    1834:	80 95       	com	r24
    1836:	84 23       	and	r24, r20
    1838:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
    183a:	19 82       	std	Y+1, r1	; 0x01
    183c:	1e c0       	rjmp	.+60     	; 0x187a <DIO_writePin+0x224>
				break;
			case DIO_PORTD:
				CLEAR_BIT(PORTD_DATA_R, enu_pinID);
    183e:	a2 e3       	ldi	r26, 0x32	; 50
    1840:	b0 e0       	ldi	r27, 0x00	; 0
    1842:	e2 e3       	ldi	r30, 0x32	; 50
    1844:	f0 e0       	ldi	r31, 0x00	; 0
    1846:	80 81       	ld	r24, Z
    1848:	48 2f       	mov	r20, r24
    184a:	8b 81       	ldd	r24, Y+3	; 0x03
    184c:	28 2f       	mov	r18, r24
    184e:	30 e0       	ldi	r19, 0x00	; 0
    1850:	81 e0       	ldi	r24, 0x01	; 1
    1852:	90 e0       	ldi	r25, 0x00	; 0
    1854:	02 2e       	mov	r0, r18
    1856:	02 c0       	rjmp	.+4      	; 0x185c <DIO_writePin+0x206>
    1858:	88 0f       	add	r24, r24
    185a:	99 1f       	adc	r25, r25
    185c:	0a 94       	dec	r0
    185e:	e2 f7       	brpl	.-8      	; 0x1858 <DIO_writePin+0x202>
    1860:	80 95       	com	r24
    1862:	84 23       	and	r24, r20
    1864:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
    1866:	19 82       	std	Y+1, r1	; 0x01
    1868:	08 c0       	rjmp	.+16     	; 0x187a <DIO_writePin+0x224>
				break;
            default:
            	enu_ErrorState = DIO_E_PARAM_INVALID_PORT_ID;	/* Invalid port id */
    186a:	81 e0       	ldi	r24, 0x01	; 1
    186c:	89 83       	std	Y+1, r24	; 0x01
    186e:	05 c0       	rjmp	.+10     	; 0x187a <DIO_writePin+0x224>
                break;
			}
		}
		else
        {
			enu_ErrorState = DIO_E_PARAM_INVALID_PORT_DIR;	/* Invalid port direction */
    1870:	84 e0       	ldi	r24, 0x04	; 4
    1872:	89 83       	std	Y+1, r24	; 0x01
    1874:	02 c0       	rjmp	.+4      	; 0x187a <DIO_writePin+0x224>
		}
	}
	else
	{
		enu_ErrorState = DIO_E_PARAM_INVALID_PIN_ID;	/* Invalid pin id */
    1876:	82 e0       	ldi	r24, 0x02	; 2
    1878:	89 83       	std	Y+1, r24	; 0x01
	}
	return enu_ErrorState;
    187a:	89 81       	ldd	r24, Y+1	; 0x01
}
    187c:	28 96       	adiw	r28, 0x08	; 8
    187e:	0f b6       	in	r0, 0x3f	; 63
    1880:	f8 94       	cli
    1882:	de bf       	out	0x3e, r29	; 62
    1884:	0f be       	out	0x3f, r0	; 63
    1886:	cd bf       	out	0x3d, r28	; 61
    1888:	cf 91       	pop	r28
    188a:	df 91       	pop	r29
    188c:	08 95       	ret

0000188e <DIO_readPort>:
 * [in/out]		 	None
 *
 * [Returns]:       Error State
 ******************************************************************************/
enuDIO_E_STATE_t DIO_readPort(enuDIO_PortId_t enu_portID, uint8_t * ptr_portState)
{
    188e:	df 93       	push	r29
    1890:	cf 93       	push	r28
    1892:	00 d0       	rcall	.+0      	; 0x1894 <DIO_readPort+0x6>
    1894:	00 d0       	rcall	.+0      	; 0x1896 <DIO_readPort+0x8>
    1896:	00 d0       	rcall	.+0      	; 0x1898 <DIO_readPort+0xa>
    1898:	cd b7       	in	r28, 0x3d	; 61
    189a:	de b7       	in	r29, 0x3e	; 62
    189c:	8a 83       	std	Y+2, r24	; 0x02
    189e:	7c 83       	std	Y+4, r23	; 0x04
    18a0:	6b 83       	std	Y+3, r22	; 0x03
	enuDIO_E_STATE_t enu_ErrorState = E_NOT_OK;
    18a2:	81 e0       	ldi	r24, 0x01	; 1
    18a4:	89 83       	std	Y+1, r24	; 0x01

	/* Check if the pointer is NULL pointer or not */
	if(ptr_portState == NULL_PTR)
    18a6:	8b 81       	ldd	r24, Y+3	; 0x03
    18a8:	9c 81       	ldd	r25, Y+4	; 0x04
    18aa:	00 97       	sbiw	r24, 0x00	; 0
    18ac:	19 f4       	brne	.+6      	; 0x18b4 <DIO_readPort+0x26>
    {
		enu_ErrorState = DIO_E_PARAM_POINTER;	/* Invalid pointer */
    18ae:	85 e0       	ldi	r24, 0x05	; 5
    18b0:	89 83       	std	Y+1, r24	; 0x01
    18b2:	41 c0       	rjmp	.+130    	; 0x1936 <DIO_readPort+0xa8>
	}
	else
	{
		switch (enu_portID)
    18b4:	8a 81       	ldd	r24, Y+2	; 0x02
    18b6:	28 2f       	mov	r18, r24
    18b8:	30 e0       	ldi	r19, 0x00	; 0
    18ba:	3e 83       	std	Y+6, r19	; 0x06
    18bc:	2d 83       	std	Y+5, r18	; 0x05
    18be:	8d 81       	ldd	r24, Y+5	; 0x05
    18c0:	9e 81       	ldd	r25, Y+6	; 0x06
    18c2:	81 30       	cpi	r24, 0x01	; 1
    18c4:	91 05       	cpc	r25, r1
    18c6:	e9 f0       	breq	.+58     	; 0x1902 <DIO_readPort+0x74>
    18c8:	2d 81       	ldd	r18, Y+5	; 0x05
    18ca:	3e 81       	ldd	r19, Y+6	; 0x06
    18cc:	22 30       	cpi	r18, 0x02	; 2
    18ce:	31 05       	cpc	r19, r1
    18d0:	2c f4       	brge	.+10     	; 0x18dc <DIO_readPort+0x4e>
    18d2:	8d 81       	ldd	r24, Y+5	; 0x05
    18d4:	9e 81       	ldd	r25, Y+6	; 0x06
    18d6:	00 97       	sbiw	r24, 0x00	; 0
    18d8:	61 f0       	breq	.+24     	; 0x18f2 <DIO_readPort+0x64>
    18da:	2b c0       	rjmp	.+86     	; 0x1932 <DIO_readPort+0xa4>
    18dc:	2d 81       	ldd	r18, Y+5	; 0x05
    18de:	3e 81       	ldd	r19, Y+6	; 0x06
    18e0:	22 30       	cpi	r18, 0x02	; 2
    18e2:	31 05       	cpc	r19, r1
    18e4:	b1 f0       	breq	.+44     	; 0x1912 <DIO_readPort+0x84>
    18e6:	8d 81       	ldd	r24, Y+5	; 0x05
    18e8:	9e 81       	ldd	r25, Y+6	; 0x06
    18ea:	83 30       	cpi	r24, 0x03	; 3
    18ec:	91 05       	cpc	r25, r1
    18ee:	c9 f0       	breq	.+50     	; 0x1922 <DIO_readPort+0x94>
    18f0:	20 c0       	rjmp	.+64     	; 0x1932 <DIO_readPort+0xa4>
		{
		case DIO_PORTA:
			*ptr_portState = PINA_INPUT_R;
    18f2:	e9 e3       	ldi	r30, 0x39	; 57
    18f4:	f0 e0       	ldi	r31, 0x00	; 0
    18f6:	80 81       	ld	r24, Z
    18f8:	eb 81       	ldd	r30, Y+3	; 0x03
    18fa:	fc 81       	ldd	r31, Y+4	; 0x04
    18fc:	80 83       	st	Z, r24
			enu_ErrorState = DIO_E_PARAM_VALID;
    18fe:	19 82       	std	Y+1, r1	; 0x01
    1900:	1a c0       	rjmp	.+52     	; 0x1936 <DIO_readPort+0xa8>
			break;
		case DIO_PORTB:
			*ptr_portState = PINB_INPUT_R;
    1902:	e6 e3       	ldi	r30, 0x36	; 54
    1904:	f0 e0       	ldi	r31, 0x00	; 0
    1906:	80 81       	ld	r24, Z
    1908:	eb 81       	ldd	r30, Y+3	; 0x03
    190a:	fc 81       	ldd	r31, Y+4	; 0x04
    190c:	80 83       	st	Z, r24
			enu_ErrorState = DIO_E_PARAM_VALID;;
    190e:	19 82       	std	Y+1, r1	; 0x01
    1910:	12 c0       	rjmp	.+36     	; 0x1936 <DIO_readPort+0xa8>
			break;
		case DIO_PORTC:
			*ptr_portState = PINC_INPUT_R;
    1912:	e3 e3       	ldi	r30, 0x33	; 51
    1914:	f0 e0       	ldi	r31, 0x00	; 0
    1916:	80 81       	ld	r24, Z
    1918:	eb 81       	ldd	r30, Y+3	; 0x03
    191a:	fc 81       	ldd	r31, Y+4	; 0x04
    191c:	80 83       	st	Z, r24
			enu_ErrorState = DIO_E_PARAM_VALID;
    191e:	19 82       	std	Y+1, r1	; 0x01
    1920:	0a c0       	rjmp	.+20     	; 0x1936 <DIO_readPort+0xa8>
			break;
		case DIO_PORTD:
			*ptr_portState = PIND_INPUT_R;
    1922:	e0 e3       	ldi	r30, 0x30	; 48
    1924:	f0 e0       	ldi	r31, 0x00	; 0
    1926:	80 81       	ld	r24, Z
    1928:	eb 81       	ldd	r30, Y+3	; 0x03
    192a:	fc 81       	ldd	r31, Y+4	; 0x04
    192c:	80 83       	st	Z, r24
			enu_ErrorState = DIO_E_PARAM_VALID;
    192e:	19 82       	std	Y+1, r1	; 0x01
    1930:	02 c0       	rjmp	.+4      	; 0x1936 <DIO_readPort+0xa8>
			break;
		default:
			enu_ErrorState = DIO_E_PARAM_INVALID_PORT_ID;	/* Invalid port id */
    1932:	81 e0       	ldi	r24, 0x01	; 1
    1934:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return enu_ErrorState;
    1936:	89 81       	ldd	r24, Y+1	; 0x01
}
    1938:	26 96       	adiw	r28, 0x06	; 6
    193a:	0f b6       	in	r0, 0x3f	; 63
    193c:	f8 94       	cli
    193e:	de bf       	out	0x3e, r29	; 62
    1940:	0f be       	out	0x3f, r0	; 63
    1942:	cd bf       	out	0x3d, r28	; 61
    1944:	cf 91       	pop	r28
    1946:	df 91       	pop	r29
    1948:	08 95       	ret

0000194a <DIO_readPin>:
 * [in/out]		 	None
 *
 * [Returns]:       Error State
 ******************************************************************************/
enuDIO_E_STATE_t DIO_readPin(enuDIO_PortId_t enu_portID, enuDIO_PinId_t enu_pinID, uint8_t * ptr_pinState)
{
    194a:	df 93       	push	r29
    194c:	cf 93       	push	r28
    194e:	cd b7       	in	r28, 0x3d	; 61
    1950:	de b7       	in	r29, 0x3e	; 62
    1952:	27 97       	sbiw	r28, 0x07	; 7
    1954:	0f b6       	in	r0, 0x3f	; 63
    1956:	f8 94       	cli
    1958:	de bf       	out	0x3e, r29	; 62
    195a:	0f be       	out	0x3f, r0	; 63
    195c:	cd bf       	out	0x3d, r28	; 61
    195e:	8a 83       	std	Y+2, r24	; 0x02
    1960:	6b 83       	std	Y+3, r22	; 0x03
    1962:	5d 83       	std	Y+5, r21	; 0x05
    1964:	4c 83       	std	Y+4, r20	; 0x04
	enuDIO_E_STATE_t enu_ErrorState = E_NOT_OK;
    1966:	81 e0       	ldi	r24, 0x01	; 1
    1968:	89 83       	std	Y+1, r24	; 0x01

	/* Check if the pointer is NULL pointer or not */
	if(ptr_pinState == NULL_PTR)
    196a:	8c 81       	ldd	r24, Y+4	; 0x04
    196c:	9d 81       	ldd	r25, Y+5	; 0x05
    196e:	00 97       	sbiw	r24, 0x00	; 0
    1970:	19 f4       	brne	.+6      	; 0x1978 <DIO_readPin+0x2e>
    {
		enu_ErrorState = DIO_E_PARAM_POINTER;
    1972:	85 e0       	ldi	r24, 0x05	; 5
    1974:	89 83       	std	Y+1, r24	; 0x01
    1976:	af c0       	rjmp	.+350    	; 0x1ad6 <DIO_readPin+0x18c>
	}
	else
	{
        if((enu_pinID >= PIN_0) && (enu_pinID <= PIN_7))
    1978:	8b 81       	ldd	r24, Y+3	; 0x03
    197a:	88 30       	cpi	r24, 0x08	; 8
    197c:	08 f0       	brcs	.+2      	; 0x1980 <DIO_readPin+0x36>
    197e:	a9 c0       	rjmp	.+338    	; 0x1ad2 <DIO_readPin+0x188>
        {
            switch (enu_portID)
    1980:	8a 81       	ldd	r24, Y+2	; 0x02
    1982:	28 2f       	mov	r18, r24
    1984:	30 e0       	ldi	r19, 0x00	; 0
    1986:	3f 83       	std	Y+7, r19	; 0x07
    1988:	2e 83       	std	Y+6, r18	; 0x06
    198a:	4e 81       	ldd	r20, Y+6	; 0x06
    198c:	5f 81       	ldd	r21, Y+7	; 0x07
    198e:	41 30       	cpi	r20, 0x01	; 1
    1990:	51 05       	cpc	r21, r1
    1992:	c9 f1       	breq	.+114    	; 0x1a06 <DIO_readPin+0xbc>
    1994:	8e 81       	ldd	r24, Y+6	; 0x06
    1996:	9f 81       	ldd	r25, Y+7	; 0x07
    1998:	82 30       	cpi	r24, 0x02	; 2
    199a:	91 05       	cpc	r25, r1
    199c:	34 f4       	brge	.+12     	; 0x19aa <DIO_readPin+0x60>
    199e:	2e 81       	ldd	r18, Y+6	; 0x06
    19a0:	3f 81       	ldd	r19, Y+7	; 0x07
    19a2:	21 15       	cp	r18, r1
    19a4:	31 05       	cpc	r19, r1
    19a6:	71 f0       	breq	.+28     	; 0x19c4 <DIO_readPin+0x7a>
    19a8:	91 c0       	rjmp	.+290    	; 0x1acc <DIO_readPin+0x182>
    19aa:	4e 81       	ldd	r20, Y+6	; 0x06
    19ac:	5f 81       	ldd	r21, Y+7	; 0x07
    19ae:	42 30       	cpi	r20, 0x02	; 2
    19b0:	51 05       	cpc	r21, r1
    19b2:	09 f4       	brne	.+2      	; 0x19b6 <DIO_readPin+0x6c>
    19b4:	49 c0       	rjmp	.+146    	; 0x1a48 <DIO_readPin+0xfe>
    19b6:	8e 81       	ldd	r24, Y+6	; 0x06
    19b8:	9f 81       	ldd	r25, Y+7	; 0x07
    19ba:	83 30       	cpi	r24, 0x03	; 3
    19bc:	91 05       	cpc	r25, r1
    19be:	09 f4       	brne	.+2      	; 0x19c2 <DIO_readPin+0x78>
    19c0:	64 c0       	rjmp	.+200    	; 0x1a8a <DIO_readPin+0x140>
    19c2:	84 c0       	rjmp	.+264    	; 0x1acc <DIO_readPin+0x182>
            {
            case DIO_PORTA:
                *ptr_pinState = READ_BIT(PINA_INPUT_R, enu_pinID);
    19c4:	e9 e3       	ldi	r30, 0x39	; 57
    19c6:	f0 e0       	ldi	r31, 0x00	; 0
    19c8:	80 81       	ld	r24, Z
    19ca:	48 2f       	mov	r20, r24
    19cc:	50 e0       	ldi	r21, 0x00	; 0
    19ce:	8b 81       	ldd	r24, Y+3	; 0x03
    19d0:	28 2f       	mov	r18, r24
    19d2:	30 e0       	ldi	r19, 0x00	; 0
    19d4:	81 e0       	ldi	r24, 0x01	; 1
    19d6:	90 e0       	ldi	r25, 0x00	; 0
    19d8:	02 c0       	rjmp	.+4      	; 0x19de <DIO_readPin+0x94>
    19da:	88 0f       	add	r24, r24
    19dc:	99 1f       	adc	r25, r25
    19de:	2a 95       	dec	r18
    19e0:	e2 f7       	brpl	.-8      	; 0x19da <DIO_readPin+0x90>
    19e2:	9a 01       	movw	r18, r20
    19e4:	28 23       	and	r18, r24
    19e6:	39 23       	and	r19, r25
    19e8:	8b 81       	ldd	r24, Y+3	; 0x03
    19ea:	88 2f       	mov	r24, r24
    19ec:	90 e0       	ldi	r25, 0x00	; 0
    19ee:	a9 01       	movw	r20, r18
    19f0:	02 c0       	rjmp	.+4      	; 0x19f6 <DIO_readPin+0xac>
    19f2:	55 95       	asr	r21
    19f4:	47 95       	ror	r20
    19f6:	8a 95       	dec	r24
    19f8:	e2 f7       	brpl	.-8      	; 0x19f2 <DIO_readPin+0xa8>
    19fa:	ca 01       	movw	r24, r20
    19fc:	ec 81       	ldd	r30, Y+4	; 0x04
    19fe:	fd 81       	ldd	r31, Y+5	; 0x05
    1a00:	80 83       	st	Z, r24
                enu_ErrorState = DIO_E_PARAM_VALID;
    1a02:	19 82       	std	Y+1, r1	; 0x01
    1a04:	68 c0       	rjmp	.+208    	; 0x1ad6 <DIO_readPin+0x18c>
                break;
            case DIO_PORTB:
                *ptr_pinState = READ_BIT(PINB_INPUT_R, enu_pinID);
    1a06:	e6 e3       	ldi	r30, 0x36	; 54
    1a08:	f0 e0       	ldi	r31, 0x00	; 0
    1a0a:	80 81       	ld	r24, Z
    1a0c:	48 2f       	mov	r20, r24
    1a0e:	50 e0       	ldi	r21, 0x00	; 0
    1a10:	8b 81       	ldd	r24, Y+3	; 0x03
    1a12:	28 2f       	mov	r18, r24
    1a14:	30 e0       	ldi	r19, 0x00	; 0
    1a16:	81 e0       	ldi	r24, 0x01	; 1
    1a18:	90 e0       	ldi	r25, 0x00	; 0
    1a1a:	02 c0       	rjmp	.+4      	; 0x1a20 <DIO_readPin+0xd6>
    1a1c:	88 0f       	add	r24, r24
    1a1e:	99 1f       	adc	r25, r25
    1a20:	2a 95       	dec	r18
    1a22:	e2 f7       	brpl	.-8      	; 0x1a1c <DIO_readPin+0xd2>
    1a24:	9a 01       	movw	r18, r20
    1a26:	28 23       	and	r18, r24
    1a28:	39 23       	and	r19, r25
    1a2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a2c:	88 2f       	mov	r24, r24
    1a2e:	90 e0       	ldi	r25, 0x00	; 0
    1a30:	a9 01       	movw	r20, r18
    1a32:	02 c0       	rjmp	.+4      	; 0x1a38 <DIO_readPin+0xee>
    1a34:	55 95       	asr	r21
    1a36:	47 95       	ror	r20
    1a38:	8a 95       	dec	r24
    1a3a:	e2 f7       	brpl	.-8      	; 0x1a34 <DIO_readPin+0xea>
    1a3c:	ca 01       	movw	r24, r20
    1a3e:	ec 81       	ldd	r30, Y+4	; 0x04
    1a40:	fd 81       	ldd	r31, Y+5	; 0x05
    1a42:	80 83       	st	Z, r24
                enu_ErrorState = DIO_E_PARAM_VALID;
    1a44:	19 82       	std	Y+1, r1	; 0x01
    1a46:	47 c0       	rjmp	.+142    	; 0x1ad6 <DIO_readPin+0x18c>
                break;
            case DIO_PORTC:
                *ptr_pinState = READ_BIT(PINC_INPUT_R, enu_pinID);
    1a48:	e3 e3       	ldi	r30, 0x33	; 51
    1a4a:	f0 e0       	ldi	r31, 0x00	; 0
    1a4c:	80 81       	ld	r24, Z
    1a4e:	48 2f       	mov	r20, r24
    1a50:	50 e0       	ldi	r21, 0x00	; 0
    1a52:	8b 81       	ldd	r24, Y+3	; 0x03
    1a54:	28 2f       	mov	r18, r24
    1a56:	30 e0       	ldi	r19, 0x00	; 0
    1a58:	81 e0       	ldi	r24, 0x01	; 1
    1a5a:	90 e0       	ldi	r25, 0x00	; 0
    1a5c:	02 c0       	rjmp	.+4      	; 0x1a62 <DIO_readPin+0x118>
    1a5e:	88 0f       	add	r24, r24
    1a60:	99 1f       	adc	r25, r25
    1a62:	2a 95       	dec	r18
    1a64:	e2 f7       	brpl	.-8      	; 0x1a5e <DIO_readPin+0x114>
    1a66:	9a 01       	movw	r18, r20
    1a68:	28 23       	and	r18, r24
    1a6a:	39 23       	and	r19, r25
    1a6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a6e:	88 2f       	mov	r24, r24
    1a70:	90 e0       	ldi	r25, 0x00	; 0
    1a72:	a9 01       	movw	r20, r18
    1a74:	02 c0       	rjmp	.+4      	; 0x1a7a <DIO_readPin+0x130>
    1a76:	55 95       	asr	r21
    1a78:	47 95       	ror	r20
    1a7a:	8a 95       	dec	r24
    1a7c:	e2 f7       	brpl	.-8      	; 0x1a76 <DIO_readPin+0x12c>
    1a7e:	ca 01       	movw	r24, r20
    1a80:	ec 81       	ldd	r30, Y+4	; 0x04
    1a82:	fd 81       	ldd	r31, Y+5	; 0x05
    1a84:	80 83       	st	Z, r24
                enu_ErrorState = DIO_E_PARAM_VALID;
    1a86:	19 82       	std	Y+1, r1	; 0x01
    1a88:	26 c0       	rjmp	.+76     	; 0x1ad6 <DIO_readPin+0x18c>
                break;
            case DIO_PORTD:
                *ptr_pinState = READ_BIT(PIND_INPUT_R, enu_pinID);
    1a8a:	e0 e3       	ldi	r30, 0x30	; 48
    1a8c:	f0 e0       	ldi	r31, 0x00	; 0
    1a8e:	80 81       	ld	r24, Z
    1a90:	48 2f       	mov	r20, r24
    1a92:	50 e0       	ldi	r21, 0x00	; 0
    1a94:	8b 81       	ldd	r24, Y+3	; 0x03
    1a96:	28 2f       	mov	r18, r24
    1a98:	30 e0       	ldi	r19, 0x00	; 0
    1a9a:	81 e0       	ldi	r24, 0x01	; 1
    1a9c:	90 e0       	ldi	r25, 0x00	; 0
    1a9e:	02 c0       	rjmp	.+4      	; 0x1aa4 <DIO_readPin+0x15a>
    1aa0:	88 0f       	add	r24, r24
    1aa2:	99 1f       	adc	r25, r25
    1aa4:	2a 95       	dec	r18
    1aa6:	e2 f7       	brpl	.-8      	; 0x1aa0 <DIO_readPin+0x156>
    1aa8:	9a 01       	movw	r18, r20
    1aaa:	28 23       	and	r18, r24
    1aac:	39 23       	and	r19, r25
    1aae:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab0:	88 2f       	mov	r24, r24
    1ab2:	90 e0       	ldi	r25, 0x00	; 0
    1ab4:	a9 01       	movw	r20, r18
    1ab6:	02 c0       	rjmp	.+4      	; 0x1abc <DIO_readPin+0x172>
    1ab8:	55 95       	asr	r21
    1aba:	47 95       	ror	r20
    1abc:	8a 95       	dec	r24
    1abe:	e2 f7       	brpl	.-8      	; 0x1ab8 <DIO_readPin+0x16e>
    1ac0:	ca 01       	movw	r24, r20
    1ac2:	ec 81       	ldd	r30, Y+4	; 0x04
    1ac4:	fd 81       	ldd	r31, Y+5	; 0x05
    1ac6:	80 83       	st	Z, r24
                enu_ErrorState = DIO_E_PARAM_VALID;
    1ac8:	19 82       	std	Y+1, r1	; 0x01
    1aca:	05 c0       	rjmp	.+10     	; 0x1ad6 <DIO_readPin+0x18c>
                break;
            default:
            	enu_ErrorState = DIO_E_PARAM_INVALID_PORT_ID;	/* Invalid port id */
    1acc:	81 e0       	ldi	r24, 0x01	; 1
    1ace:	89 83       	std	Y+1, r24	; 0x01
    1ad0:	02 c0       	rjmp	.+4      	; 0x1ad6 <DIO_readPin+0x18c>
                break;
            }
        }
        else
        {
        	enu_ErrorState = DIO_E_PARAM_INVALID_PIN_ID;	/* Invalid pin id */
    1ad2:	82 e0       	ldi	r24, 0x02	; 2
    1ad4:	89 83       	std	Y+1, r24	; 0x01
        }
	}
    return enu_ErrorState;
    1ad6:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ad8:	27 96       	adiw	r28, 0x07	; 7
    1ada:	0f b6       	in	r0, 0x3f	; 63
    1adc:	f8 94       	cli
    1ade:	de bf       	out	0x3e, r29	; 62
    1ae0:	0f be       	out	0x3f, r0	; 63
    1ae2:	cd bf       	out	0x3d, r28	; 61
    1ae4:	cf 91       	pop	r28
    1ae6:	df 91       	pop	r29
    1ae8:	08 95       	ret

00001aea <DIO_TogglePin>:
 * [in/out]		 	None
 *
 * [Returns]:       Error State
 ******************************************************************************/
enuDIO_E_STATE_t DIO_TogglePin(enuDIO_PortId_t enu_portID, enuDIO_PinId_t enu_pinID)
{
    1aea:	df 93       	push	r29
    1aec:	cf 93       	push	r28
    1aee:	00 d0       	rcall	.+0      	; 0x1af0 <DIO_TogglePin+0x6>
    1af0:	00 d0       	rcall	.+0      	; 0x1af2 <DIO_TogglePin+0x8>
    1af2:	0f 92       	push	r0
    1af4:	cd b7       	in	r28, 0x3d	; 61
    1af6:	de b7       	in	r29, 0x3e	; 62
    1af8:	8a 83       	std	Y+2, r24	; 0x02
    1afa:	6b 83       	std	Y+3, r22	; 0x03
	enuDIO_E_STATE_t enu_ErrorState = E_NOT_OK;
    1afc:	81 e0       	ldi	r24, 0x01	; 1
    1afe:	89 83       	std	Y+1, r24	; 0x01

	/* Check if the pointer is NULL pointer or not */
    if ((enu_pinID >= PIN_0) && (enu_pinID <= PIN_7))
    1b00:	8b 81       	ldd	r24, Y+3	; 0x03
    1b02:	88 30       	cpi	r24, 0x08	; 8
    1b04:	08 f0       	brcs	.+2      	; 0x1b08 <DIO_TogglePin+0x1e>
    1b06:	77 c0       	rjmp	.+238    	; 0x1bf6 <DIO_TogglePin+0x10c>
    {
        switch (enu_portID)
    1b08:	8a 81       	ldd	r24, Y+2	; 0x02
    1b0a:	28 2f       	mov	r18, r24
    1b0c:	30 e0       	ldi	r19, 0x00	; 0
    1b0e:	3d 83       	std	Y+5, r19	; 0x05
    1b10:	2c 83       	std	Y+4, r18	; 0x04
    1b12:	8c 81       	ldd	r24, Y+4	; 0x04
    1b14:	9d 81       	ldd	r25, Y+5	; 0x05
    1b16:	81 30       	cpi	r24, 0x01	; 1
    1b18:	91 05       	cpc	r25, r1
    1b1a:	59 f1       	breq	.+86     	; 0x1b72 <DIO_TogglePin+0x88>
    1b1c:	2c 81       	ldd	r18, Y+4	; 0x04
    1b1e:	3d 81       	ldd	r19, Y+5	; 0x05
    1b20:	22 30       	cpi	r18, 0x02	; 2
    1b22:	31 05       	cpc	r19, r1
    1b24:	2c f4       	brge	.+10     	; 0x1b30 <DIO_TogglePin+0x46>
    1b26:	8c 81       	ldd	r24, Y+4	; 0x04
    1b28:	9d 81       	ldd	r25, Y+5	; 0x05
    1b2a:	00 97       	sbiw	r24, 0x00	; 0
    1b2c:	69 f0       	breq	.+26     	; 0x1b48 <DIO_TogglePin+0x5e>
    1b2e:	60 c0       	rjmp	.+192    	; 0x1bf0 <DIO_TogglePin+0x106>
    1b30:	2c 81       	ldd	r18, Y+4	; 0x04
    1b32:	3d 81       	ldd	r19, Y+5	; 0x05
    1b34:	22 30       	cpi	r18, 0x02	; 2
    1b36:	31 05       	cpc	r19, r1
    1b38:	89 f1       	breq	.+98     	; 0x1b9c <DIO_TogglePin+0xb2>
    1b3a:	8c 81       	ldd	r24, Y+4	; 0x04
    1b3c:	9d 81       	ldd	r25, Y+5	; 0x05
    1b3e:	83 30       	cpi	r24, 0x03	; 3
    1b40:	91 05       	cpc	r25, r1
    1b42:	09 f4       	brne	.+2      	; 0x1b46 <DIO_TogglePin+0x5c>
    1b44:	40 c0       	rjmp	.+128    	; 0x1bc6 <DIO_TogglePin+0xdc>
    1b46:	54 c0       	rjmp	.+168    	; 0x1bf0 <DIO_TogglePin+0x106>
        {
        case DIO_PORTA:
            TOGGLE_BIT(PORTA_DATA_R, enu_pinID);
    1b48:	ab e3       	ldi	r26, 0x3B	; 59
    1b4a:	b0 e0       	ldi	r27, 0x00	; 0
    1b4c:	eb e3       	ldi	r30, 0x3B	; 59
    1b4e:	f0 e0       	ldi	r31, 0x00	; 0
    1b50:	80 81       	ld	r24, Z
    1b52:	48 2f       	mov	r20, r24
    1b54:	8b 81       	ldd	r24, Y+3	; 0x03
    1b56:	28 2f       	mov	r18, r24
    1b58:	30 e0       	ldi	r19, 0x00	; 0
    1b5a:	81 e0       	ldi	r24, 0x01	; 1
    1b5c:	90 e0       	ldi	r25, 0x00	; 0
    1b5e:	02 2e       	mov	r0, r18
    1b60:	02 c0       	rjmp	.+4      	; 0x1b66 <DIO_TogglePin+0x7c>
    1b62:	88 0f       	add	r24, r24
    1b64:	99 1f       	adc	r25, r25
    1b66:	0a 94       	dec	r0
    1b68:	e2 f7       	brpl	.-8      	; 0x1b62 <DIO_TogglePin+0x78>
    1b6a:	84 27       	eor	r24, r20
    1b6c:	8c 93       	st	X, r24
            enu_ErrorState = DIO_E_PARAM_VALID;
    1b6e:	19 82       	std	Y+1, r1	; 0x01
    1b70:	44 c0       	rjmp	.+136    	; 0x1bfa <DIO_TogglePin+0x110>
            break;
        case DIO_PORTB:
        	TOGGLE_BIT(PORTB_DATA_R, enu_pinID);
    1b72:	a8 e3       	ldi	r26, 0x38	; 56
    1b74:	b0 e0       	ldi	r27, 0x00	; 0
    1b76:	e8 e3       	ldi	r30, 0x38	; 56
    1b78:	f0 e0       	ldi	r31, 0x00	; 0
    1b7a:	80 81       	ld	r24, Z
    1b7c:	48 2f       	mov	r20, r24
    1b7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b80:	28 2f       	mov	r18, r24
    1b82:	30 e0       	ldi	r19, 0x00	; 0
    1b84:	81 e0       	ldi	r24, 0x01	; 1
    1b86:	90 e0       	ldi	r25, 0x00	; 0
    1b88:	02 2e       	mov	r0, r18
    1b8a:	02 c0       	rjmp	.+4      	; 0x1b90 <DIO_TogglePin+0xa6>
    1b8c:	88 0f       	add	r24, r24
    1b8e:	99 1f       	adc	r25, r25
    1b90:	0a 94       	dec	r0
    1b92:	e2 f7       	brpl	.-8      	; 0x1b8c <DIO_TogglePin+0xa2>
    1b94:	84 27       	eor	r24, r20
    1b96:	8c 93       	st	X, r24
            enu_ErrorState = DIO_E_PARAM_VALID;
    1b98:	19 82       	std	Y+1, r1	; 0x01
    1b9a:	2f c0       	rjmp	.+94     	; 0x1bfa <DIO_TogglePin+0x110>
            break;
        case DIO_PORTC:
        	TOGGLE_BIT(PORTC_DATA_R, enu_pinID);
    1b9c:	a5 e3       	ldi	r26, 0x35	; 53
    1b9e:	b0 e0       	ldi	r27, 0x00	; 0
    1ba0:	e5 e3       	ldi	r30, 0x35	; 53
    1ba2:	f0 e0       	ldi	r31, 0x00	; 0
    1ba4:	80 81       	ld	r24, Z
    1ba6:	48 2f       	mov	r20, r24
    1ba8:	8b 81       	ldd	r24, Y+3	; 0x03
    1baa:	28 2f       	mov	r18, r24
    1bac:	30 e0       	ldi	r19, 0x00	; 0
    1bae:	81 e0       	ldi	r24, 0x01	; 1
    1bb0:	90 e0       	ldi	r25, 0x00	; 0
    1bb2:	02 2e       	mov	r0, r18
    1bb4:	02 c0       	rjmp	.+4      	; 0x1bba <DIO_TogglePin+0xd0>
    1bb6:	88 0f       	add	r24, r24
    1bb8:	99 1f       	adc	r25, r25
    1bba:	0a 94       	dec	r0
    1bbc:	e2 f7       	brpl	.-8      	; 0x1bb6 <DIO_TogglePin+0xcc>
    1bbe:	84 27       	eor	r24, r20
    1bc0:	8c 93       	st	X, r24
            enu_ErrorState = DIO_E_PARAM_VALID;
    1bc2:	19 82       	std	Y+1, r1	; 0x01
    1bc4:	1a c0       	rjmp	.+52     	; 0x1bfa <DIO_TogglePin+0x110>
            break;
        case DIO_PORTD:
        	TOGGLE_BIT(PORTD_DATA_R, enu_pinID);
    1bc6:	a2 e3       	ldi	r26, 0x32	; 50
    1bc8:	b0 e0       	ldi	r27, 0x00	; 0
    1bca:	e2 e3       	ldi	r30, 0x32	; 50
    1bcc:	f0 e0       	ldi	r31, 0x00	; 0
    1bce:	80 81       	ld	r24, Z
    1bd0:	48 2f       	mov	r20, r24
    1bd2:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd4:	28 2f       	mov	r18, r24
    1bd6:	30 e0       	ldi	r19, 0x00	; 0
    1bd8:	81 e0       	ldi	r24, 0x01	; 1
    1bda:	90 e0       	ldi	r25, 0x00	; 0
    1bdc:	02 2e       	mov	r0, r18
    1bde:	02 c0       	rjmp	.+4      	; 0x1be4 <DIO_TogglePin+0xfa>
    1be0:	88 0f       	add	r24, r24
    1be2:	99 1f       	adc	r25, r25
    1be4:	0a 94       	dec	r0
    1be6:	e2 f7       	brpl	.-8      	; 0x1be0 <DIO_TogglePin+0xf6>
    1be8:	84 27       	eor	r24, r20
    1bea:	8c 93       	st	X, r24
            enu_ErrorState = DIO_E_PARAM_VALID;
    1bec:	19 82       	std	Y+1, r1	; 0x01
    1bee:	05 c0       	rjmp	.+10     	; 0x1bfa <DIO_TogglePin+0x110>
            break;
        default:
        	enu_ErrorState = E_NOT_OK;	/* Invalid port id */
    1bf0:	81 e0       	ldi	r24, 0x01	; 1
    1bf2:	89 83       	std	Y+1, r24	; 0x01
    1bf4:	02 c0       	rjmp	.+4      	; 0x1bfa <DIO_TogglePin+0x110>
            break;
        }
    }
    else
    {
    	enu_ErrorState = DIO_E_PARAM_INVALID_PIN_ID;	/* Invalid pin id */
    1bf6:	82 e0       	ldi	r24, 0x02	; 2
    1bf8:	89 83       	std	Y+1, r24	; 0x01
    }
    return enu_ErrorState;
    1bfa:	89 81       	ldd	r24, Y+1	; 0x01
}
    1bfc:	0f 90       	pop	r0
    1bfe:	0f 90       	pop	r0
    1c00:	0f 90       	pop	r0
    1c02:	0f 90       	pop	r0
    1c04:	0f 90       	pop	r0
    1c06:	cf 91       	pop	r28
    1c08:	df 91       	pop	r29
    1c0a:	08 95       	ret

00001c0c <LCD_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void LCD_init(void)
{
    1c0c:	df 93       	push	r29
    1c0e:	cf 93       	push	r28
    1c10:	cd b7       	in	r28, 0x3d	; 61
    1c12:	de b7       	in	r29, 0x3e	; 62
	LCD_CTRL_PORT_DIR |= (1<<E) | (1<<RS) | (1<<RW); /* Configure the control pins(E,RS,RW) as output pins */
    1c14:	aa e3       	ldi	r26, 0x3A	; 58
    1c16:	b0 e0       	ldi	r27, 0x00	; 0
    1c18:	ea e3       	ldi	r30, 0x3A	; 58
    1c1a:	f0 e0       	ldi	r31, 0x00	; 0
    1c1c:	80 81       	ld	r24, Z
    1c1e:	8e 60       	ori	r24, 0x0E	; 14
    1c20:	8c 93       	st	X, r24
	
	#if (DATA_BITS_MODE == 4)
		#ifdef UPPER_PORT_PINS
			LCD_DATA_PORT_DIR |= 0xF0; /* Configure the highest 4 bits of the data port as output pins */
    1c22:	aa e3       	ldi	r26, 0x3A	; 58
    1c24:	b0 e0       	ldi	r27, 0x00	; 0
    1c26:	ea e3       	ldi	r30, 0x3A	; 58
    1c28:	f0 e0       	ldi	r31, 0x00	; 0
    1c2a:	80 81       	ld	r24, Z
    1c2c:	80 6f       	ori	r24, 0xF0	; 240
    1c2e:	8c 93       	st	X, r24
		#else
			LCD_DATA_PORT_DIR |= 0x0F; /* Configure the lowest 4 bits of the data port as output pins */
		#endif		 
		LCD_sendCommand(FOUR_BITS_DATA_MODE); /* Initialize LCD in 4-bit mode */
    1c30:	82 e0       	ldi	r24, 0x02	; 2
    1c32:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <LCD_sendCommand>
		LCD_sendCommand(TWO_LINE_LCD_Four_BIT_MODE); /* Use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */
    1c36:	88 e2       	ldi	r24, 0x28	; 40
    1c38:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <LCD_sendCommand>
	#elif (DATA_BITS_MODE == 8)
		LCD_DATA_PORT_DIR = 0xFF; /* Configure the data port as output port */ 
		LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE); /* Use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
	#endif
	
	LCD_sendCommand(CURSOR_OFF); /* Cursor off */
    1c3c:	8c e0       	ldi	r24, 0x0C	; 12
    1c3e:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <LCD_sendCommand>
	LCD_sendCommand(CLEAR_COMMAND); /* Clear LCD at the beginning */
    1c42:	81 e0       	ldi	r24, 0x01	; 1
    1c44:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <LCD_sendCommand>
}
    1c48:	cf 91       	pop	r28
    1c4a:	df 91       	pop	r29
    1c4c:	08 95       	ret

00001c4e <LCD_sendCommand>:

void LCD_sendCommand(uint8_t command)
{
    1c4e:	0f 93       	push	r16
    1c50:	1f 93       	push	r17
    1c52:	df 93       	push	r29
    1c54:	cf 93       	push	r28
    1c56:	cd b7       	in	r28, 0x3d	; 61
    1c58:	de b7       	in	r29, 0x3e	; 62
    1c5a:	c3 56       	subi	r28, 0x63	; 99
    1c5c:	d0 40       	sbci	r29, 0x00	; 0
    1c5e:	0f b6       	in	r0, 0x3f	; 63
    1c60:	f8 94       	cli
    1c62:	de bf       	out	0x3e, r29	; 62
    1c64:	0f be       	out	0x3f, r0	; 63
    1c66:	cd bf       	out	0x3d, r28	; 61
    1c68:	fe 01       	movw	r30, r28
    1c6a:	ed 59       	subi	r30, 0x9D	; 157
    1c6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c6e:	80 83       	st	Z, r24
	CLEAR_BIT(LCD_CTRL_PORT,RS); /* Instruction Mode RS = 0 */
    1c70:	ab e3       	ldi	r26, 0x3B	; 59
    1c72:	b0 e0       	ldi	r27, 0x00	; 0
    1c74:	eb e3       	ldi	r30, 0x3B	; 59
    1c76:	f0 e0       	ldi	r31, 0x00	; 0
    1c78:	80 81       	ld	r24, Z
    1c7a:	8d 7f       	andi	r24, 0xFD	; 253
    1c7c:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* Write data to LCD so RW = 0 */
    1c7e:	ab e3       	ldi	r26, 0x3B	; 59
    1c80:	b0 e0       	ldi	r27, 0x00	; 0
    1c82:	eb e3       	ldi	r30, 0x3B	; 59
    1c84:	f0 e0       	ldi	r31, 0x00	; 0
    1c86:	80 81       	ld	r24, Z
    1c88:	8b 7f       	andi	r24, 0xFB	; 251
    1c8a:	8c 93       	st	X, r24
    1c8c:	fe 01       	movw	r30, r28
    1c8e:	e1 5a       	subi	r30, 0xA1	; 161
    1c90:	ff 4f       	sbci	r31, 0xFF	; 255
    1c92:	80 e0       	ldi	r24, 0x00	; 0
    1c94:	90 e0       	ldi	r25, 0x00	; 0
    1c96:	a0 e8       	ldi	r26, 0x80	; 128
    1c98:	bf e3       	ldi	r27, 0x3F	; 63
    1c9a:	80 83       	st	Z, r24
    1c9c:	91 83       	std	Z+1, r25	; 0x01
    1c9e:	a2 83       	std	Z+2, r26	; 0x02
    1ca0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ca2:	8e 01       	movw	r16, r28
    1ca4:	05 5a       	subi	r16, 0xA5	; 165
    1ca6:	1f 4f       	sbci	r17, 0xFF	; 255
    1ca8:	fe 01       	movw	r30, r28
    1caa:	e1 5a       	subi	r30, 0xA1	; 161
    1cac:	ff 4f       	sbci	r31, 0xFF	; 255
    1cae:	60 81       	ld	r22, Z
    1cb0:	71 81       	ldd	r23, Z+1	; 0x01
    1cb2:	82 81       	ldd	r24, Z+2	; 0x02
    1cb4:	93 81       	ldd	r25, Z+3	; 0x03
    1cb6:	20 e0       	ldi	r18, 0x00	; 0
    1cb8:	30 e0       	ldi	r19, 0x00	; 0
    1cba:	4a ef       	ldi	r20, 0xFA	; 250
    1cbc:	54 e4       	ldi	r21, 0x44	; 68
    1cbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cc2:	dc 01       	movw	r26, r24
    1cc4:	cb 01       	movw	r24, r22
    1cc6:	f8 01       	movw	r30, r16
    1cc8:	80 83       	st	Z, r24
    1cca:	91 83       	std	Z+1, r25	; 0x01
    1ccc:	a2 83       	std	Z+2, r26	; 0x02
    1cce:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1cd0:	fe 01       	movw	r30, r28
    1cd2:	e5 5a       	subi	r30, 0xA5	; 165
    1cd4:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd6:	60 81       	ld	r22, Z
    1cd8:	71 81       	ldd	r23, Z+1	; 0x01
    1cda:	82 81       	ldd	r24, Z+2	; 0x02
    1cdc:	93 81       	ldd	r25, Z+3	; 0x03
    1cde:	20 e0       	ldi	r18, 0x00	; 0
    1ce0:	30 e0       	ldi	r19, 0x00	; 0
    1ce2:	40 e8       	ldi	r20, 0x80	; 128
    1ce4:	5f e3       	ldi	r21, 0x3F	; 63
    1ce6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cea:	88 23       	and	r24, r24
    1cec:	44 f4       	brge	.+16     	; 0x1cfe <LCD_sendCommand+0xb0>
		__ticks = 1;
    1cee:	fe 01       	movw	r30, r28
    1cf0:	e7 5a       	subi	r30, 0xA7	; 167
    1cf2:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf4:	81 e0       	ldi	r24, 0x01	; 1
    1cf6:	90 e0       	ldi	r25, 0x00	; 0
    1cf8:	91 83       	std	Z+1, r25	; 0x01
    1cfa:	80 83       	st	Z, r24
    1cfc:	64 c0       	rjmp	.+200    	; 0x1dc6 <LCD_sendCommand+0x178>
	else if (__tmp > 65535)
    1cfe:	fe 01       	movw	r30, r28
    1d00:	e5 5a       	subi	r30, 0xA5	; 165
    1d02:	ff 4f       	sbci	r31, 0xFF	; 255
    1d04:	60 81       	ld	r22, Z
    1d06:	71 81       	ldd	r23, Z+1	; 0x01
    1d08:	82 81       	ldd	r24, Z+2	; 0x02
    1d0a:	93 81       	ldd	r25, Z+3	; 0x03
    1d0c:	20 e0       	ldi	r18, 0x00	; 0
    1d0e:	3f ef       	ldi	r19, 0xFF	; 255
    1d10:	4f e7       	ldi	r20, 0x7F	; 127
    1d12:	57 e4       	ldi	r21, 0x47	; 71
    1d14:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d18:	18 16       	cp	r1, r24
    1d1a:	0c f0       	brlt	.+2      	; 0x1d1e <LCD_sendCommand+0xd0>
    1d1c:	43 c0       	rjmp	.+134    	; 0x1da4 <LCD_sendCommand+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d1e:	fe 01       	movw	r30, r28
    1d20:	e1 5a       	subi	r30, 0xA1	; 161
    1d22:	ff 4f       	sbci	r31, 0xFF	; 255
    1d24:	60 81       	ld	r22, Z
    1d26:	71 81       	ldd	r23, Z+1	; 0x01
    1d28:	82 81       	ldd	r24, Z+2	; 0x02
    1d2a:	93 81       	ldd	r25, Z+3	; 0x03
    1d2c:	20 e0       	ldi	r18, 0x00	; 0
    1d2e:	30 e0       	ldi	r19, 0x00	; 0
    1d30:	40 e2       	ldi	r20, 0x20	; 32
    1d32:	51 e4       	ldi	r21, 0x41	; 65
    1d34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d38:	dc 01       	movw	r26, r24
    1d3a:	cb 01       	movw	r24, r22
    1d3c:	8e 01       	movw	r16, r28
    1d3e:	07 5a       	subi	r16, 0xA7	; 167
    1d40:	1f 4f       	sbci	r17, 0xFF	; 255
    1d42:	bc 01       	movw	r22, r24
    1d44:	cd 01       	movw	r24, r26
    1d46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d4a:	dc 01       	movw	r26, r24
    1d4c:	cb 01       	movw	r24, r22
    1d4e:	f8 01       	movw	r30, r16
    1d50:	91 83       	std	Z+1, r25	; 0x01
    1d52:	80 83       	st	Z, r24
    1d54:	1f c0       	rjmp	.+62     	; 0x1d94 <LCD_sendCommand+0x146>
    1d56:	fe 01       	movw	r30, r28
    1d58:	e9 5a       	subi	r30, 0xA9	; 169
    1d5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d5c:	88 ec       	ldi	r24, 0xC8	; 200
    1d5e:	90 e0       	ldi	r25, 0x00	; 0
    1d60:	91 83       	std	Z+1, r25	; 0x01
    1d62:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1d64:	fe 01       	movw	r30, r28
    1d66:	e9 5a       	subi	r30, 0xA9	; 169
    1d68:	ff 4f       	sbci	r31, 0xFF	; 255
    1d6a:	80 81       	ld	r24, Z
    1d6c:	91 81       	ldd	r25, Z+1	; 0x01
    1d6e:	01 97       	sbiw	r24, 0x01	; 1
    1d70:	f1 f7       	brne	.-4      	; 0x1d6e <LCD_sendCommand+0x120>
    1d72:	fe 01       	movw	r30, r28
    1d74:	e9 5a       	subi	r30, 0xA9	; 169
    1d76:	ff 4f       	sbci	r31, 0xFF	; 255
    1d78:	91 83       	std	Z+1, r25	; 0x01
    1d7a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d7c:	de 01       	movw	r26, r28
    1d7e:	a7 5a       	subi	r26, 0xA7	; 167
    1d80:	bf 4f       	sbci	r27, 0xFF	; 255
    1d82:	fe 01       	movw	r30, r28
    1d84:	e7 5a       	subi	r30, 0xA7	; 167
    1d86:	ff 4f       	sbci	r31, 0xFF	; 255
    1d88:	80 81       	ld	r24, Z
    1d8a:	91 81       	ldd	r25, Z+1	; 0x01
    1d8c:	01 97       	sbiw	r24, 0x01	; 1
    1d8e:	11 96       	adiw	r26, 0x01	; 1
    1d90:	9c 93       	st	X, r25
    1d92:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d94:	fe 01       	movw	r30, r28
    1d96:	e7 5a       	subi	r30, 0xA7	; 167
    1d98:	ff 4f       	sbci	r31, 0xFF	; 255
    1d9a:	80 81       	ld	r24, Z
    1d9c:	91 81       	ldd	r25, Z+1	; 0x01
    1d9e:	00 97       	sbiw	r24, 0x00	; 0
    1da0:	d1 f6       	brne	.-76     	; 0x1d56 <LCD_sendCommand+0x108>
    1da2:	27 c0       	rjmp	.+78     	; 0x1df2 <LCD_sendCommand+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1da4:	8e 01       	movw	r16, r28
    1da6:	07 5a       	subi	r16, 0xA7	; 167
    1da8:	1f 4f       	sbci	r17, 0xFF	; 255
    1daa:	fe 01       	movw	r30, r28
    1dac:	e5 5a       	subi	r30, 0xA5	; 165
    1dae:	ff 4f       	sbci	r31, 0xFF	; 255
    1db0:	60 81       	ld	r22, Z
    1db2:	71 81       	ldd	r23, Z+1	; 0x01
    1db4:	82 81       	ldd	r24, Z+2	; 0x02
    1db6:	93 81       	ldd	r25, Z+3	; 0x03
    1db8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dbc:	dc 01       	movw	r26, r24
    1dbe:	cb 01       	movw	r24, r22
    1dc0:	f8 01       	movw	r30, r16
    1dc2:	91 83       	std	Z+1, r25	; 0x01
    1dc4:	80 83       	st	Z, r24
    1dc6:	de 01       	movw	r26, r28
    1dc8:	ab 5a       	subi	r26, 0xAB	; 171
    1dca:	bf 4f       	sbci	r27, 0xFF	; 255
    1dcc:	fe 01       	movw	r30, r28
    1dce:	e7 5a       	subi	r30, 0xA7	; 167
    1dd0:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd2:	80 81       	ld	r24, Z
    1dd4:	91 81       	ldd	r25, Z+1	; 0x01
    1dd6:	8d 93       	st	X+, r24
    1dd8:	9c 93       	st	X, r25
    1dda:	fe 01       	movw	r30, r28
    1ddc:	eb 5a       	subi	r30, 0xAB	; 171
    1dde:	ff 4f       	sbci	r31, 0xFF	; 255
    1de0:	80 81       	ld	r24, Z
    1de2:	91 81       	ldd	r25, Z+1	; 0x01
    1de4:	01 97       	sbiw	r24, 0x01	; 1
    1de6:	f1 f7       	brne	.-4      	; 0x1de4 <LCD_sendCommand+0x196>
    1de8:	fe 01       	movw	r30, r28
    1dea:	eb 5a       	subi	r30, 0xAB	; 171
    1dec:	ff 4f       	sbci	r31, 0xFF	; 255
    1dee:	91 83       	std	Z+1, r25	; 0x01
    1df0:	80 83       	st	Z, r24
	_delay_ms(1); /* Delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E = 1 */
    1df2:	ab e3       	ldi	r26, 0x3B	; 59
    1df4:	b0 e0       	ldi	r27, 0x00	; 0
    1df6:	eb e3       	ldi	r30, 0x3B	; 59
    1df8:	f0 e0       	ldi	r31, 0x00	; 0
    1dfa:	80 81       	ld	r24, Z
    1dfc:	88 60       	ori	r24, 0x08	; 8
    1dfe:	8c 93       	st	X, r24
    1e00:	fe 01       	movw	r30, r28
    1e02:	ef 5a       	subi	r30, 0xAF	; 175
    1e04:	ff 4f       	sbci	r31, 0xFF	; 255
    1e06:	80 e0       	ldi	r24, 0x00	; 0
    1e08:	90 e0       	ldi	r25, 0x00	; 0
    1e0a:	a0 e8       	ldi	r26, 0x80	; 128
    1e0c:	bf e3       	ldi	r27, 0x3F	; 63
    1e0e:	80 83       	st	Z, r24
    1e10:	91 83       	std	Z+1, r25	; 0x01
    1e12:	a2 83       	std	Z+2, r26	; 0x02
    1e14:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e16:	8e 01       	movw	r16, r28
    1e18:	03 5b       	subi	r16, 0xB3	; 179
    1e1a:	1f 4f       	sbci	r17, 0xFF	; 255
    1e1c:	fe 01       	movw	r30, r28
    1e1e:	ef 5a       	subi	r30, 0xAF	; 175
    1e20:	ff 4f       	sbci	r31, 0xFF	; 255
    1e22:	60 81       	ld	r22, Z
    1e24:	71 81       	ldd	r23, Z+1	; 0x01
    1e26:	82 81       	ldd	r24, Z+2	; 0x02
    1e28:	93 81       	ldd	r25, Z+3	; 0x03
    1e2a:	20 e0       	ldi	r18, 0x00	; 0
    1e2c:	30 e0       	ldi	r19, 0x00	; 0
    1e2e:	4a ef       	ldi	r20, 0xFA	; 250
    1e30:	54 e4       	ldi	r21, 0x44	; 68
    1e32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e36:	dc 01       	movw	r26, r24
    1e38:	cb 01       	movw	r24, r22
    1e3a:	f8 01       	movw	r30, r16
    1e3c:	80 83       	st	Z, r24
    1e3e:	91 83       	std	Z+1, r25	; 0x01
    1e40:	a2 83       	std	Z+2, r26	; 0x02
    1e42:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e44:	fe 01       	movw	r30, r28
    1e46:	e3 5b       	subi	r30, 0xB3	; 179
    1e48:	ff 4f       	sbci	r31, 0xFF	; 255
    1e4a:	60 81       	ld	r22, Z
    1e4c:	71 81       	ldd	r23, Z+1	; 0x01
    1e4e:	82 81       	ldd	r24, Z+2	; 0x02
    1e50:	93 81       	ldd	r25, Z+3	; 0x03
    1e52:	20 e0       	ldi	r18, 0x00	; 0
    1e54:	30 e0       	ldi	r19, 0x00	; 0
    1e56:	40 e8       	ldi	r20, 0x80	; 128
    1e58:	5f e3       	ldi	r21, 0x3F	; 63
    1e5a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e5e:	88 23       	and	r24, r24
    1e60:	44 f4       	brge	.+16     	; 0x1e72 <LCD_sendCommand+0x224>
		__ticks = 1;
    1e62:	fe 01       	movw	r30, r28
    1e64:	e5 5b       	subi	r30, 0xB5	; 181
    1e66:	ff 4f       	sbci	r31, 0xFF	; 255
    1e68:	81 e0       	ldi	r24, 0x01	; 1
    1e6a:	90 e0       	ldi	r25, 0x00	; 0
    1e6c:	91 83       	std	Z+1, r25	; 0x01
    1e6e:	80 83       	st	Z, r24
    1e70:	64 c0       	rjmp	.+200    	; 0x1f3a <LCD_sendCommand+0x2ec>
	else if (__tmp > 65535)
    1e72:	fe 01       	movw	r30, r28
    1e74:	e3 5b       	subi	r30, 0xB3	; 179
    1e76:	ff 4f       	sbci	r31, 0xFF	; 255
    1e78:	60 81       	ld	r22, Z
    1e7a:	71 81       	ldd	r23, Z+1	; 0x01
    1e7c:	82 81       	ldd	r24, Z+2	; 0x02
    1e7e:	93 81       	ldd	r25, Z+3	; 0x03
    1e80:	20 e0       	ldi	r18, 0x00	; 0
    1e82:	3f ef       	ldi	r19, 0xFF	; 255
    1e84:	4f e7       	ldi	r20, 0x7F	; 127
    1e86:	57 e4       	ldi	r21, 0x47	; 71
    1e88:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e8c:	18 16       	cp	r1, r24
    1e8e:	0c f0       	brlt	.+2      	; 0x1e92 <LCD_sendCommand+0x244>
    1e90:	43 c0       	rjmp	.+134    	; 0x1f18 <LCD_sendCommand+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e92:	fe 01       	movw	r30, r28
    1e94:	ef 5a       	subi	r30, 0xAF	; 175
    1e96:	ff 4f       	sbci	r31, 0xFF	; 255
    1e98:	60 81       	ld	r22, Z
    1e9a:	71 81       	ldd	r23, Z+1	; 0x01
    1e9c:	82 81       	ldd	r24, Z+2	; 0x02
    1e9e:	93 81       	ldd	r25, Z+3	; 0x03
    1ea0:	20 e0       	ldi	r18, 0x00	; 0
    1ea2:	30 e0       	ldi	r19, 0x00	; 0
    1ea4:	40 e2       	ldi	r20, 0x20	; 32
    1ea6:	51 e4       	ldi	r21, 0x41	; 65
    1ea8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eac:	dc 01       	movw	r26, r24
    1eae:	cb 01       	movw	r24, r22
    1eb0:	8e 01       	movw	r16, r28
    1eb2:	05 5b       	subi	r16, 0xB5	; 181
    1eb4:	1f 4f       	sbci	r17, 0xFF	; 255
    1eb6:	bc 01       	movw	r22, r24
    1eb8:	cd 01       	movw	r24, r26
    1eba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ebe:	dc 01       	movw	r26, r24
    1ec0:	cb 01       	movw	r24, r22
    1ec2:	f8 01       	movw	r30, r16
    1ec4:	91 83       	std	Z+1, r25	; 0x01
    1ec6:	80 83       	st	Z, r24
    1ec8:	1f c0       	rjmp	.+62     	; 0x1f08 <LCD_sendCommand+0x2ba>
    1eca:	fe 01       	movw	r30, r28
    1ecc:	e7 5b       	subi	r30, 0xB7	; 183
    1ece:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed0:	88 ec       	ldi	r24, 0xC8	; 200
    1ed2:	90 e0       	ldi	r25, 0x00	; 0
    1ed4:	91 83       	std	Z+1, r25	; 0x01
    1ed6:	80 83       	st	Z, r24
    1ed8:	fe 01       	movw	r30, r28
    1eda:	e7 5b       	subi	r30, 0xB7	; 183
    1edc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ede:	80 81       	ld	r24, Z
    1ee0:	91 81       	ldd	r25, Z+1	; 0x01
    1ee2:	01 97       	sbiw	r24, 0x01	; 1
    1ee4:	f1 f7       	brne	.-4      	; 0x1ee2 <LCD_sendCommand+0x294>
    1ee6:	fe 01       	movw	r30, r28
    1ee8:	e7 5b       	subi	r30, 0xB7	; 183
    1eea:	ff 4f       	sbci	r31, 0xFF	; 255
    1eec:	91 83       	std	Z+1, r25	; 0x01
    1eee:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ef0:	de 01       	movw	r26, r28
    1ef2:	a5 5b       	subi	r26, 0xB5	; 181
    1ef4:	bf 4f       	sbci	r27, 0xFF	; 255
    1ef6:	fe 01       	movw	r30, r28
    1ef8:	e5 5b       	subi	r30, 0xB5	; 181
    1efa:	ff 4f       	sbci	r31, 0xFF	; 255
    1efc:	80 81       	ld	r24, Z
    1efe:	91 81       	ldd	r25, Z+1	; 0x01
    1f00:	01 97       	sbiw	r24, 0x01	; 1
    1f02:	11 96       	adiw	r26, 0x01	; 1
    1f04:	9c 93       	st	X, r25
    1f06:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f08:	fe 01       	movw	r30, r28
    1f0a:	e5 5b       	subi	r30, 0xB5	; 181
    1f0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f0e:	80 81       	ld	r24, Z
    1f10:	91 81       	ldd	r25, Z+1	; 0x01
    1f12:	00 97       	sbiw	r24, 0x00	; 0
    1f14:	d1 f6       	brne	.-76     	; 0x1eca <LCD_sendCommand+0x27c>
    1f16:	27 c0       	rjmp	.+78     	; 0x1f66 <LCD_sendCommand+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f18:	8e 01       	movw	r16, r28
    1f1a:	05 5b       	subi	r16, 0xB5	; 181
    1f1c:	1f 4f       	sbci	r17, 0xFF	; 255
    1f1e:	fe 01       	movw	r30, r28
    1f20:	e3 5b       	subi	r30, 0xB3	; 179
    1f22:	ff 4f       	sbci	r31, 0xFF	; 255
    1f24:	60 81       	ld	r22, Z
    1f26:	71 81       	ldd	r23, Z+1	; 0x01
    1f28:	82 81       	ldd	r24, Z+2	; 0x02
    1f2a:	93 81       	ldd	r25, Z+3	; 0x03
    1f2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f30:	dc 01       	movw	r26, r24
    1f32:	cb 01       	movw	r24, r22
    1f34:	f8 01       	movw	r30, r16
    1f36:	91 83       	std	Z+1, r25	; 0x01
    1f38:	80 83       	st	Z, r24
    1f3a:	de 01       	movw	r26, r28
    1f3c:	a9 5b       	subi	r26, 0xB9	; 185
    1f3e:	bf 4f       	sbci	r27, 0xFF	; 255
    1f40:	fe 01       	movw	r30, r28
    1f42:	e5 5b       	subi	r30, 0xB5	; 181
    1f44:	ff 4f       	sbci	r31, 0xFF	; 255
    1f46:	80 81       	ld	r24, Z
    1f48:	91 81       	ldd	r25, Z+1	; 0x01
    1f4a:	8d 93       	st	X+, r24
    1f4c:	9c 93       	st	X, r25
    1f4e:	fe 01       	movw	r30, r28
    1f50:	e9 5b       	subi	r30, 0xB9	; 185
    1f52:	ff 4f       	sbci	r31, 0xFF	; 255
    1f54:	80 81       	ld	r24, Z
    1f56:	91 81       	ldd	r25, Z+1	; 0x01
    1f58:	01 97       	sbiw	r24, 0x01	; 1
    1f5a:	f1 f7       	brne	.-4      	; 0x1f58 <LCD_sendCommand+0x30a>
    1f5c:	fe 01       	movw	r30, r28
    1f5e:	e9 5b       	subi	r30, 0xB9	; 185
    1f60:	ff 4f       	sbci	r31, 0xFF	; 255
    1f62:	91 83       	std	Z+1, r25	; 0x01
    1f64:	80 83       	st	Z, r24
	_delay_ms(1); /* Delay for processing Tpw - Tdws = 190ns */
#if (DATA_BITS_MODE == 4)
	/* Out the highest 4 bits of the required command to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (command & 0xF0);
    1f66:	ab e3       	ldi	r26, 0x3B	; 59
    1f68:	b0 e0       	ldi	r27, 0x00	; 0
    1f6a:	eb e3       	ldi	r30, 0x3B	; 59
    1f6c:	f0 e0       	ldi	r31, 0x00	; 0
    1f6e:	80 81       	ld	r24, Z
    1f70:	98 2f       	mov	r25, r24
    1f72:	9f 70       	andi	r25, 0x0F	; 15
    1f74:	fe 01       	movw	r30, r28
    1f76:	ed 59       	subi	r30, 0x9D	; 157
    1f78:	ff 4f       	sbci	r31, 0xFF	; 255
    1f7a:	80 81       	ld	r24, Z
    1f7c:	80 7f       	andi	r24, 0xF0	; 240
    1f7e:	89 2b       	or	r24, r25
    1f80:	8c 93       	st	X, r24
    1f82:	fe 01       	movw	r30, r28
    1f84:	ed 5b       	subi	r30, 0xBD	; 189
    1f86:	ff 4f       	sbci	r31, 0xFF	; 255
    1f88:	80 e0       	ldi	r24, 0x00	; 0
    1f8a:	90 e0       	ldi	r25, 0x00	; 0
    1f8c:	a0 e8       	ldi	r26, 0x80	; 128
    1f8e:	bf e3       	ldi	r27, 0x3F	; 63
    1f90:	80 83       	st	Z, r24
    1f92:	91 83       	std	Z+1, r25	; 0x01
    1f94:	a2 83       	std	Z+2, r26	; 0x02
    1f96:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f98:	8e 01       	movw	r16, r28
    1f9a:	01 5c       	subi	r16, 0xC1	; 193
    1f9c:	1f 4f       	sbci	r17, 0xFF	; 255
    1f9e:	fe 01       	movw	r30, r28
    1fa0:	ed 5b       	subi	r30, 0xBD	; 189
    1fa2:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa4:	60 81       	ld	r22, Z
    1fa6:	71 81       	ldd	r23, Z+1	; 0x01
    1fa8:	82 81       	ldd	r24, Z+2	; 0x02
    1faa:	93 81       	ldd	r25, Z+3	; 0x03
    1fac:	20 e0       	ldi	r18, 0x00	; 0
    1fae:	30 e0       	ldi	r19, 0x00	; 0
    1fb0:	4a ef       	ldi	r20, 0xFA	; 250
    1fb2:	54 e4       	ldi	r21, 0x44	; 68
    1fb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fb8:	dc 01       	movw	r26, r24
    1fba:	cb 01       	movw	r24, r22
    1fbc:	f8 01       	movw	r30, r16
    1fbe:	80 83       	st	Z, r24
    1fc0:	91 83       	std	Z+1, r25	; 0x01
    1fc2:	a2 83       	std	Z+2, r26	; 0x02
    1fc4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1fc6:	fe 01       	movw	r30, r28
    1fc8:	ff 96       	adiw	r30, 0x3f	; 63
    1fca:	60 81       	ld	r22, Z
    1fcc:	71 81       	ldd	r23, Z+1	; 0x01
    1fce:	82 81       	ldd	r24, Z+2	; 0x02
    1fd0:	93 81       	ldd	r25, Z+3	; 0x03
    1fd2:	20 e0       	ldi	r18, 0x00	; 0
    1fd4:	30 e0       	ldi	r19, 0x00	; 0
    1fd6:	40 e8       	ldi	r20, 0x80	; 128
    1fd8:	5f e3       	ldi	r21, 0x3F	; 63
    1fda:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fde:	88 23       	and	r24, r24
    1fe0:	2c f4       	brge	.+10     	; 0x1fec <LCD_sendCommand+0x39e>
		__ticks = 1;
    1fe2:	81 e0       	ldi	r24, 0x01	; 1
    1fe4:	90 e0       	ldi	r25, 0x00	; 0
    1fe6:	9e af       	std	Y+62, r25	; 0x3e
    1fe8:	8d af       	std	Y+61, r24	; 0x3d
    1fea:	46 c0       	rjmp	.+140    	; 0x2078 <LCD_sendCommand+0x42a>
	else if (__tmp > 65535)
    1fec:	fe 01       	movw	r30, r28
    1fee:	ff 96       	adiw	r30, 0x3f	; 63
    1ff0:	60 81       	ld	r22, Z
    1ff2:	71 81       	ldd	r23, Z+1	; 0x01
    1ff4:	82 81       	ldd	r24, Z+2	; 0x02
    1ff6:	93 81       	ldd	r25, Z+3	; 0x03
    1ff8:	20 e0       	ldi	r18, 0x00	; 0
    1ffa:	3f ef       	ldi	r19, 0xFF	; 255
    1ffc:	4f e7       	ldi	r20, 0x7F	; 127
    1ffe:	57 e4       	ldi	r21, 0x47	; 71
    2000:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2004:	18 16       	cp	r1, r24
    2006:	64 f5       	brge	.+88     	; 0x2060 <LCD_sendCommand+0x412>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2008:	fe 01       	movw	r30, r28
    200a:	ed 5b       	subi	r30, 0xBD	; 189
    200c:	ff 4f       	sbci	r31, 0xFF	; 255
    200e:	60 81       	ld	r22, Z
    2010:	71 81       	ldd	r23, Z+1	; 0x01
    2012:	82 81       	ldd	r24, Z+2	; 0x02
    2014:	93 81       	ldd	r25, Z+3	; 0x03
    2016:	20 e0       	ldi	r18, 0x00	; 0
    2018:	30 e0       	ldi	r19, 0x00	; 0
    201a:	40 e2       	ldi	r20, 0x20	; 32
    201c:	51 e4       	ldi	r21, 0x41	; 65
    201e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2022:	dc 01       	movw	r26, r24
    2024:	cb 01       	movw	r24, r22
    2026:	bc 01       	movw	r22, r24
    2028:	cd 01       	movw	r24, r26
    202a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    202e:	dc 01       	movw	r26, r24
    2030:	cb 01       	movw	r24, r22
    2032:	9e af       	std	Y+62, r25	; 0x3e
    2034:	8d af       	std	Y+61, r24	; 0x3d
    2036:	0f c0       	rjmp	.+30     	; 0x2056 <LCD_sendCommand+0x408>
    2038:	88 ec       	ldi	r24, 0xC8	; 200
    203a:	90 e0       	ldi	r25, 0x00	; 0
    203c:	9c af       	std	Y+60, r25	; 0x3c
    203e:	8b af       	std	Y+59, r24	; 0x3b
    2040:	8b ad       	ldd	r24, Y+59	; 0x3b
    2042:	9c ad       	ldd	r25, Y+60	; 0x3c
    2044:	01 97       	sbiw	r24, 0x01	; 1
    2046:	f1 f7       	brne	.-4      	; 0x2044 <LCD_sendCommand+0x3f6>
    2048:	9c af       	std	Y+60, r25	; 0x3c
    204a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    204c:	8d ad       	ldd	r24, Y+61	; 0x3d
    204e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2050:	01 97       	sbiw	r24, 0x01	; 1
    2052:	9e af       	std	Y+62, r25	; 0x3e
    2054:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2056:	8d ad       	ldd	r24, Y+61	; 0x3d
    2058:	9e ad       	ldd	r25, Y+62	; 0x3e
    205a:	00 97       	sbiw	r24, 0x00	; 0
    205c:	69 f7       	brne	.-38     	; 0x2038 <LCD_sendCommand+0x3ea>
    205e:	16 c0       	rjmp	.+44     	; 0x208c <LCD_sendCommand+0x43e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2060:	fe 01       	movw	r30, r28
    2062:	ff 96       	adiw	r30, 0x3f	; 63
    2064:	60 81       	ld	r22, Z
    2066:	71 81       	ldd	r23, Z+1	; 0x01
    2068:	82 81       	ldd	r24, Z+2	; 0x02
    206a:	93 81       	ldd	r25, Z+3	; 0x03
    206c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2070:	dc 01       	movw	r26, r24
    2072:	cb 01       	movw	r24, r22
    2074:	9e af       	std	Y+62, r25	; 0x3e
    2076:	8d af       	std	Y+61, r24	; 0x3d
    2078:	8d ad       	ldd	r24, Y+61	; 0x3d
    207a:	9e ad       	ldd	r25, Y+62	; 0x3e
    207c:	9a af       	std	Y+58, r25	; 0x3a
    207e:	89 af       	std	Y+57, r24	; 0x39
    2080:	89 ad       	ldd	r24, Y+57	; 0x39
    2082:	9a ad       	ldd	r25, Y+58	; 0x3a
    2084:	01 97       	sbiw	r24, 0x01	; 1
    2086:	f1 f7       	brne	.-4      	; 0x2084 <LCD_sendCommand+0x436>
    2088:	9a af       	std	Y+58, r25	; 0x3a
    208a:	89 af       	std	Y+57, r24	; 0x39
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | ((command & 0xF0) >> 4);
#endif

	_delay_ms(1); /* Delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E = 0 */
    208c:	ab e3       	ldi	r26, 0x3B	; 59
    208e:	b0 e0       	ldi	r27, 0x00	; 0
    2090:	eb e3       	ldi	r30, 0x3B	; 59
    2092:	f0 e0       	ldi	r31, 0x00	; 0
    2094:	80 81       	ld	r24, Z
    2096:	87 7f       	andi	r24, 0xF7	; 247
    2098:	8c 93       	st	X, r24
    209a:	80 e0       	ldi	r24, 0x00	; 0
    209c:	90 e0       	ldi	r25, 0x00	; 0
    209e:	a0 e8       	ldi	r26, 0x80	; 128
    20a0:	bf e3       	ldi	r27, 0x3F	; 63
    20a2:	8d ab       	std	Y+53, r24	; 0x35
    20a4:	9e ab       	std	Y+54, r25	; 0x36
    20a6:	af ab       	std	Y+55, r26	; 0x37
    20a8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20aa:	6d a9       	ldd	r22, Y+53	; 0x35
    20ac:	7e a9       	ldd	r23, Y+54	; 0x36
    20ae:	8f a9       	ldd	r24, Y+55	; 0x37
    20b0:	98 ad       	ldd	r25, Y+56	; 0x38
    20b2:	20 e0       	ldi	r18, 0x00	; 0
    20b4:	30 e0       	ldi	r19, 0x00	; 0
    20b6:	4a ef       	ldi	r20, 0xFA	; 250
    20b8:	54 e4       	ldi	r21, 0x44	; 68
    20ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20be:	dc 01       	movw	r26, r24
    20c0:	cb 01       	movw	r24, r22
    20c2:	89 ab       	std	Y+49, r24	; 0x31
    20c4:	9a ab       	std	Y+50, r25	; 0x32
    20c6:	ab ab       	std	Y+51, r26	; 0x33
    20c8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    20ca:	69 a9       	ldd	r22, Y+49	; 0x31
    20cc:	7a a9       	ldd	r23, Y+50	; 0x32
    20ce:	8b a9       	ldd	r24, Y+51	; 0x33
    20d0:	9c a9       	ldd	r25, Y+52	; 0x34
    20d2:	20 e0       	ldi	r18, 0x00	; 0
    20d4:	30 e0       	ldi	r19, 0x00	; 0
    20d6:	40 e8       	ldi	r20, 0x80	; 128
    20d8:	5f e3       	ldi	r21, 0x3F	; 63
    20da:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20de:	88 23       	and	r24, r24
    20e0:	2c f4       	brge	.+10     	; 0x20ec <LCD_sendCommand+0x49e>
		__ticks = 1;
    20e2:	81 e0       	ldi	r24, 0x01	; 1
    20e4:	90 e0       	ldi	r25, 0x00	; 0
    20e6:	98 ab       	std	Y+48, r25	; 0x30
    20e8:	8f a7       	std	Y+47, r24	; 0x2f
    20ea:	3f c0       	rjmp	.+126    	; 0x216a <LCD_sendCommand+0x51c>
	else if (__tmp > 65535)
    20ec:	69 a9       	ldd	r22, Y+49	; 0x31
    20ee:	7a a9       	ldd	r23, Y+50	; 0x32
    20f0:	8b a9       	ldd	r24, Y+51	; 0x33
    20f2:	9c a9       	ldd	r25, Y+52	; 0x34
    20f4:	20 e0       	ldi	r18, 0x00	; 0
    20f6:	3f ef       	ldi	r19, 0xFF	; 255
    20f8:	4f e7       	ldi	r20, 0x7F	; 127
    20fa:	57 e4       	ldi	r21, 0x47	; 71
    20fc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2100:	18 16       	cp	r1, r24
    2102:	4c f5       	brge	.+82     	; 0x2156 <LCD_sendCommand+0x508>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2104:	6d a9       	ldd	r22, Y+53	; 0x35
    2106:	7e a9       	ldd	r23, Y+54	; 0x36
    2108:	8f a9       	ldd	r24, Y+55	; 0x37
    210a:	98 ad       	ldd	r25, Y+56	; 0x38
    210c:	20 e0       	ldi	r18, 0x00	; 0
    210e:	30 e0       	ldi	r19, 0x00	; 0
    2110:	40 e2       	ldi	r20, 0x20	; 32
    2112:	51 e4       	ldi	r21, 0x41	; 65
    2114:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2118:	dc 01       	movw	r26, r24
    211a:	cb 01       	movw	r24, r22
    211c:	bc 01       	movw	r22, r24
    211e:	cd 01       	movw	r24, r26
    2120:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2124:	dc 01       	movw	r26, r24
    2126:	cb 01       	movw	r24, r22
    2128:	98 ab       	std	Y+48, r25	; 0x30
    212a:	8f a7       	std	Y+47, r24	; 0x2f
    212c:	0f c0       	rjmp	.+30     	; 0x214c <LCD_sendCommand+0x4fe>
    212e:	88 ec       	ldi	r24, 0xC8	; 200
    2130:	90 e0       	ldi	r25, 0x00	; 0
    2132:	9e a7       	std	Y+46, r25	; 0x2e
    2134:	8d a7       	std	Y+45, r24	; 0x2d
    2136:	8d a5       	ldd	r24, Y+45	; 0x2d
    2138:	9e a5       	ldd	r25, Y+46	; 0x2e
    213a:	01 97       	sbiw	r24, 0x01	; 1
    213c:	f1 f7       	brne	.-4      	; 0x213a <LCD_sendCommand+0x4ec>
    213e:	9e a7       	std	Y+46, r25	; 0x2e
    2140:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2142:	8f a5       	ldd	r24, Y+47	; 0x2f
    2144:	98 a9       	ldd	r25, Y+48	; 0x30
    2146:	01 97       	sbiw	r24, 0x01	; 1
    2148:	98 ab       	std	Y+48, r25	; 0x30
    214a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    214c:	8f a5       	ldd	r24, Y+47	; 0x2f
    214e:	98 a9       	ldd	r25, Y+48	; 0x30
    2150:	00 97       	sbiw	r24, 0x00	; 0
    2152:	69 f7       	brne	.-38     	; 0x212e <LCD_sendCommand+0x4e0>
    2154:	14 c0       	rjmp	.+40     	; 0x217e <LCD_sendCommand+0x530>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2156:	69 a9       	ldd	r22, Y+49	; 0x31
    2158:	7a a9       	ldd	r23, Y+50	; 0x32
    215a:	8b a9       	ldd	r24, Y+51	; 0x33
    215c:	9c a9       	ldd	r25, Y+52	; 0x34
    215e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2162:	dc 01       	movw	r26, r24
    2164:	cb 01       	movw	r24, r22
    2166:	98 ab       	std	Y+48, r25	; 0x30
    2168:	8f a7       	std	Y+47, r24	; 0x2f
    216a:	8f a5       	ldd	r24, Y+47	; 0x2f
    216c:	98 a9       	ldd	r25, Y+48	; 0x30
    216e:	9c a7       	std	Y+44, r25	; 0x2c
    2170:	8b a7       	std	Y+43, r24	; 0x2b
    2172:	8b a5       	ldd	r24, Y+43	; 0x2b
    2174:	9c a5       	ldd	r25, Y+44	; 0x2c
    2176:	01 97       	sbiw	r24, 0x01	; 1
    2178:	f1 f7       	brne	.-4      	; 0x2176 <LCD_sendCommand+0x528>
    217a:	9c a7       	std	Y+44, r25	; 0x2c
    217c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* Delay for processing Th = 13ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E = 1 */
    217e:	ab e3       	ldi	r26, 0x3B	; 59
    2180:	b0 e0       	ldi	r27, 0x00	; 0
    2182:	eb e3       	ldi	r30, 0x3B	; 59
    2184:	f0 e0       	ldi	r31, 0x00	; 0
    2186:	80 81       	ld	r24, Z
    2188:	88 60       	ori	r24, 0x08	; 8
    218a:	8c 93       	st	X, r24
    218c:	80 e0       	ldi	r24, 0x00	; 0
    218e:	90 e0       	ldi	r25, 0x00	; 0
    2190:	a0 e8       	ldi	r26, 0x80	; 128
    2192:	bf e3       	ldi	r27, 0x3F	; 63
    2194:	8f a3       	std	Y+39, r24	; 0x27
    2196:	98 a7       	std	Y+40, r25	; 0x28
    2198:	a9 a7       	std	Y+41, r26	; 0x29
    219a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    219c:	6f a1       	ldd	r22, Y+39	; 0x27
    219e:	78 a5       	ldd	r23, Y+40	; 0x28
    21a0:	89 a5       	ldd	r24, Y+41	; 0x29
    21a2:	9a a5       	ldd	r25, Y+42	; 0x2a
    21a4:	20 e0       	ldi	r18, 0x00	; 0
    21a6:	30 e0       	ldi	r19, 0x00	; 0
    21a8:	4a ef       	ldi	r20, 0xFA	; 250
    21aa:	54 e4       	ldi	r21, 0x44	; 68
    21ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21b0:	dc 01       	movw	r26, r24
    21b2:	cb 01       	movw	r24, r22
    21b4:	8b a3       	std	Y+35, r24	; 0x23
    21b6:	9c a3       	std	Y+36, r25	; 0x24
    21b8:	ad a3       	std	Y+37, r26	; 0x25
    21ba:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    21bc:	6b a1       	ldd	r22, Y+35	; 0x23
    21be:	7c a1       	ldd	r23, Y+36	; 0x24
    21c0:	8d a1       	ldd	r24, Y+37	; 0x25
    21c2:	9e a1       	ldd	r25, Y+38	; 0x26
    21c4:	20 e0       	ldi	r18, 0x00	; 0
    21c6:	30 e0       	ldi	r19, 0x00	; 0
    21c8:	40 e8       	ldi	r20, 0x80	; 128
    21ca:	5f e3       	ldi	r21, 0x3F	; 63
    21cc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21d0:	88 23       	and	r24, r24
    21d2:	2c f4       	brge	.+10     	; 0x21de <LCD_sendCommand+0x590>
		__ticks = 1;
    21d4:	81 e0       	ldi	r24, 0x01	; 1
    21d6:	90 e0       	ldi	r25, 0x00	; 0
    21d8:	9a a3       	std	Y+34, r25	; 0x22
    21da:	89 a3       	std	Y+33, r24	; 0x21
    21dc:	3f c0       	rjmp	.+126    	; 0x225c <LCD_sendCommand+0x60e>
	else if (__tmp > 65535)
    21de:	6b a1       	ldd	r22, Y+35	; 0x23
    21e0:	7c a1       	ldd	r23, Y+36	; 0x24
    21e2:	8d a1       	ldd	r24, Y+37	; 0x25
    21e4:	9e a1       	ldd	r25, Y+38	; 0x26
    21e6:	20 e0       	ldi	r18, 0x00	; 0
    21e8:	3f ef       	ldi	r19, 0xFF	; 255
    21ea:	4f e7       	ldi	r20, 0x7F	; 127
    21ec:	57 e4       	ldi	r21, 0x47	; 71
    21ee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21f2:	18 16       	cp	r1, r24
    21f4:	4c f5       	brge	.+82     	; 0x2248 <LCD_sendCommand+0x5fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21f6:	6f a1       	ldd	r22, Y+39	; 0x27
    21f8:	78 a5       	ldd	r23, Y+40	; 0x28
    21fa:	89 a5       	ldd	r24, Y+41	; 0x29
    21fc:	9a a5       	ldd	r25, Y+42	; 0x2a
    21fe:	20 e0       	ldi	r18, 0x00	; 0
    2200:	30 e0       	ldi	r19, 0x00	; 0
    2202:	40 e2       	ldi	r20, 0x20	; 32
    2204:	51 e4       	ldi	r21, 0x41	; 65
    2206:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    220a:	dc 01       	movw	r26, r24
    220c:	cb 01       	movw	r24, r22
    220e:	bc 01       	movw	r22, r24
    2210:	cd 01       	movw	r24, r26
    2212:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2216:	dc 01       	movw	r26, r24
    2218:	cb 01       	movw	r24, r22
    221a:	9a a3       	std	Y+34, r25	; 0x22
    221c:	89 a3       	std	Y+33, r24	; 0x21
    221e:	0f c0       	rjmp	.+30     	; 0x223e <LCD_sendCommand+0x5f0>
    2220:	88 ec       	ldi	r24, 0xC8	; 200
    2222:	90 e0       	ldi	r25, 0x00	; 0
    2224:	98 a3       	std	Y+32, r25	; 0x20
    2226:	8f 8f       	std	Y+31, r24	; 0x1f
    2228:	8f 8d       	ldd	r24, Y+31	; 0x1f
    222a:	98 a1       	ldd	r25, Y+32	; 0x20
    222c:	01 97       	sbiw	r24, 0x01	; 1
    222e:	f1 f7       	brne	.-4      	; 0x222c <LCD_sendCommand+0x5de>
    2230:	98 a3       	std	Y+32, r25	; 0x20
    2232:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2234:	89 a1       	ldd	r24, Y+33	; 0x21
    2236:	9a a1       	ldd	r25, Y+34	; 0x22
    2238:	01 97       	sbiw	r24, 0x01	; 1
    223a:	9a a3       	std	Y+34, r25	; 0x22
    223c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    223e:	89 a1       	ldd	r24, Y+33	; 0x21
    2240:	9a a1       	ldd	r25, Y+34	; 0x22
    2242:	00 97       	sbiw	r24, 0x00	; 0
    2244:	69 f7       	brne	.-38     	; 0x2220 <LCD_sendCommand+0x5d2>
    2246:	14 c0       	rjmp	.+40     	; 0x2270 <LCD_sendCommand+0x622>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2248:	6b a1       	ldd	r22, Y+35	; 0x23
    224a:	7c a1       	ldd	r23, Y+36	; 0x24
    224c:	8d a1       	ldd	r24, Y+37	; 0x25
    224e:	9e a1       	ldd	r25, Y+38	; 0x26
    2250:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2254:	dc 01       	movw	r26, r24
    2256:	cb 01       	movw	r24, r22
    2258:	9a a3       	std	Y+34, r25	; 0x22
    225a:	89 a3       	std	Y+33, r24	; 0x21
    225c:	89 a1       	ldd	r24, Y+33	; 0x21
    225e:	9a a1       	ldd	r25, Y+34	; 0x22
    2260:	9e 8f       	std	Y+30, r25	; 0x1e
    2262:	8d 8f       	std	Y+29, r24	; 0x1d
    2264:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2266:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2268:	01 97       	sbiw	r24, 0x01	; 1
    226a:	f1 f7       	brne	.-4      	; 0x2268 <LCD_sendCommand+0x61a>
    226c:	9e 8f       	std	Y+30, r25	; 0x1e
    226e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* Delay for processing Tpw - Tdws = 190ns */

	/* Out the lowest 4 bits of the required command to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | ((command & 0x0F) << 4);
    2270:	ab e3       	ldi	r26, 0x3B	; 59
    2272:	b0 e0       	ldi	r27, 0x00	; 0
    2274:	eb e3       	ldi	r30, 0x3B	; 59
    2276:	f0 e0       	ldi	r31, 0x00	; 0
    2278:	80 81       	ld	r24, Z
    227a:	28 2f       	mov	r18, r24
    227c:	2f 70       	andi	r18, 0x0F	; 15
    227e:	fe 01       	movw	r30, r28
    2280:	ed 59       	subi	r30, 0x9D	; 157
    2282:	ff 4f       	sbci	r31, 0xFF	; 255
    2284:	80 81       	ld	r24, Z
    2286:	88 2f       	mov	r24, r24
    2288:	90 e0       	ldi	r25, 0x00	; 0
    228a:	82 95       	swap	r24
    228c:	92 95       	swap	r25
    228e:	90 7f       	andi	r25, 0xF0	; 240
    2290:	98 27       	eor	r25, r24
    2292:	80 7f       	andi	r24, 0xF0	; 240
    2294:	98 27       	eor	r25, r24
    2296:	82 2b       	or	r24, r18
    2298:	8c 93       	st	X, r24
    229a:	80 e0       	ldi	r24, 0x00	; 0
    229c:	90 e0       	ldi	r25, 0x00	; 0
    229e:	a0 e8       	ldi	r26, 0x80	; 128
    22a0:	bf e3       	ldi	r27, 0x3F	; 63
    22a2:	89 8f       	std	Y+25, r24	; 0x19
    22a4:	9a 8f       	std	Y+26, r25	; 0x1a
    22a6:	ab 8f       	std	Y+27, r26	; 0x1b
    22a8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22aa:	69 8d       	ldd	r22, Y+25	; 0x19
    22ac:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22ae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22b0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22b2:	20 e0       	ldi	r18, 0x00	; 0
    22b4:	30 e0       	ldi	r19, 0x00	; 0
    22b6:	4a ef       	ldi	r20, 0xFA	; 250
    22b8:	54 e4       	ldi	r21, 0x44	; 68
    22ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22be:	dc 01       	movw	r26, r24
    22c0:	cb 01       	movw	r24, r22
    22c2:	8d 8b       	std	Y+21, r24	; 0x15
    22c4:	9e 8b       	std	Y+22, r25	; 0x16
    22c6:	af 8b       	std	Y+23, r26	; 0x17
    22c8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    22ca:	6d 89       	ldd	r22, Y+21	; 0x15
    22cc:	7e 89       	ldd	r23, Y+22	; 0x16
    22ce:	8f 89       	ldd	r24, Y+23	; 0x17
    22d0:	98 8d       	ldd	r25, Y+24	; 0x18
    22d2:	20 e0       	ldi	r18, 0x00	; 0
    22d4:	30 e0       	ldi	r19, 0x00	; 0
    22d6:	40 e8       	ldi	r20, 0x80	; 128
    22d8:	5f e3       	ldi	r21, 0x3F	; 63
    22da:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22de:	88 23       	and	r24, r24
    22e0:	2c f4       	brge	.+10     	; 0x22ec <LCD_sendCommand+0x69e>
		__ticks = 1;
    22e2:	81 e0       	ldi	r24, 0x01	; 1
    22e4:	90 e0       	ldi	r25, 0x00	; 0
    22e6:	9c 8b       	std	Y+20, r25	; 0x14
    22e8:	8b 8b       	std	Y+19, r24	; 0x13
    22ea:	3f c0       	rjmp	.+126    	; 0x236a <LCD_sendCommand+0x71c>
	else if (__tmp > 65535)
    22ec:	6d 89       	ldd	r22, Y+21	; 0x15
    22ee:	7e 89       	ldd	r23, Y+22	; 0x16
    22f0:	8f 89       	ldd	r24, Y+23	; 0x17
    22f2:	98 8d       	ldd	r25, Y+24	; 0x18
    22f4:	20 e0       	ldi	r18, 0x00	; 0
    22f6:	3f ef       	ldi	r19, 0xFF	; 255
    22f8:	4f e7       	ldi	r20, 0x7F	; 127
    22fa:	57 e4       	ldi	r21, 0x47	; 71
    22fc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2300:	18 16       	cp	r1, r24
    2302:	4c f5       	brge	.+82     	; 0x2356 <LCD_sendCommand+0x708>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2304:	69 8d       	ldd	r22, Y+25	; 0x19
    2306:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2308:	8b 8d       	ldd	r24, Y+27	; 0x1b
    230a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    230c:	20 e0       	ldi	r18, 0x00	; 0
    230e:	30 e0       	ldi	r19, 0x00	; 0
    2310:	40 e2       	ldi	r20, 0x20	; 32
    2312:	51 e4       	ldi	r21, 0x41	; 65
    2314:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2318:	dc 01       	movw	r26, r24
    231a:	cb 01       	movw	r24, r22
    231c:	bc 01       	movw	r22, r24
    231e:	cd 01       	movw	r24, r26
    2320:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2324:	dc 01       	movw	r26, r24
    2326:	cb 01       	movw	r24, r22
    2328:	9c 8b       	std	Y+20, r25	; 0x14
    232a:	8b 8b       	std	Y+19, r24	; 0x13
    232c:	0f c0       	rjmp	.+30     	; 0x234c <LCD_sendCommand+0x6fe>
    232e:	88 ec       	ldi	r24, 0xC8	; 200
    2330:	90 e0       	ldi	r25, 0x00	; 0
    2332:	9a 8b       	std	Y+18, r25	; 0x12
    2334:	89 8b       	std	Y+17, r24	; 0x11
    2336:	89 89       	ldd	r24, Y+17	; 0x11
    2338:	9a 89       	ldd	r25, Y+18	; 0x12
    233a:	01 97       	sbiw	r24, 0x01	; 1
    233c:	f1 f7       	brne	.-4      	; 0x233a <LCD_sendCommand+0x6ec>
    233e:	9a 8b       	std	Y+18, r25	; 0x12
    2340:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2342:	8b 89       	ldd	r24, Y+19	; 0x13
    2344:	9c 89       	ldd	r25, Y+20	; 0x14
    2346:	01 97       	sbiw	r24, 0x01	; 1
    2348:	9c 8b       	std	Y+20, r25	; 0x14
    234a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    234c:	8b 89       	ldd	r24, Y+19	; 0x13
    234e:	9c 89       	ldd	r25, Y+20	; 0x14
    2350:	00 97       	sbiw	r24, 0x00	; 0
    2352:	69 f7       	brne	.-38     	; 0x232e <LCD_sendCommand+0x6e0>
    2354:	14 c0       	rjmp	.+40     	; 0x237e <LCD_sendCommand+0x730>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2356:	6d 89       	ldd	r22, Y+21	; 0x15
    2358:	7e 89       	ldd	r23, Y+22	; 0x16
    235a:	8f 89       	ldd	r24, Y+23	; 0x17
    235c:	98 8d       	ldd	r25, Y+24	; 0x18
    235e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2362:	dc 01       	movw	r26, r24
    2364:	cb 01       	movw	r24, r22
    2366:	9c 8b       	std	Y+20, r25	; 0x14
    2368:	8b 8b       	std	Y+19, r24	; 0x13
    236a:	8b 89       	ldd	r24, Y+19	; 0x13
    236c:	9c 89       	ldd	r25, Y+20	; 0x14
    236e:	98 8b       	std	Y+16, r25	; 0x10
    2370:	8f 87       	std	Y+15, r24	; 0x0f
    2372:	8f 85       	ldd	r24, Y+15	; 0x0f
    2374:	98 89       	ldd	r25, Y+16	; 0x10
    2376:	01 97       	sbiw	r24, 0x01	; 1
    2378:	f1 f7       	brne	.-4      	; 0x2376 <LCD_sendCommand+0x728>
    237a:	98 8b       	std	Y+16, r25	; 0x10
    237c:	8f 87       	std	Y+15, r24	; 0x0f
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | (command & 0x0F);
#endif

	_delay_ms(1); /* Delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* Disable LCD E = 0 */
    237e:	ab e3       	ldi	r26, 0x3B	; 59
    2380:	b0 e0       	ldi	r27, 0x00	; 0
    2382:	eb e3       	ldi	r30, 0x3B	; 59
    2384:	f0 e0       	ldi	r31, 0x00	; 0
    2386:	80 81       	ld	r24, Z
    2388:	87 7f       	andi	r24, 0xF7	; 247
    238a:	8c 93       	st	X, r24
    238c:	80 e0       	ldi	r24, 0x00	; 0
    238e:	90 e0       	ldi	r25, 0x00	; 0
    2390:	a0 e8       	ldi	r26, 0x80	; 128
    2392:	bf e3       	ldi	r27, 0x3F	; 63
    2394:	8b 87       	std	Y+11, r24	; 0x0b
    2396:	9c 87       	std	Y+12, r25	; 0x0c
    2398:	ad 87       	std	Y+13, r26	; 0x0d
    239a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    239c:	6b 85       	ldd	r22, Y+11	; 0x0b
    239e:	7c 85       	ldd	r23, Y+12	; 0x0c
    23a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    23a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    23a4:	20 e0       	ldi	r18, 0x00	; 0
    23a6:	30 e0       	ldi	r19, 0x00	; 0
    23a8:	4a ef       	ldi	r20, 0xFA	; 250
    23aa:	54 e4       	ldi	r21, 0x44	; 68
    23ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23b0:	dc 01       	movw	r26, r24
    23b2:	cb 01       	movw	r24, r22
    23b4:	8f 83       	std	Y+7, r24	; 0x07
    23b6:	98 87       	std	Y+8, r25	; 0x08
    23b8:	a9 87       	std	Y+9, r26	; 0x09
    23ba:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    23bc:	6f 81       	ldd	r22, Y+7	; 0x07
    23be:	78 85       	ldd	r23, Y+8	; 0x08
    23c0:	89 85       	ldd	r24, Y+9	; 0x09
    23c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    23c4:	20 e0       	ldi	r18, 0x00	; 0
    23c6:	30 e0       	ldi	r19, 0x00	; 0
    23c8:	40 e8       	ldi	r20, 0x80	; 128
    23ca:	5f e3       	ldi	r21, 0x3F	; 63
    23cc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23d0:	88 23       	and	r24, r24
    23d2:	2c f4       	brge	.+10     	; 0x23de <LCD_sendCommand+0x790>
		__ticks = 1;
    23d4:	81 e0       	ldi	r24, 0x01	; 1
    23d6:	90 e0       	ldi	r25, 0x00	; 0
    23d8:	9e 83       	std	Y+6, r25	; 0x06
    23da:	8d 83       	std	Y+5, r24	; 0x05
    23dc:	3f c0       	rjmp	.+126    	; 0x245c <LCD_sendCommand+0x80e>
	else if (__tmp > 65535)
    23de:	6f 81       	ldd	r22, Y+7	; 0x07
    23e0:	78 85       	ldd	r23, Y+8	; 0x08
    23e2:	89 85       	ldd	r24, Y+9	; 0x09
    23e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    23e6:	20 e0       	ldi	r18, 0x00	; 0
    23e8:	3f ef       	ldi	r19, 0xFF	; 255
    23ea:	4f e7       	ldi	r20, 0x7F	; 127
    23ec:	57 e4       	ldi	r21, 0x47	; 71
    23ee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23f2:	18 16       	cp	r1, r24
    23f4:	4c f5       	brge	.+82     	; 0x2448 <LCD_sendCommand+0x7fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    23f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    23fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    23fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    23fe:	20 e0       	ldi	r18, 0x00	; 0
    2400:	30 e0       	ldi	r19, 0x00	; 0
    2402:	40 e2       	ldi	r20, 0x20	; 32
    2404:	51 e4       	ldi	r21, 0x41	; 65
    2406:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    240a:	dc 01       	movw	r26, r24
    240c:	cb 01       	movw	r24, r22
    240e:	bc 01       	movw	r22, r24
    2410:	cd 01       	movw	r24, r26
    2412:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2416:	dc 01       	movw	r26, r24
    2418:	cb 01       	movw	r24, r22
    241a:	9e 83       	std	Y+6, r25	; 0x06
    241c:	8d 83       	std	Y+5, r24	; 0x05
    241e:	0f c0       	rjmp	.+30     	; 0x243e <LCD_sendCommand+0x7f0>
    2420:	88 ec       	ldi	r24, 0xC8	; 200
    2422:	90 e0       	ldi	r25, 0x00	; 0
    2424:	9c 83       	std	Y+4, r25	; 0x04
    2426:	8b 83       	std	Y+3, r24	; 0x03
    2428:	8b 81       	ldd	r24, Y+3	; 0x03
    242a:	9c 81       	ldd	r25, Y+4	; 0x04
    242c:	01 97       	sbiw	r24, 0x01	; 1
    242e:	f1 f7       	brne	.-4      	; 0x242c <LCD_sendCommand+0x7de>
    2430:	9c 83       	std	Y+4, r25	; 0x04
    2432:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2434:	8d 81       	ldd	r24, Y+5	; 0x05
    2436:	9e 81       	ldd	r25, Y+6	; 0x06
    2438:	01 97       	sbiw	r24, 0x01	; 1
    243a:	9e 83       	std	Y+6, r25	; 0x06
    243c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    243e:	8d 81       	ldd	r24, Y+5	; 0x05
    2440:	9e 81       	ldd	r25, Y+6	; 0x06
    2442:	00 97       	sbiw	r24, 0x00	; 0
    2444:	69 f7       	brne	.-38     	; 0x2420 <LCD_sendCommand+0x7d2>
    2446:	14 c0       	rjmp	.+40     	; 0x2470 <LCD_sendCommand+0x822>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2448:	6f 81       	ldd	r22, Y+7	; 0x07
    244a:	78 85       	ldd	r23, Y+8	; 0x08
    244c:	89 85       	ldd	r24, Y+9	; 0x09
    244e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2450:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2454:	dc 01       	movw	r26, r24
    2456:	cb 01       	movw	r24, r22
    2458:	9e 83       	std	Y+6, r25	; 0x06
    245a:	8d 83       	std	Y+5, r24	; 0x05
    245c:	8d 81       	ldd	r24, Y+5	; 0x05
    245e:	9e 81       	ldd	r25, Y+6	; 0x06
    2460:	9a 83       	std	Y+2, r25	; 0x02
    2462:	89 83       	std	Y+1, r24	; 0x01
    2464:	89 81       	ldd	r24, Y+1	; 0x01
    2466:	9a 81       	ldd	r25, Y+2	; 0x02
    2468:	01 97       	sbiw	r24, 0x01	; 1
    246a:	f1 f7       	brne	.-4      	; 0x2468 <LCD_sendCommand+0x81a>
    246c:	9a 83       	std	Y+2, r25	; 0x02
    246e:	89 83       	std	Y+1, r24	; 0x01
	LCD_DATA_PORT = command; /* Out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* Delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E = 0 */
	_delay_ms(1); /* Delay for processing Th = 13ns */
#endif
}
    2470:	cd 59       	subi	r28, 0x9D	; 157
    2472:	df 4f       	sbci	r29, 0xFF	; 255
    2474:	0f b6       	in	r0, 0x3f	; 63
    2476:	f8 94       	cli
    2478:	de bf       	out	0x3e, r29	; 62
    247a:	0f be       	out	0x3f, r0	; 63
    247c:	cd bf       	out	0x3d, r28	; 61
    247e:	cf 91       	pop	r28
    2480:	df 91       	pop	r29
    2482:	1f 91       	pop	r17
    2484:	0f 91       	pop	r16
    2486:	08 95       	ret

00002488 <LCD_displayCharacter>:

void LCD_displayCharacter(uint8_t data)
{
    2488:	0f 93       	push	r16
    248a:	1f 93       	push	r17
    248c:	df 93       	push	r29
    248e:	cf 93       	push	r28
    2490:	cd b7       	in	r28, 0x3d	; 61
    2492:	de b7       	in	r29, 0x3e	; 62
    2494:	c3 56       	subi	r28, 0x63	; 99
    2496:	d0 40       	sbci	r29, 0x00	; 0
    2498:	0f b6       	in	r0, 0x3f	; 63
    249a:	f8 94       	cli
    249c:	de bf       	out	0x3e, r29	; 62
    249e:	0f be       	out	0x3f, r0	; 63
    24a0:	cd bf       	out	0x3d, r28	; 61
    24a2:	fe 01       	movw	r30, r28
    24a4:	ed 59       	subi	r30, 0x9D	; 157
    24a6:	ff 4f       	sbci	r31, 0xFF	; 255
    24a8:	80 83       	st	Z, r24
	SET_BIT(LCD_CTRL_PORT,RS); /* Data Mode RS = 1 */
    24aa:	ab e3       	ldi	r26, 0x3B	; 59
    24ac:	b0 e0       	ldi	r27, 0x00	; 0
    24ae:	eb e3       	ldi	r30, 0x3B	; 59
    24b0:	f0 e0       	ldi	r31, 0x00	; 0
    24b2:	80 81       	ld	r24, Z
    24b4:	82 60       	ori	r24, 0x02	; 2
    24b6:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* Write data to LCD so RW = 0 */
    24b8:	ab e3       	ldi	r26, 0x3B	; 59
    24ba:	b0 e0       	ldi	r27, 0x00	; 0
    24bc:	eb e3       	ldi	r30, 0x3B	; 59
    24be:	f0 e0       	ldi	r31, 0x00	; 0
    24c0:	80 81       	ld	r24, Z
    24c2:	8b 7f       	andi	r24, 0xFB	; 251
    24c4:	8c 93       	st	X, r24
    24c6:	fe 01       	movw	r30, r28
    24c8:	e1 5a       	subi	r30, 0xA1	; 161
    24ca:	ff 4f       	sbci	r31, 0xFF	; 255
    24cc:	80 e0       	ldi	r24, 0x00	; 0
    24ce:	90 e0       	ldi	r25, 0x00	; 0
    24d0:	a0 e8       	ldi	r26, 0x80	; 128
    24d2:	bf e3       	ldi	r27, 0x3F	; 63
    24d4:	80 83       	st	Z, r24
    24d6:	91 83       	std	Z+1, r25	; 0x01
    24d8:	a2 83       	std	Z+2, r26	; 0x02
    24da:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24dc:	8e 01       	movw	r16, r28
    24de:	05 5a       	subi	r16, 0xA5	; 165
    24e0:	1f 4f       	sbci	r17, 0xFF	; 255
    24e2:	fe 01       	movw	r30, r28
    24e4:	e1 5a       	subi	r30, 0xA1	; 161
    24e6:	ff 4f       	sbci	r31, 0xFF	; 255
    24e8:	60 81       	ld	r22, Z
    24ea:	71 81       	ldd	r23, Z+1	; 0x01
    24ec:	82 81       	ldd	r24, Z+2	; 0x02
    24ee:	93 81       	ldd	r25, Z+3	; 0x03
    24f0:	20 e0       	ldi	r18, 0x00	; 0
    24f2:	30 e0       	ldi	r19, 0x00	; 0
    24f4:	4a ef       	ldi	r20, 0xFA	; 250
    24f6:	54 e4       	ldi	r21, 0x44	; 68
    24f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24fc:	dc 01       	movw	r26, r24
    24fe:	cb 01       	movw	r24, r22
    2500:	f8 01       	movw	r30, r16
    2502:	80 83       	st	Z, r24
    2504:	91 83       	std	Z+1, r25	; 0x01
    2506:	a2 83       	std	Z+2, r26	; 0x02
    2508:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    250a:	fe 01       	movw	r30, r28
    250c:	e5 5a       	subi	r30, 0xA5	; 165
    250e:	ff 4f       	sbci	r31, 0xFF	; 255
    2510:	60 81       	ld	r22, Z
    2512:	71 81       	ldd	r23, Z+1	; 0x01
    2514:	82 81       	ldd	r24, Z+2	; 0x02
    2516:	93 81       	ldd	r25, Z+3	; 0x03
    2518:	20 e0       	ldi	r18, 0x00	; 0
    251a:	30 e0       	ldi	r19, 0x00	; 0
    251c:	40 e8       	ldi	r20, 0x80	; 128
    251e:	5f e3       	ldi	r21, 0x3F	; 63
    2520:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2524:	88 23       	and	r24, r24
    2526:	44 f4       	brge	.+16     	; 0x2538 <LCD_displayCharacter+0xb0>
		__ticks = 1;
    2528:	fe 01       	movw	r30, r28
    252a:	e7 5a       	subi	r30, 0xA7	; 167
    252c:	ff 4f       	sbci	r31, 0xFF	; 255
    252e:	81 e0       	ldi	r24, 0x01	; 1
    2530:	90 e0       	ldi	r25, 0x00	; 0
    2532:	91 83       	std	Z+1, r25	; 0x01
    2534:	80 83       	st	Z, r24
    2536:	64 c0       	rjmp	.+200    	; 0x2600 <LCD_displayCharacter+0x178>
	else if (__tmp > 65535)
    2538:	fe 01       	movw	r30, r28
    253a:	e5 5a       	subi	r30, 0xA5	; 165
    253c:	ff 4f       	sbci	r31, 0xFF	; 255
    253e:	60 81       	ld	r22, Z
    2540:	71 81       	ldd	r23, Z+1	; 0x01
    2542:	82 81       	ldd	r24, Z+2	; 0x02
    2544:	93 81       	ldd	r25, Z+3	; 0x03
    2546:	20 e0       	ldi	r18, 0x00	; 0
    2548:	3f ef       	ldi	r19, 0xFF	; 255
    254a:	4f e7       	ldi	r20, 0x7F	; 127
    254c:	57 e4       	ldi	r21, 0x47	; 71
    254e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2552:	18 16       	cp	r1, r24
    2554:	0c f0       	brlt	.+2      	; 0x2558 <LCD_displayCharacter+0xd0>
    2556:	43 c0       	rjmp	.+134    	; 0x25de <LCD_displayCharacter+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2558:	fe 01       	movw	r30, r28
    255a:	e1 5a       	subi	r30, 0xA1	; 161
    255c:	ff 4f       	sbci	r31, 0xFF	; 255
    255e:	60 81       	ld	r22, Z
    2560:	71 81       	ldd	r23, Z+1	; 0x01
    2562:	82 81       	ldd	r24, Z+2	; 0x02
    2564:	93 81       	ldd	r25, Z+3	; 0x03
    2566:	20 e0       	ldi	r18, 0x00	; 0
    2568:	30 e0       	ldi	r19, 0x00	; 0
    256a:	40 e2       	ldi	r20, 0x20	; 32
    256c:	51 e4       	ldi	r21, 0x41	; 65
    256e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2572:	dc 01       	movw	r26, r24
    2574:	cb 01       	movw	r24, r22
    2576:	8e 01       	movw	r16, r28
    2578:	07 5a       	subi	r16, 0xA7	; 167
    257a:	1f 4f       	sbci	r17, 0xFF	; 255
    257c:	bc 01       	movw	r22, r24
    257e:	cd 01       	movw	r24, r26
    2580:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2584:	dc 01       	movw	r26, r24
    2586:	cb 01       	movw	r24, r22
    2588:	f8 01       	movw	r30, r16
    258a:	91 83       	std	Z+1, r25	; 0x01
    258c:	80 83       	st	Z, r24
    258e:	1f c0       	rjmp	.+62     	; 0x25ce <LCD_displayCharacter+0x146>
    2590:	fe 01       	movw	r30, r28
    2592:	e9 5a       	subi	r30, 0xA9	; 169
    2594:	ff 4f       	sbci	r31, 0xFF	; 255
    2596:	88 ec       	ldi	r24, 0xC8	; 200
    2598:	90 e0       	ldi	r25, 0x00	; 0
    259a:	91 83       	std	Z+1, r25	; 0x01
    259c:	80 83       	st	Z, r24
    259e:	fe 01       	movw	r30, r28
    25a0:	e9 5a       	subi	r30, 0xA9	; 169
    25a2:	ff 4f       	sbci	r31, 0xFF	; 255
    25a4:	80 81       	ld	r24, Z
    25a6:	91 81       	ldd	r25, Z+1	; 0x01
    25a8:	01 97       	sbiw	r24, 0x01	; 1
    25aa:	f1 f7       	brne	.-4      	; 0x25a8 <LCD_displayCharacter+0x120>
    25ac:	fe 01       	movw	r30, r28
    25ae:	e9 5a       	subi	r30, 0xA9	; 169
    25b0:	ff 4f       	sbci	r31, 0xFF	; 255
    25b2:	91 83       	std	Z+1, r25	; 0x01
    25b4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25b6:	de 01       	movw	r26, r28
    25b8:	a7 5a       	subi	r26, 0xA7	; 167
    25ba:	bf 4f       	sbci	r27, 0xFF	; 255
    25bc:	fe 01       	movw	r30, r28
    25be:	e7 5a       	subi	r30, 0xA7	; 167
    25c0:	ff 4f       	sbci	r31, 0xFF	; 255
    25c2:	80 81       	ld	r24, Z
    25c4:	91 81       	ldd	r25, Z+1	; 0x01
    25c6:	01 97       	sbiw	r24, 0x01	; 1
    25c8:	11 96       	adiw	r26, 0x01	; 1
    25ca:	9c 93       	st	X, r25
    25cc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25ce:	fe 01       	movw	r30, r28
    25d0:	e7 5a       	subi	r30, 0xA7	; 167
    25d2:	ff 4f       	sbci	r31, 0xFF	; 255
    25d4:	80 81       	ld	r24, Z
    25d6:	91 81       	ldd	r25, Z+1	; 0x01
    25d8:	00 97       	sbiw	r24, 0x00	; 0
    25da:	d1 f6       	brne	.-76     	; 0x2590 <LCD_displayCharacter+0x108>
    25dc:	27 c0       	rjmp	.+78     	; 0x262c <LCD_displayCharacter+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25de:	8e 01       	movw	r16, r28
    25e0:	07 5a       	subi	r16, 0xA7	; 167
    25e2:	1f 4f       	sbci	r17, 0xFF	; 255
    25e4:	fe 01       	movw	r30, r28
    25e6:	e5 5a       	subi	r30, 0xA5	; 165
    25e8:	ff 4f       	sbci	r31, 0xFF	; 255
    25ea:	60 81       	ld	r22, Z
    25ec:	71 81       	ldd	r23, Z+1	; 0x01
    25ee:	82 81       	ldd	r24, Z+2	; 0x02
    25f0:	93 81       	ldd	r25, Z+3	; 0x03
    25f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25f6:	dc 01       	movw	r26, r24
    25f8:	cb 01       	movw	r24, r22
    25fa:	f8 01       	movw	r30, r16
    25fc:	91 83       	std	Z+1, r25	; 0x01
    25fe:	80 83       	st	Z, r24
    2600:	de 01       	movw	r26, r28
    2602:	ab 5a       	subi	r26, 0xAB	; 171
    2604:	bf 4f       	sbci	r27, 0xFF	; 255
    2606:	fe 01       	movw	r30, r28
    2608:	e7 5a       	subi	r30, 0xA7	; 167
    260a:	ff 4f       	sbci	r31, 0xFF	; 255
    260c:	80 81       	ld	r24, Z
    260e:	91 81       	ldd	r25, Z+1	; 0x01
    2610:	8d 93       	st	X+, r24
    2612:	9c 93       	st	X, r25
    2614:	fe 01       	movw	r30, r28
    2616:	eb 5a       	subi	r30, 0xAB	; 171
    2618:	ff 4f       	sbci	r31, 0xFF	; 255
    261a:	80 81       	ld	r24, Z
    261c:	91 81       	ldd	r25, Z+1	; 0x01
    261e:	01 97       	sbiw	r24, 0x01	; 1
    2620:	f1 f7       	brne	.-4      	; 0x261e <LCD_displayCharacter+0x196>
    2622:	fe 01       	movw	r30, r28
    2624:	eb 5a       	subi	r30, 0xAB	; 171
    2626:	ff 4f       	sbci	r31, 0xFF	; 255
    2628:	91 83       	std	Z+1, r25	; 0x01
    262a:	80 83       	st	Z, r24
	_delay_ms(1); /* Delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E = 1 */
    262c:	ab e3       	ldi	r26, 0x3B	; 59
    262e:	b0 e0       	ldi	r27, 0x00	; 0
    2630:	eb e3       	ldi	r30, 0x3B	; 59
    2632:	f0 e0       	ldi	r31, 0x00	; 0
    2634:	80 81       	ld	r24, Z
    2636:	88 60       	ori	r24, 0x08	; 8
    2638:	8c 93       	st	X, r24
    263a:	fe 01       	movw	r30, r28
    263c:	ef 5a       	subi	r30, 0xAF	; 175
    263e:	ff 4f       	sbci	r31, 0xFF	; 255
    2640:	80 e0       	ldi	r24, 0x00	; 0
    2642:	90 e0       	ldi	r25, 0x00	; 0
    2644:	a0 e8       	ldi	r26, 0x80	; 128
    2646:	bf e3       	ldi	r27, 0x3F	; 63
    2648:	80 83       	st	Z, r24
    264a:	91 83       	std	Z+1, r25	; 0x01
    264c:	a2 83       	std	Z+2, r26	; 0x02
    264e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2650:	8e 01       	movw	r16, r28
    2652:	03 5b       	subi	r16, 0xB3	; 179
    2654:	1f 4f       	sbci	r17, 0xFF	; 255
    2656:	fe 01       	movw	r30, r28
    2658:	ef 5a       	subi	r30, 0xAF	; 175
    265a:	ff 4f       	sbci	r31, 0xFF	; 255
    265c:	60 81       	ld	r22, Z
    265e:	71 81       	ldd	r23, Z+1	; 0x01
    2660:	82 81       	ldd	r24, Z+2	; 0x02
    2662:	93 81       	ldd	r25, Z+3	; 0x03
    2664:	20 e0       	ldi	r18, 0x00	; 0
    2666:	30 e0       	ldi	r19, 0x00	; 0
    2668:	4a ef       	ldi	r20, 0xFA	; 250
    266a:	54 e4       	ldi	r21, 0x44	; 68
    266c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2670:	dc 01       	movw	r26, r24
    2672:	cb 01       	movw	r24, r22
    2674:	f8 01       	movw	r30, r16
    2676:	80 83       	st	Z, r24
    2678:	91 83       	std	Z+1, r25	; 0x01
    267a:	a2 83       	std	Z+2, r26	; 0x02
    267c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    267e:	fe 01       	movw	r30, r28
    2680:	e3 5b       	subi	r30, 0xB3	; 179
    2682:	ff 4f       	sbci	r31, 0xFF	; 255
    2684:	60 81       	ld	r22, Z
    2686:	71 81       	ldd	r23, Z+1	; 0x01
    2688:	82 81       	ldd	r24, Z+2	; 0x02
    268a:	93 81       	ldd	r25, Z+3	; 0x03
    268c:	20 e0       	ldi	r18, 0x00	; 0
    268e:	30 e0       	ldi	r19, 0x00	; 0
    2690:	40 e8       	ldi	r20, 0x80	; 128
    2692:	5f e3       	ldi	r21, 0x3F	; 63
    2694:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2698:	88 23       	and	r24, r24
    269a:	44 f4       	brge	.+16     	; 0x26ac <LCD_displayCharacter+0x224>
		__ticks = 1;
    269c:	fe 01       	movw	r30, r28
    269e:	e5 5b       	subi	r30, 0xB5	; 181
    26a0:	ff 4f       	sbci	r31, 0xFF	; 255
    26a2:	81 e0       	ldi	r24, 0x01	; 1
    26a4:	90 e0       	ldi	r25, 0x00	; 0
    26a6:	91 83       	std	Z+1, r25	; 0x01
    26a8:	80 83       	st	Z, r24
    26aa:	64 c0       	rjmp	.+200    	; 0x2774 <LCD_displayCharacter+0x2ec>
	else if (__tmp > 65535)
    26ac:	fe 01       	movw	r30, r28
    26ae:	e3 5b       	subi	r30, 0xB3	; 179
    26b0:	ff 4f       	sbci	r31, 0xFF	; 255
    26b2:	60 81       	ld	r22, Z
    26b4:	71 81       	ldd	r23, Z+1	; 0x01
    26b6:	82 81       	ldd	r24, Z+2	; 0x02
    26b8:	93 81       	ldd	r25, Z+3	; 0x03
    26ba:	20 e0       	ldi	r18, 0x00	; 0
    26bc:	3f ef       	ldi	r19, 0xFF	; 255
    26be:	4f e7       	ldi	r20, 0x7F	; 127
    26c0:	57 e4       	ldi	r21, 0x47	; 71
    26c2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26c6:	18 16       	cp	r1, r24
    26c8:	0c f0       	brlt	.+2      	; 0x26cc <LCD_displayCharacter+0x244>
    26ca:	43 c0       	rjmp	.+134    	; 0x2752 <LCD_displayCharacter+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26cc:	fe 01       	movw	r30, r28
    26ce:	ef 5a       	subi	r30, 0xAF	; 175
    26d0:	ff 4f       	sbci	r31, 0xFF	; 255
    26d2:	60 81       	ld	r22, Z
    26d4:	71 81       	ldd	r23, Z+1	; 0x01
    26d6:	82 81       	ldd	r24, Z+2	; 0x02
    26d8:	93 81       	ldd	r25, Z+3	; 0x03
    26da:	20 e0       	ldi	r18, 0x00	; 0
    26dc:	30 e0       	ldi	r19, 0x00	; 0
    26de:	40 e2       	ldi	r20, 0x20	; 32
    26e0:	51 e4       	ldi	r21, 0x41	; 65
    26e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26e6:	dc 01       	movw	r26, r24
    26e8:	cb 01       	movw	r24, r22
    26ea:	8e 01       	movw	r16, r28
    26ec:	05 5b       	subi	r16, 0xB5	; 181
    26ee:	1f 4f       	sbci	r17, 0xFF	; 255
    26f0:	bc 01       	movw	r22, r24
    26f2:	cd 01       	movw	r24, r26
    26f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26f8:	dc 01       	movw	r26, r24
    26fa:	cb 01       	movw	r24, r22
    26fc:	f8 01       	movw	r30, r16
    26fe:	91 83       	std	Z+1, r25	; 0x01
    2700:	80 83       	st	Z, r24
    2702:	1f c0       	rjmp	.+62     	; 0x2742 <LCD_displayCharacter+0x2ba>
    2704:	fe 01       	movw	r30, r28
    2706:	e7 5b       	subi	r30, 0xB7	; 183
    2708:	ff 4f       	sbci	r31, 0xFF	; 255
    270a:	88 ec       	ldi	r24, 0xC8	; 200
    270c:	90 e0       	ldi	r25, 0x00	; 0
    270e:	91 83       	std	Z+1, r25	; 0x01
    2710:	80 83       	st	Z, r24
    2712:	fe 01       	movw	r30, r28
    2714:	e7 5b       	subi	r30, 0xB7	; 183
    2716:	ff 4f       	sbci	r31, 0xFF	; 255
    2718:	80 81       	ld	r24, Z
    271a:	91 81       	ldd	r25, Z+1	; 0x01
    271c:	01 97       	sbiw	r24, 0x01	; 1
    271e:	f1 f7       	brne	.-4      	; 0x271c <LCD_displayCharacter+0x294>
    2720:	fe 01       	movw	r30, r28
    2722:	e7 5b       	subi	r30, 0xB7	; 183
    2724:	ff 4f       	sbci	r31, 0xFF	; 255
    2726:	91 83       	std	Z+1, r25	; 0x01
    2728:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    272a:	de 01       	movw	r26, r28
    272c:	a5 5b       	subi	r26, 0xB5	; 181
    272e:	bf 4f       	sbci	r27, 0xFF	; 255
    2730:	fe 01       	movw	r30, r28
    2732:	e5 5b       	subi	r30, 0xB5	; 181
    2734:	ff 4f       	sbci	r31, 0xFF	; 255
    2736:	80 81       	ld	r24, Z
    2738:	91 81       	ldd	r25, Z+1	; 0x01
    273a:	01 97       	sbiw	r24, 0x01	; 1
    273c:	11 96       	adiw	r26, 0x01	; 1
    273e:	9c 93       	st	X, r25
    2740:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2742:	fe 01       	movw	r30, r28
    2744:	e5 5b       	subi	r30, 0xB5	; 181
    2746:	ff 4f       	sbci	r31, 0xFF	; 255
    2748:	80 81       	ld	r24, Z
    274a:	91 81       	ldd	r25, Z+1	; 0x01
    274c:	00 97       	sbiw	r24, 0x00	; 0
    274e:	d1 f6       	brne	.-76     	; 0x2704 <LCD_displayCharacter+0x27c>
    2750:	27 c0       	rjmp	.+78     	; 0x27a0 <LCD_displayCharacter+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2752:	8e 01       	movw	r16, r28
    2754:	05 5b       	subi	r16, 0xB5	; 181
    2756:	1f 4f       	sbci	r17, 0xFF	; 255
    2758:	fe 01       	movw	r30, r28
    275a:	e3 5b       	subi	r30, 0xB3	; 179
    275c:	ff 4f       	sbci	r31, 0xFF	; 255
    275e:	60 81       	ld	r22, Z
    2760:	71 81       	ldd	r23, Z+1	; 0x01
    2762:	82 81       	ldd	r24, Z+2	; 0x02
    2764:	93 81       	ldd	r25, Z+3	; 0x03
    2766:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    276a:	dc 01       	movw	r26, r24
    276c:	cb 01       	movw	r24, r22
    276e:	f8 01       	movw	r30, r16
    2770:	91 83       	std	Z+1, r25	; 0x01
    2772:	80 83       	st	Z, r24
    2774:	de 01       	movw	r26, r28
    2776:	a9 5b       	subi	r26, 0xB9	; 185
    2778:	bf 4f       	sbci	r27, 0xFF	; 255
    277a:	fe 01       	movw	r30, r28
    277c:	e5 5b       	subi	r30, 0xB5	; 181
    277e:	ff 4f       	sbci	r31, 0xFF	; 255
    2780:	80 81       	ld	r24, Z
    2782:	91 81       	ldd	r25, Z+1	; 0x01
    2784:	8d 93       	st	X+, r24
    2786:	9c 93       	st	X, r25
    2788:	fe 01       	movw	r30, r28
    278a:	e9 5b       	subi	r30, 0xB9	; 185
    278c:	ff 4f       	sbci	r31, 0xFF	; 255
    278e:	80 81       	ld	r24, Z
    2790:	91 81       	ldd	r25, Z+1	; 0x01
    2792:	01 97       	sbiw	r24, 0x01	; 1
    2794:	f1 f7       	brne	.-4      	; 0x2792 <LCD_displayCharacter+0x30a>
    2796:	fe 01       	movw	r30, r28
    2798:	e9 5b       	subi	r30, 0xB9	; 185
    279a:	ff 4f       	sbci	r31, 0xFF	; 255
    279c:	91 83       	std	Z+1, r25	; 0x01
    279e:	80 83       	st	Z, r24
	_delay_ms(1); /* Delay for processing Tpw - Tdws = 190ns */
#if (DATA_BITS_MODE == 4)
	/* Out the highest 4 bits of the required data to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (data & 0xF0);
    27a0:	ab e3       	ldi	r26, 0x3B	; 59
    27a2:	b0 e0       	ldi	r27, 0x00	; 0
    27a4:	eb e3       	ldi	r30, 0x3B	; 59
    27a6:	f0 e0       	ldi	r31, 0x00	; 0
    27a8:	80 81       	ld	r24, Z
    27aa:	98 2f       	mov	r25, r24
    27ac:	9f 70       	andi	r25, 0x0F	; 15
    27ae:	fe 01       	movw	r30, r28
    27b0:	ed 59       	subi	r30, 0x9D	; 157
    27b2:	ff 4f       	sbci	r31, 0xFF	; 255
    27b4:	80 81       	ld	r24, Z
    27b6:	80 7f       	andi	r24, 0xF0	; 240
    27b8:	89 2b       	or	r24, r25
    27ba:	8c 93       	st	X, r24
    27bc:	fe 01       	movw	r30, r28
    27be:	ed 5b       	subi	r30, 0xBD	; 189
    27c0:	ff 4f       	sbci	r31, 0xFF	; 255
    27c2:	80 e0       	ldi	r24, 0x00	; 0
    27c4:	90 e0       	ldi	r25, 0x00	; 0
    27c6:	a0 e8       	ldi	r26, 0x80	; 128
    27c8:	bf e3       	ldi	r27, 0x3F	; 63
    27ca:	80 83       	st	Z, r24
    27cc:	91 83       	std	Z+1, r25	; 0x01
    27ce:	a2 83       	std	Z+2, r26	; 0x02
    27d0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27d2:	8e 01       	movw	r16, r28
    27d4:	01 5c       	subi	r16, 0xC1	; 193
    27d6:	1f 4f       	sbci	r17, 0xFF	; 255
    27d8:	fe 01       	movw	r30, r28
    27da:	ed 5b       	subi	r30, 0xBD	; 189
    27dc:	ff 4f       	sbci	r31, 0xFF	; 255
    27de:	60 81       	ld	r22, Z
    27e0:	71 81       	ldd	r23, Z+1	; 0x01
    27e2:	82 81       	ldd	r24, Z+2	; 0x02
    27e4:	93 81       	ldd	r25, Z+3	; 0x03
    27e6:	20 e0       	ldi	r18, 0x00	; 0
    27e8:	30 e0       	ldi	r19, 0x00	; 0
    27ea:	4a ef       	ldi	r20, 0xFA	; 250
    27ec:	54 e4       	ldi	r21, 0x44	; 68
    27ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27f2:	dc 01       	movw	r26, r24
    27f4:	cb 01       	movw	r24, r22
    27f6:	f8 01       	movw	r30, r16
    27f8:	80 83       	st	Z, r24
    27fa:	91 83       	std	Z+1, r25	; 0x01
    27fc:	a2 83       	std	Z+2, r26	; 0x02
    27fe:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2800:	fe 01       	movw	r30, r28
    2802:	ff 96       	adiw	r30, 0x3f	; 63
    2804:	60 81       	ld	r22, Z
    2806:	71 81       	ldd	r23, Z+1	; 0x01
    2808:	82 81       	ldd	r24, Z+2	; 0x02
    280a:	93 81       	ldd	r25, Z+3	; 0x03
    280c:	20 e0       	ldi	r18, 0x00	; 0
    280e:	30 e0       	ldi	r19, 0x00	; 0
    2810:	40 e8       	ldi	r20, 0x80	; 128
    2812:	5f e3       	ldi	r21, 0x3F	; 63
    2814:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2818:	88 23       	and	r24, r24
    281a:	2c f4       	brge	.+10     	; 0x2826 <LCD_displayCharacter+0x39e>
		__ticks = 1;
    281c:	81 e0       	ldi	r24, 0x01	; 1
    281e:	90 e0       	ldi	r25, 0x00	; 0
    2820:	9e af       	std	Y+62, r25	; 0x3e
    2822:	8d af       	std	Y+61, r24	; 0x3d
    2824:	46 c0       	rjmp	.+140    	; 0x28b2 <LCD_displayCharacter+0x42a>
	else if (__tmp > 65535)
    2826:	fe 01       	movw	r30, r28
    2828:	ff 96       	adiw	r30, 0x3f	; 63
    282a:	60 81       	ld	r22, Z
    282c:	71 81       	ldd	r23, Z+1	; 0x01
    282e:	82 81       	ldd	r24, Z+2	; 0x02
    2830:	93 81       	ldd	r25, Z+3	; 0x03
    2832:	20 e0       	ldi	r18, 0x00	; 0
    2834:	3f ef       	ldi	r19, 0xFF	; 255
    2836:	4f e7       	ldi	r20, 0x7F	; 127
    2838:	57 e4       	ldi	r21, 0x47	; 71
    283a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    283e:	18 16       	cp	r1, r24
    2840:	64 f5       	brge	.+88     	; 0x289a <LCD_displayCharacter+0x412>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2842:	fe 01       	movw	r30, r28
    2844:	ed 5b       	subi	r30, 0xBD	; 189
    2846:	ff 4f       	sbci	r31, 0xFF	; 255
    2848:	60 81       	ld	r22, Z
    284a:	71 81       	ldd	r23, Z+1	; 0x01
    284c:	82 81       	ldd	r24, Z+2	; 0x02
    284e:	93 81       	ldd	r25, Z+3	; 0x03
    2850:	20 e0       	ldi	r18, 0x00	; 0
    2852:	30 e0       	ldi	r19, 0x00	; 0
    2854:	40 e2       	ldi	r20, 0x20	; 32
    2856:	51 e4       	ldi	r21, 0x41	; 65
    2858:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    285c:	dc 01       	movw	r26, r24
    285e:	cb 01       	movw	r24, r22
    2860:	bc 01       	movw	r22, r24
    2862:	cd 01       	movw	r24, r26
    2864:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2868:	dc 01       	movw	r26, r24
    286a:	cb 01       	movw	r24, r22
    286c:	9e af       	std	Y+62, r25	; 0x3e
    286e:	8d af       	std	Y+61, r24	; 0x3d
    2870:	0f c0       	rjmp	.+30     	; 0x2890 <LCD_displayCharacter+0x408>
    2872:	88 ec       	ldi	r24, 0xC8	; 200
    2874:	90 e0       	ldi	r25, 0x00	; 0
    2876:	9c af       	std	Y+60, r25	; 0x3c
    2878:	8b af       	std	Y+59, r24	; 0x3b
    287a:	8b ad       	ldd	r24, Y+59	; 0x3b
    287c:	9c ad       	ldd	r25, Y+60	; 0x3c
    287e:	01 97       	sbiw	r24, 0x01	; 1
    2880:	f1 f7       	brne	.-4      	; 0x287e <LCD_displayCharacter+0x3f6>
    2882:	9c af       	std	Y+60, r25	; 0x3c
    2884:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2886:	8d ad       	ldd	r24, Y+61	; 0x3d
    2888:	9e ad       	ldd	r25, Y+62	; 0x3e
    288a:	01 97       	sbiw	r24, 0x01	; 1
    288c:	9e af       	std	Y+62, r25	; 0x3e
    288e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2890:	8d ad       	ldd	r24, Y+61	; 0x3d
    2892:	9e ad       	ldd	r25, Y+62	; 0x3e
    2894:	00 97       	sbiw	r24, 0x00	; 0
    2896:	69 f7       	brne	.-38     	; 0x2872 <LCD_displayCharacter+0x3ea>
    2898:	16 c0       	rjmp	.+44     	; 0x28c6 <LCD_displayCharacter+0x43e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    289a:	fe 01       	movw	r30, r28
    289c:	ff 96       	adiw	r30, 0x3f	; 63
    289e:	60 81       	ld	r22, Z
    28a0:	71 81       	ldd	r23, Z+1	; 0x01
    28a2:	82 81       	ldd	r24, Z+2	; 0x02
    28a4:	93 81       	ldd	r25, Z+3	; 0x03
    28a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28aa:	dc 01       	movw	r26, r24
    28ac:	cb 01       	movw	r24, r22
    28ae:	9e af       	std	Y+62, r25	; 0x3e
    28b0:	8d af       	std	Y+61, r24	; 0x3d
    28b2:	8d ad       	ldd	r24, Y+61	; 0x3d
    28b4:	9e ad       	ldd	r25, Y+62	; 0x3e
    28b6:	9a af       	std	Y+58, r25	; 0x3a
    28b8:	89 af       	std	Y+57, r24	; 0x39
    28ba:	89 ad       	ldd	r24, Y+57	; 0x39
    28bc:	9a ad       	ldd	r25, Y+58	; 0x3a
    28be:	01 97       	sbiw	r24, 0x01	; 1
    28c0:	f1 f7       	brne	.-4      	; 0x28be <LCD_displayCharacter+0x436>
    28c2:	9a af       	std	Y+58, r25	; 0x3a
    28c4:	89 af       	std	Y+57, r24	; 0x39
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | ((data & 0xF0) >> 4);
#endif

	_delay_ms(1); /* Delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* Disable LCD E = 0 */
    28c6:	ab e3       	ldi	r26, 0x3B	; 59
    28c8:	b0 e0       	ldi	r27, 0x00	; 0
    28ca:	eb e3       	ldi	r30, 0x3B	; 59
    28cc:	f0 e0       	ldi	r31, 0x00	; 0
    28ce:	80 81       	ld	r24, Z
    28d0:	87 7f       	andi	r24, 0xF7	; 247
    28d2:	8c 93       	st	X, r24
    28d4:	80 e0       	ldi	r24, 0x00	; 0
    28d6:	90 e0       	ldi	r25, 0x00	; 0
    28d8:	a0 e8       	ldi	r26, 0x80	; 128
    28da:	bf e3       	ldi	r27, 0x3F	; 63
    28dc:	8d ab       	std	Y+53, r24	; 0x35
    28de:	9e ab       	std	Y+54, r25	; 0x36
    28e0:	af ab       	std	Y+55, r26	; 0x37
    28e2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28e4:	6d a9       	ldd	r22, Y+53	; 0x35
    28e6:	7e a9       	ldd	r23, Y+54	; 0x36
    28e8:	8f a9       	ldd	r24, Y+55	; 0x37
    28ea:	98 ad       	ldd	r25, Y+56	; 0x38
    28ec:	20 e0       	ldi	r18, 0x00	; 0
    28ee:	30 e0       	ldi	r19, 0x00	; 0
    28f0:	4a ef       	ldi	r20, 0xFA	; 250
    28f2:	54 e4       	ldi	r21, 0x44	; 68
    28f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28f8:	dc 01       	movw	r26, r24
    28fa:	cb 01       	movw	r24, r22
    28fc:	89 ab       	std	Y+49, r24	; 0x31
    28fe:	9a ab       	std	Y+50, r25	; 0x32
    2900:	ab ab       	std	Y+51, r26	; 0x33
    2902:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2904:	69 a9       	ldd	r22, Y+49	; 0x31
    2906:	7a a9       	ldd	r23, Y+50	; 0x32
    2908:	8b a9       	ldd	r24, Y+51	; 0x33
    290a:	9c a9       	ldd	r25, Y+52	; 0x34
    290c:	20 e0       	ldi	r18, 0x00	; 0
    290e:	30 e0       	ldi	r19, 0x00	; 0
    2910:	40 e8       	ldi	r20, 0x80	; 128
    2912:	5f e3       	ldi	r21, 0x3F	; 63
    2914:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2918:	88 23       	and	r24, r24
    291a:	2c f4       	brge	.+10     	; 0x2926 <LCD_displayCharacter+0x49e>
		__ticks = 1;
    291c:	81 e0       	ldi	r24, 0x01	; 1
    291e:	90 e0       	ldi	r25, 0x00	; 0
    2920:	98 ab       	std	Y+48, r25	; 0x30
    2922:	8f a7       	std	Y+47, r24	; 0x2f
    2924:	3f c0       	rjmp	.+126    	; 0x29a4 <LCD_displayCharacter+0x51c>
	else if (__tmp > 65535)
    2926:	69 a9       	ldd	r22, Y+49	; 0x31
    2928:	7a a9       	ldd	r23, Y+50	; 0x32
    292a:	8b a9       	ldd	r24, Y+51	; 0x33
    292c:	9c a9       	ldd	r25, Y+52	; 0x34
    292e:	20 e0       	ldi	r18, 0x00	; 0
    2930:	3f ef       	ldi	r19, 0xFF	; 255
    2932:	4f e7       	ldi	r20, 0x7F	; 127
    2934:	57 e4       	ldi	r21, 0x47	; 71
    2936:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    293a:	18 16       	cp	r1, r24
    293c:	4c f5       	brge	.+82     	; 0x2990 <LCD_displayCharacter+0x508>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    293e:	6d a9       	ldd	r22, Y+53	; 0x35
    2940:	7e a9       	ldd	r23, Y+54	; 0x36
    2942:	8f a9       	ldd	r24, Y+55	; 0x37
    2944:	98 ad       	ldd	r25, Y+56	; 0x38
    2946:	20 e0       	ldi	r18, 0x00	; 0
    2948:	30 e0       	ldi	r19, 0x00	; 0
    294a:	40 e2       	ldi	r20, 0x20	; 32
    294c:	51 e4       	ldi	r21, 0x41	; 65
    294e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2952:	dc 01       	movw	r26, r24
    2954:	cb 01       	movw	r24, r22
    2956:	bc 01       	movw	r22, r24
    2958:	cd 01       	movw	r24, r26
    295a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    295e:	dc 01       	movw	r26, r24
    2960:	cb 01       	movw	r24, r22
    2962:	98 ab       	std	Y+48, r25	; 0x30
    2964:	8f a7       	std	Y+47, r24	; 0x2f
    2966:	0f c0       	rjmp	.+30     	; 0x2986 <LCD_displayCharacter+0x4fe>
    2968:	88 ec       	ldi	r24, 0xC8	; 200
    296a:	90 e0       	ldi	r25, 0x00	; 0
    296c:	9e a7       	std	Y+46, r25	; 0x2e
    296e:	8d a7       	std	Y+45, r24	; 0x2d
    2970:	8d a5       	ldd	r24, Y+45	; 0x2d
    2972:	9e a5       	ldd	r25, Y+46	; 0x2e
    2974:	01 97       	sbiw	r24, 0x01	; 1
    2976:	f1 f7       	brne	.-4      	; 0x2974 <LCD_displayCharacter+0x4ec>
    2978:	9e a7       	std	Y+46, r25	; 0x2e
    297a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    297c:	8f a5       	ldd	r24, Y+47	; 0x2f
    297e:	98 a9       	ldd	r25, Y+48	; 0x30
    2980:	01 97       	sbiw	r24, 0x01	; 1
    2982:	98 ab       	std	Y+48, r25	; 0x30
    2984:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2986:	8f a5       	ldd	r24, Y+47	; 0x2f
    2988:	98 a9       	ldd	r25, Y+48	; 0x30
    298a:	00 97       	sbiw	r24, 0x00	; 0
    298c:	69 f7       	brne	.-38     	; 0x2968 <LCD_displayCharacter+0x4e0>
    298e:	14 c0       	rjmp	.+40     	; 0x29b8 <LCD_displayCharacter+0x530>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2990:	69 a9       	ldd	r22, Y+49	; 0x31
    2992:	7a a9       	ldd	r23, Y+50	; 0x32
    2994:	8b a9       	ldd	r24, Y+51	; 0x33
    2996:	9c a9       	ldd	r25, Y+52	; 0x34
    2998:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    299c:	dc 01       	movw	r26, r24
    299e:	cb 01       	movw	r24, r22
    29a0:	98 ab       	std	Y+48, r25	; 0x30
    29a2:	8f a7       	std	Y+47, r24	; 0x2f
    29a4:	8f a5       	ldd	r24, Y+47	; 0x2f
    29a6:	98 a9       	ldd	r25, Y+48	; 0x30
    29a8:	9c a7       	std	Y+44, r25	; 0x2c
    29aa:	8b a7       	std	Y+43, r24	; 0x2b
    29ac:	8b a5       	ldd	r24, Y+43	; 0x2b
    29ae:	9c a5       	ldd	r25, Y+44	; 0x2c
    29b0:	01 97       	sbiw	r24, 0x01	; 1
    29b2:	f1 f7       	brne	.-4      	; 0x29b0 <LCD_displayCharacter+0x528>
    29b4:	9c a7       	std	Y+44, r25	; 0x2c
    29b6:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* Delay for processing Th = 13ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    29b8:	ab e3       	ldi	r26, 0x3B	; 59
    29ba:	b0 e0       	ldi	r27, 0x00	; 0
    29bc:	eb e3       	ldi	r30, 0x3B	; 59
    29be:	f0 e0       	ldi	r31, 0x00	; 0
    29c0:	80 81       	ld	r24, Z
    29c2:	88 60       	ori	r24, 0x08	; 8
    29c4:	8c 93       	st	X, r24
    29c6:	80 e0       	ldi	r24, 0x00	; 0
    29c8:	90 e0       	ldi	r25, 0x00	; 0
    29ca:	a0 e8       	ldi	r26, 0x80	; 128
    29cc:	bf e3       	ldi	r27, 0x3F	; 63
    29ce:	8f a3       	std	Y+39, r24	; 0x27
    29d0:	98 a7       	std	Y+40, r25	; 0x28
    29d2:	a9 a7       	std	Y+41, r26	; 0x29
    29d4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29d6:	6f a1       	ldd	r22, Y+39	; 0x27
    29d8:	78 a5       	ldd	r23, Y+40	; 0x28
    29da:	89 a5       	ldd	r24, Y+41	; 0x29
    29dc:	9a a5       	ldd	r25, Y+42	; 0x2a
    29de:	20 e0       	ldi	r18, 0x00	; 0
    29e0:	30 e0       	ldi	r19, 0x00	; 0
    29e2:	4a ef       	ldi	r20, 0xFA	; 250
    29e4:	54 e4       	ldi	r21, 0x44	; 68
    29e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29ea:	dc 01       	movw	r26, r24
    29ec:	cb 01       	movw	r24, r22
    29ee:	8b a3       	std	Y+35, r24	; 0x23
    29f0:	9c a3       	std	Y+36, r25	; 0x24
    29f2:	ad a3       	std	Y+37, r26	; 0x25
    29f4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    29f6:	6b a1       	ldd	r22, Y+35	; 0x23
    29f8:	7c a1       	ldd	r23, Y+36	; 0x24
    29fa:	8d a1       	ldd	r24, Y+37	; 0x25
    29fc:	9e a1       	ldd	r25, Y+38	; 0x26
    29fe:	20 e0       	ldi	r18, 0x00	; 0
    2a00:	30 e0       	ldi	r19, 0x00	; 0
    2a02:	40 e8       	ldi	r20, 0x80	; 128
    2a04:	5f e3       	ldi	r21, 0x3F	; 63
    2a06:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a0a:	88 23       	and	r24, r24
    2a0c:	2c f4       	brge	.+10     	; 0x2a18 <LCD_displayCharacter+0x590>
		__ticks = 1;
    2a0e:	81 e0       	ldi	r24, 0x01	; 1
    2a10:	90 e0       	ldi	r25, 0x00	; 0
    2a12:	9a a3       	std	Y+34, r25	; 0x22
    2a14:	89 a3       	std	Y+33, r24	; 0x21
    2a16:	3f c0       	rjmp	.+126    	; 0x2a96 <LCD_displayCharacter+0x60e>
	else if (__tmp > 65535)
    2a18:	6b a1       	ldd	r22, Y+35	; 0x23
    2a1a:	7c a1       	ldd	r23, Y+36	; 0x24
    2a1c:	8d a1       	ldd	r24, Y+37	; 0x25
    2a1e:	9e a1       	ldd	r25, Y+38	; 0x26
    2a20:	20 e0       	ldi	r18, 0x00	; 0
    2a22:	3f ef       	ldi	r19, 0xFF	; 255
    2a24:	4f e7       	ldi	r20, 0x7F	; 127
    2a26:	57 e4       	ldi	r21, 0x47	; 71
    2a28:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a2c:	18 16       	cp	r1, r24
    2a2e:	4c f5       	brge	.+82     	; 0x2a82 <LCD_displayCharacter+0x5fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a30:	6f a1       	ldd	r22, Y+39	; 0x27
    2a32:	78 a5       	ldd	r23, Y+40	; 0x28
    2a34:	89 a5       	ldd	r24, Y+41	; 0x29
    2a36:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a38:	20 e0       	ldi	r18, 0x00	; 0
    2a3a:	30 e0       	ldi	r19, 0x00	; 0
    2a3c:	40 e2       	ldi	r20, 0x20	; 32
    2a3e:	51 e4       	ldi	r21, 0x41	; 65
    2a40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a44:	dc 01       	movw	r26, r24
    2a46:	cb 01       	movw	r24, r22
    2a48:	bc 01       	movw	r22, r24
    2a4a:	cd 01       	movw	r24, r26
    2a4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a50:	dc 01       	movw	r26, r24
    2a52:	cb 01       	movw	r24, r22
    2a54:	9a a3       	std	Y+34, r25	; 0x22
    2a56:	89 a3       	std	Y+33, r24	; 0x21
    2a58:	0f c0       	rjmp	.+30     	; 0x2a78 <LCD_displayCharacter+0x5f0>
    2a5a:	88 ec       	ldi	r24, 0xC8	; 200
    2a5c:	90 e0       	ldi	r25, 0x00	; 0
    2a5e:	98 a3       	std	Y+32, r25	; 0x20
    2a60:	8f 8f       	std	Y+31, r24	; 0x1f
    2a62:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2a64:	98 a1       	ldd	r25, Y+32	; 0x20
    2a66:	01 97       	sbiw	r24, 0x01	; 1
    2a68:	f1 f7       	brne	.-4      	; 0x2a66 <LCD_displayCharacter+0x5de>
    2a6a:	98 a3       	std	Y+32, r25	; 0x20
    2a6c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a6e:	89 a1       	ldd	r24, Y+33	; 0x21
    2a70:	9a a1       	ldd	r25, Y+34	; 0x22
    2a72:	01 97       	sbiw	r24, 0x01	; 1
    2a74:	9a a3       	std	Y+34, r25	; 0x22
    2a76:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a78:	89 a1       	ldd	r24, Y+33	; 0x21
    2a7a:	9a a1       	ldd	r25, Y+34	; 0x22
    2a7c:	00 97       	sbiw	r24, 0x00	; 0
    2a7e:	69 f7       	brne	.-38     	; 0x2a5a <LCD_displayCharacter+0x5d2>
    2a80:	14 c0       	rjmp	.+40     	; 0x2aaa <LCD_displayCharacter+0x622>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a82:	6b a1       	ldd	r22, Y+35	; 0x23
    2a84:	7c a1       	ldd	r23, Y+36	; 0x24
    2a86:	8d a1       	ldd	r24, Y+37	; 0x25
    2a88:	9e a1       	ldd	r25, Y+38	; 0x26
    2a8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a8e:	dc 01       	movw	r26, r24
    2a90:	cb 01       	movw	r24, r22
    2a92:	9a a3       	std	Y+34, r25	; 0x22
    2a94:	89 a3       	std	Y+33, r24	; 0x21
    2a96:	89 a1       	ldd	r24, Y+33	; 0x21
    2a98:	9a a1       	ldd	r25, Y+34	; 0x22
    2a9a:	9e 8f       	std	Y+30, r25	; 0x1e
    2a9c:	8d 8f       	std	Y+29, r24	; 0x1d
    2a9e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2aa0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2aa2:	01 97       	sbiw	r24, 0x01	; 1
    2aa4:	f1 f7       	brne	.-4      	; 0x2aa2 <LCD_displayCharacter+0x61a>
    2aa6:	9e 8f       	std	Y+30, r25	; 0x1e
    2aa8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* Delay for processing Tpw - Tdws = 190ns */

	/* Out the lowest 4 bits of the required data to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | ((data & 0x0F) << 4);
    2aaa:	ab e3       	ldi	r26, 0x3B	; 59
    2aac:	b0 e0       	ldi	r27, 0x00	; 0
    2aae:	eb e3       	ldi	r30, 0x3B	; 59
    2ab0:	f0 e0       	ldi	r31, 0x00	; 0
    2ab2:	80 81       	ld	r24, Z
    2ab4:	28 2f       	mov	r18, r24
    2ab6:	2f 70       	andi	r18, 0x0F	; 15
    2ab8:	fe 01       	movw	r30, r28
    2aba:	ed 59       	subi	r30, 0x9D	; 157
    2abc:	ff 4f       	sbci	r31, 0xFF	; 255
    2abe:	80 81       	ld	r24, Z
    2ac0:	88 2f       	mov	r24, r24
    2ac2:	90 e0       	ldi	r25, 0x00	; 0
    2ac4:	82 95       	swap	r24
    2ac6:	92 95       	swap	r25
    2ac8:	90 7f       	andi	r25, 0xF0	; 240
    2aca:	98 27       	eor	r25, r24
    2acc:	80 7f       	andi	r24, 0xF0	; 240
    2ace:	98 27       	eor	r25, r24
    2ad0:	82 2b       	or	r24, r18
    2ad2:	8c 93       	st	X, r24
    2ad4:	80 e0       	ldi	r24, 0x00	; 0
    2ad6:	90 e0       	ldi	r25, 0x00	; 0
    2ad8:	a0 e8       	ldi	r26, 0x80	; 128
    2ada:	bf e3       	ldi	r27, 0x3F	; 63
    2adc:	89 8f       	std	Y+25, r24	; 0x19
    2ade:	9a 8f       	std	Y+26, r25	; 0x1a
    2ae0:	ab 8f       	std	Y+27, r26	; 0x1b
    2ae2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ae4:	69 8d       	ldd	r22, Y+25	; 0x19
    2ae6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ae8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2aea:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2aec:	20 e0       	ldi	r18, 0x00	; 0
    2aee:	30 e0       	ldi	r19, 0x00	; 0
    2af0:	4a ef       	ldi	r20, 0xFA	; 250
    2af2:	54 e4       	ldi	r21, 0x44	; 68
    2af4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2af8:	dc 01       	movw	r26, r24
    2afa:	cb 01       	movw	r24, r22
    2afc:	8d 8b       	std	Y+21, r24	; 0x15
    2afe:	9e 8b       	std	Y+22, r25	; 0x16
    2b00:	af 8b       	std	Y+23, r26	; 0x17
    2b02:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2b04:	6d 89       	ldd	r22, Y+21	; 0x15
    2b06:	7e 89       	ldd	r23, Y+22	; 0x16
    2b08:	8f 89       	ldd	r24, Y+23	; 0x17
    2b0a:	98 8d       	ldd	r25, Y+24	; 0x18
    2b0c:	20 e0       	ldi	r18, 0x00	; 0
    2b0e:	30 e0       	ldi	r19, 0x00	; 0
    2b10:	40 e8       	ldi	r20, 0x80	; 128
    2b12:	5f e3       	ldi	r21, 0x3F	; 63
    2b14:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b18:	88 23       	and	r24, r24
    2b1a:	2c f4       	brge	.+10     	; 0x2b26 <LCD_displayCharacter+0x69e>
		__ticks = 1;
    2b1c:	81 e0       	ldi	r24, 0x01	; 1
    2b1e:	90 e0       	ldi	r25, 0x00	; 0
    2b20:	9c 8b       	std	Y+20, r25	; 0x14
    2b22:	8b 8b       	std	Y+19, r24	; 0x13
    2b24:	3f c0       	rjmp	.+126    	; 0x2ba4 <LCD_displayCharacter+0x71c>
	else if (__tmp > 65535)
    2b26:	6d 89       	ldd	r22, Y+21	; 0x15
    2b28:	7e 89       	ldd	r23, Y+22	; 0x16
    2b2a:	8f 89       	ldd	r24, Y+23	; 0x17
    2b2c:	98 8d       	ldd	r25, Y+24	; 0x18
    2b2e:	20 e0       	ldi	r18, 0x00	; 0
    2b30:	3f ef       	ldi	r19, 0xFF	; 255
    2b32:	4f e7       	ldi	r20, 0x7F	; 127
    2b34:	57 e4       	ldi	r21, 0x47	; 71
    2b36:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b3a:	18 16       	cp	r1, r24
    2b3c:	4c f5       	brge	.+82     	; 0x2b90 <LCD_displayCharacter+0x708>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b3e:	69 8d       	ldd	r22, Y+25	; 0x19
    2b40:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b42:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b44:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b46:	20 e0       	ldi	r18, 0x00	; 0
    2b48:	30 e0       	ldi	r19, 0x00	; 0
    2b4a:	40 e2       	ldi	r20, 0x20	; 32
    2b4c:	51 e4       	ldi	r21, 0x41	; 65
    2b4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b52:	dc 01       	movw	r26, r24
    2b54:	cb 01       	movw	r24, r22
    2b56:	bc 01       	movw	r22, r24
    2b58:	cd 01       	movw	r24, r26
    2b5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b5e:	dc 01       	movw	r26, r24
    2b60:	cb 01       	movw	r24, r22
    2b62:	9c 8b       	std	Y+20, r25	; 0x14
    2b64:	8b 8b       	std	Y+19, r24	; 0x13
    2b66:	0f c0       	rjmp	.+30     	; 0x2b86 <LCD_displayCharacter+0x6fe>
    2b68:	88 ec       	ldi	r24, 0xC8	; 200
    2b6a:	90 e0       	ldi	r25, 0x00	; 0
    2b6c:	9a 8b       	std	Y+18, r25	; 0x12
    2b6e:	89 8b       	std	Y+17, r24	; 0x11
    2b70:	89 89       	ldd	r24, Y+17	; 0x11
    2b72:	9a 89       	ldd	r25, Y+18	; 0x12
    2b74:	01 97       	sbiw	r24, 0x01	; 1
    2b76:	f1 f7       	brne	.-4      	; 0x2b74 <LCD_displayCharacter+0x6ec>
    2b78:	9a 8b       	std	Y+18, r25	; 0x12
    2b7a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b7c:	8b 89       	ldd	r24, Y+19	; 0x13
    2b7e:	9c 89       	ldd	r25, Y+20	; 0x14
    2b80:	01 97       	sbiw	r24, 0x01	; 1
    2b82:	9c 8b       	std	Y+20, r25	; 0x14
    2b84:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b86:	8b 89       	ldd	r24, Y+19	; 0x13
    2b88:	9c 89       	ldd	r25, Y+20	; 0x14
    2b8a:	00 97       	sbiw	r24, 0x00	; 0
    2b8c:	69 f7       	brne	.-38     	; 0x2b68 <LCD_displayCharacter+0x6e0>
    2b8e:	14 c0       	rjmp	.+40     	; 0x2bb8 <LCD_displayCharacter+0x730>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b90:	6d 89       	ldd	r22, Y+21	; 0x15
    2b92:	7e 89       	ldd	r23, Y+22	; 0x16
    2b94:	8f 89       	ldd	r24, Y+23	; 0x17
    2b96:	98 8d       	ldd	r25, Y+24	; 0x18
    2b98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b9c:	dc 01       	movw	r26, r24
    2b9e:	cb 01       	movw	r24, r22
    2ba0:	9c 8b       	std	Y+20, r25	; 0x14
    2ba2:	8b 8b       	std	Y+19, r24	; 0x13
    2ba4:	8b 89       	ldd	r24, Y+19	; 0x13
    2ba6:	9c 89       	ldd	r25, Y+20	; 0x14
    2ba8:	98 8b       	std	Y+16, r25	; 0x10
    2baa:	8f 87       	std	Y+15, r24	; 0x0f
    2bac:	8f 85       	ldd	r24, Y+15	; 0x0f
    2bae:	98 89       	ldd	r25, Y+16	; 0x10
    2bb0:	01 97       	sbiw	r24, 0x01	; 1
    2bb2:	f1 f7       	brne	.-4      	; 0x2bb0 <LCD_displayCharacter+0x728>
    2bb4:	98 8b       	std	Y+16, r25	; 0x10
    2bb6:	8f 87       	std	Y+15, r24	; 0x0f
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | (data & 0x0F);
#endif

	_delay_ms(1); /* Delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E = 0 */
    2bb8:	ab e3       	ldi	r26, 0x3B	; 59
    2bba:	b0 e0       	ldi	r27, 0x00	; 0
    2bbc:	eb e3       	ldi	r30, 0x3B	; 59
    2bbe:	f0 e0       	ldi	r31, 0x00	; 0
    2bc0:	80 81       	ld	r24, Z
    2bc2:	87 7f       	andi	r24, 0xF7	; 247
    2bc4:	8c 93       	st	X, r24
    2bc6:	80 e0       	ldi	r24, 0x00	; 0
    2bc8:	90 e0       	ldi	r25, 0x00	; 0
    2bca:	a0 e8       	ldi	r26, 0x80	; 128
    2bcc:	bf e3       	ldi	r27, 0x3F	; 63
    2bce:	8b 87       	std	Y+11, r24	; 0x0b
    2bd0:	9c 87       	std	Y+12, r25	; 0x0c
    2bd2:	ad 87       	std	Y+13, r26	; 0x0d
    2bd4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bd6:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bd8:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bda:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bdc:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bde:	20 e0       	ldi	r18, 0x00	; 0
    2be0:	30 e0       	ldi	r19, 0x00	; 0
    2be2:	4a ef       	ldi	r20, 0xFA	; 250
    2be4:	54 e4       	ldi	r21, 0x44	; 68
    2be6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bea:	dc 01       	movw	r26, r24
    2bec:	cb 01       	movw	r24, r22
    2bee:	8f 83       	std	Y+7, r24	; 0x07
    2bf0:	98 87       	std	Y+8, r25	; 0x08
    2bf2:	a9 87       	std	Y+9, r26	; 0x09
    2bf4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2bf6:	6f 81       	ldd	r22, Y+7	; 0x07
    2bf8:	78 85       	ldd	r23, Y+8	; 0x08
    2bfa:	89 85       	ldd	r24, Y+9	; 0x09
    2bfc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bfe:	20 e0       	ldi	r18, 0x00	; 0
    2c00:	30 e0       	ldi	r19, 0x00	; 0
    2c02:	40 e8       	ldi	r20, 0x80	; 128
    2c04:	5f e3       	ldi	r21, 0x3F	; 63
    2c06:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c0a:	88 23       	and	r24, r24
    2c0c:	2c f4       	brge	.+10     	; 0x2c18 <LCD_displayCharacter+0x790>
		__ticks = 1;
    2c0e:	81 e0       	ldi	r24, 0x01	; 1
    2c10:	90 e0       	ldi	r25, 0x00	; 0
    2c12:	9e 83       	std	Y+6, r25	; 0x06
    2c14:	8d 83       	std	Y+5, r24	; 0x05
    2c16:	3f c0       	rjmp	.+126    	; 0x2c96 <LCD_displayCharacter+0x80e>
	else if (__tmp > 65535)
    2c18:	6f 81       	ldd	r22, Y+7	; 0x07
    2c1a:	78 85       	ldd	r23, Y+8	; 0x08
    2c1c:	89 85       	ldd	r24, Y+9	; 0x09
    2c1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c20:	20 e0       	ldi	r18, 0x00	; 0
    2c22:	3f ef       	ldi	r19, 0xFF	; 255
    2c24:	4f e7       	ldi	r20, 0x7F	; 127
    2c26:	57 e4       	ldi	r21, 0x47	; 71
    2c28:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c2c:	18 16       	cp	r1, r24
    2c2e:	4c f5       	brge	.+82     	; 0x2c82 <LCD_displayCharacter+0x7fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c30:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c32:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c34:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c36:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c38:	20 e0       	ldi	r18, 0x00	; 0
    2c3a:	30 e0       	ldi	r19, 0x00	; 0
    2c3c:	40 e2       	ldi	r20, 0x20	; 32
    2c3e:	51 e4       	ldi	r21, 0x41	; 65
    2c40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c44:	dc 01       	movw	r26, r24
    2c46:	cb 01       	movw	r24, r22
    2c48:	bc 01       	movw	r22, r24
    2c4a:	cd 01       	movw	r24, r26
    2c4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c50:	dc 01       	movw	r26, r24
    2c52:	cb 01       	movw	r24, r22
    2c54:	9e 83       	std	Y+6, r25	; 0x06
    2c56:	8d 83       	std	Y+5, r24	; 0x05
    2c58:	0f c0       	rjmp	.+30     	; 0x2c78 <LCD_displayCharacter+0x7f0>
    2c5a:	88 ec       	ldi	r24, 0xC8	; 200
    2c5c:	90 e0       	ldi	r25, 0x00	; 0
    2c5e:	9c 83       	std	Y+4, r25	; 0x04
    2c60:	8b 83       	std	Y+3, r24	; 0x03
    2c62:	8b 81       	ldd	r24, Y+3	; 0x03
    2c64:	9c 81       	ldd	r25, Y+4	; 0x04
    2c66:	01 97       	sbiw	r24, 0x01	; 1
    2c68:	f1 f7       	brne	.-4      	; 0x2c66 <LCD_displayCharacter+0x7de>
    2c6a:	9c 83       	std	Y+4, r25	; 0x04
    2c6c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c6e:	8d 81       	ldd	r24, Y+5	; 0x05
    2c70:	9e 81       	ldd	r25, Y+6	; 0x06
    2c72:	01 97       	sbiw	r24, 0x01	; 1
    2c74:	9e 83       	std	Y+6, r25	; 0x06
    2c76:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c78:	8d 81       	ldd	r24, Y+5	; 0x05
    2c7a:	9e 81       	ldd	r25, Y+6	; 0x06
    2c7c:	00 97       	sbiw	r24, 0x00	; 0
    2c7e:	69 f7       	brne	.-38     	; 0x2c5a <LCD_displayCharacter+0x7d2>
    2c80:	14 c0       	rjmp	.+40     	; 0x2caa <LCD_displayCharacter+0x822>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c82:	6f 81       	ldd	r22, Y+7	; 0x07
    2c84:	78 85       	ldd	r23, Y+8	; 0x08
    2c86:	89 85       	ldd	r24, Y+9	; 0x09
    2c88:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c8e:	dc 01       	movw	r26, r24
    2c90:	cb 01       	movw	r24, r22
    2c92:	9e 83       	std	Y+6, r25	; 0x06
    2c94:	8d 83       	std	Y+5, r24	; 0x05
    2c96:	8d 81       	ldd	r24, Y+5	; 0x05
    2c98:	9e 81       	ldd	r25, Y+6	; 0x06
    2c9a:	9a 83       	std	Y+2, r25	; 0x02
    2c9c:	89 83       	std	Y+1, r24	; 0x01
    2c9e:	89 81       	ldd	r24, Y+1	; 0x01
    2ca0:	9a 81       	ldd	r25, Y+2	; 0x02
    2ca2:	01 97       	sbiw	r24, 0x01	; 1
    2ca4:	f1 f7       	brne	.-4      	; 0x2ca2 <LCD_displayCharacter+0x81a>
    2ca6:	9a 83       	std	Y+2, r25	; 0x02
    2ca8:	89 83       	std	Y+1, r24	; 0x01
	LCD_DATA_PORT = data; /* Out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* Delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* Disable LCD E = 0 */
	_delay_ms(1); /* Delay for processing Th = 13ns */
#endif
}
    2caa:	cd 59       	subi	r28, 0x9D	; 157
    2cac:	df 4f       	sbci	r29, 0xFF	; 255
    2cae:	0f b6       	in	r0, 0x3f	; 63
    2cb0:	f8 94       	cli
    2cb2:	de bf       	out	0x3e, r29	; 62
    2cb4:	0f be       	out	0x3f, r0	; 63
    2cb6:	cd bf       	out	0x3d, r28	; 61
    2cb8:	cf 91       	pop	r28
    2cba:	df 91       	pop	r29
    2cbc:	1f 91       	pop	r17
    2cbe:	0f 91       	pop	r16
    2cc0:	08 95       	ret

00002cc2 <LCD_displayString>:

void LCD_displayString(const uint8_t *Str)
{
    2cc2:	df 93       	push	r29
    2cc4:	cf 93       	push	r28
    2cc6:	00 d0       	rcall	.+0      	; 0x2cc8 <LCD_displayString+0x6>
    2cc8:	0f 92       	push	r0
    2cca:	cd b7       	in	r28, 0x3d	; 61
    2ccc:	de b7       	in	r29, 0x3e	; 62
    2cce:	9b 83       	std	Y+3, r25	; 0x03
    2cd0:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t i = 0;
    2cd2:	19 82       	std	Y+1, r1	; 0x01
    2cd4:	0e c0       	rjmp	.+28     	; 0x2cf2 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2cd6:	89 81       	ldd	r24, Y+1	; 0x01
    2cd8:	28 2f       	mov	r18, r24
    2cda:	30 e0       	ldi	r19, 0x00	; 0
    2cdc:	8a 81       	ldd	r24, Y+2	; 0x02
    2cde:	9b 81       	ldd	r25, Y+3	; 0x03
    2ce0:	fc 01       	movw	r30, r24
    2ce2:	e2 0f       	add	r30, r18
    2ce4:	f3 1f       	adc	r31, r19
    2ce6:	80 81       	ld	r24, Z
    2ce8:	0e 94 44 12 	call	0x2488	; 0x2488 <LCD_displayCharacter>
		i++;
    2cec:	89 81       	ldd	r24, Y+1	; 0x01
    2cee:	8f 5f       	subi	r24, 0xFF	; 255
    2cf0:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const uint8_t *Str)
{
	uint8_t i = 0;
	while(Str[i] != '\0')
    2cf2:	89 81       	ldd	r24, Y+1	; 0x01
    2cf4:	28 2f       	mov	r18, r24
    2cf6:	30 e0       	ldi	r19, 0x00	; 0
    2cf8:	8a 81       	ldd	r24, Y+2	; 0x02
    2cfa:	9b 81       	ldd	r25, Y+3	; 0x03
    2cfc:	fc 01       	movw	r30, r24
    2cfe:	e2 0f       	add	r30, r18
    2d00:	f3 1f       	adc	r31, r19
    2d02:	80 81       	ld	r24, Z
    2d04:	88 23       	and	r24, r24
    2d06:	39 f7       	brne	.-50     	; 0x2cd6 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(Str[i]);
		i++;
	}
}
    2d08:	0f 90       	pop	r0
    2d0a:	0f 90       	pop	r0
    2d0c:	0f 90       	pop	r0
    2d0e:	cf 91       	pop	r28
    2d10:	df 91       	pop	r29
    2d12:	08 95       	ret

00002d14 <LCD_goToRowColumn>:

void LCD_goToRowColumn(uint8_t row, uint8_t col)
{
    2d14:	df 93       	push	r29
    2d16:	cf 93       	push	r28
    2d18:	00 d0       	rcall	.+0      	; 0x2d1a <LCD_goToRowColumn+0x6>
    2d1a:	00 d0       	rcall	.+0      	; 0x2d1c <LCD_goToRowColumn+0x8>
    2d1c:	0f 92       	push	r0
    2d1e:	cd b7       	in	r28, 0x3d	; 61
    2d20:	de b7       	in	r29, 0x3e	; 62
    2d22:	8a 83       	std	Y+2, r24	; 0x02
    2d24:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t Address;
	
	/* First of all calculate the required address */
	switch(row)
    2d26:	8a 81       	ldd	r24, Y+2	; 0x02
    2d28:	28 2f       	mov	r18, r24
    2d2a:	30 e0       	ldi	r19, 0x00	; 0
    2d2c:	3d 83       	std	Y+5, r19	; 0x05
    2d2e:	2c 83       	std	Y+4, r18	; 0x04
    2d30:	8c 81       	ldd	r24, Y+4	; 0x04
    2d32:	9d 81       	ldd	r25, Y+5	; 0x05
    2d34:	81 30       	cpi	r24, 0x01	; 1
    2d36:	91 05       	cpc	r25, r1
    2d38:	c1 f0       	breq	.+48     	; 0x2d6a <LCD_goToRowColumn+0x56>
    2d3a:	2c 81       	ldd	r18, Y+4	; 0x04
    2d3c:	3d 81       	ldd	r19, Y+5	; 0x05
    2d3e:	22 30       	cpi	r18, 0x02	; 2
    2d40:	31 05       	cpc	r19, r1
    2d42:	2c f4       	brge	.+10     	; 0x2d4e <LCD_goToRowColumn+0x3a>
    2d44:	8c 81       	ldd	r24, Y+4	; 0x04
    2d46:	9d 81       	ldd	r25, Y+5	; 0x05
    2d48:	00 97       	sbiw	r24, 0x00	; 0
    2d4a:	61 f0       	breq	.+24     	; 0x2d64 <LCD_goToRowColumn+0x50>
    2d4c:	19 c0       	rjmp	.+50     	; 0x2d80 <LCD_goToRowColumn+0x6c>
    2d4e:	2c 81       	ldd	r18, Y+4	; 0x04
    2d50:	3d 81       	ldd	r19, Y+5	; 0x05
    2d52:	22 30       	cpi	r18, 0x02	; 2
    2d54:	31 05       	cpc	r19, r1
    2d56:	69 f0       	breq	.+26     	; 0x2d72 <LCD_goToRowColumn+0x5e>
    2d58:	8c 81       	ldd	r24, Y+4	; 0x04
    2d5a:	9d 81       	ldd	r25, Y+5	; 0x05
    2d5c:	83 30       	cpi	r24, 0x03	; 3
    2d5e:	91 05       	cpc	r25, r1
    2d60:	61 f0       	breq	.+24     	; 0x2d7a <LCD_goToRowColumn+0x66>
    2d62:	0e c0       	rjmp	.+28     	; 0x2d80 <LCD_goToRowColumn+0x6c>
	{
		case 0:
				Address=col;
    2d64:	8b 81       	ldd	r24, Y+3	; 0x03
    2d66:	89 83       	std	Y+1, r24	; 0x01
    2d68:	0b c0       	rjmp	.+22     	; 0x2d80 <LCD_goToRowColumn+0x6c>
				break;
		case 1:
				Address=col+0x40;
    2d6a:	8b 81       	ldd	r24, Y+3	; 0x03
    2d6c:	80 5c       	subi	r24, 0xC0	; 192
    2d6e:	89 83       	std	Y+1, r24	; 0x01
    2d70:	07 c0       	rjmp	.+14     	; 0x2d80 <LCD_goToRowColumn+0x6c>
				break;
		case 2:
				Address=col+0x10;
    2d72:	8b 81       	ldd	r24, Y+3	; 0x03
    2d74:	80 5f       	subi	r24, 0xF0	; 240
    2d76:	89 83       	std	Y+1, r24	; 0x01
    2d78:	03 c0       	rjmp	.+6      	; 0x2d80 <LCD_goToRowColumn+0x6c>
				break;
		case 3:
				Address=col+0x50;
    2d7a:	8b 81       	ldd	r24, Y+3	; 0x03
    2d7c:	80 5b       	subi	r24, 0xB0	; 176
    2d7e:	89 83       	std	Y+1, r24	; 0x01
	}					
	/* 
	 * To write to a specific address in the LCD 
	 * we need to apply the corresponding command 0b10000000+Address 
	 */
	LCD_sendCommand(Address | SET_CURSOR_LOCATION); 
    2d80:	89 81       	ldd	r24, Y+1	; 0x01
    2d82:	80 68       	ori	r24, 0x80	; 128
    2d84:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <LCD_sendCommand>
}
    2d88:	0f 90       	pop	r0
    2d8a:	0f 90       	pop	r0
    2d8c:	0f 90       	pop	r0
    2d8e:	0f 90       	pop	r0
    2d90:	0f 90       	pop	r0
    2d92:	cf 91       	pop	r28
    2d94:	df 91       	pop	r29
    2d96:	08 95       	ret

00002d98 <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8_t row, uint8_t col, const char * Str)
{
    2d98:	df 93       	push	r29
    2d9a:	cf 93       	push	r28
    2d9c:	00 d0       	rcall	.+0      	; 0x2d9e <LCD_displayStringRowColumn+0x6>
    2d9e:	00 d0       	rcall	.+0      	; 0x2da0 <LCD_displayStringRowColumn+0x8>
    2da0:	cd b7       	in	r28, 0x3d	; 61
    2da2:	de b7       	in	r29, 0x3e	; 62
    2da4:	89 83       	std	Y+1, r24	; 0x01
    2da6:	6a 83       	std	Y+2, r22	; 0x02
    2da8:	5c 83       	std	Y+4, r21	; 0x04
    2daa:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(row, col); /* Go to to the required LCD position */
    2dac:	89 81       	ldd	r24, Y+1	; 0x01
    2dae:	6a 81       	ldd	r22, Y+2	; 0x02
    2db0:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <LCD_goToRowColumn>
	LCD_displayString(Str); /* Display the string */
    2db4:	8b 81       	ldd	r24, Y+3	; 0x03
    2db6:	9c 81       	ldd	r25, Y+4	; 0x04
    2db8:	0e 94 61 16 	call	0x2cc2	; 0x2cc2 <LCD_displayString>
}
    2dbc:	0f 90       	pop	r0
    2dbe:	0f 90       	pop	r0
    2dc0:	0f 90       	pop	r0
    2dc2:	0f 90       	pop	r0
    2dc4:	cf 91       	pop	r28
    2dc6:	df 91       	pop	r29
    2dc8:	08 95       	ret

00002dca <LCD_intgerToString>:

void LCD_intgerToString(int32_t data)
{
    2dca:	df 93       	push	r29
    2dcc:	cf 93       	push	r28
    2dce:	cd b7       	in	r28, 0x3d	; 61
    2dd0:	de b7       	in	r29, 0x3e	; 62
    2dd2:	64 97       	sbiw	r28, 0x14	; 20
    2dd4:	0f b6       	in	r0, 0x3f	; 63
    2dd6:	f8 94       	cli
    2dd8:	de bf       	out	0x3e, r29	; 62
    2dda:	0f be       	out	0x3f, r0	; 63
    2ddc:	cd bf       	out	0x3d, r28	; 61
    2dde:	69 8b       	std	Y+17, r22	; 0x11
    2de0:	7a 8b       	std	Y+18, r23	; 0x12
    2de2:	8b 8b       	std	Y+19, r24	; 0x13
    2de4:	9c 8b       	std	Y+20, r25	; 0x14
   char buff[16]; /* String to hold the ASCII result */
   itoa(data,buff,10); /* 10 for decimal */
    2de6:	89 89       	ldd	r24, Y+17	; 0x11
    2de8:	9a 89       	ldd	r25, Y+18	; 0x12
    2dea:	9e 01       	movw	r18, r28
    2dec:	2f 5f       	subi	r18, 0xFF	; 255
    2dee:	3f 4f       	sbci	r19, 0xFF	; 255
    2df0:	b9 01       	movw	r22, r18
    2df2:	4a e0       	ldi	r20, 0x0A	; 10
    2df4:	50 e0       	ldi	r21, 0x00	; 0
    2df6:	0e 94 e7 18 	call	0x31ce	; 0x31ce <itoa>
   LCD_displayString(buff);
    2dfa:	ce 01       	movw	r24, r28
    2dfc:	01 96       	adiw	r24, 0x01	; 1
    2dfe:	0e 94 61 16 	call	0x2cc2	; 0x2cc2 <LCD_displayString>
}
    2e02:	64 96       	adiw	r28, 0x14	; 20
    2e04:	0f b6       	in	r0, 0x3f	; 63
    2e06:	f8 94       	cli
    2e08:	de bf       	out	0x3e, r29	; 62
    2e0a:	0f be       	out	0x3f, r0	; 63
    2e0c:	cd bf       	out	0x3d, r28	; 61
    2e0e:	cf 91       	pop	r28
    2e10:	df 91       	pop	r29
    2e12:	08 95       	ret

00002e14 <LCD_clearScreen>:

void LCD_clearScreen(void)
{
    2e14:	df 93       	push	r29
    2e16:	cf 93       	push	r28
    2e18:	cd b7       	in	r28, 0x3d	; 61
    2e1a:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND); /* Clear display */
    2e1c:	81 e0       	ldi	r24, 0x01	; 1
    2e1e:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <LCD_sendCommand>
}
    2e22:	cf 91       	pop	r28
    2e24:	df 91       	pop	r29
    2e26:	08 95       	ret

00002e28 <KEYPAD_CheckDebounce>:
/*******************************************************************************
 *                      Interrupt Service Routines                             *
 *******************************************************************************/

void KEYPAD_CheckDebounce(void)
{
    2e28:	df 93       	push	r29
    2e2a:	cf 93       	push	r28
    2e2c:	cd b7       	in	r28, 0x3d	; 61
    2e2e:	de b7       	in	r29, 0x3e	; 62
	debounce_Status = TRUE;	/* Rise the denounce flag */
    2e30:	81 e0       	ldi	r24, 0x01	; 1
    2e32:	80 93 76 00 	sts	0x0076, r24

	TIMER_stop(TIMER_1);	/* Stop the timer */
    2e36:	81 e0       	ldi	r24, 0x01	; 1
    2e38:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <TIMER_stop>
}
    2e3c:	cf 91       	pop	r28
    2e3e:	df 91       	pop	r29
    2e40:	08 95       	ret

00002e42 <KEYPAD_Init>:
* Parameters (out): None
* Return value: Std_ReturnType
* Description: Function to Initialize the KEYPAD
********************************************************************************/
Std_ReturnType KEYPAD_Init(void)
{
    2e42:	df 93       	push	r29
    2e44:	cf 93       	push	r28
    2e46:	cd b7       	in	r28, 0x3d	; 61
    2e48:	de b7       	in	r29, 0x3e	; 62
    2e4a:	2c 97       	sbiw	r28, 0x0c	; 12
    2e4c:	0f b6       	in	r0, 0x3f	; 63
    2e4e:	f8 94       	cli
    2e50:	de bf       	out	0x3e, r29	; 62
    2e52:	0f be       	out	0x3f, r0	; 63
    2e54:	cd bf       	out	0x3d, r28	; 61
	/* Local variable to store the counter value */
	uint8_t au8_counter;

	/* Timer configurations */
	strTIMER_ConfigType_t timer_Config = {INITIAL_VALUE, TWENTY_MS, TIMER_1, COMPARE};
    2e56:	ce 01       	movw	r24, r28
    2e58:	02 96       	adiw	r24, 0x02	; 2
    2e5a:	99 87       	std	Y+9, r25	; 0x09
    2e5c:	88 87       	std	Y+8, r24	; 0x08
    2e5e:	ea e6       	ldi	r30, 0x6A	; 106
    2e60:	f0 e0       	ldi	r31, 0x00	; 0
    2e62:	fb 87       	std	Y+11, r31	; 0x0b
    2e64:	ea 87       	std	Y+10, r30	; 0x0a
    2e66:	f6 e0       	ldi	r31, 0x06	; 6
    2e68:	fc 87       	std	Y+12, r31	; 0x0c
    2e6a:	ea 85       	ldd	r30, Y+10	; 0x0a
    2e6c:	fb 85       	ldd	r31, Y+11	; 0x0b
    2e6e:	00 80       	ld	r0, Z
    2e70:	8a 85       	ldd	r24, Y+10	; 0x0a
    2e72:	9b 85       	ldd	r25, Y+11	; 0x0b
    2e74:	01 96       	adiw	r24, 0x01	; 1
    2e76:	9b 87       	std	Y+11, r25	; 0x0b
    2e78:	8a 87       	std	Y+10, r24	; 0x0a
    2e7a:	e8 85       	ldd	r30, Y+8	; 0x08
    2e7c:	f9 85       	ldd	r31, Y+9	; 0x09
    2e7e:	00 82       	st	Z, r0
    2e80:	88 85       	ldd	r24, Y+8	; 0x08
    2e82:	99 85       	ldd	r25, Y+9	; 0x09
    2e84:	01 96       	adiw	r24, 0x01	; 1
    2e86:	99 87       	std	Y+9, r25	; 0x09
    2e88:	88 87       	std	Y+8, r24	; 0x08
    2e8a:	9c 85       	ldd	r25, Y+12	; 0x0c
    2e8c:	91 50       	subi	r25, 0x01	; 1
    2e8e:	9c 87       	std	Y+12, r25	; 0x0c
    2e90:	ec 85       	ldd	r30, Y+12	; 0x0c
    2e92:	ee 23       	and	r30, r30
    2e94:	51 f7       	brne	.-44     	; 0x2e6a <KEYPAD_Init+0x28>

	/* Timer driver initialization */
	TIMER_init(&timer_Config);
    2e96:	ce 01       	movw	r24, r28
    2e98:	02 96       	adiw	r24, 0x02	; 2
    2e9a:	0e 94 d5 06 	call	0xdaa	; 0xdaa <TIMER_init>

	/* Function to be called when the interrupt is fired */
	TIMER_setCallBack(KEYPAD_CheckDebounce, TIMER_1);
    2e9e:	84 e1       	ldi	r24, 0x14	; 20
    2ea0:	97 e1       	ldi	r25, 0x17	; 23
    2ea2:	61 e0       	ldi	r22, 0x01	; 1
    2ea4:	0e 94 e6 07 	call	0xfcc	; 0xfcc <TIMER_setCallBack>

	/* Set columns pins to output initially High */
	for(au8_counter = INITIAL_VALUE; au8_counter < N_col; au8_counter++)
    2ea8:	19 82       	std	Y+1, r1	; 0x01
    2eaa:	13 c0       	rjmp	.+38     	; 0x2ed2 <KEYPAD_Init+0x90>
	{
		DIO_setPinDirection(KEYPAD_PORT, (KEYPAD_COL_PIN + au8_counter), OUTPUT);
    2eac:	89 81       	ldd	r24, Y+1	; 0x01
    2eae:	98 2f       	mov	r25, r24
    2eb0:	9b 5f       	subi	r25, 0xFB	; 251
    2eb2:	82 e0       	ldi	r24, 0x02	; 2
    2eb4:	69 2f       	mov	r22, r25
    2eb6:	41 e0       	ldi	r20, 0x01	; 1
    2eb8:	0e 94 c2 09 	call	0x1384	; 0x1384 <DIO_setPinDirection>
		DIO_writePin(KEYPAD_PORT, (KEYPAD_COL_PIN + au8_counter), HIGH);
    2ebc:	89 81       	ldd	r24, Y+1	; 0x01
    2ebe:	98 2f       	mov	r25, r24
    2ec0:	9b 5f       	subi	r25, 0xFB	; 251
    2ec2:	82 e0       	ldi	r24, 0x02	; 2
    2ec4:	69 2f       	mov	r22, r25
    2ec6:	41 e0       	ldi	r20, 0x01	; 1
    2ec8:	0e 94 2b 0b 	call	0x1656	; 0x1656 <DIO_writePin>

	/* Function to be called when the interrupt is fired */
	TIMER_setCallBack(KEYPAD_CheckDebounce, TIMER_1);

	/* Set columns pins to output initially High */
	for(au8_counter = INITIAL_VALUE; au8_counter < N_col; au8_counter++)
    2ecc:	89 81       	ldd	r24, Y+1	; 0x01
    2ece:	8f 5f       	subi	r24, 0xFF	; 255
    2ed0:	89 83       	std	Y+1, r24	; 0x01
    2ed2:	89 81       	ldd	r24, Y+1	; 0x01
    2ed4:	83 30       	cpi	r24, 0x03	; 3
    2ed6:	50 f3       	brcs	.-44     	; 0x2eac <KEYPAD_Init+0x6a>
		DIO_setPinDirection(KEYPAD_PORT, (KEYPAD_COL_PIN + au8_counter), OUTPUT);
		DIO_writePin(KEYPAD_PORT, (KEYPAD_COL_PIN + au8_counter), HIGH);
	}

	/* Set rows pins to input and set pull up resistors */
	for(au8_counter = INITIAL_VALUE; au8_counter < N_row; au8_counter++)
    2ed8:	19 82       	std	Y+1, r1	; 0x01
    2eda:	13 c0       	rjmp	.+38     	; 0x2f02 <KEYPAD_Init+0xc0>
	{
		DIO_setPinDirection(KEYPAD_PORT, (KEYPAD_ROW_PIN + au8_counter), INPUT);
    2edc:	89 81       	ldd	r24, Y+1	; 0x01
    2ede:	98 2f       	mov	r25, r24
    2ee0:	9e 5f       	subi	r25, 0xFE	; 254
    2ee2:	82 e0       	ldi	r24, 0x02	; 2
    2ee4:	69 2f       	mov	r22, r25
    2ee6:	40 e0       	ldi	r20, 0x00	; 0
    2ee8:	0e 94 c2 09 	call	0x1384	; 0x1384 <DIO_setPinDirection>
		DIO_writePin(KEYPAD_PORT, (KEYPAD_ROW_PIN + au8_counter), HIGH);
    2eec:	89 81       	ldd	r24, Y+1	; 0x01
    2eee:	98 2f       	mov	r25, r24
    2ef0:	9e 5f       	subi	r25, 0xFE	; 254
    2ef2:	82 e0       	ldi	r24, 0x02	; 2
    2ef4:	69 2f       	mov	r22, r25
    2ef6:	41 e0       	ldi	r20, 0x01	; 1
    2ef8:	0e 94 2b 0b 	call	0x1656	; 0x1656 <DIO_writePin>
		DIO_setPinDirection(KEYPAD_PORT, (KEYPAD_COL_PIN + au8_counter), OUTPUT);
		DIO_writePin(KEYPAD_PORT, (KEYPAD_COL_PIN + au8_counter), HIGH);
	}

	/* Set rows pins to input and set pull up resistors */
	for(au8_counter = INITIAL_VALUE; au8_counter < N_row; au8_counter++)
    2efc:	89 81       	ldd	r24, Y+1	; 0x01
    2efe:	8f 5f       	subi	r24, 0xFF	; 255
    2f00:	89 83       	std	Y+1, r24	; 0x01
    2f02:	89 81       	ldd	r24, Y+1	; 0x01
    2f04:	83 30       	cpi	r24, 0x03	; 3
    2f06:	50 f3       	brcs	.-44     	; 0x2edc <KEYPAD_Init+0x9a>
	{
		DIO_setPinDirection(KEYPAD_PORT, (KEYPAD_ROW_PIN + au8_counter), INPUT);
		DIO_writePin(KEYPAD_PORT, (KEYPAD_ROW_PIN + au8_counter), HIGH);
	}

	Keypad_Status = KEYPAD_INITIALIZED;	/* Update the status of the keypad */
    2f08:	81 e0       	ldi	r24, 0x01	; 1
    2f0a:	80 93 77 00 	sts	0x0077, r24

	return E_OK;	/* return success status */
    2f0e:	80 e0       	ldi	r24, 0x00	; 0
}
    2f10:	2c 96       	adiw	r28, 0x0c	; 12
    2f12:	0f b6       	in	r0, 0x3f	; 63
    2f14:	f8 94       	cli
    2f16:	de bf       	out	0x3e, r29	; 62
    2f18:	0f be       	out	0x3f, r0	; 63
    2f1a:	cd bf       	out	0x3d, r28	; 61
    2f1c:	cf 91       	pop	r28
    2f1e:	df 91       	pop	r29
    2f20:	08 95       	ret

00002f22 <KEYPAD_getStatus>:
* Parameters (out): None
* Return value: Std_ReturnType
* Description: Function responsible for getting the status of the KEYPAD
********************************************************************************/
Std_ReturnType KEYPAD_getStatus(uint8_t * au8_data)
{
    2f22:	df 93       	push	r29
    2f24:	cf 93       	push	r28
    2f26:	00 d0       	rcall	.+0      	; 0x2f28 <KEYPAD_getStatus+0x6>
    2f28:	00 d0       	rcall	.+0      	; 0x2f2a <KEYPAD_getStatus+0x8>
    2f2a:	00 d0       	rcall	.+0      	; 0x2f2c <KEYPAD_getStatus+0xa>
    2f2c:	cd b7       	in	r28, 0x3d	; 61
    2f2e:	de b7       	in	r29, 0x3e	; 62
    2f30:	9b 83       	std	Y+3, r25	; 0x03
    2f32:	8a 83       	std	Y+2, r24	; 0x02
	static uint8_t au8_keypad_Status = NOT_PRESSED;	/* Static variable to retain the state of the keypad */
	uint8_t au8_keypad_RetValue = NOT_PRESSED;	/* Local variable to return the keypad status */
    2f34:	81 e0       	ldi	r24, 0x01	; 1
    2f36:	89 83       	std	Y+1, r24	; 0x01

	if(Keypad_Status == KEYPAD_NOT_INITIALIZED)
    2f38:	80 91 77 00 	lds	r24, 0x0077
    2f3c:	88 23       	and	r24, r24
    2f3e:	19 f4       	brne	.+6      	; 0x2f46 <KEYPAD_getStatus+0x24>
	{
		return E_NOT_OK;	/* Return error due to we can't use this API without initialize the keypad first */
    2f40:	21 e0       	ldi	r18, 0x01	; 1
    2f42:	2e 83       	std	Y+6, r18	; 0x06
    2f44:	4b c0       	rjmp	.+150    	; 0x2fdc <KEYPAD_getStatus+0xba>
	}
	else if(au8_data == NULL_PTR)
    2f46:	8a 81       	ldd	r24, Y+2	; 0x02
    2f48:	9b 81       	ldd	r25, Y+3	; 0x03
    2f4a:	00 97       	sbiw	r24, 0x00	; 0
    2f4c:	19 f4       	brne	.+6      	; 0x2f54 <KEYPAD_getStatus+0x32>
	{
		return E_NOT_OK;	/* Return error due to the pointer sent is a NULL pointer */
    2f4e:	31 e0       	ldi	r19, 0x01	; 1
    2f50:	3e 83       	std	Y+6, r19	; 0x06
    2f52:	44 c0       	rjmp	.+136    	; 0x2fdc <KEYPAD_getStatus+0xba>
	}
	else
	{
		switch(au8_keypad_Status)
    2f54:	80 91 68 00 	lds	r24, 0x0068
    2f58:	28 2f       	mov	r18, r24
    2f5a:	30 e0       	ldi	r19, 0x00	; 0
    2f5c:	3d 83       	std	Y+5, r19	; 0x05
    2f5e:	2c 83       	std	Y+4, r18	; 0x04
    2f60:	8c 81       	ldd	r24, Y+4	; 0x04
    2f62:	9d 81       	ldd	r25, Y+5	; 0x05
    2f64:	81 30       	cpi	r24, 0x01	; 1
    2f66:	91 05       	cpc	r25, r1
    2f68:	51 f0       	breq	.+20     	; 0x2f7e <KEYPAD_getStatus+0x5c>
    2f6a:	2c 81       	ldd	r18, Y+4	; 0x04
    2f6c:	3d 81       	ldd	r19, Y+5	; 0x05
    2f6e:	22 30       	cpi	r18, 0x02	; 2
    2f70:	31 05       	cpc	r19, r1
    2f72:	b9 f0       	breq	.+46     	; 0x2fa2 <KEYPAD_getStatus+0x80>
    2f74:	8c 81       	ldd	r24, Y+4	; 0x04
    2f76:	9d 81       	ldd	r25, Y+5	; 0x05
    2f78:	00 97       	sbiw	r24, 0x00	; 0
    2f7a:	09 f1       	breq	.+66     	; 0x2fbe <KEYPAD_getStatus+0x9c>
    2f7c:	2d c0       	rjmp	.+90     	; 0x2fd8 <KEYPAD_getStatus+0xb6>
		{
		case NOT_PRESSED:	au8_keypad_RetValue = KEYPAD_getPressedKey(au8_data);
    2f7e:	8a 81       	ldd	r24, Y+2	; 0x02
    2f80:	9b 81       	ldd	r25, Y+3	; 0x03
    2f82:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <KEYPAD_getPressedKey>
    2f86:	89 83       	std	Y+1, r24	; 0x01

							if(au8_keypad_RetValue == PRESSED)
    2f88:	89 81       	ldd	r24, Y+1	; 0x01
    2f8a:	88 23       	and	r24, r24
    2f8c:	39 f4       	brne	.+14     	; 0x2f9c <KEYPAD_getStatus+0x7a>
							{
								au8_keypad_Status = DEBOUNCING;	/* Update the KEYPAD state */
    2f8e:	82 e0       	ldi	r24, 0x02	; 2
    2f90:	80 93 68 00 	sts	0x0068, r24
								TIMER_start(TIMER_1, T1_F_CPU_8);	/* Start timer */
    2f94:	81 e0       	ldi	r24, 0x01	; 1
    2f96:	62 e0       	ldi	r22, 0x02	; 2
    2f98:	0e 94 2d 08 	call	0x105a	; 0x105a <TIMER_start>
							}
							au8_keypad_RetValue = NOT_PRESSED;	/* Update the return value of the keypad */
    2f9c:	81 e0       	ldi	r24, 0x01	; 1
    2f9e:	89 83       	std	Y+1, r24	; 0x01
    2fa0:	1b c0       	rjmp	.+54     	; 0x2fd8 <KEYPAD_getStatus+0xb6>
							break;

		case DEBOUNCING:	if(debounce_Status == TRUE)
    2fa2:	80 91 76 00 	lds	r24, 0x0076
    2fa6:	81 30       	cpi	r24, 0x01	; 1
    2fa8:	b9 f4       	brne	.+46     	; 0x2fd8 <KEYPAD_getStatus+0xb6>
							{
								KEYPAD_getPressedKey(au8_data);	/* Read the data after denouncing */
    2faa:	8a 81       	ldd	r24, Y+2	; 0x02
    2fac:	9b 81       	ldd	r25, Y+3	; 0x03
    2fae:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <KEYPAD_getPressedKey>
								debounce_Status = FALSE;	/* Reset the denounce flag */
    2fb2:	10 92 76 00 	sts	0x0076, r1
								au8_keypad_Status = PRESSED;/* Update the KEYPAD state */
    2fb6:	10 92 68 00 	sts	0x0068, r1
								au8_keypad_RetValue = PRESSED;/* Update the return value of the keypad */
    2fba:	19 82       	std	Y+1, r1	; 0x01
    2fbc:	0d c0       	rjmp	.+26     	; 0x2fd8 <KEYPAD_getStatus+0xb6>
							}
							break;

		case PRESSED:		au8_keypad_RetValue = KEYPAD_getPressedKey(au8_data);
    2fbe:	8a 81       	ldd	r24, Y+2	; 0x02
    2fc0:	9b 81       	ldd	r25, Y+3	; 0x03
    2fc2:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <KEYPAD_getPressedKey>
    2fc6:	89 83       	std	Y+1, r24	; 0x01

							if(au8_keypad_RetValue == NOT_PRESSED)
    2fc8:	89 81       	ldd	r24, Y+1	; 0x01
    2fca:	81 30       	cpi	r24, 0x01	; 1
    2fcc:	19 f4       	brne	.+6      	; 0x2fd4 <KEYPAD_getStatus+0xb2>
							{
								/* Reset the state machine of the keypad only if the key is released */
								au8_keypad_Status = NOT_PRESSED;
    2fce:	81 e0       	ldi	r24, 0x01	; 1
    2fd0:	80 93 68 00 	sts	0x0068, r24
							}
							au8_keypad_RetValue = NOT_PRESSED;	/* Update the return value of the keypad */
    2fd4:	81 e0       	ldi	r24, 0x01	; 1
    2fd6:	89 83       	std	Y+1, r24	; 0x01
							break;
		}

		return au8_keypad_RetValue;	/* Return the keypad status if it is (PRESSED, NOT PRESSED) */
    2fd8:	99 81       	ldd	r25, Y+1	; 0x01
    2fda:	9e 83       	std	Y+6, r25	; 0x06
    2fdc:	8e 81       	ldd	r24, Y+6	; 0x06
	}
}
    2fde:	26 96       	adiw	r28, 0x06	; 6
    2fe0:	0f b6       	in	r0, 0x3f	; 63
    2fe2:	f8 94       	cli
    2fe4:	de bf       	out	0x3e, r29	; 62
    2fe6:	0f be       	out	0x3f, r0	; 63
    2fe8:	cd bf       	out	0x3d, r28	; 61
    2fea:	cf 91       	pop	r28
    2fec:	df 91       	pop	r29
    2fee:	08 95       	ret

00002ff0 <KEYPAD_getPressedKey>:
 * Parameters (out): None
 * Return value: Std_ReturnType
 * Description: Function responsible for getting the pressed keypad key
 ********************************************************************************/
Std_ReturnType KEYPAD_getPressedKey(uint8_t * au8_data)
{
    2ff0:	df 93       	push	r29
    2ff2:	cf 93       	push	r28
    2ff4:	00 d0       	rcall	.+0      	; 0x2ff6 <KEYPAD_getPressedKey+0x6>
    2ff6:	00 d0       	rcall	.+0      	; 0x2ff8 <KEYPAD_getPressedKey+0x8>
    2ff8:	00 d0       	rcall	.+0      	; 0x2ffa <KEYPAD_getPressedKey+0xa>
    2ffa:	cd b7       	in	r28, 0x3d	; 61
    2ffc:	de b7       	in	r29, 0x3e	; 62
    2ffe:	9e 83       	std	Y+6, r25	; 0x06
    3000:	8d 83       	std	Y+5, r24	; 0x05
	uint8_t au8_ColumnCounter;
	uint8_t au8_RowCounter;
	uint8_t au8_KeyStatus;
	uint8_t au8_Keyflag = NOT_PRESSED;
    3002:	81 e0       	ldi	r24, 0x01	; 1
    3004:	89 83       	std	Y+1, r24	; 0x01

	/* Loops on every column */
	for(au8_ColumnCounter = INITIAL_VALUE; au8_ColumnCounter < N_col; au8_ColumnCounter++)
    3006:	1b 82       	std	Y+3, r1	; 0x03
    3008:	3b c0       	rjmp	.+118    	; 0x3080 <KEYPAD_getPressedKey+0x90>
	{
		/* Set column value to low */
		DIO_writePin(KEYPAD_PORT, (KEYPAD_COL_PIN + au8_ColumnCounter) , LOW);
    300a:	8b 81       	ldd	r24, Y+3	; 0x03
    300c:	98 2f       	mov	r25, r24
    300e:	9b 5f       	subi	r25, 0xFB	; 251
    3010:	82 e0       	ldi	r24, 0x02	; 2
    3012:	69 2f       	mov	r22, r25
    3014:	40 e0       	ldi	r20, 0x00	; 0
    3016:	0e 94 2b 0b 	call	0x1656	; 0x1656 <DIO_writePin>

		/* Loops on every row */
		for(au8_RowCounter = INITIAL_VALUE; au8_RowCounter < N_row; au8_RowCounter++)
    301a:	1a 82       	std	Y+2, r1	; 0x02
    301c:	23 c0       	rjmp	.+70     	; 0x3064 <KEYPAD_getPressedKey+0x74>
		{
			/* Read row value */
			DIO_readPin(KEYPAD_PORT, (KEYPAD_ROW_PIN + au8_RowCounter), &au8_KeyStatus);
    301e:	8a 81       	ldd	r24, Y+2	; 0x02
    3020:	98 2f       	mov	r25, r24
    3022:	9e 5f       	subi	r25, 0xFE	; 254
    3024:	9e 01       	movw	r18, r28
    3026:	2c 5f       	subi	r18, 0xFC	; 252
    3028:	3f 4f       	sbci	r19, 0xFF	; 255
    302a:	82 e0       	ldi	r24, 0x02	; 2
    302c:	69 2f       	mov	r22, r25
    302e:	a9 01       	movw	r20, r18
    3030:	0e 94 a5 0c 	call	0x194a	; 0x194a <DIO_readPin>
			/* Check if row is pressed */
			if(au8_KeyStatus == PRESSED)
    3034:	8c 81       	ldd	r24, Y+4	; 0x04
    3036:	88 23       	and	r24, r24
    3038:	91 f4       	brne	.+36     	; 0x305e <KEYPAD_getPressedKey+0x6e>
			{
				#if (N_col == 3)
				*au8_data = KeyPad_4x3_adjustKeyNumber((au8_RowCounter * N_col) + (au8_ColumnCounter+1));
    303a:	8a 81       	ldd	r24, Y+2	; 0x02
    303c:	28 2f       	mov	r18, r24
    303e:	30 e0       	ldi	r19, 0x00	; 0
    3040:	c9 01       	movw	r24, r18
    3042:	88 0f       	add	r24, r24
    3044:	99 1f       	adc	r25, r25
    3046:	82 0f       	add	r24, r18
    3048:	93 1f       	adc	r25, r19
    304a:	98 2f       	mov	r25, r24
    304c:	8b 81       	ldd	r24, Y+3	; 0x03
    304e:	89 0f       	add	r24, r25
    3050:	8f 5f       	subi	r24, 0xFF	; 255
    3052:	0e 94 4d 18 	call	0x309a	; 0x309a <KeyPad_4x3_adjustKeyNumber>
    3056:	ed 81       	ldd	r30, Y+5	; 0x05
    3058:	fe 81       	ldd	r31, Y+6	; 0x06
    305a:	80 83       	st	Z, r24
				#elif (N_col == 4)
				*au8_data = KeyPad_4x4_adjustKeyNumber((au8_RowCounter * N_col) + (au8_ColumnCounter+1));
				#endif
				/* Return column value to HIGH */
				au8_Keyflag = PRESSED;
    305c:	19 82       	std	Y+1, r1	; 0x01
	{
		/* Set column value to low */
		DIO_writePin(KEYPAD_PORT, (KEYPAD_COL_PIN + au8_ColumnCounter) , LOW);

		/* Loops on every row */
		for(au8_RowCounter = INITIAL_VALUE; au8_RowCounter < N_row; au8_RowCounter++)
    305e:	8a 81       	ldd	r24, Y+2	; 0x02
    3060:	8f 5f       	subi	r24, 0xFF	; 255
    3062:	8a 83       	std	Y+2, r24	; 0x02
    3064:	8a 81       	ldd	r24, Y+2	; 0x02
    3066:	83 30       	cpi	r24, 0x03	; 3
    3068:	d0 f2       	brcs	.-76     	; 0x301e <KEYPAD_getPressedKey+0x2e>
				#endif
				/* Return column value to HIGH */
				au8_Keyflag = PRESSED;
			}
		}
		DIO_writePin(KEYPAD_PORT, (KEYPAD_COL_PIN + au8_ColumnCounter), HIGH);
    306a:	8b 81       	ldd	r24, Y+3	; 0x03
    306c:	98 2f       	mov	r25, r24
    306e:	9b 5f       	subi	r25, 0xFB	; 251
    3070:	82 e0       	ldi	r24, 0x02	; 2
    3072:	69 2f       	mov	r22, r25
    3074:	41 e0       	ldi	r20, 0x01	; 1
    3076:	0e 94 2b 0b 	call	0x1656	; 0x1656 <DIO_writePin>
	uint8_t au8_RowCounter;
	uint8_t au8_KeyStatus;
	uint8_t au8_Keyflag = NOT_PRESSED;

	/* Loops on every column */
	for(au8_ColumnCounter = INITIAL_VALUE; au8_ColumnCounter < N_col; au8_ColumnCounter++)
    307a:	8b 81       	ldd	r24, Y+3	; 0x03
    307c:	8f 5f       	subi	r24, 0xFF	; 255
    307e:	8b 83       	std	Y+3, r24	; 0x03
    3080:	8b 81       	ldd	r24, Y+3	; 0x03
    3082:	83 30       	cpi	r24, 0x03	; 3
    3084:	10 f2       	brcs	.-124    	; 0x300a <KEYPAD_getPressedKey+0x1a>
			}
		}
		DIO_writePin(KEYPAD_PORT, (KEYPAD_COL_PIN + au8_ColumnCounter), HIGH);
	}

	return au8_Keyflag;	/* Return the key flag if it is (PRESSED, NOT_PRESSED) */
    3086:	89 81       	ldd	r24, Y+1	; 0x01
}
    3088:	26 96       	adiw	r28, 0x06	; 6
    308a:	0f b6       	in	r0, 0x3f	; 63
    308c:	f8 94       	cli
    308e:	de bf       	out	0x3e, r29	; 62
    3090:	0f be       	out	0x3f, r0	; 63
    3092:	cd bf       	out	0x3d, r28	; 61
    3094:	cf 91       	pop	r28
    3096:	df 91       	pop	r29
    3098:	08 95       	ret

0000309a <KeyPad_4x3_adjustKeyNumber>:
 * Parameters (out): None
 * Return value: uint8_t
 * Description: Function responsible for getting the actual number pressed
 ********************************************************************************/
static uint8_t KeyPad_4x3_adjustKeyNumber(uint8_t au8_button_number)
{
    309a:	df 93       	push	r29
    309c:	cf 93       	push	r28
    309e:	00 d0       	rcall	.+0      	; 0x30a0 <KeyPad_4x3_adjustKeyNumber+0x6>
    30a0:	00 d0       	rcall	.+0      	; 0x30a2 <KeyPad_4x3_adjustKeyNumber+0x8>
    30a2:	cd b7       	in	r28, 0x3d	; 61
    30a4:	de b7       	in	r29, 0x3e	; 62
    30a6:	89 83       	std	Y+1, r24	; 0x01
	switch(au8_button_number)
    30a8:	89 81       	ldd	r24, Y+1	; 0x01
    30aa:	28 2f       	mov	r18, r24
    30ac:	30 e0       	ldi	r19, 0x00	; 0
    30ae:	3c 83       	std	Y+4, r19	; 0x04
    30b0:	2b 83       	std	Y+3, r18	; 0x03
    30b2:	8b 81       	ldd	r24, Y+3	; 0x03
    30b4:	9c 81       	ldd	r25, Y+4	; 0x04
    30b6:	8a 30       	cpi	r24, 0x0A	; 10
    30b8:	91 05       	cpc	r25, r1
    30ba:	81 f0       	breq	.+32     	; 0x30dc <KeyPad_4x3_adjustKeyNumber+0x42>
    30bc:	2b 81       	ldd	r18, Y+3	; 0x03
    30be:	3c 81       	ldd	r19, Y+4	; 0x04
    30c0:	2a 30       	cpi	r18, 0x0A	; 10
    30c2:	31 05       	cpc	r19, r1
    30c4:	9c f0       	brlt	.+38     	; 0x30ec <KeyPad_4x3_adjustKeyNumber+0x52>
    30c6:	8b 81       	ldd	r24, Y+3	; 0x03
    30c8:	9c 81       	ldd	r25, Y+4	; 0x04
    30ca:	8b 30       	cpi	r24, 0x0B	; 11
    30cc:	91 05       	cpc	r25, r1
    30ce:	49 f0       	breq	.+18     	; 0x30e2 <KeyPad_4x3_adjustKeyNumber+0x48>
    30d0:	2b 81       	ldd	r18, Y+3	; 0x03
    30d2:	3c 81       	ldd	r19, Y+4	; 0x04
    30d4:	2c 30       	cpi	r18, 0x0C	; 12
    30d6:	31 05       	cpc	r19, r1
    30d8:	31 f0       	breq	.+12     	; 0x30e6 <KeyPad_4x3_adjustKeyNumber+0x4c>
    30da:	08 c0       	rjmp	.+16     	; 0x30ec <KeyPad_4x3_adjustKeyNumber+0x52>
	{
	case 10: return BUTTON_PLUS; /* ASCII Code of = */
    30dc:	3b e2       	ldi	r19, 0x2B	; 43
    30de:	3a 83       	std	Y+2, r19	; 0x02
    30e0:	07 c0       	rjmp	.+14     	; 0x30f0 <KeyPad_4x3_adjustKeyNumber+0x56>
	break;
	case 11: return BUTTON_0;
    30e2:	1a 82       	std	Y+2, r1	; 0x02
    30e4:	05 c0       	rjmp	.+10     	; 0x30f0 <KeyPad_4x3_adjustKeyNumber+0x56>
	break;
	case 12: return BUTTON_HASH; /* ASCII Code of # */
    30e6:	83 e2       	ldi	r24, 0x23	; 35
    30e8:	8a 83       	std	Y+2, r24	; 0x02
    30ea:	02 c0       	rjmp	.+4      	; 0x30f0 <KeyPad_4x3_adjustKeyNumber+0x56>
	break;
	default: return au8_button_number;
    30ec:	99 81       	ldd	r25, Y+1	; 0x01
    30ee:	9a 83       	std	Y+2, r25	; 0x02
    30f0:	8a 81       	ldd	r24, Y+2	; 0x02
	}
}
    30f2:	0f 90       	pop	r0
    30f4:	0f 90       	pop	r0
    30f6:	0f 90       	pop	r0
    30f8:	0f 90       	pop	r0
    30fa:	cf 91       	pop	r28
    30fc:	df 91       	pop	r29
    30fe:	08 95       	ret

00003100 <App_init>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 *******************************************************************************/
void App_init(void)
{
    3100:	df 93       	push	r29
    3102:	cf 93       	push	r28
    3104:	cd b7       	in	r28, 0x3d	; 61
    3106:	de b7       	in	r29, 0x3e	; 62
	sei();	/* Enable the global Interrupt (I-bit) */
    3108:	78 94       	sei

	KEYPAD_Init();	/* KEYPAD Initialization */
    310a:	0e 94 21 17 	call	0x2e42	; 0x2e42 <KEYPAD_Init>

	LCD_init();		/* LCD Initialization */
    310e:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <LCD_init>
}
    3112:	cf 91       	pop	r28
    3114:	df 91       	pop	r29
    3116:	08 95       	ret

00003118 <App_Update>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 *******************************************************************************/
void App_Update(void)
{
    3118:	df 93       	push	r29
    311a:	cf 93       	push	r28
    311c:	cd b7       	in	r28, 0x3d	; 61
    311e:	de b7       	in	r29, 0x3e	; 62
	gu8_flag = KEYPAD_getStatus(&gu8_key);/* get the pressed key number */
    3120:	88 e7       	ldi	r24, 0x78	; 120
    3122:	90 e0       	ldi	r25, 0x00	; 0
    3124:	0e 94 91 17 	call	0x2f22	; 0x2f22 <KEYPAD_getStatus>
    3128:	80 93 69 00 	sts	0x0069, r24

	/* Check if the key is pressed or not */
	if(PRESSED == gu8_flag)
    312c:	80 91 69 00 	lds	r24, 0x0069
    3130:	88 23       	and	r24, r24
    3132:	51 f4       	brne	.+20     	; 0x3148 <App_Update+0x30>
	{
		LCD_intgerToString(gu8_key);	/* display the pressed keypad switch */
    3134:	80 91 78 00 	lds	r24, 0x0078
    3138:	88 2f       	mov	r24, r24
    313a:	90 e0       	ldi	r25, 0x00	; 0
    313c:	a0 e0       	ldi	r26, 0x00	; 0
    313e:	b0 e0       	ldi	r27, 0x00	; 0
    3140:	bc 01       	movw	r22, r24
    3142:	cd 01       	movw	r24, r26
    3144:	0e 94 e5 16 	call	0x2dca	; 0x2dca <LCD_intgerToString>
	}
}
    3148:	cf 91       	pop	r28
    314a:	df 91       	pop	r29
    314c:	08 95       	ret

0000314e <main>:
/*****************************************************************************************
 *                                MAIN FUNCTION                                          *
 *****************************************************************************************/

int main(void)
{
    314e:	df 93       	push	r29
    3150:	cf 93       	push	r28
    3152:	cd b7       	in	r28, 0x3d	; 61
    3154:	de b7       	in	r29, 0x3e	; 62
	/********************************************************************************
	 *                           SYSTEM INITIALIZATION                              *
	 ********************************************************************************/

	App_init();	/* Test KEYPAD in simple application */
    3156:	0e 94 80 18 	call	0x3100	; 0x3100 <App_init>
	 *                        APPLICATION	(SUPER LOOP)						    *
	 ********************************************************************************/

	while(1)
	{
		App_Update();
    315a:	0e 94 8c 18 	call	0x3118	; 0x3118 <App_Update>
    315e:	fd cf       	rjmp	.-6      	; 0x315a <main+0xc>

00003160 <__prologue_saves__>:
    3160:	2f 92       	push	r2
    3162:	3f 92       	push	r3
    3164:	4f 92       	push	r4
    3166:	5f 92       	push	r5
    3168:	6f 92       	push	r6
    316a:	7f 92       	push	r7
    316c:	8f 92       	push	r8
    316e:	9f 92       	push	r9
    3170:	af 92       	push	r10
    3172:	bf 92       	push	r11
    3174:	cf 92       	push	r12
    3176:	df 92       	push	r13
    3178:	ef 92       	push	r14
    317a:	ff 92       	push	r15
    317c:	0f 93       	push	r16
    317e:	1f 93       	push	r17
    3180:	cf 93       	push	r28
    3182:	df 93       	push	r29
    3184:	cd b7       	in	r28, 0x3d	; 61
    3186:	de b7       	in	r29, 0x3e	; 62
    3188:	ca 1b       	sub	r28, r26
    318a:	db 0b       	sbc	r29, r27
    318c:	0f b6       	in	r0, 0x3f	; 63
    318e:	f8 94       	cli
    3190:	de bf       	out	0x3e, r29	; 62
    3192:	0f be       	out	0x3f, r0	; 63
    3194:	cd bf       	out	0x3d, r28	; 61
    3196:	09 94       	ijmp

00003198 <__epilogue_restores__>:
    3198:	2a 88       	ldd	r2, Y+18	; 0x12
    319a:	39 88       	ldd	r3, Y+17	; 0x11
    319c:	48 88       	ldd	r4, Y+16	; 0x10
    319e:	5f 84       	ldd	r5, Y+15	; 0x0f
    31a0:	6e 84       	ldd	r6, Y+14	; 0x0e
    31a2:	7d 84       	ldd	r7, Y+13	; 0x0d
    31a4:	8c 84       	ldd	r8, Y+12	; 0x0c
    31a6:	9b 84       	ldd	r9, Y+11	; 0x0b
    31a8:	aa 84       	ldd	r10, Y+10	; 0x0a
    31aa:	b9 84       	ldd	r11, Y+9	; 0x09
    31ac:	c8 84       	ldd	r12, Y+8	; 0x08
    31ae:	df 80       	ldd	r13, Y+7	; 0x07
    31b0:	ee 80       	ldd	r14, Y+6	; 0x06
    31b2:	fd 80       	ldd	r15, Y+5	; 0x05
    31b4:	0c 81       	ldd	r16, Y+4	; 0x04
    31b6:	1b 81       	ldd	r17, Y+3	; 0x03
    31b8:	aa 81       	ldd	r26, Y+2	; 0x02
    31ba:	b9 81       	ldd	r27, Y+1	; 0x01
    31bc:	ce 0f       	add	r28, r30
    31be:	d1 1d       	adc	r29, r1
    31c0:	0f b6       	in	r0, 0x3f	; 63
    31c2:	f8 94       	cli
    31c4:	de bf       	out	0x3e, r29	; 62
    31c6:	0f be       	out	0x3f, r0	; 63
    31c8:	cd bf       	out	0x3d, r28	; 61
    31ca:	ed 01       	movw	r28, r26
    31cc:	08 95       	ret

000031ce <itoa>:
    31ce:	fb 01       	movw	r30, r22
    31d0:	9f 01       	movw	r18, r30
    31d2:	e8 94       	clt
    31d4:	42 30       	cpi	r20, 0x02	; 2
    31d6:	c4 f0       	brlt	.+48     	; 0x3208 <itoa+0x3a>
    31d8:	45 32       	cpi	r20, 0x25	; 37
    31da:	b4 f4       	brge	.+44     	; 0x3208 <itoa+0x3a>
    31dc:	4a 30       	cpi	r20, 0x0A	; 10
    31de:	29 f4       	brne	.+10     	; 0x31ea <itoa+0x1c>
    31e0:	97 fb       	bst	r25, 7
    31e2:	1e f4       	brtc	.+6      	; 0x31ea <itoa+0x1c>
    31e4:	90 95       	com	r25
    31e6:	81 95       	neg	r24
    31e8:	9f 4f       	sbci	r25, 0xFF	; 255
    31ea:	64 2f       	mov	r22, r20
    31ec:	77 27       	eor	r23, r23
    31ee:	0e 94 18 19 	call	0x3230	; 0x3230 <__udivmodhi4>
    31f2:	80 5d       	subi	r24, 0xD0	; 208
    31f4:	8a 33       	cpi	r24, 0x3A	; 58
    31f6:	0c f0       	brlt	.+2      	; 0x31fa <itoa+0x2c>
    31f8:	89 5d       	subi	r24, 0xD9	; 217
    31fa:	81 93       	st	Z+, r24
    31fc:	cb 01       	movw	r24, r22
    31fe:	00 97       	sbiw	r24, 0x00	; 0
    3200:	a1 f7       	brne	.-24     	; 0x31ea <itoa+0x1c>
    3202:	16 f4       	brtc	.+4      	; 0x3208 <itoa+0x3a>
    3204:	5d e2       	ldi	r21, 0x2D	; 45
    3206:	51 93       	st	Z+, r21
    3208:	10 82       	st	Z, r1
    320a:	c9 01       	movw	r24, r18
    320c:	0c 94 08 19 	jmp	0x3210	; 0x3210 <strrev>

00003210 <strrev>:
    3210:	dc 01       	movw	r26, r24
    3212:	fc 01       	movw	r30, r24
    3214:	67 2f       	mov	r22, r23
    3216:	71 91       	ld	r23, Z+
    3218:	77 23       	and	r23, r23
    321a:	e1 f7       	brne	.-8      	; 0x3214 <strrev+0x4>
    321c:	32 97       	sbiw	r30, 0x02	; 2
    321e:	04 c0       	rjmp	.+8      	; 0x3228 <strrev+0x18>
    3220:	7c 91       	ld	r23, X
    3222:	6d 93       	st	X+, r22
    3224:	70 83       	st	Z, r23
    3226:	62 91       	ld	r22, -Z
    3228:	ae 17       	cp	r26, r30
    322a:	bf 07       	cpc	r27, r31
    322c:	c8 f3       	brcs	.-14     	; 0x3220 <strrev+0x10>
    322e:	08 95       	ret

00003230 <__udivmodhi4>:
    3230:	aa 1b       	sub	r26, r26
    3232:	bb 1b       	sub	r27, r27
    3234:	51 e1       	ldi	r21, 0x11	; 17
    3236:	07 c0       	rjmp	.+14     	; 0x3246 <__udivmodhi4_ep>

00003238 <__udivmodhi4_loop>:
    3238:	aa 1f       	adc	r26, r26
    323a:	bb 1f       	adc	r27, r27
    323c:	a6 17       	cp	r26, r22
    323e:	b7 07       	cpc	r27, r23
    3240:	10 f0       	brcs	.+4      	; 0x3246 <__udivmodhi4_ep>
    3242:	a6 1b       	sub	r26, r22
    3244:	b7 0b       	sbc	r27, r23

00003246 <__udivmodhi4_ep>:
    3246:	88 1f       	adc	r24, r24
    3248:	99 1f       	adc	r25, r25
    324a:	5a 95       	dec	r21
    324c:	a9 f7       	brne	.-22     	; 0x3238 <__udivmodhi4_loop>
    324e:	80 95       	com	r24
    3250:	90 95       	com	r25
    3252:	bc 01       	movw	r22, r24
    3254:	cd 01       	movw	r24, r26
    3256:	08 95       	ret

00003258 <_exit>:
    3258:	f8 94       	cli

0000325a <__stop_program>:
    325a:	ff cf       	rjmp	.-2      	; 0x325a <__stop_program>
