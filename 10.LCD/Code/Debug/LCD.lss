
LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002910  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002a  00800060  00002910  00002984  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002160  00000000  00000000  000029b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000012a8  00000000  00000000  00004b10  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00005db8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00005ef8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00007cb1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  00008b9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  0000994c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  00009aac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  00009d39  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000a507  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e1       	ldi	r30, 0x10	; 16
      68:	f9 e2       	ldi	r31, 0x29	; 41
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 38       	cpi	r26, 0x8A	; 138
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 03 14 	call	0x2806	; 0x2806 <main>
      7a:	0c 94 86 14 	jmp	0x290c	; 0x290c <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 0a 14 	jmp	0x2814	; 0x2814 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a2 e8       	ldi	r26, 0x82	; 130
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 26 14 	jmp	0x284c	; 0x284c <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 16 14 	jmp	0x282c	; 0x282c <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 32 14 	jmp	0x2864	; 0x2864 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 16 14 	jmp	0x282c	; 0x282c <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 32 14 	jmp	0x2864	; 0x2864 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 0a 14 	jmp	0x2814	; 0x2814 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	82 e8       	ldi	r24, 0x82	; 130
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 26 14 	jmp	0x284c	; 0x284c <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 16 14 	jmp	0x282c	; 0x282c <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 32 14 	jmp	0x2864	; 0x2864 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 16 14 	jmp	0x282c	; 0x282c <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 32 14 	jmp	0x2864	; 0x2864 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 16 14 	jmp	0x282c	; 0x282c <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 32 14 	jmp	0x2864	; 0x2864 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 1a 14 	jmp	0x2834	; 0x2834 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 36 14 	jmp	0x286c	; 0x286c <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <DIO_setPortDirection>:
 * [in/out]	  None
 *
 * [Returns]:     Error state
 ******************************************************************************/
enuDIO_E_STATE_t DIO_setPortDirection(enuDIO_PortId_t enu_portID, enuDIO_DirectionType_t enu_portDirection)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
     b3e:	27 97       	sbiw	r28, 0x07	; 7
     b40:	0f b6       	in	r0, 0x3f	; 63
     b42:	f8 94       	cli
     b44:	de bf       	out	0x3e, r29	; 62
     b46:	0f be       	out	0x3f, r0	; 63
     b48:	cd bf       	out	0x3d, r28	; 61
     b4a:	8a 83       	std	Y+2, r24	; 0x02
     b4c:	6b 83       	std	Y+3, r22	; 0x03
	enuDIO_E_STATE_t enu_ErrorState = E_NOT_OK;
     b4e:	81 e0       	ldi	r24, 0x01	; 1
     b50:	89 83       	std	Y+1, r24	; 0x01

	/* Check if the PORT is input or output */
    if(enu_portDirection == HIGH)
     b52:	8b 81       	ldd	r24, Y+3	; 0x03
     b54:	81 30       	cpi	r24, 0x01	; 1
     b56:	d1 f5       	brne	.+116    	; 0xbcc <DIO_setPortDirection+0x96>
    {
    	switch (enu_portID)
     b58:	8a 81       	ldd	r24, Y+2	; 0x02
     b5a:	28 2f       	mov	r18, r24
     b5c:	30 e0       	ldi	r19, 0x00	; 0
     b5e:	3f 83       	std	Y+7, r19	; 0x07
     b60:	2e 83       	std	Y+6, r18	; 0x06
     b62:	8e 81       	ldd	r24, Y+6	; 0x06
     b64:	9f 81       	ldd	r25, Y+7	; 0x07
     b66:	81 30       	cpi	r24, 0x01	; 1
     b68:	91 05       	cpc	r25, r1
     b6a:	d9 f0       	breq	.+54     	; 0xba2 <DIO_setPortDirection+0x6c>
     b6c:	2e 81       	ldd	r18, Y+6	; 0x06
     b6e:	3f 81       	ldd	r19, Y+7	; 0x07
     b70:	22 30       	cpi	r18, 0x02	; 2
     b72:	31 05       	cpc	r19, r1
     b74:	2c f4       	brge	.+10     	; 0xb80 <DIO_setPortDirection+0x4a>
     b76:	8e 81       	ldd	r24, Y+6	; 0x06
     b78:	9f 81       	ldd	r25, Y+7	; 0x07
     b7a:	00 97       	sbiw	r24, 0x00	; 0
     b7c:	61 f0       	breq	.+24     	; 0xb96 <DIO_setPortDirection+0x60>
     b7e:	23 c0       	rjmp	.+70     	; 0xbc6 <DIO_setPortDirection+0x90>
     b80:	2e 81       	ldd	r18, Y+6	; 0x06
     b82:	3f 81       	ldd	r19, Y+7	; 0x07
     b84:	22 30       	cpi	r18, 0x02	; 2
     b86:	31 05       	cpc	r19, r1
     b88:	91 f0       	breq	.+36     	; 0xbae <DIO_setPortDirection+0x78>
     b8a:	8e 81       	ldd	r24, Y+6	; 0x06
     b8c:	9f 81       	ldd	r25, Y+7	; 0x07
     b8e:	83 30       	cpi	r24, 0x03	; 3
     b90:	91 05       	cpc	r25, r1
     b92:	99 f0       	breq	.+38     	; 0xbba <DIO_setPortDirection+0x84>
     b94:	18 c0       	rjmp	.+48     	; 0xbc6 <DIO_setPortDirection+0x90>
		{
		case DIO_PORTA:
			DDRA_DIR_R = OUTPUT_PORT;
     b96:	ea e3       	ldi	r30, 0x3A	; 58
     b98:	f0 e0       	ldi	r31, 0x00	; 0
     b9a:	8f ef       	ldi	r24, 0xFF	; 255
     b9c:	80 83       	st	Z, r24
			enu_ErrorState = DIO_E_PARAM_VALID;
     b9e:	19 82       	std	Y+1, r1	; 0x01
     ba0:	50 c0       	rjmp	.+160    	; 0xc42 <DIO_setPortDirection+0x10c>
			break;
		case DIO_PORTB:
			DDRB_DIR_R = OUTPUT_PORT;
     ba2:	e7 e3       	ldi	r30, 0x37	; 55
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	8f ef       	ldi	r24, 0xFF	; 255
     ba8:	80 83       	st	Z, r24
			enu_ErrorState = DIO_E_PARAM_VALID;
     baa:	19 82       	std	Y+1, r1	; 0x01
     bac:	4a c0       	rjmp	.+148    	; 0xc42 <DIO_setPortDirection+0x10c>
			break;
		case DIO_PORTC:
			DDRC_DIR_R = OUTPUT_PORT;
     bae:	e4 e3       	ldi	r30, 0x34	; 52
     bb0:	f0 e0       	ldi	r31, 0x00	; 0
     bb2:	8f ef       	ldi	r24, 0xFF	; 255
     bb4:	80 83       	st	Z, r24
			enu_ErrorState = DIO_E_PARAM_VALID;
     bb6:	19 82       	std	Y+1, r1	; 0x01
     bb8:	44 c0       	rjmp	.+136    	; 0xc42 <DIO_setPortDirection+0x10c>
			break;
		case DIO_PORTD:
			DDRD_DIR_R = OUTPUT_PORT;
     bba:	e1 e3       	ldi	r30, 0x31	; 49
     bbc:	f0 e0       	ldi	r31, 0x00	; 0
     bbe:	8f ef       	ldi	r24, 0xFF	; 255
     bc0:	80 83       	st	Z, r24
			enu_ErrorState = DIO_E_PARAM_VALID;
     bc2:	19 82       	std	Y+1, r1	; 0x01
     bc4:	3e c0       	rjmp	.+124    	; 0xc42 <DIO_setPortDirection+0x10c>
			break;
		default:
			enu_ErrorState = DIO_E_PARAM_INVALID_PORT_ID;
     bc6:	81 e0       	ldi	r24, 0x01	; 1
     bc8:	89 83       	std	Y+1, r24	; 0x01
     bca:	3b c0       	rjmp	.+118    	; 0xc42 <DIO_setPortDirection+0x10c>
			break;
		}
    }
    else if(enu_portDirection == LOW)
     bcc:	8b 81       	ldd	r24, Y+3	; 0x03
     bce:	88 23       	and	r24, r24
     bd0:	b1 f5       	brne	.+108    	; 0xc3e <DIO_setPortDirection+0x108>
    {
		switch (enu_portID)
     bd2:	8a 81       	ldd	r24, Y+2	; 0x02
     bd4:	28 2f       	mov	r18, r24
     bd6:	30 e0       	ldi	r19, 0x00	; 0
     bd8:	3d 83       	std	Y+5, r19	; 0x05
     bda:	2c 83       	std	Y+4, r18	; 0x04
     bdc:	8c 81       	ldd	r24, Y+4	; 0x04
     bde:	9d 81       	ldd	r25, Y+5	; 0x05
     be0:	81 30       	cpi	r24, 0x01	; 1
     be2:	91 05       	cpc	r25, r1
     be4:	d1 f0       	breq	.+52     	; 0xc1a <DIO_setPortDirection+0xe4>
     be6:	2c 81       	ldd	r18, Y+4	; 0x04
     be8:	3d 81       	ldd	r19, Y+5	; 0x05
     bea:	22 30       	cpi	r18, 0x02	; 2
     bec:	31 05       	cpc	r19, r1
     bee:	2c f4       	brge	.+10     	; 0xbfa <DIO_setPortDirection+0xc4>
     bf0:	8c 81       	ldd	r24, Y+4	; 0x04
     bf2:	9d 81       	ldd	r25, Y+5	; 0x05
     bf4:	00 97       	sbiw	r24, 0x00	; 0
     bf6:	61 f0       	breq	.+24     	; 0xc10 <DIO_setPortDirection+0xda>
     bf8:	1f c0       	rjmp	.+62     	; 0xc38 <DIO_setPortDirection+0x102>
     bfa:	2c 81       	ldd	r18, Y+4	; 0x04
     bfc:	3d 81       	ldd	r19, Y+5	; 0x05
     bfe:	22 30       	cpi	r18, 0x02	; 2
     c00:	31 05       	cpc	r19, r1
     c02:	81 f0       	breq	.+32     	; 0xc24 <DIO_setPortDirection+0xee>
     c04:	8c 81       	ldd	r24, Y+4	; 0x04
     c06:	9d 81       	ldd	r25, Y+5	; 0x05
     c08:	83 30       	cpi	r24, 0x03	; 3
     c0a:	91 05       	cpc	r25, r1
     c0c:	81 f0       	breq	.+32     	; 0xc2e <DIO_setPortDirection+0xf8>
     c0e:	14 c0       	rjmp	.+40     	; 0xc38 <DIO_setPortDirection+0x102>
		{
		case DIO_PORTA:
			DDRA_DIR_R = INPUT_PORT;
     c10:	ea e3       	ldi	r30, 0x3A	; 58
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	10 82       	st	Z, r1
			enu_ErrorState = DIO_E_PARAM_VALID;
     c16:	19 82       	std	Y+1, r1	; 0x01
     c18:	14 c0       	rjmp	.+40     	; 0xc42 <DIO_setPortDirection+0x10c>
			break;
		case DIO_PORTB:
			DDRB_DIR_R = INPUT_PORT;
     c1a:	e7 e3       	ldi	r30, 0x37	; 55
     c1c:	f0 e0       	ldi	r31, 0x00	; 0
     c1e:	10 82       	st	Z, r1
			enu_ErrorState = DIO_E_PARAM_VALID;
     c20:	19 82       	std	Y+1, r1	; 0x01
     c22:	0f c0       	rjmp	.+30     	; 0xc42 <DIO_setPortDirection+0x10c>
			break;
		case DIO_PORTC:
			DDRC_DIR_R = INPUT_PORT;
     c24:	e4 e3       	ldi	r30, 0x34	; 52
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	10 82       	st	Z, r1
			enu_ErrorState = DIO_E_PARAM_VALID;
     c2a:	19 82       	std	Y+1, r1	; 0x01
     c2c:	0a c0       	rjmp	.+20     	; 0xc42 <DIO_setPortDirection+0x10c>
			break;
		case DIO_PORTD:
			DDRD_DIR_R = INPUT_PORT;
     c2e:	e1 e3       	ldi	r30, 0x31	; 49
     c30:	f0 e0       	ldi	r31, 0x00	; 0
     c32:	10 82       	st	Z, r1
			enu_ErrorState = DIO_E_PARAM_VALID;
     c34:	19 82       	std	Y+1, r1	; 0x01
     c36:	05 c0       	rjmp	.+10     	; 0xc42 <DIO_setPortDirection+0x10c>
			break;
		default:
			enu_ErrorState = DIO_E_PARAM_INVALID_PORT_ID;
     c38:	81 e0       	ldi	r24, 0x01	; 1
     c3a:	89 83       	std	Y+1, r24	; 0x01
     c3c:	02 c0       	rjmp	.+4      	; 0xc42 <DIO_setPortDirection+0x10c>
			break;
		}
    }
    else
    {
    	enu_ErrorState = DIO_E_PARAM_INVALID_PORT_DIR;	/* Invalid port direction */
     c3e:	84 e0       	ldi	r24, 0x04	; 4
     c40:	89 83       	std	Y+1, r24	; 0x01
    }
    return enu_ErrorState;
     c42:	89 81       	ldd	r24, Y+1	; 0x01
}
     c44:	27 96       	adiw	r28, 0x07	; 7
     c46:	0f b6       	in	r0, 0x3f	; 63
     c48:	f8 94       	cli
     c4a:	de bf       	out	0x3e, r29	; 62
     c4c:	0f be       	out	0x3f, r0	; 63
     c4e:	cd bf       	out	0x3d, r28	; 61
     c50:	cf 91       	pop	r28
     c52:	df 91       	pop	r29
     c54:	08 95       	ret

00000c56 <DIO_setPinDirection>:
 *
 * [Returns]:     Error State
 ******************************************************************************/
enuDIO_E_STATE_t DIO_setPinDirection(enuDIO_PortId_t enu_portID , enuDIO_PinId_t enu_pinID,
				     enuDIO_DirectionType_t enu_pinDirection)
{
     c56:	df 93       	push	r29
     c58:	cf 93       	push	r28
     c5a:	cd b7       	in	r28, 0x3d	; 61
     c5c:	de b7       	in	r29, 0x3e	; 62
     c5e:	28 97       	sbiw	r28, 0x08	; 8
     c60:	0f b6       	in	r0, 0x3f	; 63
     c62:	f8 94       	cli
     c64:	de bf       	out	0x3e, r29	; 62
     c66:	0f be       	out	0x3f, r0	; 63
     c68:	cd bf       	out	0x3d, r28	; 61
     c6a:	8a 83       	std	Y+2, r24	; 0x02
     c6c:	6b 83       	std	Y+3, r22	; 0x03
     c6e:	4c 83       	std	Y+4, r20	; 0x04
	enuDIO_E_STATE_t enu_ErrorState = E_NOT_OK;
     c70:	81 e0       	ldi	r24, 0x01	; 1
     c72:	89 83       	std	Y+1, r24	; 0x01

	/* Check if the pin id is one of the existed pin or not */
	if ((enu_pinID >= PIN_0) && (enu_pinID <= PIN_7))
     c74:	8b 81       	ldd	r24, Y+3	; 0x03
     c76:	88 30       	cpi	r24, 0x08	; 8
     c78:	08 f0       	brcs	.+2      	; 0xc7c <DIO_setPinDirection+0x26>
     c7a:	fd c0       	rjmp	.+506    	; 0xe76 <DIO_setPinDirection+0x220>
	{
		if (enu_pinDirection == OUTPUT)
     c7c:	8c 81       	ldd	r24, Y+4	; 0x04
     c7e:	81 30       	cpi	r24, 0x01	; 1
     c80:	09 f0       	breq	.+2      	; 0xc84 <DIO_setPinDirection+0x2e>
     c82:	77 c0       	rjmp	.+238    	; 0xd72 <DIO_setPinDirection+0x11c>
		{
			switch (enu_portID)
     c84:	8a 81       	ldd	r24, Y+2	; 0x02
     c86:	28 2f       	mov	r18, r24
     c88:	30 e0       	ldi	r19, 0x00	; 0
     c8a:	38 87       	std	Y+8, r19	; 0x08
     c8c:	2f 83       	std	Y+7, r18	; 0x07
     c8e:	8f 81       	ldd	r24, Y+7	; 0x07
     c90:	98 85       	ldd	r25, Y+8	; 0x08
     c92:	81 30       	cpi	r24, 0x01	; 1
     c94:	91 05       	cpc	r25, r1
     c96:	59 f1       	breq	.+86     	; 0xcee <DIO_setPinDirection+0x98>
     c98:	2f 81       	ldd	r18, Y+7	; 0x07
     c9a:	38 85       	ldd	r19, Y+8	; 0x08
     c9c:	22 30       	cpi	r18, 0x02	; 2
     c9e:	31 05       	cpc	r19, r1
     ca0:	2c f4       	brge	.+10     	; 0xcac <DIO_setPinDirection+0x56>
     ca2:	8f 81       	ldd	r24, Y+7	; 0x07
     ca4:	98 85       	ldd	r25, Y+8	; 0x08
     ca6:	00 97       	sbiw	r24, 0x00	; 0
     ca8:	69 f0       	breq	.+26     	; 0xcc4 <DIO_setPinDirection+0x6e>
     caa:	60 c0       	rjmp	.+192    	; 0xd6c <DIO_setPinDirection+0x116>
     cac:	2f 81       	ldd	r18, Y+7	; 0x07
     cae:	38 85       	ldd	r19, Y+8	; 0x08
     cb0:	22 30       	cpi	r18, 0x02	; 2
     cb2:	31 05       	cpc	r19, r1
     cb4:	89 f1       	breq	.+98     	; 0xd18 <DIO_setPinDirection+0xc2>
     cb6:	8f 81       	ldd	r24, Y+7	; 0x07
     cb8:	98 85       	ldd	r25, Y+8	; 0x08
     cba:	83 30       	cpi	r24, 0x03	; 3
     cbc:	91 05       	cpc	r25, r1
     cbe:	09 f4       	brne	.+2      	; 0xcc2 <DIO_setPinDirection+0x6c>
     cc0:	40 c0       	rjmp	.+128    	; 0xd42 <DIO_setPinDirection+0xec>
     cc2:	54 c0       	rjmp	.+168    	; 0xd6c <DIO_setPinDirection+0x116>
			{
			case DIO_PORTA:
				SET_BIT(DDRA_DIR_R, enu_pinID);
     cc4:	aa e3       	ldi	r26, 0x3A	; 58
     cc6:	b0 e0       	ldi	r27, 0x00	; 0
     cc8:	ea e3       	ldi	r30, 0x3A	; 58
     cca:	f0 e0       	ldi	r31, 0x00	; 0
     ccc:	80 81       	ld	r24, Z
     cce:	48 2f       	mov	r20, r24
     cd0:	8b 81       	ldd	r24, Y+3	; 0x03
     cd2:	28 2f       	mov	r18, r24
     cd4:	30 e0       	ldi	r19, 0x00	; 0
     cd6:	81 e0       	ldi	r24, 0x01	; 1
     cd8:	90 e0       	ldi	r25, 0x00	; 0
     cda:	02 2e       	mov	r0, r18
     cdc:	02 c0       	rjmp	.+4      	; 0xce2 <DIO_setPinDirection+0x8c>
     cde:	88 0f       	add	r24, r24
     ce0:	99 1f       	adc	r25, r25
     ce2:	0a 94       	dec	r0
     ce4:	e2 f7       	brpl	.-8      	; 0xcde <DIO_setPinDirection+0x88>
     ce6:	84 2b       	or	r24, r20
     ce8:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
     cea:	19 82       	std	Y+1, r1	; 0x01
     cec:	c6 c0       	rjmp	.+396    	; 0xe7a <DIO_setPinDirection+0x224>
				break;
			case DIO_PORTB:
				SET_BIT(DDRB_DIR_R, enu_pinID);
     cee:	a7 e3       	ldi	r26, 0x37	; 55
     cf0:	b0 e0       	ldi	r27, 0x00	; 0
     cf2:	e7 e3       	ldi	r30, 0x37	; 55
     cf4:	f0 e0       	ldi	r31, 0x00	; 0
     cf6:	80 81       	ld	r24, Z
     cf8:	48 2f       	mov	r20, r24
     cfa:	8b 81       	ldd	r24, Y+3	; 0x03
     cfc:	28 2f       	mov	r18, r24
     cfe:	30 e0       	ldi	r19, 0x00	; 0
     d00:	81 e0       	ldi	r24, 0x01	; 1
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	02 2e       	mov	r0, r18
     d06:	02 c0       	rjmp	.+4      	; 0xd0c <DIO_setPinDirection+0xb6>
     d08:	88 0f       	add	r24, r24
     d0a:	99 1f       	adc	r25, r25
     d0c:	0a 94       	dec	r0
     d0e:	e2 f7       	brpl	.-8      	; 0xd08 <DIO_setPinDirection+0xb2>
     d10:	84 2b       	or	r24, r20
     d12:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
     d14:	19 82       	std	Y+1, r1	; 0x01
     d16:	b1 c0       	rjmp	.+354    	; 0xe7a <DIO_setPinDirection+0x224>
				break;
			case DIO_PORTC:
				SET_BIT(DDRC_DIR_R, enu_pinID);
     d18:	a4 e3       	ldi	r26, 0x34	; 52
     d1a:	b0 e0       	ldi	r27, 0x00	; 0
     d1c:	e4 e3       	ldi	r30, 0x34	; 52
     d1e:	f0 e0       	ldi	r31, 0x00	; 0
     d20:	80 81       	ld	r24, Z
     d22:	48 2f       	mov	r20, r24
     d24:	8b 81       	ldd	r24, Y+3	; 0x03
     d26:	28 2f       	mov	r18, r24
     d28:	30 e0       	ldi	r19, 0x00	; 0
     d2a:	81 e0       	ldi	r24, 0x01	; 1
     d2c:	90 e0       	ldi	r25, 0x00	; 0
     d2e:	02 2e       	mov	r0, r18
     d30:	02 c0       	rjmp	.+4      	; 0xd36 <DIO_setPinDirection+0xe0>
     d32:	88 0f       	add	r24, r24
     d34:	99 1f       	adc	r25, r25
     d36:	0a 94       	dec	r0
     d38:	e2 f7       	brpl	.-8      	; 0xd32 <DIO_setPinDirection+0xdc>
     d3a:	84 2b       	or	r24, r20
     d3c:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
     d3e:	19 82       	std	Y+1, r1	; 0x01
     d40:	9c c0       	rjmp	.+312    	; 0xe7a <DIO_setPinDirection+0x224>
				break;
			case DIO_PORTD:
				SET_BIT(DDRD_DIR_R, enu_pinID);
     d42:	a1 e3       	ldi	r26, 0x31	; 49
     d44:	b0 e0       	ldi	r27, 0x00	; 0
     d46:	e1 e3       	ldi	r30, 0x31	; 49
     d48:	f0 e0       	ldi	r31, 0x00	; 0
     d4a:	80 81       	ld	r24, Z
     d4c:	48 2f       	mov	r20, r24
     d4e:	8b 81       	ldd	r24, Y+3	; 0x03
     d50:	28 2f       	mov	r18, r24
     d52:	30 e0       	ldi	r19, 0x00	; 0
     d54:	81 e0       	ldi	r24, 0x01	; 1
     d56:	90 e0       	ldi	r25, 0x00	; 0
     d58:	02 2e       	mov	r0, r18
     d5a:	02 c0       	rjmp	.+4      	; 0xd60 <DIO_setPinDirection+0x10a>
     d5c:	88 0f       	add	r24, r24
     d5e:	99 1f       	adc	r25, r25
     d60:	0a 94       	dec	r0
     d62:	e2 f7       	brpl	.-8      	; 0xd5c <DIO_setPinDirection+0x106>
     d64:	84 2b       	or	r24, r20
     d66:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
     d68:	19 82       	std	Y+1, r1	; 0x01
     d6a:	87 c0       	rjmp	.+270    	; 0xe7a <DIO_setPinDirection+0x224>
				break;
		   	default:
				enu_ErrorState = DIO_E_PARAM_INVALID_PORT_ID;	/* Invalid port id */
     d6c:	81 e0       	ldi	r24, 0x01	; 1
     d6e:	89 83       	std	Y+1, r24	; 0x01
     d70:	84 c0       	rjmp	.+264    	; 0xe7a <DIO_setPinDirection+0x224>
				break;
			}
		}
		else if (enu_pinDirection == INPUT)
     d72:	8c 81       	ldd	r24, Y+4	; 0x04
     d74:	88 23       	and	r24, r24
     d76:	09 f0       	breq	.+2      	; 0xd7a <DIO_setPinDirection+0x124>
     d78:	7b c0       	rjmp	.+246    	; 0xe70 <DIO_setPinDirection+0x21a>
		{
			switch (enu_portID)
     d7a:	8a 81       	ldd	r24, Y+2	; 0x02
     d7c:	28 2f       	mov	r18, r24
     d7e:	30 e0       	ldi	r19, 0x00	; 0
     d80:	3e 83       	std	Y+6, r19	; 0x06
     d82:	2d 83       	std	Y+5, r18	; 0x05
     d84:	8d 81       	ldd	r24, Y+5	; 0x05
     d86:	9e 81       	ldd	r25, Y+6	; 0x06
     d88:	81 30       	cpi	r24, 0x01	; 1
     d8a:	91 05       	cpc	r25, r1
     d8c:	61 f1       	breq	.+88     	; 0xde6 <DIO_setPinDirection+0x190>
     d8e:	2d 81       	ldd	r18, Y+5	; 0x05
     d90:	3e 81       	ldd	r19, Y+6	; 0x06
     d92:	22 30       	cpi	r18, 0x02	; 2
     d94:	31 05       	cpc	r19, r1
     d96:	2c f4       	brge	.+10     	; 0xda2 <DIO_setPinDirection+0x14c>
     d98:	8d 81       	ldd	r24, Y+5	; 0x05
     d9a:	9e 81       	ldd	r25, Y+6	; 0x06
     d9c:	00 97       	sbiw	r24, 0x00	; 0
     d9e:	69 f0       	breq	.+26     	; 0xdba <DIO_setPinDirection+0x164>
     da0:	64 c0       	rjmp	.+200    	; 0xe6a <DIO_setPinDirection+0x214>
     da2:	2d 81       	ldd	r18, Y+5	; 0x05
     da4:	3e 81       	ldd	r19, Y+6	; 0x06
     da6:	22 30       	cpi	r18, 0x02	; 2
     da8:	31 05       	cpc	r19, r1
     daa:	99 f1       	breq	.+102    	; 0xe12 <DIO_setPinDirection+0x1bc>
     dac:	8d 81       	ldd	r24, Y+5	; 0x05
     dae:	9e 81       	ldd	r25, Y+6	; 0x06
     db0:	83 30       	cpi	r24, 0x03	; 3
     db2:	91 05       	cpc	r25, r1
     db4:	09 f4       	brne	.+2      	; 0xdb8 <DIO_setPinDirection+0x162>
     db6:	43 c0       	rjmp	.+134    	; 0xe3e <DIO_setPinDirection+0x1e8>
     db8:	58 c0       	rjmp	.+176    	; 0xe6a <DIO_setPinDirection+0x214>
			{
			case DIO_PORTA:
				CLEAR_BIT(DDRA_DIR_R, enu_pinID);
     dba:	aa e3       	ldi	r26, 0x3A	; 58
     dbc:	b0 e0       	ldi	r27, 0x00	; 0
     dbe:	ea e3       	ldi	r30, 0x3A	; 58
     dc0:	f0 e0       	ldi	r31, 0x00	; 0
     dc2:	80 81       	ld	r24, Z
     dc4:	48 2f       	mov	r20, r24
     dc6:	8b 81       	ldd	r24, Y+3	; 0x03
     dc8:	28 2f       	mov	r18, r24
     dca:	30 e0       	ldi	r19, 0x00	; 0
     dcc:	81 e0       	ldi	r24, 0x01	; 1
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	02 2e       	mov	r0, r18
     dd2:	02 c0       	rjmp	.+4      	; 0xdd8 <DIO_setPinDirection+0x182>
     dd4:	88 0f       	add	r24, r24
     dd6:	99 1f       	adc	r25, r25
     dd8:	0a 94       	dec	r0
     dda:	e2 f7       	brpl	.-8      	; 0xdd4 <DIO_setPinDirection+0x17e>
     ddc:	80 95       	com	r24
     dde:	84 23       	and	r24, r20
     de0:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
     de2:	19 82       	std	Y+1, r1	; 0x01
     de4:	4a c0       	rjmp	.+148    	; 0xe7a <DIO_setPinDirection+0x224>
				break;
			case DIO_PORTB:
				CLEAR_BIT(DDRB_DIR_R, enu_pinID);
     de6:	a7 e3       	ldi	r26, 0x37	; 55
     de8:	b0 e0       	ldi	r27, 0x00	; 0
     dea:	e7 e3       	ldi	r30, 0x37	; 55
     dec:	f0 e0       	ldi	r31, 0x00	; 0
     dee:	80 81       	ld	r24, Z
     df0:	48 2f       	mov	r20, r24
     df2:	8b 81       	ldd	r24, Y+3	; 0x03
     df4:	28 2f       	mov	r18, r24
     df6:	30 e0       	ldi	r19, 0x00	; 0
     df8:	81 e0       	ldi	r24, 0x01	; 1
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	02 2e       	mov	r0, r18
     dfe:	02 c0       	rjmp	.+4      	; 0xe04 <DIO_setPinDirection+0x1ae>
     e00:	88 0f       	add	r24, r24
     e02:	99 1f       	adc	r25, r25
     e04:	0a 94       	dec	r0
     e06:	e2 f7       	brpl	.-8      	; 0xe00 <DIO_setPinDirection+0x1aa>
     e08:	80 95       	com	r24
     e0a:	84 23       	and	r24, r20
     e0c:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
     e0e:	19 82       	std	Y+1, r1	; 0x01
     e10:	34 c0       	rjmp	.+104    	; 0xe7a <DIO_setPinDirection+0x224>
				break;
			case DIO_PORTC:
				CLEAR_BIT(DDRC_DIR_R, enu_pinID);
     e12:	a4 e3       	ldi	r26, 0x34	; 52
     e14:	b0 e0       	ldi	r27, 0x00	; 0
     e16:	e4 e3       	ldi	r30, 0x34	; 52
     e18:	f0 e0       	ldi	r31, 0x00	; 0
     e1a:	80 81       	ld	r24, Z
     e1c:	48 2f       	mov	r20, r24
     e1e:	8b 81       	ldd	r24, Y+3	; 0x03
     e20:	28 2f       	mov	r18, r24
     e22:	30 e0       	ldi	r19, 0x00	; 0
     e24:	81 e0       	ldi	r24, 0x01	; 1
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	02 2e       	mov	r0, r18
     e2a:	02 c0       	rjmp	.+4      	; 0xe30 <DIO_setPinDirection+0x1da>
     e2c:	88 0f       	add	r24, r24
     e2e:	99 1f       	adc	r25, r25
     e30:	0a 94       	dec	r0
     e32:	e2 f7       	brpl	.-8      	; 0xe2c <DIO_setPinDirection+0x1d6>
     e34:	80 95       	com	r24
     e36:	84 23       	and	r24, r20
     e38:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
     e3a:	19 82       	std	Y+1, r1	; 0x01
     e3c:	1e c0       	rjmp	.+60     	; 0xe7a <DIO_setPinDirection+0x224>
				break;
			case DIO_PORTD:
				CLEAR_BIT(DDRD_DIR_R, enu_pinID);
     e3e:	a1 e3       	ldi	r26, 0x31	; 49
     e40:	b0 e0       	ldi	r27, 0x00	; 0
     e42:	e1 e3       	ldi	r30, 0x31	; 49
     e44:	f0 e0       	ldi	r31, 0x00	; 0
     e46:	80 81       	ld	r24, Z
     e48:	48 2f       	mov	r20, r24
     e4a:	8b 81       	ldd	r24, Y+3	; 0x03
     e4c:	28 2f       	mov	r18, r24
     e4e:	30 e0       	ldi	r19, 0x00	; 0
     e50:	81 e0       	ldi	r24, 0x01	; 1
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	02 2e       	mov	r0, r18
     e56:	02 c0       	rjmp	.+4      	; 0xe5c <DIO_setPinDirection+0x206>
     e58:	88 0f       	add	r24, r24
     e5a:	99 1f       	adc	r25, r25
     e5c:	0a 94       	dec	r0
     e5e:	e2 f7       	brpl	.-8      	; 0xe58 <DIO_setPinDirection+0x202>
     e60:	80 95       	com	r24
     e62:	84 23       	and	r24, r20
     e64:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
     e66:	19 82       	std	Y+1, r1	; 0x01
     e68:	08 c0       	rjmp	.+16     	; 0xe7a <DIO_setPinDirection+0x224>
				break;
		   	default:
				enu_ErrorState = DIO_E_PARAM_INVALID_PORT_ID;	/* Invalid port id */
     e6a:	81 e0       	ldi	r24, 0x01	; 1
     e6c:	89 83       	std	Y+1, r24	; 0x01
     e6e:	05 c0       	rjmp	.+10     	; 0xe7a <DIO_setPinDirection+0x224>
				break;
			}
		}
		else
		{
			enu_ErrorState = DIO_E_PARAM_INVALID_PORT_DIR;	/* Invalid port direction */
     e70:	84 e0       	ldi	r24, 0x04	; 4
     e72:	89 83       	std	Y+1, r24	; 0x01
     e74:	02 c0       	rjmp	.+4      	; 0xe7a <DIO_setPinDirection+0x224>
		}
	}
	else
	{
		enu_ErrorState = DIO_E_PARAM_INVALID_PIN_ID;	/* Invalid pin id */
     e76:	82 e0       	ldi	r24, 0x02	; 2
     e78:	89 83       	std	Y+1, r24	; 0x01
	}
	return enu_ErrorState;
     e7a:	89 81       	ldd	r24, Y+1	; 0x01
}
     e7c:	28 96       	adiw	r28, 0x08	; 8
     e7e:	0f b6       	in	r0, 0x3f	; 63
     e80:	f8 94       	cli
     e82:	de bf       	out	0x3e, r29	; 62
     e84:	0f be       	out	0x3f, r0	; 63
     e86:	cd bf       	out	0x3d, r28	; 61
     e88:	cf 91       	pop	r28
     e8a:	df 91       	pop	r29
     e8c:	08 95       	ret

00000e8e <DIO_writePort>:
 * [in/out]	  None
 *
 * [Returns]:     Error State
 ******************************************************************************/
enuDIO_E_STATE_t DIO_writePort(enuDIO_PortId_t enu_portID, uint8_t au8_portValue)
{
     e8e:	df 93       	push	r29
     e90:	cf 93       	push	r28
     e92:	00 d0       	rcall	.+0      	; 0xe94 <DIO_writePort+0x6>
     e94:	00 d0       	rcall	.+0      	; 0xe96 <DIO_writePort+0x8>
     e96:	0f 92       	push	r0
     e98:	cd b7       	in	r28, 0x3d	; 61
     e9a:	de b7       	in	r29, 0x3e	; 62
     e9c:	8a 83       	std	Y+2, r24	; 0x02
     e9e:	6b 83       	std	Y+3, r22	; 0x03
	enuDIO_E_STATE_t enu_ErrorState = E_NOT_OK;
     ea0:	81 e0       	ldi	r24, 0x01	; 1
     ea2:	89 83       	std	Y+1, r24	; 0x01

    switch (enu_portID)
     ea4:	8a 81       	ldd	r24, Y+2	; 0x02
     ea6:	28 2f       	mov	r18, r24
     ea8:	30 e0       	ldi	r19, 0x00	; 0
     eaa:	3d 83       	std	Y+5, r19	; 0x05
     eac:	2c 83       	std	Y+4, r18	; 0x04
     eae:	8c 81       	ldd	r24, Y+4	; 0x04
     eb0:	9d 81       	ldd	r25, Y+5	; 0x05
     eb2:	81 30       	cpi	r24, 0x01	; 1
     eb4:	91 05       	cpc	r25, r1
     eb6:	d9 f0       	breq	.+54     	; 0xeee <DIO_writePort+0x60>
     eb8:	2c 81       	ldd	r18, Y+4	; 0x04
     eba:	3d 81       	ldd	r19, Y+5	; 0x05
     ebc:	22 30       	cpi	r18, 0x02	; 2
     ebe:	31 05       	cpc	r19, r1
     ec0:	2c f4       	brge	.+10     	; 0xecc <DIO_writePort+0x3e>
     ec2:	8c 81       	ldd	r24, Y+4	; 0x04
     ec4:	9d 81       	ldd	r25, Y+5	; 0x05
     ec6:	00 97       	sbiw	r24, 0x00	; 0
     ec8:	61 f0       	breq	.+24     	; 0xee2 <DIO_writePort+0x54>
     eca:	23 c0       	rjmp	.+70     	; 0xf12 <DIO_writePort+0x84>
     ecc:	2c 81       	ldd	r18, Y+4	; 0x04
     ece:	3d 81       	ldd	r19, Y+5	; 0x05
     ed0:	22 30       	cpi	r18, 0x02	; 2
     ed2:	31 05       	cpc	r19, r1
     ed4:	91 f0       	breq	.+36     	; 0xefa <DIO_writePort+0x6c>
     ed6:	8c 81       	ldd	r24, Y+4	; 0x04
     ed8:	9d 81       	ldd	r25, Y+5	; 0x05
     eda:	83 30       	cpi	r24, 0x03	; 3
     edc:	91 05       	cpc	r25, r1
     ede:	99 f0       	breq	.+38     	; 0xf06 <DIO_writePort+0x78>
     ee0:	18 c0       	rjmp	.+48     	; 0xf12 <DIO_writePort+0x84>
    {
    case DIO_PORTA:
        PORTA_DATA_R = au8_portValue;
     ee2:	eb e3       	ldi	r30, 0x3B	; 59
     ee4:	f0 e0       	ldi	r31, 0x00	; 0
     ee6:	8b 81       	ldd	r24, Y+3	; 0x03
     ee8:	80 83       	st	Z, r24
        enu_ErrorState = DIO_E_PARAM_VALID;
     eea:	19 82       	std	Y+1, r1	; 0x01
     eec:	14 c0       	rjmp	.+40     	; 0xf16 <DIO_writePort+0x88>
        break;
    case DIO_PORTB:
        PORTB_DATA_R = au8_portValue;
     eee:	e8 e3       	ldi	r30, 0x38	; 56
     ef0:	f0 e0       	ldi	r31, 0x00	; 0
     ef2:	8b 81       	ldd	r24, Y+3	; 0x03
     ef4:	80 83       	st	Z, r24
        enu_ErrorState = DIO_E_PARAM_VALID;
     ef6:	19 82       	std	Y+1, r1	; 0x01
     ef8:	0e c0       	rjmp	.+28     	; 0xf16 <DIO_writePort+0x88>
        break;
    case DIO_PORTC:
        PORTC_DATA_R = au8_portValue;
     efa:	e5 e3       	ldi	r30, 0x35	; 53
     efc:	f0 e0       	ldi	r31, 0x00	; 0
     efe:	8b 81       	ldd	r24, Y+3	; 0x03
     f00:	80 83       	st	Z, r24
        enu_ErrorState = DIO_E_PARAM_VALID;
     f02:	19 82       	std	Y+1, r1	; 0x01
     f04:	08 c0       	rjmp	.+16     	; 0xf16 <DIO_writePort+0x88>
        break;
    case DIO_PORTD:
        PORTD_DATA_R = au8_portValue;
     f06:	e2 e3       	ldi	r30, 0x32	; 50
     f08:	f0 e0       	ldi	r31, 0x00	; 0
     f0a:	8b 81       	ldd	r24, Y+3	; 0x03
     f0c:	80 83       	st	Z, r24
        enu_ErrorState = DIO_E_PARAM_VALID;
     f0e:	19 82       	std	Y+1, r1	; 0x01
     f10:	02 c0       	rjmp	.+4      	; 0xf16 <DIO_writePort+0x88>
        break;
    default:
    	enu_ErrorState = DIO_E_PARAM_INVALID_PORT_ID;	/* Invalid port id */
     f12:	81 e0       	ldi	r24, 0x01	; 1
     f14:	89 83       	std	Y+1, r24	; 0x01
        break;
    }
    return enu_ErrorState;
     f16:	89 81       	ldd	r24, Y+1	; 0x01
}
     f18:	0f 90       	pop	r0
     f1a:	0f 90       	pop	r0
     f1c:	0f 90       	pop	r0
     f1e:	0f 90       	pop	r0
     f20:	0f 90       	pop	r0
     f22:	cf 91       	pop	r28
     f24:	df 91       	pop	r29
     f26:	08 95       	ret

00000f28 <DIO_writePin>:
 * [in/out]	  None
 *
 * [Returns]:     Error State
 ******************************************************************************/
enuDIO_E_STATE_t DIO_writePin(enuDIO_PortId_t enu_portID, enuDIO_PinId_t enu_pinID, uint8_t au8_pinValue)
{
     f28:	df 93       	push	r29
     f2a:	cf 93       	push	r28
     f2c:	cd b7       	in	r28, 0x3d	; 61
     f2e:	de b7       	in	r29, 0x3e	; 62
     f30:	28 97       	sbiw	r28, 0x08	; 8
     f32:	0f b6       	in	r0, 0x3f	; 63
     f34:	f8 94       	cli
     f36:	de bf       	out	0x3e, r29	; 62
     f38:	0f be       	out	0x3f, r0	; 63
     f3a:	cd bf       	out	0x3d, r28	; 61
     f3c:	8a 83       	std	Y+2, r24	; 0x02
     f3e:	6b 83       	std	Y+3, r22	; 0x03
     f40:	4c 83       	std	Y+4, r20	; 0x04
	enuDIO_E_STATE_t enu_ErrorState = E_NOT_OK;
     f42:	81 e0       	ldi	r24, 0x01	; 1
     f44:	89 83       	std	Y+1, r24	; 0x01

	/* Check if the pin id is one of the existed pin or not */
	if ((enu_pinID >= PIN_0) && (enu_pinID <= PIN_7))
     f46:	8b 81       	ldd	r24, Y+3	; 0x03
     f48:	88 30       	cpi	r24, 0x08	; 8
     f4a:	08 f0       	brcs	.+2      	; 0xf4e <DIO_writePin+0x26>
     f4c:	fd c0       	rjmp	.+506    	; 0x1148 <DIO_writePin+0x220>
	{
		if (au8_pinValue == HIGH)
     f4e:	8c 81       	ldd	r24, Y+4	; 0x04
     f50:	81 30       	cpi	r24, 0x01	; 1
     f52:	09 f0       	breq	.+2      	; 0xf56 <DIO_writePin+0x2e>
     f54:	77 c0       	rjmp	.+238    	; 0x1044 <DIO_writePin+0x11c>
		{
			switch (enu_portID)
     f56:	8a 81       	ldd	r24, Y+2	; 0x02
     f58:	28 2f       	mov	r18, r24
     f5a:	30 e0       	ldi	r19, 0x00	; 0
     f5c:	38 87       	std	Y+8, r19	; 0x08
     f5e:	2f 83       	std	Y+7, r18	; 0x07
     f60:	8f 81       	ldd	r24, Y+7	; 0x07
     f62:	98 85       	ldd	r25, Y+8	; 0x08
     f64:	81 30       	cpi	r24, 0x01	; 1
     f66:	91 05       	cpc	r25, r1
     f68:	59 f1       	breq	.+86     	; 0xfc0 <DIO_writePin+0x98>
     f6a:	2f 81       	ldd	r18, Y+7	; 0x07
     f6c:	38 85       	ldd	r19, Y+8	; 0x08
     f6e:	22 30       	cpi	r18, 0x02	; 2
     f70:	31 05       	cpc	r19, r1
     f72:	2c f4       	brge	.+10     	; 0xf7e <DIO_writePin+0x56>
     f74:	8f 81       	ldd	r24, Y+7	; 0x07
     f76:	98 85       	ldd	r25, Y+8	; 0x08
     f78:	00 97       	sbiw	r24, 0x00	; 0
     f7a:	69 f0       	breq	.+26     	; 0xf96 <DIO_writePin+0x6e>
     f7c:	60 c0       	rjmp	.+192    	; 0x103e <DIO_writePin+0x116>
     f7e:	2f 81       	ldd	r18, Y+7	; 0x07
     f80:	38 85       	ldd	r19, Y+8	; 0x08
     f82:	22 30       	cpi	r18, 0x02	; 2
     f84:	31 05       	cpc	r19, r1
     f86:	89 f1       	breq	.+98     	; 0xfea <DIO_writePin+0xc2>
     f88:	8f 81       	ldd	r24, Y+7	; 0x07
     f8a:	98 85       	ldd	r25, Y+8	; 0x08
     f8c:	83 30       	cpi	r24, 0x03	; 3
     f8e:	91 05       	cpc	r25, r1
     f90:	09 f4       	brne	.+2      	; 0xf94 <DIO_writePin+0x6c>
     f92:	40 c0       	rjmp	.+128    	; 0x1014 <DIO_writePin+0xec>
     f94:	54 c0       	rjmp	.+168    	; 0x103e <DIO_writePin+0x116>
			{
			case DIO_PORTA:
				SET_BIT(PORTA_DATA_R, enu_pinID);
     f96:	ab e3       	ldi	r26, 0x3B	; 59
     f98:	b0 e0       	ldi	r27, 0x00	; 0
     f9a:	eb e3       	ldi	r30, 0x3B	; 59
     f9c:	f0 e0       	ldi	r31, 0x00	; 0
     f9e:	80 81       	ld	r24, Z
     fa0:	48 2f       	mov	r20, r24
     fa2:	8b 81       	ldd	r24, Y+3	; 0x03
     fa4:	28 2f       	mov	r18, r24
     fa6:	30 e0       	ldi	r19, 0x00	; 0
     fa8:	81 e0       	ldi	r24, 0x01	; 1
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	02 2e       	mov	r0, r18
     fae:	02 c0       	rjmp	.+4      	; 0xfb4 <DIO_writePin+0x8c>
     fb0:	88 0f       	add	r24, r24
     fb2:	99 1f       	adc	r25, r25
     fb4:	0a 94       	dec	r0
     fb6:	e2 f7       	brpl	.-8      	; 0xfb0 <DIO_writePin+0x88>
     fb8:	84 2b       	or	r24, r20
     fba:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
     fbc:	19 82       	std	Y+1, r1	; 0x01
     fbe:	c6 c0       	rjmp	.+396    	; 0x114c <DIO_writePin+0x224>
				break;
			case DIO_PORTB:
				SET_BIT(PORTB_DATA_R, enu_pinID);
     fc0:	a8 e3       	ldi	r26, 0x38	; 56
     fc2:	b0 e0       	ldi	r27, 0x00	; 0
     fc4:	e8 e3       	ldi	r30, 0x38	; 56
     fc6:	f0 e0       	ldi	r31, 0x00	; 0
     fc8:	80 81       	ld	r24, Z
     fca:	48 2f       	mov	r20, r24
     fcc:	8b 81       	ldd	r24, Y+3	; 0x03
     fce:	28 2f       	mov	r18, r24
     fd0:	30 e0       	ldi	r19, 0x00	; 0
     fd2:	81 e0       	ldi	r24, 0x01	; 1
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	02 2e       	mov	r0, r18
     fd8:	02 c0       	rjmp	.+4      	; 0xfde <DIO_writePin+0xb6>
     fda:	88 0f       	add	r24, r24
     fdc:	99 1f       	adc	r25, r25
     fde:	0a 94       	dec	r0
     fe0:	e2 f7       	brpl	.-8      	; 0xfda <DIO_writePin+0xb2>
     fe2:	84 2b       	or	r24, r20
     fe4:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
     fe6:	19 82       	std	Y+1, r1	; 0x01
     fe8:	b1 c0       	rjmp	.+354    	; 0x114c <DIO_writePin+0x224>
				break;
			case DIO_PORTC:
				SET_BIT(PORTC_DATA_R, enu_pinID);
     fea:	a5 e3       	ldi	r26, 0x35	; 53
     fec:	b0 e0       	ldi	r27, 0x00	; 0
     fee:	e5 e3       	ldi	r30, 0x35	; 53
     ff0:	f0 e0       	ldi	r31, 0x00	; 0
     ff2:	80 81       	ld	r24, Z
     ff4:	48 2f       	mov	r20, r24
     ff6:	8b 81       	ldd	r24, Y+3	; 0x03
     ff8:	28 2f       	mov	r18, r24
     ffa:	30 e0       	ldi	r19, 0x00	; 0
     ffc:	81 e0       	ldi	r24, 0x01	; 1
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	02 2e       	mov	r0, r18
    1002:	02 c0       	rjmp	.+4      	; 0x1008 <DIO_writePin+0xe0>
    1004:	88 0f       	add	r24, r24
    1006:	99 1f       	adc	r25, r25
    1008:	0a 94       	dec	r0
    100a:	e2 f7       	brpl	.-8      	; 0x1004 <DIO_writePin+0xdc>
    100c:	84 2b       	or	r24, r20
    100e:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
    1010:	19 82       	std	Y+1, r1	; 0x01
    1012:	9c c0       	rjmp	.+312    	; 0x114c <DIO_writePin+0x224>
				break;
			case DIO_PORTD:
				SET_BIT(PORTD_DATA_R, enu_pinID);
    1014:	a2 e3       	ldi	r26, 0x32	; 50
    1016:	b0 e0       	ldi	r27, 0x00	; 0
    1018:	e2 e3       	ldi	r30, 0x32	; 50
    101a:	f0 e0       	ldi	r31, 0x00	; 0
    101c:	80 81       	ld	r24, Z
    101e:	48 2f       	mov	r20, r24
    1020:	8b 81       	ldd	r24, Y+3	; 0x03
    1022:	28 2f       	mov	r18, r24
    1024:	30 e0       	ldi	r19, 0x00	; 0
    1026:	81 e0       	ldi	r24, 0x01	; 1
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	02 2e       	mov	r0, r18
    102c:	02 c0       	rjmp	.+4      	; 0x1032 <DIO_writePin+0x10a>
    102e:	88 0f       	add	r24, r24
    1030:	99 1f       	adc	r25, r25
    1032:	0a 94       	dec	r0
    1034:	e2 f7       	brpl	.-8      	; 0x102e <DIO_writePin+0x106>
    1036:	84 2b       	or	r24, r20
    1038:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
    103a:	19 82       	std	Y+1, r1	; 0x01
    103c:	87 c0       	rjmp	.+270    	; 0x114c <DIO_writePin+0x224>
				break;
		    	default:
				enu_ErrorState = DIO_E_PARAM_INVALID_PORT_ID;	/* Invalid port id */
    103e:	81 e0       	ldi	r24, 0x01	; 1
    1040:	89 83       	std	Y+1, r24	; 0x01
    1042:	84 c0       	rjmp	.+264    	; 0x114c <DIO_writePin+0x224>
				break;
			}
		}
		else if (au8_pinValue == LOW)
    1044:	8c 81       	ldd	r24, Y+4	; 0x04
    1046:	88 23       	and	r24, r24
    1048:	09 f0       	breq	.+2      	; 0x104c <DIO_writePin+0x124>
    104a:	7b c0       	rjmp	.+246    	; 0x1142 <DIO_writePin+0x21a>
		{
			switch (enu_portID)
    104c:	8a 81       	ldd	r24, Y+2	; 0x02
    104e:	28 2f       	mov	r18, r24
    1050:	30 e0       	ldi	r19, 0x00	; 0
    1052:	3e 83       	std	Y+6, r19	; 0x06
    1054:	2d 83       	std	Y+5, r18	; 0x05
    1056:	8d 81       	ldd	r24, Y+5	; 0x05
    1058:	9e 81       	ldd	r25, Y+6	; 0x06
    105a:	81 30       	cpi	r24, 0x01	; 1
    105c:	91 05       	cpc	r25, r1
    105e:	61 f1       	breq	.+88     	; 0x10b8 <DIO_writePin+0x190>
    1060:	2d 81       	ldd	r18, Y+5	; 0x05
    1062:	3e 81       	ldd	r19, Y+6	; 0x06
    1064:	22 30       	cpi	r18, 0x02	; 2
    1066:	31 05       	cpc	r19, r1
    1068:	2c f4       	brge	.+10     	; 0x1074 <DIO_writePin+0x14c>
    106a:	8d 81       	ldd	r24, Y+5	; 0x05
    106c:	9e 81       	ldd	r25, Y+6	; 0x06
    106e:	00 97       	sbiw	r24, 0x00	; 0
    1070:	69 f0       	breq	.+26     	; 0x108c <DIO_writePin+0x164>
    1072:	64 c0       	rjmp	.+200    	; 0x113c <DIO_writePin+0x214>
    1074:	2d 81       	ldd	r18, Y+5	; 0x05
    1076:	3e 81       	ldd	r19, Y+6	; 0x06
    1078:	22 30       	cpi	r18, 0x02	; 2
    107a:	31 05       	cpc	r19, r1
    107c:	99 f1       	breq	.+102    	; 0x10e4 <DIO_writePin+0x1bc>
    107e:	8d 81       	ldd	r24, Y+5	; 0x05
    1080:	9e 81       	ldd	r25, Y+6	; 0x06
    1082:	83 30       	cpi	r24, 0x03	; 3
    1084:	91 05       	cpc	r25, r1
    1086:	09 f4       	brne	.+2      	; 0x108a <DIO_writePin+0x162>
    1088:	43 c0       	rjmp	.+134    	; 0x1110 <DIO_writePin+0x1e8>
    108a:	58 c0       	rjmp	.+176    	; 0x113c <DIO_writePin+0x214>
			{
			case DIO_PORTA:
				CLEAR_BIT(PORTA_DATA_R, enu_pinID);
    108c:	ab e3       	ldi	r26, 0x3B	; 59
    108e:	b0 e0       	ldi	r27, 0x00	; 0
    1090:	eb e3       	ldi	r30, 0x3B	; 59
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	80 81       	ld	r24, Z
    1096:	48 2f       	mov	r20, r24
    1098:	8b 81       	ldd	r24, Y+3	; 0x03
    109a:	28 2f       	mov	r18, r24
    109c:	30 e0       	ldi	r19, 0x00	; 0
    109e:	81 e0       	ldi	r24, 0x01	; 1
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	02 2e       	mov	r0, r18
    10a4:	02 c0       	rjmp	.+4      	; 0x10aa <DIO_writePin+0x182>
    10a6:	88 0f       	add	r24, r24
    10a8:	99 1f       	adc	r25, r25
    10aa:	0a 94       	dec	r0
    10ac:	e2 f7       	brpl	.-8      	; 0x10a6 <DIO_writePin+0x17e>
    10ae:	80 95       	com	r24
    10b0:	84 23       	and	r24, r20
    10b2:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
    10b4:	19 82       	std	Y+1, r1	; 0x01
    10b6:	4a c0       	rjmp	.+148    	; 0x114c <DIO_writePin+0x224>
				break;
			case DIO_PORTB:
				CLEAR_BIT(PORTB_DATA_R, enu_pinID);
    10b8:	a8 e3       	ldi	r26, 0x38	; 56
    10ba:	b0 e0       	ldi	r27, 0x00	; 0
    10bc:	e8 e3       	ldi	r30, 0x38	; 56
    10be:	f0 e0       	ldi	r31, 0x00	; 0
    10c0:	80 81       	ld	r24, Z
    10c2:	48 2f       	mov	r20, r24
    10c4:	8b 81       	ldd	r24, Y+3	; 0x03
    10c6:	28 2f       	mov	r18, r24
    10c8:	30 e0       	ldi	r19, 0x00	; 0
    10ca:	81 e0       	ldi	r24, 0x01	; 1
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	02 2e       	mov	r0, r18
    10d0:	02 c0       	rjmp	.+4      	; 0x10d6 <DIO_writePin+0x1ae>
    10d2:	88 0f       	add	r24, r24
    10d4:	99 1f       	adc	r25, r25
    10d6:	0a 94       	dec	r0
    10d8:	e2 f7       	brpl	.-8      	; 0x10d2 <DIO_writePin+0x1aa>
    10da:	80 95       	com	r24
    10dc:	84 23       	and	r24, r20
    10de:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
    10e0:	19 82       	std	Y+1, r1	; 0x01
    10e2:	34 c0       	rjmp	.+104    	; 0x114c <DIO_writePin+0x224>
				break;
			case DIO_PORTC:
				CLEAR_BIT(PORTC_DATA_R, enu_pinID);
    10e4:	a5 e3       	ldi	r26, 0x35	; 53
    10e6:	b0 e0       	ldi	r27, 0x00	; 0
    10e8:	e5 e3       	ldi	r30, 0x35	; 53
    10ea:	f0 e0       	ldi	r31, 0x00	; 0
    10ec:	80 81       	ld	r24, Z
    10ee:	48 2f       	mov	r20, r24
    10f0:	8b 81       	ldd	r24, Y+3	; 0x03
    10f2:	28 2f       	mov	r18, r24
    10f4:	30 e0       	ldi	r19, 0x00	; 0
    10f6:	81 e0       	ldi	r24, 0x01	; 1
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	02 2e       	mov	r0, r18
    10fc:	02 c0       	rjmp	.+4      	; 0x1102 <DIO_writePin+0x1da>
    10fe:	88 0f       	add	r24, r24
    1100:	99 1f       	adc	r25, r25
    1102:	0a 94       	dec	r0
    1104:	e2 f7       	brpl	.-8      	; 0x10fe <DIO_writePin+0x1d6>
    1106:	80 95       	com	r24
    1108:	84 23       	and	r24, r20
    110a:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
    110c:	19 82       	std	Y+1, r1	; 0x01
    110e:	1e c0       	rjmp	.+60     	; 0x114c <DIO_writePin+0x224>
				break;
			case DIO_PORTD:
				CLEAR_BIT(PORTD_DATA_R, enu_pinID);
    1110:	a2 e3       	ldi	r26, 0x32	; 50
    1112:	b0 e0       	ldi	r27, 0x00	; 0
    1114:	e2 e3       	ldi	r30, 0x32	; 50
    1116:	f0 e0       	ldi	r31, 0x00	; 0
    1118:	80 81       	ld	r24, Z
    111a:	48 2f       	mov	r20, r24
    111c:	8b 81       	ldd	r24, Y+3	; 0x03
    111e:	28 2f       	mov	r18, r24
    1120:	30 e0       	ldi	r19, 0x00	; 0
    1122:	81 e0       	ldi	r24, 0x01	; 1
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	02 2e       	mov	r0, r18
    1128:	02 c0       	rjmp	.+4      	; 0x112e <DIO_writePin+0x206>
    112a:	88 0f       	add	r24, r24
    112c:	99 1f       	adc	r25, r25
    112e:	0a 94       	dec	r0
    1130:	e2 f7       	brpl	.-8      	; 0x112a <DIO_writePin+0x202>
    1132:	80 95       	com	r24
    1134:	84 23       	and	r24, r20
    1136:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
    1138:	19 82       	std	Y+1, r1	; 0x01
    113a:	08 c0       	rjmp	.+16     	; 0x114c <DIO_writePin+0x224>
				break;
		    	default:
				enu_ErrorState = DIO_E_PARAM_INVALID_PORT_ID;	/* Invalid port id */
    113c:	81 e0       	ldi	r24, 0x01	; 1
    113e:	89 83       	std	Y+1, r24	; 0x01
    1140:	05 c0       	rjmp	.+10     	; 0x114c <DIO_writePin+0x224>
				break;
			}
		}
		else
        {
			enu_ErrorState = DIO_E_PARAM_INVALID_PORT_DIR;	/* Invalid port direction */
    1142:	84 e0       	ldi	r24, 0x04	; 4
    1144:	89 83       	std	Y+1, r24	; 0x01
    1146:	02 c0       	rjmp	.+4      	; 0x114c <DIO_writePin+0x224>
		}
	}
	else
	{
		enu_ErrorState = DIO_E_PARAM_INVALID_PIN_ID;	/* Invalid pin id */
    1148:	82 e0       	ldi	r24, 0x02	; 2
    114a:	89 83       	std	Y+1, r24	; 0x01
	}
	return enu_ErrorState;
    114c:	89 81       	ldd	r24, Y+1	; 0x01
}
    114e:	28 96       	adiw	r28, 0x08	; 8
    1150:	0f b6       	in	r0, 0x3f	; 63
    1152:	f8 94       	cli
    1154:	de bf       	out	0x3e, r29	; 62
    1156:	0f be       	out	0x3f, r0	; 63
    1158:	cd bf       	out	0x3d, r28	; 61
    115a:	cf 91       	pop	r28
    115c:	df 91       	pop	r29
    115e:	08 95       	ret

00001160 <DIO_readPort>:
 * [in/out]	  None
 *
 * [Returns]:     Error State
 ******************************************************************************/
enuDIO_E_STATE_t DIO_readPort(enuDIO_PortId_t enu_portID, uint8_t * ptr_portState)
{
    1160:	df 93       	push	r29
    1162:	cf 93       	push	r28
    1164:	00 d0       	rcall	.+0      	; 0x1166 <DIO_readPort+0x6>
    1166:	00 d0       	rcall	.+0      	; 0x1168 <DIO_readPort+0x8>
    1168:	00 d0       	rcall	.+0      	; 0x116a <DIO_readPort+0xa>
    116a:	cd b7       	in	r28, 0x3d	; 61
    116c:	de b7       	in	r29, 0x3e	; 62
    116e:	8a 83       	std	Y+2, r24	; 0x02
    1170:	7c 83       	std	Y+4, r23	; 0x04
    1172:	6b 83       	std	Y+3, r22	; 0x03
	enuDIO_E_STATE_t enu_ErrorState = E_NOT_OK;
    1174:	81 e0       	ldi	r24, 0x01	; 1
    1176:	89 83       	std	Y+1, r24	; 0x01

	/* Check if the pointer is NULL pointer or not */
	if(ptr_portState == NULL_PTR)
    1178:	8b 81       	ldd	r24, Y+3	; 0x03
    117a:	9c 81       	ldd	r25, Y+4	; 0x04
    117c:	00 97       	sbiw	r24, 0x00	; 0
    117e:	19 f4       	brne	.+6      	; 0x1186 <DIO_readPort+0x26>
    	{	
		enu_ErrorState = DIO_E_PARAM_POINTER;	/* Invalid pointer */
    1180:	85 e0       	ldi	r24, 0x05	; 5
    1182:	89 83       	std	Y+1, r24	; 0x01
    1184:	41 c0       	rjmp	.+130    	; 0x1208 <DIO_readPort+0xa8>
	}
	else
	{
		switch (enu_portID)
    1186:	8a 81       	ldd	r24, Y+2	; 0x02
    1188:	28 2f       	mov	r18, r24
    118a:	30 e0       	ldi	r19, 0x00	; 0
    118c:	3e 83       	std	Y+6, r19	; 0x06
    118e:	2d 83       	std	Y+5, r18	; 0x05
    1190:	8d 81       	ldd	r24, Y+5	; 0x05
    1192:	9e 81       	ldd	r25, Y+6	; 0x06
    1194:	81 30       	cpi	r24, 0x01	; 1
    1196:	91 05       	cpc	r25, r1
    1198:	e9 f0       	breq	.+58     	; 0x11d4 <DIO_readPort+0x74>
    119a:	2d 81       	ldd	r18, Y+5	; 0x05
    119c:	3e 81       	ldd	r19, Y+6	; 0x06
    119e:	22 30       	cpi	r18, 0x02	; 2
    11a0:	31 05       	cpc	r19, r1
    11a2:	2c f4       	brge	.+10     	; 0x11ae <DIO_readPort+0x4e>
    11a4:	8d 81       	ldd	r24, Y+5	; 0x05
    11a6:	9e 81       	ldd	r25, Y+6	; 0x06
    11a8:	00 97       	sbiw	r24, 0x00	; 0
    11aa:	61 f0       	breq	.+24     	; 0x11c4 <DIO_readPort+0x64>
    11ac:	2b c0       	rjmp	.+86     	; 0x1204 <DIO_readPort+0xa4>
    11ae:	2d 81       	ldd	r18, Y+5	; 0x05
    11b0:	3e 81       	ldd	r19, Y+6	; 0x06
    11b2:	22 30       	cpi	r18, 0x02	; 2
    11b4:	31 05       	cpc	r19, r1
    11b6:	b1 f0       	breq	.+44     	; 0x11e4 <DIO_readPort+0x84>
    11b8:	8d 81       	ldd	r24, Y+5	; 0x05
    11ba:	9e 81       	ldd	r25, Y+6	; 0x06
    11bc:	83 30       	cpi	r24, 0x03	; 3
    11be:	91 05       	cpc	r25, r1
    11c0:	c9 f0       	breq	.+50     	; 0x11f4 <DIO_readPort+0x94>
    11c2:	20 c0       	rjmp	.+64     	; 0x1204 <DIO_readPort+0xa4>
		{
		case DIO_PORTA:
			*ptr_portState = PINA_INPUT_R;
    11c4:	e9 e3       	ldi	r30, 0x39	; 57
    11c6:	f0 e0       	ldi	r31, 0x00	; 0
    11c8:	80 81       	ld	r24, Z
    11ca:	eb 81       	ldd	r30, Y+3	; 0x03
    11cc:	fc 81       	ldd	r31, Y+4	; 0x04
    11ce:	80 83       	st	Z, r24
			enu_ErrorState = DIO_E_PARAM_VALID;
    11d0:	19 82       	std	Y+1, r1	; 0x01
    11d2:	1a c0       	rjmp	.+52     	; 0x1208 <DIO_readPort+0xa8>
			break;
		case DIO_PORTB:
			*ptr_portState = PINB_INPUT_R;
    11d4:	e6 e3       	ldi	r30, 0x36	; 54
    11d6:	f0 e0       	ldi	r31, 0x00	; 0
    11d8:	80 81       	ld	r24, Z
    11da:	eb 81       	ldd	r30, Y+3	; 0x03
    11dc:	fc 81       	ldd	r31, Y+4	; 0x04
    11de:	80 83       	st	Z, r24
			enu_ErrorState = DIO_E_PARAM_VALID;;
    11e0:	19 82       	std	Y+1, r1	; 0x01
    11e2:	12 c0       	rjmp	.+36     	; 0x1208 <DIO_readPort+0xa8>
			break;
		case DIO_PORTC:
			*ptr_portState = PINC_INPUT_R;
    11e4:	e3 e3       	ldi	r30, 0x33	; 51
    11e6:	f0 e0       	ldi	r31, 0x00	; 0
    11e8:	80 81       	ld	r24, Z
    11ea:	eb 81       	ldd	r30, Y+3	; 0x03
    11ec:	fc 81       	ldd	r31, Y+4	; 0x04
    11ee:	80 83       	st	Z, r24
			enu_ErrorState = DIO_E_PARAM_VALID;
    11f0:	19 82       	std	Y+1, r1	; 0x01
    11f2:	0a c0       	rjmp	.+20     	; 0x1208 <DIO_readPort+0xa8>
			break;
		case DIO_PORTD:
			*ptr_portState = PIND_INPUT_R;
    11f4:	e0 e3       	ldi	r30, 0x30	; 48
    11f6:	f0 e0       	ldi	r31, 0x00	; 0
    11f8:	80 81       	ld	r24, Z
    11fa:	eb 81       	ldd	r30, Y+3	; 0x03
    11fc:	fc 81       	ldd	r31, Y+4	; 0x04
    11fe:	80 83       	st	Z, r24
			enu_ErrorState = DIO_E_PARAM_VALID;
    1200:	19 82       	std	Y+1, r1	; 0x01
    1202:	02 c0       	rjmp	.+4      	; 0x1208 <DIO_readPort+0xa8>
			break;
		default:
			enu_ErrorState = DIO_E_PARAM_INVALID_PORT_ID;	/* Invalid port id */
    1204:	81 e0       	ldi	r24, 0x01	; 1
    1206:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return enu_ErrorState;
    1208:	89 81       	ldd	r24, Y+1	; 0x01
}
    120a:	26 96       	adiw	r28, 0x06	; 6
    120c:	0f b6       	in	r0, 0x3f	; 63
    120e:	f8 94       	cli
    1210:	de bf       	out	0x3e, r29	; 62
    1212:	0f be       	out	0x3f, r0	; 63
    1214:	cd bf       	out	0x3d, r28	; 61
    1216:	cf 91       	pop	r28
    1218:	df 91       	pop	r29
    121a:	08 95       	ret

0000121c <DIO_readPin>:
 * [in/out]	  None
 *
 * [Returns]:     Error State
 ******************************************************************************/
enuDIO_E_STATE_t DIO_readPin(enuDIO_PortId_t enu_portID, enuDIO_PinId_t enu_pinID, uint8_t * ptr_pinState)
{
    121c:	df 93       	push	r29
    121e:	cf 93       	push	r28
    1220:	cd b7       	in	r28, 0x3d	; 61
    1222:	de b7       	in	r29, 0x3e	; 62
    1224:	27 97       	sbiw	r28, 0x07	; 7
    1226:	0f b6       	in	r0, 0x3f	; 63
    1228:	f8 94       	cli
    122a:	de bf       	out	0x3e, r29	; 62
    122c:	0f be       	out	0x3f, r0	; 63
    122e:	cd bf       	out	0x3d, r28	; 61
    1230:	8a 83       	std	Y+2, r24	; 0x02
    1232:	6b 83       	std	Y+3, r22	; 0x03
    1234:	5d 83       	std	Y+5, r21	; 0x05
    1236:	4c 83       	std	Y+4, r20	; 0x04
	enuDIO_E_STATE_t enu_ErrorState = E_NOT_OK;
    1238:	81 e0       	ldi	r24, 0x01	; 1
    123a:	89 83       	std	Y+1, r24	; 0x01

	/* Check if the pointer is NULL pointer or not */
	if(ptr_pinState == NULL_PTR)
    123c:	8c 81       	ldd	r24, Y+4	; 0x04
    123e:	9d 81       	ldd	r25, Y+5	; 0x05
    1240:	00 97       	sbiw	r24, 0x00	; 0
    1242:	19 f4       	brne	.+6      	; 0x124a <DIO_readPin+0x2e>
    	{
		enu_ErrorState = DIO_E_PARAM_POINTER;
    1244:	85 e0       	ldi	r24, 0x05	; 5
    1246:	89 83       	std	Y+1, r24	; 0x01
    1248:	af c0       	rjmp	.+350    	; 0x13a8 <DIO_readPin+0x18c>
	}
	else
	{
		if((enu_pinID >= PIN_0) && (enu_pinID <= PIN_7))
    124a:	8b 81       	ldd	r24, Y+3	; 0x03
    124c:	88 30       	cpi	r24, 0x08	; 8
    124e:	08 f0       	brcs	.+2      	; 0x1252 <DIO_readPin+0x36>
    1250:	a9 c0       	rjmp	.+338    	; 0x13a4 <DIO_readPin+0x188>
		{
		    switch (enu_portID)
    1252:	8a 81       	ldd	r24, Y+2	; 0x02
    1254:	28 2f       	mov	r18, r24
    1256:	30 e0       	ldi	r19, 0x00	; 0
    1258:	3f 83       	std	Y+7, r19	; 0x07
    125a:	2e 83       	std	Y+6, r18	; 0x06
    125c:	4e 81       	ldd	r20, Y+6	; 0x06
    125e:	5f 81       	ldd	r21, Y+7	; 0x07
    1260:	41 30       	cpi	r20, 0x01	; 1
    1262:	51 05       	cpc	r21, r1
    1264:	c9 f1       	breq	.+114    	; 0x12d8 <DIO_readPin+0xbc>
    1266:	8e 81       	ldd	r24, Y+6	; 0x06
    1268:	9f 81       	ldd	r25, Y+7	; 0x07
    126a:	82 30       	cpi	r24, 0x02	; 2
    126c:	91 05       	cpc	r25, r1
    126e:	34 f4       	brge	.+12     	; 0x127c <DIO_readPin+0x60>
    1270:	2e 81       	ldd	r18, Y+6	; 0x06
    1272:	3f 81       	ldd	r19, Y+7	; 0x07
    1274:	21 15       	cp	r18, r1
    1276:	31 05       	cpc	r19, r1
    1278:	71 f0       	breq	.+28     	; 0x1296 <DIO_readPin+0x7a>
    127a:	91 c0       	rjmp	.+290    	; 0x139e <DIO_readPin+0x182>
    127c:	4e 81       	ldd	r20, Y+6	; 0x06
    127e:	5f 81       	ldd	r21, Y+7	; 0x07
    1280:	42 30       	cpi	r20, 0x02	; 2
    1282:	51 05       	cpc	r21, r1
    1284:	09 f4       	brne	.+2      	; 0x1288 <DIO_readPin+0x6c>
    1286:	49 c0       	rjmp	.+146    	; 0x131a <DIO_readPin+0xfe>
    1288:	8e 81       	ldd	r24, Y+6	; 0x06
    128a:	9f 81       	ldd	r25, Y+7	; 0x07
    128c:	83 30       	cpi	r24, 0x03	; 3
    128e:	91 05       	cpc	r25, r1
    1290:	09 f4       	brne	.+2      	; 0x1294 <DIO_readPin+0x78>
    1292:	64 c0       	rjmp	.+200    	; 0x135c <DIO_readPin+0x140>
    1294:	84 c0       	rjmp	.+264    	; 0x139e <DIO_readPin+0x182>
		    {
		    case DIO_PORTA:
			*ptr_pinState = READ_BIT(PINA_INPUT_R, enu_pinID);
    1296:	e9 e3       	ldi	r30, 0x39	; 57
    1298:	f0 e0       	ldi	r31, 0x00	; 0
    129a:	80 81       	ld	r24, Z
    129c:	48 2f       	mov	r20, r24
    129e:	50 e0       	ldi	r21, 0x00	; 0
    12a0:	8b 81       	ldd	r24, Y+3	; 0x03
    12a2:	28 2f       	mov	r18, r24
    12a4:	30 e0       	ldi	r19, 0x00	; 0
    12a6:	81 e0       	ldi	r24, 0x01	; 1
    12a8:	90 e0       	ldi	r25, 0x00	; 0
    12aa:	02 c0       	rjmp	.+4      	; 0x12b0 <DIO_readPin+0x94>
    12ac:	88 0f       	add	r24, r24
    12ae:	99 1f       	adc	r25, r25
    12b0:	2a 95       	dec	r18
    12b2:	e2 f7       	brpl	.-8      	; 0x12ac <DIO_readPin+0x90>
    12b4:	9a 01       	movw	r18, r20
    12b6:	28 23       	and	r18, r24
    12b8:	39 23       	and	r19, r25
    12ba:	8b 81       	ldd	r24, Y+3	; 0x03
    12bc:	88 2f       	mov	r24, r24
    12be:	90 e0       	ldi	r25, 0x00	; 0
    12c0:	a9 01       	movw	r20, r18
    12c2:	02 c0       	rjmp	.+4      	; 0x12c8 <DIO_readPin+0xac>
    12c4:	55 95       	asr	r21
    12c6:	47 95       	ror	r20
    12c8:	8a 95       	dec	r24
    12ca:	e2 f7       	brpl	.-8      	; 0x12c4 <DIO_readPin+0xa8>
    12cc:	ca 01       	movw	r24, r20
    12ce:	ec 81       	ldd	r30, Y+4	; 0x04
    12d0:	fd 81       	ldd	r31, Y+5	; 0x05
    12d2:	80 83       	st	Z, r24
			enu_ErrorState = DIO_E_PARAM_VALID;
    12d4:	19 82       	std	Y+1, r1	; 0x01
    12d6:	68 c0       	rjmp	.+208    	; 0x13a8 <DIO_readPin+0x18c>
			break;
		    case DIO_PORTB:
			*ptr_pinState = READ_BIT(PINB_INPUT_R, enu_pinID);
    12d8:	e6 e3       	ldi	r30, 0x36	; 54
    12da:	f0 e0       	ldi	r31, 0x00	; 0
    12dc:	80 81       	ld	r24, Z
    12de:	48 2f       	mov	r20, r24
    12e0:	50 e0       	ldi	r21, 0x00	; 0
    12e2:	8b 81       	ldd	r24, Y+3	; 0x03
    12e4:	28 2f       	mov	r18, r24
    12e6:	30 e0       	ldi	r19, 0x00	; 0
    12e8:	81 e0       	ldi	r24, 0x01	; 1
    12ea:	90 e0       	ldi	r25, 0x00	; 0
    12ec:	02 c0       	rjmp	.+4      	; 0x12f2 <DIO_readPin+0xd6>
    12ee:	88 0f       	add	r24, r24
    12f0:	99 1f       	adc	r25, r25
    12f2:	2a 95       	dec	r18
    12f4:	e2 f7       	brpl	.-8      	; 0x12ee <DIO_readPin+0xd2>
    12f6:	9a 01       	movw	r18, r20
    12f8:	28 23       	and	r18, r24
    12fa:	39 23       	and	r19, r25
    12fc:	8b 81       	ldd	r24, Y+3	; 0x03
    12fe:	88 2f       	mov	r24, r24
    1300:	90 e0       	ldi	r25, 0x00	; 0
    1302:	a9 01       	movw	r20, r18
    1304:	02 c0       	rjmp	.+4      	; 0x130a <DIO_readPin+0xee>
    1306:	55 95       	asr	r21
    1308:	47 95       	ror	r20
    130a:	8a 95       	dec	r24
    130c:	e2 f7       	brpl	.-8      	; 0x1306 <DIO_readPin+0xea>
    130e:	ca 01       	movw	r24, r20
    1310:	ec 81       	ldd	r30, Y+4	; 0x04
    1312:	fd 81       	ldd	r31, Y+5	; 0x05
    1314:	80 83       	st	Z, r24
			enu_ErrorState = DIO_E_PARAM_VALID;
    1316:	19 82       	std	Y+1, r1	; 0x01
    1318:	47 c0       	rjmp	.+142    	; 0x13a8 <DIO_readPin+0x18c>
			break;
		    case DIO_PORTC:
			*ptr_pinState = READ_BIT(PINC_INPUT_R, enu_pinID);
    131a:	e3 e3       	ldi	r30, 0x33	; 51
    131c:	f0 e0       	ldi	r31, 0x00	; 0
    131e:	80 81       	ld	r24, Z
    1320:	48 2f       	mov	r20, r24
    1322:	50 e0       	ldi	r21, 0x00	; 0
    1324:	8b 81       	ldd	r24, Y+3	; 0x03
    1326:	28 2f       	mov	r18, r24
    1328:	30 e0       	ldi	r19, 0x00	; 0
    132a:	81 e0       	ldi	r24, 0x01	; 1
    132c:	90 e0       	ldi	r25, 0x00	; 0
    132e:	02 c0       	rjmp	.+4      	; 0x1334 <DIO_readPin+0x118>
    1330:	88 0f       	add	r24, r24
    1332:	99 1f       	adc	r25, r25
    1334:	2a 95       	dec	r18
    1336:	e2 f7       	brpl	.-8      	; 0x1330 <DIO_readPin+0x114>
    1338:	9a 01       	movw	r18, r20
    133a:	28 23       	and	r18, r24
    133c:	39 23       	and	r19, r25
    133e:	8b 81       	ldd	r24, Y+3	; 0x03
    1340:	88 2f       	mov	r24, r24
    1342:	90 e0       	ldi	r25, 0x00	; 0
    1344:	a9 01       	movw	r20, r18
    1346:	02 c0       	rjmp	.+4      	; 0x134c <DIO_readPin+0x130>
    1348:	55 95       	asr	r21
    134a:	47 95       	ror	r20
    134c:	8a 95       	dec	r24
    134e:	e2 f7       	brpl	.-8      	; 0x1348 <DIO_readPin+0x12c>
    1350:	ca 01       	movw	r24, r20
    1352:	ec 81       	ldd	r30, Y+4	; 0x04
    1354:	fd 81       	ldd	r31, Y+5	; 0x05
    1356:	80 83       	st	Z, r24
			enu_ErrorState = DIO_E_PARAM_VALID;
    1358:	19 82       	std	Y+1, r1	; 0x01
    135a:	26 c0       	rjmp	.+76     	; 0x13a8 <DIO_readPin+0x18c>
			break;
		    case DIO_PORTD:
			*ptr_pinState = READ_BIT(PIND_INPUT_R, enu_pinID);
    135c:	e0 e3       	ldi	r30, 0x30	; 48
    135e:	f0 e0       	ldi	r31, 0x00	; 0
    1360:	80 81       	ld	r24, Z
    1362:	48 2f       	mov	r20, r24
    1364:	50 e0       	ldi	r21, 0x00	; 0
    1366:	8b 81       	ldd	r24, Y+3	; 0x03
    1368:	28 2f       	mov	r18, r24
    136a:	30 e0       	ldi	r19, 0x00	; 0
    136c:	81 e0       	ldi	r24, 0x01	; 1
    136e:	90 e0       	ldi	r25, 0x00	; 0
    1370:	02 c0       	rjmp	.+4      	; 0x1376 <DIO_readPin+0x15a>
    1372:	88 0f       	add	r24, r24
    1374:	99 1f       	adc	r25, r25
    1376:	2a 95       	dec	r18
    1378:	e2 f7       	brpl	.-8      	; 0x1372 <DIO_readPin+0x156>
    137a:	9a 01       	movw	r18, r20
    137c:	28 23       	and	r18, r24
    137e:	39 23       	and	r19, r25
    1380:	8b 81       	ldd	r24, Y+3	; 0x03
    1382:	88 2f       	mov	r24, r24
    1384:	90 e0       	ldi	r25, 0x00	; 0
    1386:	a9 01       	movw	r20, r18
    1388:	02 c0       	rjmp	.+4      	; 0x138e <DIO_readPin+0x172>
    138a:	55 95       	asr	r21
    138c:	47 95       	ror	r20
    138e:	8a 95       	dec	r24
    1390:	e2 f7       	brpl	.-8      	; 0x138a <DIO_readPin+0x16e>
    1392:	ca 01       	movw	r24, r20
    1394:	ec 81       	ldd	r30, Y+4	; 0x04
    1396:	fd 81       	ldd	r31, Y+5	; 0x05
    1398:	80 83       	st	Z, r24
			enu_ErrorState = DIO_E_PARAM_VALID;
    139a:	19 82       	std	Y+1, r1	; 0x01
    139c:	05 c0       	rjmp	.+10     	; 0x13a8 <DIO_readPin+0x18c>
			break;
		    default:
			enu_ErrorState = DIO_E_PARAM_INVALID_PORT_ID;	/* Invalid port id */
    139e:	81 e0       	ldi	r24, 0x01	; 1
    13a0:	89 83       	std	Y+1, r24	; 0x01
    13a2:	02 c0       	rjmp	.+4      	; 0x13a8 <DIO_readPin+0x18c>
			break;
		    }
		}
		else
		{
			enu_ErrorState = DIO_E_PARAM_INVALID_PIN_ID;	/* Invalid pin id */
    13a4:	82 e0       	ldi	r24, 0x02	; 2
    13a6:	89 83       	std	Y+1, r24	; 0x01
		}
	}
    return enu_ErrorState;
    13a8:	89 81       	ldd	r24, Y+1	; 0x01
}
    13aa:	27 96       	adiw	r28, 0x07	; 7
    13ac:	0f b6       	in	r0, 0x3f	; 63
    13ae:	f8 94       	cli
    13b0:	de bf       	out	0x3e, r29	; 62
    13b2:	0f be       	out	0x3f, r0	; 63
    13b4:	cd bf       	out	0x3d, r28	; 61
    13b6:	cf 91       	pop	r28
    13b8:	df 91       	pop	r29
    13ba:	08 95       	ret

000013bc <DIO_TogglePin>:
 * [in/out]	  None
 *
 * [Returns]:     Error State
 ******************************************************************************/
enuDIO_E_STATE_t DIO_TogglePin(enuDIO_PortId_t enu_portID, enuDIO_PinId_t enu_pinID)
{
    13bc:	df 93       	push	r29
    13be:	cf 93       	push	r28
    13c0:	00 d0       	rcall	.+0      	; 0x13c2 <DIO_TogglePin+0x6>
    13c2:	00 d0       	rcall	.+0      	; 0x13c4 <DIO_TogglePin+0x8>
    13c4:	0f 92       	push	r0
    13c6:	cd b7       	in	r28, 0x3d	; 61
    13c8:	de b7       	in	r29, 0x3e	; 62
    13ca:	8a 83       	std	Y+2, r24	; 0x02
    13cc:	6b 83       	std	Y+3, r22	; 0x03
	enuDIO_E_STATE_t enu_ErrorState = E_NOT_OK;
    13ce:	81 e0       	ldi	r24, 0x01	; 1
    13d0:	89 83       	std	Y+1, r24	; 0x01

	/* Check if the pointer is NULL pointer or not */
    if ((enu_pinID >= PIN_0) && (enu_pinID <= PIN_7))
    13d2:	8b 81       	ldd	r24, Y+3	; 0x03
    13d4:	88 30       	cpi	r24, 0x08	; 8
    13d6:	08 f0       	brcs	.+2      	; 0x13da <DIO_TogglePin+0x1e>
    13d8:	77 c0       	rjmp	.+238    	; 0x14c8 <DIO_TogglePin+0x10c>
    {
        switch (enu_portID)
    13da:	8a 81       	ldd	r24, Y+2	; 0x02
    13dc:	28 2f       	mov	r18, r24
    13de:	30 e0       	ldi	r19, 0x00	; 0
    13e0:	3d 83       	std	Y+5, r19	; 0x05
    13e2:	2c 83       	std	Y+4, r18	; 0x04
    13e4:	8c 81       	ldd	r24, Y+4	; 0x04
    13e6:	9d 81       	ldd	r25, Y+5	; 0x05
    13e8:	81 30       	cpi	r24, 0x01	; 1
    13ea:	91 05       	cpc	r25, r1
    13ec:	59 f1       	breq	.+86     	; 0x1444 <DIO_TogglePin+0x88>
    13ee:	2c 81       	ldd	r18, Y+4	; 0x04
    13f0:	3d 81       	ldd	r19, Y+5	; 0x05
    13f2:	22 30       	cpi	r18, 0x02	; 2
    13f4:	31 05       	cpc	r19, r1
    13f6:	2c f4       	brge	.+10     	; 0x1402 <DIO_TogglePin+0x46>
    13f8:	8c 81       	ldd	r24, Y+4	; 0x04
    13fa:	9d 81       	ldd	r25, Y+5	; 0x05
    13fc:	00 97       	sbiw	r24, 0x00	; 0
    13fe:	69 f0       	breq	.+26     	; 0x141a <DIO_TogglePin+0x5e>
    1400:	60 c0       	rjmp	.+192    	; 0x14c2 <DIO_TogglePin+0x106>
    1402:	2c 81       	ldd	r18, Y+4	; 0x04
    1404:	3d 81       	ldd	r19, Y+5	; 0x05
    1406:	22 30       	cpi	r18, 0x02	; 2
    1408:	31 05       	cpc	r19, r1
    140a:	89 f1       	breq	.+98     	; 0x146e <DIO_TogglePin+0xb2>
    140c:	8c 81       	ldd	r24, Y+4	; 0x04
    140e:	9d 81       	ldd	r25, Y+5	; 0x05
    1410:	83 30       	cpi	r24, 0x03	; 3
    1412:	91 05       	cpc	r25, r1
    1414:	09 f4       	brne	.+2      	; 0x1418 <DIO_TogglePin+0x5c>
    1416:	40 c0       	rjmp	.+128    	; 0x1498 <DIO_TogglePin+0xdc>
    1418:	54 c0       	rjmp	.+168    	; 0x14c2 <DIO_TogglePin+0x106>
        {
        case DIO_PORTA:
            TOGGLE_BIT(PORTA_DATA_R, enu_pinID);
    141a:	ab e3       	ldi	r26, 0x3B	; 59
    141c:	b0 e0       	ldi	r27, 0x00	; 0
    141e:	eb e3       	ldi	r30, 0x3B	; 59
    1420:	f0 e0       	ldi	r31, 0x00	; 0
    1422:	80 81       	ld	r24, Z
    1424:	48 2f       	mov	r20, r24
    1426:	8b 81       	ldd	r24, Y+3	; 0x03
    1428:	28 2f       	mov	r18, r24
    142a:	30 e0       	ldi	r19, 0x00	; 0
    142c:	81 e0       	ldi	r24, 0x01	; 1
    142e:	90 e0       	ldi	r25, 0x00	; 0
    1430:	02 2e       	mov	r0, r18
    1432:	02 c0       	rjmp	.+4      	; 0x1438 <DIO_TogglePin+0x7c>
    1434:	88 0f       	add	r24, r24
    1436:	99 1f       	adc	r25, r25
    1438:	0a 94       	dec	r0
    143a:	e2 f7       	brpl	.-8      	; 0x1434 <DIO_TogglePin+0x78>
    143c:	84 27       	eor	r24, r20
    143e:	8c 93       	st	X, r24
            enu_ErrorState = DIO_E_PARAM_VALID;
    1440:	19 82       	std	Y+1, r1	; 0x01
    1442:	44 c0       	rjmp	.+136    	; 0x14cc <DIO_TogglePin+0x110>
            break;
        case DIO_PORTB:
        	TOGGLE_BIT(PORTB_DATA_R, enu_pinID);
    1444:	a8 e3       	ldi	r26, 0x38	; 56
    1446:	b0 e0       	ldi	r27, 0x00	; 0
    1448:	e8 e3       	ldi	r30, 0x38	; 56
    144a:	f0 e0       	ldi	r31, 0x00	; 0
    144c:	80 81       	ld	r24, Z
    144e:	48 2f       	mov	r20, r24
    1450:	8b 81       	ldd	r24, Y+3	; 0x03
    1452:	28 2f       	mov	r18, r24
    1454:	30 e0       	ldi	r19, 0x00	; 0
    1456:	81 e0       	ldi	r24, 0x01	; 1
    1458:	90 e0       	ldi	r25, 0x00	; 0
    145a:	02 2e       	mov	r0, r18
    145c:	02 c0       	rjmp	.+4      	; 0x1462 <DIO_TogglePin+0xa6>
    145e:	88 0f       	add	r24, r24
    1460:	99 1f       	adc	r25, r25
    1462:	0a 94       	dec	r0
    1464:	e2 f7       	brpl	.-8      	; 0x145e <DIO_TogglePin+0xa2>
    1466:	84 27       	eor	r24, r20
    1468:	8c 93       	st	X, r24
            enu_ErrorState = DIO_E_PARAM_VALID;
    146a:	19 82       	std	Y+1, r1	; 0x01
    146c:	2f c0       	rjmp	.+94     	; 0x14cc <DIO_TogglePin+0x110>
            break;
        case DIO_PORTC:
        	TOGGLE_BIT(PORTC_DATA_R, enu_pinID);
    146e:	a5 e3       	ldi	r26, 0x35	; 53
    1470:	b0 e0       	ldi	r27, 0x00	; 0
    1472:	e5 e3       	ldi	r30, 0x35	; 53
    1474:	f0 e0       	ldi	r31, 0x00	; 0
    1476:	80 81       	ld	r24, Z
    1478:	48 2f       	mov	r20, r24
    147a:	8b 81       	ldd	r24, Y+3	; 0x03
    147c:	28 2f       	mov	r18, r24
    147e:	30 e0       	ldi	r19, 0x00	; 0
    1480:	81 e0       	ldi	r24, 0x01	; 1
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	02 2e       	mov	r0, r18
    1486:	02 c0       	rjmp	.+4      	; 0x148c <DIO_TogglePin+0xd0>
    1488:	88 0f       	add	r24, r24
    148a:	99 1f       	adc	r25, r25
    148c:	0a 94       	dec	r0
    148e:	e2 f7       	brpl	.-8      	; 0x1488 <DIO_TogglePin+0xcc>
    1490:	84 27       	eor	r24, r20
    1492:	8c 93       	st	X, r24
            enu_ErrorState = DIO_E_PARAM_VALID;
    1494:	19 82       	std	Y+1, r1	; 0x01
    1496:	1a c0       	rjmp	.+52     	; 0x14cc <DIO_TogglePin+0x110>
            break;
        case DIO_PORTD:
        	TOGGLE_BIT(PORTD_DATA_R, enu_pinID);
    1498:	a2 e3       	ldi	r26, 0x32	; 50
    149a:	b0 e0       	ldi	r27, 0x00	; 0
    149c:	e2 e3       	ldi	r30, 0x32	; 50
    149e:	f0 e0       	ldi	r31, 0x00	; 0
    14a0:	80 81       	ld	r24, Z
    14a2:	48 2f       	mov	r20, r24
    14a4:	8b 81       	ldd	r24, Y+3	; 0x03
    14a6:	28 2f       	mov	r18, r24
    14a8:	30 e0       	ldi	r19, 0x00	; 0
    14aa:	81 e0       	ldi	r24, 0x01	; 1
    14ac:	90 e0       	ldi	r25, 0x00	; 0
    14ae:	02 2e       	mov	r0, r18
    14b0:	02 c0       	rjmp	.+4      	; 0x14b6 <DIO_TogglePin+0xfa>
    14b2:	88 0f       	add	r24, r24
    14b4:	99 1f       	adc	r25, r25
    14b6:	0a 94       	dec	r0
    14b8:	e2 f7       	brpl	.-8      	; 0x14b2 <DIO_TogglePin+0xf6>
    14ba:	84 27       	eor	r24, r20
    14bc:	8c 93       	st	X, r24
            enu_ErrorState = DIO_E_PARAM_VALID;
    14be:	19 82       	std	Y+1, r1	; 0x01
    14c0:	05 c0       	rjmp	.+10     	; 0x14cc <DIO_TogglePin+0x110>
            break;
        default:
        	enu_ErrorState = E_NOT_OK;	/* Invalid port id */
    14c2:	81 e0       	ldi	r24, 0x01	; 1
    14c4:	89 83       	std	Y+1, r24	; 0x01
    14c6:	02 c0       	rjmp	.+4      	; 0x14cc <DIO_TogglePin+0x110>
            break;
        }
    }
    else
    {
    	enu_ErrorState = DIO_E_PARAM_INVALID_PIN_ID;	/* Invalid pin id */
    14c8:	82 e0       	ldi	r24, 0x02	; 2
    14ca:	89 83       	std	Y+1, r24	; 0x01
    }
    return enu_ErrorState;
    14cc:	89 81       	ldd	r24, Y+1	; 0x01
}
    14ce:	0f 90       	pop	r0
    14d0:	0f 90       	pop	r0
    14d2:	0f 90       	pop	r0
    14d4:	0f 90       	pop	r0
    14d6:	0f 90       	pop	r0
    14d8:	cf 91       	pop	r28
    14da:	df 91       	pop	r29
    14dc:	08 95       	ret

000014de <LCD_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void LCD_init(void)
{
    14de:	df 93       	push	r29
    14e0:	cf 93       	push	r28
    14e2:	cd b7       	in	r28, 0x3d	; 61
    14e4:	de b7       	in	r29, 0x3e	; 62
	/* Configure the control pins(E,RS,RW) as output pins */
	DIO_setPinDirection(LCD_CTRL_PORT, E, OUTPUT);
    14e6:	80 e0       	ldi	r24, 0x00	; 0
    14e8:	63 e0       	ldi	r22, 0x03	; 3
    14ea:	41 e0       	ldi	r20, 0x01	; 1
    14ec:	0e 94 2b 06 	call	0xc56	; 0xc56 <DIO_setPinDirection>
	DIO_setPinDirection(LCD_CTRL_PORT, RS, OUTPUT);
    14f0:	80 e0       	ldi	r24, 0x00	; 0
    14f2:	61 e0       	ldi	r22, 0x01	; 1
    14f4:	41 e0       	ldi	r20, 0x01	; 1
    14f6:	0e 94 2b 06 	call	0xc56	; 0xc56 <DIO_setPinDirection>
	DIO_setPinDirection(LCD_CTRL_PORT, RW, OUTPUT);
    14fa:	80 e0       	ldi	r24, 0x00	; 0
    14fc:	62 e0       	ldi	r22, 0x02	; 2
    14fe:	41 e0       	ldi	r20, 0x01	; 1
    1500:	0e 94 2b 06 	call	0xc56	; 0xc56 <DIO_setPinDirection>

	/* Configure the highest 4 bits of the data port as output pins */
	DIO_setPinDirection(LCD_DATA_PORT, PIN_4, OUTPUT);
    1504:	80 e0       	ldi	r24, 0x00	; 0
    1506:	64 e0       	ldi	r22, 0x04	; 4
    1508:	41 e0       	ldi	r20, 0x01	; 1
    150a:	0e 94 2b 06 	call	0xc56	; 0xc56 <DIO_setPinDirection>
	DIO_setPinDirection(LCD_DATA_PORT, PIN_5, OUTPUT);
    150e:	80 e0       	ldi	r24, 0x00	; 0
    1510:	65 e0       	ldi	r22, 0x05	; 5
    1512:	41 e0       	ldi	r20, 0x01	; 1
    1514:	0e 94 2b 06 	call	0xc56	; 0xc56 <DIO_setPinDirection>
	DIO_setPinDirection(LCD_DATA_PORT, PIN_6, OUTPUT);
    1518:	80 e0       	ldi	r24, 0x00	; 0
    151a:	66 e0       	ldi	r22, 0x06	; 6
    151c:	41 e0       	ldi	r20, 0x01	; 1
    151e:	0e 94 2b 06 	call	0xc56	; 0xc56 <DIO_setPinDirection>
	DIO_setPinDirection(LCD_DATA_PORT, PIN_7, OUTPUT);
    1522:	80 e0       	ldi	r24, 0x00	; 0
    1524:	67 e0       	ldi	r22, 0x07	; 7
    1526:	41 e0       	ldi	r20, 0x01	; 1
    1528:	0e 94 2b 06 	call	0xc56	; 0xc56 <DIO_setPinDirection>
	
	LCD_sendCommand(FOUR_BITS_DATA_MODE); 		 /* Initialize LCD in 4-bit mode */
    152c:	82 e0       	ldi	r24, 0x02	; 2
    152e:	0e 94 a5 0a 	call	0x154a	; 0x154a <LCD_sendCommand>
	LCD_sendCommand(TWO_LINE_LCD_Four_BIT_MODE); /* Use 2-line LCD + 4-bit Data Mode + 5*7 dot display Mode */
    1532:	88 e2       	ldi	r24, 0x28	; 40
    1534:	0e 94 a5 0a 	call	0x154a	; 0x154a <LCD_sendCommand>
	LCD_sendCommand(CURSOR_OFF); 				 /* Cursor off */
    1538:	8c e0       	ldi	r24, 0x0C	; 12
    153a:	0e 94 a5 0a 	call	0x154a	; 0x154a <LCD_sendCommand>
	LCD_sendCommand(CLEAR_COMMAND); 			 /* Clear LCD at the beginning */
    153e:	81 e0       	ldi	r24, 0x01	; 1
    1540:	0e 94 a5 0a 	call	0x154a	; 0x154a <LCD_sendCommand>
}
    1544:	cf 91       	pop	r28
    1546:	df 91       	pop	r29
    1548:	08 95       	ret

0000154a <LCD_sendCommand>:

void LCD_sendCommand(uint8_t au8_command)
{
    154a:	0f 93       	push	r16
    154c:	1f 93       	push	r17
    154e:	df 93       	push	r29
    1550:	cf 93       	push	r28
    1552:	cd b7       	in	r28, 0x3d	; 61
    1554:	de b7       	in	r29, 0x3e	; 62
    1556:	c3 56       	subi	r28, 0x63	; 99
    1558:	d0 40       	sbci	r29, 0x00	; 0
    155a:	0f b6       	in	r0, 0x3f	; 63
    155c:	f8 94       	cli
    155e:	de bf       	out	0x3e, r29	; 62
    1560:	0f be       	out	0x3f, r0	; 63
    1562:	cd bf       	out	0x3d, r28	; 61
    1564:	fe 01       	movw	r30, r28
    1566:	ed 59       	subi	r30, 0x9D	; 157
    1568:	ff 4f       	sbci	r31, 0xFF	; 255
    156a:	80 83       	st	Z, r24
	DIO_writePin(LCD_CTRL_PORT, RS, LOW);	/* Instruction Mode RS = 0 */
    156c:	80 e0       	ldi	r24, 0x00	; 0
    156e:	61 e0       	ldi	r22, 0x01	; 1
    1570:	40 e0       	ldi	r20, 0x00	; 0
    1572:	0e 94 94 07 	call	0xf28	; 0xf28 <DIO_writePin>
	DIO_writePin(LCD_CTRL_PORT, RW, LOW);	/* Write data to LCD so RW = 0 */
    1576:	80 e0       	ldi	r24, 0x00	; 0
    1578:	62 e0       	ldi	r22, 0x02	; 2
    157a:	40 e0       	ldi	r20, 0x00	; 0
    157c:	0e 94 94 07 	call	0xf28	; 0xf28 <DIO_writePin>
    1580:	fe 01       	movw	r30, r28
    1582:	e1 5a       	subi	r30, 0xA1	; 161
    1584:	ff 4f       	sbci	r31, 0xFF	; 255
    1586:	80 e0       	ldi	r24, 0x00	; 0
    1588:	90 e0       	ldi	r25, 0x00	; 0
    158a:	a0 e8       	ldi	r26, 0x80	; 128
    158c:	bf e3       	ldi	r27, 0x3F	; 63
    158e:	80 83       	st	Z, r24
    1590:	91 83       	std	Z+1, r25	; 0x01
    1592:	a2 83       	std	Z+2, r26	; 0x02
    1594:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1596:	8e 01       	movw	r16, r28
    1598:	05 5a       	subi	r16, 0xA5	; 165
    159a:	1f 4f       	sbci	r17, 0xFF	; 255
    159c:	fe 01       	movw	r30, r28
    159e:	e1 5a       	subi	r30, 0xA1	; 161
    15a0:	ff 4f       	sbci	r31, 0xFF	; 255
    15a2:	60 81       	ld	r22, Z
    15a4:	71 81       	ldd	r23, Z+1	; 0x01
    15a6:	82 81       	ldd	r24, Z+2	; 0x02
    15a8:	93 81       	ldd	r25, Z+3	; 0x03
    15aa:	20 e0       	ldi	r18, 0x00	; 0
    15ac:	30 e0       	ldi	r19, 0x00	; 0
    15ae:	4a ef       	ldi	r20, 0xFA	; 250
    15b0:	54 e4       	ldi	r21, 0x44	; 68
    15b2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15b6:	dc 01       	movw	r26, r24
    15b8:	cb 01       	movw	r24, r22
    15ba:	f8 01       	movw	r30, r16
    15bc:	80 83       	st	Z, r24
    15be:	91 83       	std	Z+1, r25	; 0x01
    15c0:	a2 83       	std	Z+2, r26	; 0x02
    15c2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    15c4:	fe 01       	movw	r30, r28
    15c6:	e5 5a       	subi	r30, 0xA5	; 165
    15c8:	ff 4f       	sbci	r31, 0xFF	; 255
    15ca:	60 81       	ld	r22, Z
    15cc:	71 81       	ldd	r23, Z+1	; 0x01
    15ce:	82 81       	ldd	r24, Z+2	; 0x02
    15d0:	93 81       	ldd	r25, Z+3	; 0x03
    15d2:	20 e0       	ldi	r18, 0x00	; 0
    15d4:	30 e0       	ldi	r19, 0x00	; 0
    15d6:	40 e8       	ldi	r20, 0x80	; 128
    15d8:	5f e3       	ldi	r21, 0x3F	; 63
    15da:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    15de:	88 23       	and	r24, r24
    15e0:	44 f4       	brge	.+16     	; 0x15f2 <LCD_sendCommand+0xa8>
		__ticks = 1;
    15e2:	fe 01       	movw	r30, r28
    15e4:	e7 5a       	subi	r30, 0xA7	; 167
    15e6:	ff 4f       	sbci	r31, 0xFF	; 255
    15e8:	81 e0       	ldi	r24, 0x01	; 1
    15ea:	90 e0       	ldi	r25, 0x00	; 0
    15ec:	91 83       	std	Z+1, r25	; 0x01
    15ee:	80 83       	st	Z, r24
    15f0:	64 c0       	rjmp	.+200    	; 0x16ba <LCD_sendCommand+0x170>
	else if (__tmp > 65535)
    15f2:	fe 01       	movw	r30, r28
    15f4:	e5 5a       	subi	r30, 0xA5	; 165
    15f6:	ff 4f       	sbci	r31, 0xFF	; 255
    15f8:	60 81       	ld	r22, Z
    15fa:	71 81       	ldd	r23, Z+1	; 0x01
    15fc:	82 81       	ldd	r24, Z+2	; 0x02
    15fe:	93 81       	ldd	r25, Z+3	; 0x03
    1600:	20 e0       	ldi	r18, 0x00	; 0
    1602:	3f ef       	ldi	r19, 0xFF	; 255
    1604:	4f e7       	ldi	r20, 0x7F	; 127
    1606:	57 e4       	ldi	r21, 0x47	; 71
    1608:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    160c:	18 16       	cp	r1, r24
    160e:	0c f0       	brlt	.+2      	; 0x1612 <LCD_sendCommand+0xc8>
    1610:	43 c0       	rjmp	.+134    	; 0x1698 <LCD_sendCommand+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1612:	fe 01       	movw	r30, r28
    1614:	e1 5a       	subi	r30, 0xA1	; 161
    1616:	ff 4f       	sbci	r31, 0xFF	; 255
    1618:	60 81       	ld	r22, Z
    161a:	71 81       	ldd	r23, Z+1	; 0x01
    161c:	82 81       	ldd	r24, Z+2	; 0x02
    161e:	93 81       	ldd	r25, Z+3	; 0x03
    1620:	20 e0       	ldi	r18, 0x00	; 0
    1622:	30 e0       	ldi	r19, 0x00	; 0
    1624:	40 e2       	ldi	r20, 0x20	; 32
    1626:	51 e4       	ldi	r21, 0x41	; 65
    1628:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    162c:	dc 01       	movw	r26, r24
    162e:	cb 01       	movw	r24, r22
    1630:	8e 01       	movw	r16, r28
    1632:	07 5a       	subi	r16, 0xA7	; 167
    1634:	1f 4f       	sbci	r17, 0xFF	; 255
    1636:	bc 01       	movw	r22, r24
    1638:	cd 01       	movw	r24, r26
    163a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    163e:	dc 01       	movw	r26, r24
    1640:	cb 01       	movw	r24, r22
    1642:	f8 01       	movw	r30, r16
    1644:	91 83       	std	Z+1, r25	; 0x01
    1646:	80 83       	st	Z, r24
    1648:	1f c0       	rjmp	.+62     	; 0x1688 <LCD_sendCommand+0x13e>
    164a:	fe 01       	movw	r30, r28
    164c:	e9 5a       	subi	r30, 0xA9	; 169
    164e:	ff 4f       	sbci	r31, 0xFF	; 255
    1650:	88 ec       	ldi	r24, 0xC8	; 200
    1652:	90 e0       	ldi	r25, 0x00	; 0
    1654:	91 83       	std	Z+1, r25	; 0x01
    1656:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1658:	fe 01       	movw	r30, r28
    165a:	e9 5a       	subi	r30, 0xA9	; 169
    165c:	ff 4f       	sbci	r31, 0xFF	; 255
    165e:	80 81       	ld	r24, Z
    1660:	91 81       	ldd	r25, Z+1	; 0x01
    1662:	01 97       	sbiw	r24, 0x01	; 1
    1664:	f1 f7       	brne	.-4      	; 0x1662 <LCD_sendCommand+0x118>
    1666:	fe 01       	movw	r30, r28
    1668:	e9 5a       	subi	r30, 0xA9	; 169
    166a:	ff 4f       	sbci	r31, 0xFF	; 255
    166c:	91 83       	std	Z+1, r25	; 0x01
    166e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1670:	de 01       	movw	r26, r28
    1672:	a7 5a       	subi	r26, 0xA7	; 167
    1674:	bf 4f       	sbci	r27, 0xFF	; 255
    1676:	fe 01       	movw	r30, r28
    1678:	e7 5a       	subi	r30, 0xA7	; 167
    167a:	ff 4f       	sbci	r31, 0xFF	; 255
    167c:	80 81       	ld	r24, Z
    167e:	91 81       	ldd	r25, Z+1	; 0x01
    1680:	01 97       	sbiw	r24, 0x01	; 1
    1682:	11 96       	adiw	r26, 0x01	; 1
    1684:	9c 93       	st	X, r25
    1686:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1688:	fe 01       	movw	r30, r28
    168a:	e7 5a       	subi	r30, 0xA7	; 167
    168c:	ff 4f       	sbci	r31, 0xFF	; 255
    168e:	80 81       	ld	r24, Z
    1690:	91 81       	ldd	r25, Z+1	; 0x01
    1692:	00 97       	sbiw	r24, 0x00	; 0
    1694:	d1 f6       	brne	.-76     	; 0x164a <LCD_sendCommand+0x100>
    1696:	27 c0       	rjmp	.+78     	; 0x16e6 <LCD_sendCommand+0x19c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1698:	8e 01       	movw	r16, r28
    169a:	07 5a       	subi	r16, 0xA7	; 167
    169c:	1f 4f       	sbci	r17, 0xFF	; 255
    169e:	fe 01       	movw	r30, r28
    16a0:	e5 5a       	subi	r30, 0xA5	; 165
    16a2:	ff 4f       	sbci	r31, 0xFF	; 255
    16a4:	60 81       	ld	r22, Z
    16a6:	71 81       	ldd	r23, Z+1	; 0x01
    16a8:	82 81       	ldd	r24, Z+2	; 0x02
    16aa:	93 81       	ldd	r25, Z+3	; 0x03
    16ac:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16b0:	dc 01       	movw	r26, r24
    16b2:	cb 01       	movw	r24, r22
    16b4:	f8 01       	movw	r30, r16
    16b6:	91 83       	std	Z+1, r25	; 0x01
    16b8:	80 83       	st	Z, r24
    16ba:	de 01       	movw	r26, r28
    16bc:	ab 5a       	subi	r26, 0xAB	; 171
    16be:	bf 4f       	sbci	r27, 0xFF	; 255
    16c0:	fe 01       	movw	r30, r28
    16c2:	e7 5a       	subi	r30, 0xA7	; 167
    16c4:	ff 4f       	sbci	r31, 0xFF	; 255
    16c6:	80 81       	ld	r24, Z
    16c8:	91 81       	ldd	r25, Z+1	; 0x01
    16ca:	8d 93       	st	X+, r24
    16cc:	9c 93       	st	X, r25
    16ce:	fe 01       	movw	r30, r28
    16d0:	eb 5a       	subi	r30, 0xAB	; 171
    16d2:	ff 4f       	sbci	r31, 0xFF	; 255
    16d4:	80 81       	ld	r24, Z
    16d6:	91 81       	ldd	r25, Z+1	; 0x01
    16d8:	01 97       	sbiw	r24, 0x01	; 1
    16da:	f1 f7       	brne	.-4      	; 0x16d8 <LCD_sendCommand+0x18e>
    16dc:	fe 01       	movw	r30, r28
    16de:	eb 5a       	subi	r30, 0xAB	; 171
    16e0:	ff 4f       	sbci	r31, 0xFF	; 255
    16e2:	91 83       	std	Z+1, r25	; 0x01
    16e4:	80 83       	st	Z, r24
	_delay_ms(1); 							/* Delay for processing Tas = 50ns */

	DIO_writePin(LCD_CTRL_PORT, E, HIGH);	/* Enable LCD E = 1 */
    16e6:	80 e0       	ldi	r24, 0x00	; 0
    16e8:	63 e0       	ldi	r22, 0x03	; 3
    16ea:	41 e0       	ldi	r20, 0x01	; 1
    16ec:	0e 94 94 07 	call	0xf28	; 0xf28 <DIO_writePin>
    16f0:	fe 01       	movw	r30, r28
    16f2:	ef 5a       	subi	r30, 0xAF	; 175
    16f4:	ff 4f       	sbci	r31, 0xFF	; 255
    16f6:	80 e0       	ldi	r24, 0x00	; 0
    16f8:	90 e0       	ldi	r25, 0x00	; 0
    16fa:	a0 e8       	ldi	r26, 0x80	; 128
    16fc:	bf e3       	ldi	r27, 0x3F	; 63
    16fe:	80 83       	st	Z, r24
    1700:	91 83       	std	Z+1, r25	; 0x01
    1702:	a2 83       	std	Z+2, r26	; 0x02
    1704:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1706:	8e 01       	movw	r16, r28
    1708:	03 5b       	subi	r16, 0xB3	; 179
    170a:	1f 4f       	sbci	r17, 0xFF	; 255
    170c:	fe 01       	movw	r30, r28
    170e:	ef 5a       	subi	r30, 0xAF	; 175
    1710:	ff 4f       	sbci	r31, 0xFF	; 255
    1712:	60 81       	ld	r22, Z
    1714:	71 81       	ldd	r23, Z+1	; 0x01
    1716:	82 81       	ldd	r24, Z+2	; 0x02
    1718:	93 81       	ldd	r25, Z+3	; 0x03
    171a:	20 e0       	ldi	r18, 0x00	; 0
    171c:	30 e0       	ldi	r19, 0x00	; 0
    171e:	4a ef       	ldi	r20, 0xFA	; 250
    1720:	54 e4       	ldi	r21, 0x44	; 68
    1722:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1726:	dc 01       	movw	r26, r24
    1728:	cb 01       	movw	r24, r22
    172a:	f8 01       	movw	r30, r16
    172c:	80 83       	st	Z, r24
    172e:	91 83       	std	Z+1, r25	; 0x01
    1730:	a2 83       	std	Z+2, r26	; 0x02
    1732:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1734:	fe 01       	movw	r30, r28
    1736:	e3 5b       	subi	r30, 0xB3	; 179
    1738:	ff 4f       	sbci	r31, 0xFF	; 255
    173a:	60 81       	ld	r22, Z
    173c:	71 81       	ldd	r23, Z+1	; 0x01
    173e:	82 81       	ldd	r24, Z+2	; 0x02
    1740:	93 81       	ldd	r25, Z+3	; 0x03
    1742:	20 e0       	ldi	r18, 0x00	; 0
    1744:	30 e0       	ldi	r19, 0x00	; 0
    1746:	40 e8       	ldi	r20, 0x80	; 128
    1748:	5f e3       	ldi	r21, 0x3F	; 63
    174a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    174e:	88 23       	and	r24, r24
    1750:	44 f4       	brge	.+16     	; 0x1762 <LCD_sendCommand+0x218>
		__ticks = 1;
    1752:	fe 01       	movw	r30, r28
    1754:	e5 5b       	subi	r30, 0xB5	; 181
    1756:	ff 4f       	sbci	r31, 0xFF	; 255
    1758:	81 e0       	ldi	r24, 0x01	; 1
    175a:	90 e0       	ldi	r25, 0x00	; 0
    175c:	91 83       	std	Z+1, r25	; 0x01
    175e:	80 83       	st	Z, r24
    1760:	64 c0       	rjmp	.+200    	; 0x182a <LCD_sendCommand+0x2e0>
	else if (__tmp > 65535)
    1762:	fe 01       	movw	r30, r28
    1764:	e3 5b       	subi	r30, 0xB3	; 179
    1766:	ff 4f       	sbci	r31, 0xFF	; 255
    1768:	60 81       	ld	r22, Z
    176a:	71 81       	ldd	r23, Z+1	; 0x01
    176c:	82 81       	ldd	r24, Z+2	; 0x02
    176e:	93 81       	ldd	r25, Z+3	; 0x03
    1770:	20 e0       	ldi	r18, 0x00	; 0
    1772:	3f ef       	ldi	r19, 0xFF	; 255
    1774:	4f e7       	ldi	r20, 0x7F	; 127
    1776:	57 e4       	ldi	r21, 0x47	; 71
    1778:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    177c:	18 16       	cp	r1, r24
    177e:	0c f0       	brlt	.+2      	; 0x1782 <LCD_sendCommand+0x238>
    1780:	43 c0       	rjmp	.+134    	; 0x1808 <LCD_sendCommand+0x2be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1782:	fe 01       	movw	r30, r28
    1784:	ef 5a       	subi	r30, 0xAF	; 175
    1786:	ff 4f       	sbci	r31, 0xFF	; 255
    1788:	60 81       	ld	r22, Z
    178a:	71 81       	ldd	r23, Z+1	; 0x01
    178c:	82 81       	ldd	r24, Z+2	; 0x02
    178e:	93 81       	ldd	r25, Z+3	; 0x03
    1790:	20 e0       	ldi	r18, 0x00	; 0
    1792:	30 e0       	ldi	r19, 0x00	; 0
    1794:	40 e2       	ldi	r20, 0x20	; 32
    1796:	51 e4       	ldi	r21, 0x41	; 65
    1798:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    179c:	dc 01       	movw	r26, r24
    179e:	cb 01       	movw	r24, r22
    17a0:	8e 01       	movw	r16, r28
    17a2:	05 5b       	subi	r16, 0xB5	; 181
    17a4:	1f 4f       	sbci	r17, 0xFF	; 255
    17a6:	bc 01       	movw	r22, r24
    17a8:	cd 01       	movw	r24, r26
    17aa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17ae:	dc 01       	movw	r26, r24
    17b0:	cb 01       	movw	r24, r22
    17b2:	f8 01       	movw	r30, r16
    17b4:	91 83       	std	Z+1, r25	; 0x01
    17b6:	80 83       	st	Z, r24
    17b8:	1f c0       	rjmp	.+62     	; 0x17f8 <LCD_sendCommand+0x2ae>
    17ba:	fe 01       	movw	r30, r28
    17bc:	e7 5b       	subi	r30, 0xB7	; 183
    17be:	ff 4f       	sbci	r31, 0xFF	; 255
    17c0:	88 ec       	ldi	r24, 0xC8	; 200
    17c2:	90 e0       	ldi	r25, 0x00	; 0
    17c4:	91 83       	std	Z+1, r25	; 0x01
    17c6:	80 83       	st	Z, r24
    17c8:	fe 01       	movw	r30, r28
    17ca:	e7 5b       	subi	r30, 0xB7	; 183
    17cc:	ff 4f       	sbci	r31, 0xFF	; 255
    17ce:	80 81       	ld	r24, Z
    17d0:	91 81       	ldd	r25, Z+1	; 0x01
    17d2:	01 97       	sbiw	r24, 0x01	; 1
    17d4:	f1 f7       	brne	.-4      	; 0x17d2 <LCD_sendCommand+0x288>
    17d6:	fe 01       	movw	r30, r28
    17d8:	e7 5b       	subi	r30, 0xB7	; 183
    17da:	ff 4f       	sbci	r31, 0xFF	; 255
    17dc:	91 83       	std	Z+1, r25	; 0x01
    17de:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17e0:	de 01       	movw	r26, r28
    17e2:	a5 5b       	subi	r26, 0xB5	; 181
    17e4:	bf 4f       	sbci	r27, 0xFF	; 255
    17e6:	fe 01       	movw	r30, r28
    17e8:	e5 5b       	subi	r30, 0xB5	; 181
    17ea:	ff 4f       	sbci	r31, 0xFF	; 255
    17ec:	80 81       	ld	r24, Z
    17ee:	91 81       	ldd	r25, Z+1	; 0x01
    17f0:	01 97       	sbiw	r24, 0x01	; 1
    17f2:	11 96       	adiw	r26, 0x01	; 1
    17f4:	9c 93       	st	X, r25
    17f6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17f8:	fe 01       	movw	r30, r28
    17fa:	e5 5b       	subi	r30, 0xB5	; 181
    17fc:	ff 4f       	sbci	r31, 0xFF	; 255
    17fe:	80 81       	ld	r24, Z
    1800:	91 81       	ldd	r25, Z+1	; 0x01
    1802:	00 97       	sbiw	r24, 0x00	; 0
    1804:	d1 f6       	brne	.-76     	; 0x17ba <LCD_sendCommand+0x270>
    1806:	27 c0       	rjmp	.+78     	; 0x1856 <LCD_sendCommand+0x30c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1808:	8e 01       	movw	r16, r28
    180a:	05 5b       	subi	r16, 0xB5	; 181
    180c:	1f 4f       	sbci	r17, 0xFF	; 255
    180e:	fe 01       	movw	r30, r28
    1810:	e3 5b       	subi	r30, 0xB3	; 179
    1812:	ff 4f       	sbci	r31, 0xFF	; 255
    1814:	60 81       	ld	r22, Z
    1816:	71 81       	ldd	r23, Z+1	; 0x01
    1818:	82 81       	ldd	r24, Z+2	; 0x02
    181a:	93 81       	ldd	r25, Z+3	; 0x03
    181c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1820:	dc 01       	movw	r26, r24
    1822:	cb 01       	movw	r24, r22
    1824:	f8 01       	movw	r30, r16
    1826:	91 83       	std	Z+1, r25	; 0x01
    1828:	80 83       	st	Z, r24
    182a:	de 01       	movw	r26, r28
    182c:	a9 5b       	subi	r26, 0xB9	; 185
    182e:	bf 4f       	sbci	r27, 0xFF	; 255
    1830:	fe 01       	movw	r30, r28
    1832:	e5 5b       	subi	r30, 0xB5	; 181
    1834:	ff 4f       	sbci	r31, 0xFF	; 255
    1836:	80 81       	ld	r24, Z
    1838:	91 81       	ldd	r25, Z+1	; 0x01
    183a:	8d 93       	st	X+, r24
    183c:	9c 93       	st	X, r25
    183e:	fe 01       	movw	r30, r28
    1840:	e9 5b       	subi	r30, 0xB9	; 185
    1842:	ff 4f       	sbci	r31, 0xFF	; 255
    1844:	80 81       	ld	r24, Z
    1846:	91 81       	ldd	r25, Z+1	; 0x01
    1848:	01 97       	sbiw	r24, 0x01	; 1
    184a:	f1 f7       	brne	.-4      	; 0x1848 <LCD_sendCommand+0x2fe>
    184c:	fe 01       	movw	r30, r28
    184e:	e9 5b       	subi	r30, 0xB9	; 185
    1850:	ff 4f       	sbci	r31, 0xFF	; 255
    1852:	91 83       	std	Z+1, r25	; 0x01
    1854:	80 83       	st	Z, r24
	_delay_ms(1); /* Delay for processing Tpw - Tdws = 190ns */

	/* Out the highest 4 bits of the required command to the data bus D4 --> D7 */
	LCD_DATA_OUTPUT = (LCD_DATA_OUTPUT & MASK_FOUR_HIGH_PINS) | (au8_command & MASK_FOUR_LOW_PINS);
    1856:	ab e3       	ldi	r26, 0x3B	; 59
    1858:	b0 e0       	ldi	r27, 0x00	; 0
    185a:	eb e3       	ldi	r30, 0x3B	; 59
    185c:	f0 e0       	ldi	r31, 0x00	; 0
    185e:	80 81       	ld	r24, Z
    1860:	98 2f       	mov	r25, r24
    1862:	9f 70       	andi	r25, 0x0F	; 15
    1864:	fe 01       	movw	r30, r28
    1866:	ed 59       	subi	r30, 0x9D	; 157
    1868:	ff 4f       	sbci	r31, 0xFF	; 255
    186a:	80 81       	ld	r24, Z
    186c:	80 7f       	andi	r24, 0xF0	; 240
    186e:	89 2b       	or	r24, r25
    1870:	8c 93       	st	X, r24
    1872:	fe 01       	movw	r30, r28
    1874:	ed 5b       	subi	r30, 0xBD	; 189
    1876:	ff 4f       	sbci	r31, 0xFF	; 255
    1878:	80 e0       	ldi	r24, 0x00	; 0
    187a:	90 e0       	ldi	r25, 0x00	; 0
    187c:	a0 e8       	ldi	r26, 0x80	; 128
    187e:	bf e3       	ldi	r27, 0x3F	; 63
    1880:	80 83       	st	Z, r24
    1882:	91 83       	std	Z+1, r25	; 0x01
    1884:	a2 83       	std	Z+2, r26	; 0x02
    1886:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1888:	8e 01       	movw	r16, r28
    188a:	01 5c       	subi	r16, 0xC1	; 193
    188c:	1f 4f       	sbci	r17, 0xFF	; 255
    188e:	fe 01       	movw	r30, r28
    1890:	ed 5b       	subi	r30, 0xBD	; 189
    1892:	ff 4f       	sbci	r31, 0xFF	; 255
    1894:	60 81       	ld	r22, Z
    1896:	71 81       	ldd	r23, Z+1	; 0x01
    1898:	82 81       	ldd	r24, Z+2	; 0x02
    189a:	93 81       	ldd	r25, Z+3	; 0x03
    189c:	20 e0       	ldi	r18, 0x00	; 0
    189e:	30 e0       	ldi	r19, 0x00	; 0
    18a0:	4a ef       	ldi	r20, 0xFA	; 250
    18a2:	54 e4       	ldi	r21, 0x44	; 68
    18a4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18a8:	dc 01       	movw	r26, r24
    18aa:	cb 01       	movw	r24, r22
    18ac:	f8 01       	movw	r30, r16
    18ae:	80 83       	st	Z, r24
    18b0:	91 83       	std	Z+1, r25	; 0x01
    18b2:	a2 83       	std	Z+2, r26	; 0x02
    18b4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    18b6:	fe 01       	movw	r30, r28
    18b8:	ff 96       	adiw	r30, 0x3f	; 63
    18ba:	60 81       	ld	r22, Z
    18bc:	71 81       	ldd	r23, Z+1	; 0x01
    18be:	82 81       	ldd	r24, Z+2	; 0x02
    18c0:	93 81       	ldd	r25, Z+3	; 0x03
    18c2:	20 e0       	ldi	r18, 0x00	; 0
    18c4:	30 e0       	ldi	r19, 0x00	; 0
    18c6:	40 e8       	ldi	r20, 0x80	; 128
    18c8:	5f e3       	ldi	r21, 0x3F	; 63
    18ca:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    18ce:	88 23       	and	r24, r24
    18d0:	2c f4       	brge	.+10     	; 0x18dc <LCD_sendCommand+0x392>
		__ticks = 1;
    18d2:	81 e0       	ldi	r24, 0x01	; 1
    18d4:	90 e0       	ldi	r25, 0x00	; 0
    18d6:	9e af       	std	Y+62, r25	; 0x3e
    18d8:	8d af       	std	Y+61, r24	; 0x3d
    18da:	46 c0       	rjmp	.+140    	; 0x1968 <LCD_sendCommand+0x41e>
	else if (__tmp > 65535)
    18dc:	fe 01       	movw	r30, r28
    18de:	ff 96       	adiw	r30, 0x3f	; 63
    18e0:	60 81       	ld	r22, Z
    18e2:	71 81       	ldd	r23, Z+1	; 0x01
    18e4:	82 81       	ldd	r24, Z+2	; 0x02
    18e6:	93 81       	ldd	r25, Z+3	; 0x03
    18e8:	20 e0       	ldi	r18, 0x00	; 0
    18ea:	3f ef       	ldi	r19, 0xFF	; 255
    18ec:	4f e7       	ldi	r20, 0x7F	; 127
    18ee:	57 e4       	ldi	r21, 0x47	; 71
    18f0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    18f4:	18 16       	cp	r1, r24
    18f6:	64 f5       	brge	.+88     	; 0x1950 <LCD_sendCommand+0x406>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18f8:	fe 01       	movw	r30, r28
    18fa:	ed 5b       	subi	r30, 0xBD	; 189
    18fc:	ff 4f       	sbci	r31, 0xFF	; 255
    18fe:	60 81       	ld	r22, Z
    1900:	71 81       	ldd	r23, Z+1	; 0x01
    1902:	82 81       	ldd	r24, Z+2	; 0x02
    1904:	93 81       	ldd	r25, Z+3	; 0x03
    1906:	20 e0       	ldi	r18, 0x00	; 0
    1908:	30 e0       	ldi	r19, 0x00	; 0
    190a:	40 e2       	ldi	r20, 0x20	; 32
    190c:	51 e4       	ldi	r21, 0x41	; 65
    190e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1912:	dc 01       	movw	r26, r24
    1914:	cb 01       	movw	r24, r22
    1916:	bc 01       	movw	r22, r24
    1918:	cd 01       	movw	r24, r26
    191a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    191e:	dc 01       	movw	r26, r24
    1920:	cb 01       	movw	r24, r22
    1922:	9e af       	std	Y+62, r25	; 0x3e
    1924:	8d af       	std	Y+61, r24	; 0x3d
    1926:	0f c0       	rjmp	.+30     	; 0x1946 <LCD_sendCommand+0x3fc>
    1928:	88 ec       	ldi	r24, 0xC8	; 200
    192a:	90 e0       	ldi	r25, 0x00	; 0
    192c:	9c af       	std	Y+60, r25	; 0x3c
    192e:	8b af       	std	Y+59, r24	; 0x3b
    1930:	8b ad       	ldd	r24, Y+59	; 0x3b
    1932:	9c ad       	ldd	r25, Y+60	; 0x3c
    1934:	01 97       	sbiw	r24, 0x01	; 1
    1936:	f1 f7       	brne	.-4      	; 0x1934 <LCD_sendCommand+0x3ea>
    1938:	9c af       	std	Y+60, r25	; 0x3c
    193a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    193c:	8d ad       	ldd	r24, Y+61	; 0x3d
    193e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1940:	01 97       	sbiw	r24, 0x01	; 1
    1942:	9e af       	std	Y+62, r25	; 0x3e
    1944:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1946:	8d ad       	ldd	r24, Y+61	; 0x3d
    1948:	9e ad       	ldd	r25, Y+62	; 0x3e
    194a:	00 97       	sbiw	r24, 0x00	; 0
    194c:	69 f7       	brne	.-38     	; 0x1928 <LCD_sendCommand+0x3de>
    194e:	16 c0       	rjmp	.+44     	; 0x197c <LCD_sendCommand+0x432>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1950:	fe 01       	movw	r30, r28
    1952:	ff 96       	adiw	r30, 0x3f	; 63
    1954:	60 81       	ld	r22, Z
    1956:	71 81       	ldd	r23, Z+1	; 0x01
    1958:	82 81       	ldd	r24, Z+2	; 0x02
    195a:	93 81       	ldd	r25, Z+3	; 0x03
    195c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1960:	dc 01       	movw	r26, r24
    1962:	cb 01       	movw	r24, r22
    1964:	9e af       	std	Y+62, r25	; 0x3e
    1966:	8d af       	std	Y+61, r24	; 0x3d
    1968:	8d ad       	ldd	r24, Y+61	; 0x3d
    196a:	9e ad       	ldd	r25, Y+62	; 0x3e
    196c:	9a af       	std	Y+58, r25	; 0x3a
    196e:	89 af       	std	Y+57, r24	; 0x39
    1970:	89 ad       	ldd	r24, Y+57	; 0x39
    1972:	9a ad       	ldd	r25, Y+58	; 0x3a
    1974:	01 97       	sbiw	r24, 0x01	; 1
    1976:	f1 f7       	brne	.-4      	; 0x1974 <LCD_sendCommand+0x42a>
    1978:	9a af       	std	Y+58, r25	; 0x3a
    197a:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1); /* Delay for processing Tdsw = 100ns */

	DIO_writePin(LCD_CTRL_PORT, E, LOW);	/* Disable LCD E = 0 */
    197c:	80 e0       	ldi	r24, 0x00	; 0
    197e:	63 e0       	ldi	r22, 0x03	; 3
    1980:	40 e0       	ldi	r20, 0x00	; 0
    1982:	0e 94 94 07 	call	0xf28	; 0xf28 <DIO_writePin>
    1986:	80 e0       	ldi	r24, 0x00	; 0
    1988:	90 e0       	ldi	r25, 0x00	; 0
    198a:	a0 e8       	ldi	r26, 0x80	; 128
    198c:	bf e3       	ldi	r27, 0x3F	; 63
    198e:	8d ab       	std	Y+53, r24	; 0x35
    1990:	9e ab       	std	Y+54, r25	; 0x36
    1992:	af ab       	std	Y+55, r26	; 0x37
    1994:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1996:	6d a9       	ldd	r22, Y+53	; 0x35
    1998:	7e a9       	ldd	r23, Y+54	; 0x36
    199a:	8f a9       	ldd	r24, Y+55	; 0x37
    199c:	98 ad       	ldd	r25, Y+56	; 0x38
    199e:	20 e0       	ldi	r18, 0x00	; 0
    19a0:	30 e0       	ldi	r19, 0x00	; 0
    19a2:	4a ef       	ldi	r20, 0xFA	; 250
    19a4:	54 e4       	ldi	r21, 0x44	; 68
    19a6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19aa:	dc 01       	movw	r26, r24
    19ac:	cb 01       	movw	r24, r22
    19ae:	89 ab       	std	Y+49, r24	; 0x31
    19b0:	9a ab       	std	Y+50, r25	; 0x32
    19b2:	ab ab       	std	Y+51, r26	; 0x33
    19b4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    19b6:	69 a9       	ldd	r22, Y+49	; 0x31
    19b8:	7a a9       	ldd	r23, Y+50	; 0x32
    19ba:	8b a9       	ldd	r24, Y+51	; 0x33
    19bc:	9c a9       	ldd	r25, Y+52	; 0x34
    19be:	20 e0       	ldi	r18, 0x00	; 0
    19c0:	30 e0       	ldi	r19, 0x00	; 0
    19c2:	40 e8       	ldi	r20, 0x80	; 128
    19c4:	5f e3       	ldi	r21, 0x3F	; 63
    19c6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    19ca:	88 23       	and	r24, r24
    19cc:	2c f4       	brge	.+10     	; 0x19d8 <LCD_sendCommand+0x48e>
		__ticks = 1;
    19ce:	81 e0       	ldi	r24, 0x01	; 1
    19d0:	90 e0       	ldi	r25, 0x00	; 0
    19d2:	98 ab       	std	Y+48, r25	; 0x30
    19d4:	8f a7       	std	Y+47, r24	; 0x2f
    19d6:	3f c0       	rjmp	.+126    	; 0x1a56 <LCD_sendCommand+0x50c>
	else if (__tmp > 65535)
    19d8:	69 a9       	ldd	r22, Y+49	; 0x31
    19da:	7a a9       	ldd	r23, Y+50	; 0x32
    19dc:	8b a9       	ldd	r24, Y+51	; 0x33
    19de:	9c a9       	ldd	r25, Y+52	; 0x34
    19e0:	20 e0       	ldi	r18, 0x00	; 0
    19e2:	3f ef       	ldi	r19, 0xFF	; 255
    19e4:	4f e7       	ldi	r20, 0x7F	; 127
    19e6:	57 e4       	ldi	r21, 0x47	; 71
    19e8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    19ec:	18 16       	cp	r1, r24
    19ee:	4c f5       	brge	.+82     	; 0x1a42 <LCD_sendCommand+0x4f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19f0:	6d a9       	ldd	r22, Y+53	; 0x35
    19f2:	7e a9       	ldd	r23, Y+54	; 0x36
    19f4:	8f a9       	ldd	r24, Y+55	; 0x37
    19f6:	98 ad       	ldd	r25, Y+56	; 0x38
    19f8:	20 e0       	ldi	r18, 0x00	; 0
    19fa:	30 e0       	ldi	r19, 0x00	; 0
    19fc:	40 e2       	ldi	r20, 0x20	; 32
    19fe:	51 e4       	ldi	r21, 0x41	; 65
    1a00:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a04:	dc 01       	movw	r26, r24
    1a06:	cb 01       	movw	r24, r22
    1a08:	bc 01       	movw	r22, r24
    1a0a:	cd 01       	movw	r24, r26
    1a0c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a10:	dc 01       	movw	r26, r24
    1a12:	cb 01       	movw	r24, r22
    1a14:	98 ab       	std	Y+48, r25	; 0x30
    1a16:	8f a7       	std	Y+47, r24	; 0x2f
    1a18:	0f c0       	rjmp	.+30     	; 0x1a38 <LCD_sendCommand+0x4ee>
    1a1a:	88 ec       	ldi	r24, 0xC8	; 200
    1a1c:	90 e0       	ldi	r25, 0x00	; 0
    1a1e:	9e a7       	std	Y+46, r25	; 0x2e
    1a20:	8d a7       	std	Y+45, r24	; 0x2d
    1a22:	8d a5       	ldd	r24, Y+45	; 0x2d
    1a24:	9e a5       	ldd	r25, Y+46	; 0x2e
    1a26:	01 97       	sbiw	r24, 0x01	; 1
    1a28:	f1 f7       	brne	.-4      	; 0x1a26 <LCD_sendCommand+0x4dc>
    1a2a:	9e a7       	std	Y+46, r25	; 0x2e
    1a2c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a2e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a30:	98 a9       	ldd	r25, Y+48	; 0x30
    1a32:	01 97       	sbiw	r24, 0x01	; 1
    1a34:	98 ab       	std	Y+48, r25	; 0x30
    1a36:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a38:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a3a:	98 a9       	ldd	r25, Y+48	; 0x30
    1a3c:	00 97       	sbiw	r24, 0x00	; 0
    1a3e:	69 f7       	brne	.-38     	; 0x1a1a <LCD_sendCommand+0x4d0>
    1a40:	14 c0       	rjmp	.+40     	; 0x1a6a <LCD_sendCommand+0x520>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a42:	69 a9       	ldd	r22, Y+49	; 0x31
    1a44:	7a a9       	ldd	r23, Y+50	; 0x32
    1a46:	8b a9       	ldd	r24, Y+51	; 0x33
    1a48:	9c a9       	ldd	r25, Y+52	; 0x34
    1a4a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a4e:	dc 01       	movw	r26, r24
    1a50:	cb 01       	movw	r24, r22
    1a52:	98 ab       	std	Y+48, r25	; 0x30
    1a54:	8f a7       	std	Y+47, r24	; 0x2f
    1a56:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a58:	98 a9       	ldd	r25, Y+48	; 0x30
    1a5a:	9c a7       	std	Y+44, r25	; 0x2c
    1a5c:	8b a7       	std	Y+43, r24	; 0x2b
    1a5e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1a60:	9c a5       	ldd	r25, Y+44	; 0x2c
    1a62:	01 97       	sbiw	r24, 0x01	; 1
    1a64:	f1 f7       	brne	.-4      	; 0x1a62 <LCD_sendCommand+0x518>
    1a66:	9c a7       	std	Y+44, r25	; 0x2c
    1a68:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* Delay for processing Th = 13ns */

	DIO_writePin(LCD_CTRL_PORT, E, HIGH);	/* Enable LCD E = 1 */
    1a6a:	80 e0       	ldi	r24, 0x00	; 0
    1a6c:	63 e0       	ldi	r22, 0x03	; 3
    1a6e:	41 e0       	ldi	r20, 0x01	; 1
    1a70:	0e 94 94 07 	call	0xf28	; 0xf28 <DIO_writePin>
    1a74:	80 e0       	ldi	r24, 0x00	; 0
    1a76:	90 e0       	ldi	r25, 0x00	; 0
    1a78:	a0 e8       	ldi	r26, 0x80	; 128
    1a7a:	bf e3       	ldi	r27, 0x3F	; 63
    1a7c:	8f a3       	std	Y+39, r24	; 0x27
    1a7e:	98 a7       	std	Y+40, r25	; 0x28
    1a80:	a9 a7       	std	Y+41, r26	; 0x29
    1a82:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a84:	6f a1       	ldd	r22, Y+39	; 0x27
    1a86:	78 a5       	ldd	r23, Y+40	; 0x28
    1a88:	89 a5       	ldd	r24, Y+41	; 0x29
    1a8a:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a8c:	20 e0       	ldi	r18, 0x00	; 0
    1a8e:	30 e0       	ldi	r19, 0x00	; 0
    1a90:	4a ef       	ldi	r20, 0xFA	; 250
    1a92:	54 e4       	ldi	r21, 0x44	; 68
    1a94:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a98:	dc 01       	movw	r26, r24
    1a9a:	cb 01       	movw	r24, r22
    1a9c:	8b a3       	std	Y+35, r24	; 0x23
    1a9e:	9c a3       	std	Y+36, r25	; 0x24
    1aa0:	ad a3       	std	Y+37, r26	; 0x25
    1aa2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1aa4:	6b a1       	ldd	r22, Y+35	; 0x23
    1aa6:	7c a1       	ldd	r23, Y+36	; 0x24
    1aa8:	8d a1       	ldd	r24, Y+37	; 0x25
    1aaa:	9e a1       	ldd	r25, Y+38	; 0x26
    1aac:	20 e0       	ldi	r18, 0x00	; 0
    1aae:	30 e0       	ldi	r19, 0x00	; 0
    1ab0:	40 e8       	ldi	r20, 0x80	; 128
    1ab2:	5f e3       	ldi	r21, 0x3F	; 63
    1ab4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1ab8:	88 23       	and	r24, r24
    1aba:	2c f4       	brge	.+10     	; 0x1ac6 <LCD_sendCommand+0x57c>
		__ticks = 1;
    1abc:	81 e0       	ldi	r24, 0x01	; 1
    1abe:	90 e0       	ldi	r25, 0x00	; 0
    1ac0:	9a a3       	std	Y+34, r25	; 0x22
    1ac2:	89 a3       	std	Y+33, r24	; 0x21
    1ac4:	3f c0       	rjmp	.+126    	; 0x1b44 <LCD_sendCommand+0x5fa>
	else if (__tmp > 65535)
    1ac6:	6b a1       	ldd	r22, Y+35	; 0x23
    1ac8:	7c a1       	ldd	r23, Y+36	; 0x24
    1aca:	8d a1       	ldd	r24, Y+37	; 0x25
    1acc:	9e a1       	ldd	r25, Y+38	; 0x26
    1ace:	20 e0       	ldi	r18, 0x00	; 0
    1ad0:	3f ef       	ldi	r19, 0xFF	; 255
    1ad2:	4f e7       	ldi	r20, 0x7F	; 127
    1ad4:	57 e4       	ldi	r21, 0x47	; 71
    1ad6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1ada:	18 16       	cp	r1, r24
    1adc:	4c f5       	brge	.+82     	; 0x1b30 <LCD_sendCommand+0x5e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ade:	6f a1       	ldd	r22, Y+39	; 0x27
    1ae0:	78 a5       	ldd	r23, Y+40	; 0x28
    1ae2:	89 a5       	ldd	r24, Y+41	; 0x29
    1ae4:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ae6:	20 e0       	ldi	r18, 0x00	; 0
    1ae8:	30 e0       	ldi	r19, 0x00	; 0
    1aea:	40 e2       	ldi	r20, 0x20	; 32
    1aec:	51 e4       	ldi	r21, 0x41	; 65
    1aee:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1af2:	dc 01       	movw	r26, r24
    1af4:	cb 01       	movw	r24, r22
    1af6:	bc 01       	movw	r22, r24
    1af8:	cd 01       	movw	r24, r26
    1afa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1afe:	dc 01       	movw	r26, r24
    1b00:	cb 01       	movw	r24, r22
    1b02:	9a a3       	std	Y+34, r25	; 0x22
    1b04:	89 a3       	std	Y+33, r24	; 0x21
    1b06:	0f c0       	rjmp	.+30     	; 0x1b26 <LCD_sendCommand+0x5dc>
    1b08:	88 ec       	ldi	r24, 0xC8	; 200
    1b0a:	90 e0       	ldi	r25, 0x00	; 0
    1b0c:	98 a3       	std	Y+32, r25	; 0x20
    1b0e:	8f 8f       	std	Y+31, r24	; 0x1f
    1b10:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b12:	98 a1       	ldd	r25, Y+32	; 0x20
    1b14:	01 97       	sbiw	r24, 0x01	; 1
    1b16:	f1 f7       	brne	.-4      	; 0x1b14 <LCD_sendCommand+0x5ca>
    1b18:	98 a3       	std	Y+32, r25	; 0x20
    1b1a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b1c:	89 a1       	ldd	r24, Y+33	; 0x21
    1b1e:	9a a1       	ldd	r25, Y+34	; 0x22
    1b20:	01 97       	sbiw	r24, 0x01	; 1
    1b22:	9a a3       	std	Y+34, r25	; 0x22
    1b24:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b26:	89 a1       	ldd	r24, Y+33	; 0x21
    1b28:	9a a1       	ldd	r25, Y+34	; 0x22
    1b2a:	00 97       	sbiw	r24, 0x00	; 0
    1b2c:	69 f7       	brne	.-38     	; 0x1b08 <LCD_sendCommand+0x5be>
    1b2e:	14 c0       	rjmp	.+40     	; 0x1b58 <LCD_sendCommand+0x60e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b30:	6b a1       	ldd	r22, Y+35	; 0x23
    1b32:	7c a1       	ldd	r23, Y+36	; 0x24
    1b34:	8d a1       	ldd	r24, Y+37	; 0x25
    1b36:	9e a1       	ldd	r25, Y+38	; 0x26
    1b38:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b3c:	dc 01       	movw	r26, r24
    1b3e:	cb 01       	movw	r24, r22
    1b40:	9a a3       	std	Y+34, r25	; 0x22
    1b42:	89 a3       	std	Y+33, r24	; 0x21
    1b44:	89 a1       	ldd	r24, Y+33	; 0x21
    1b46:	9a a1       	ldd	r25, Y+34	; 0x22
    1b48:	9e 8f       	std	Y+30, r25	; 0x1e
    1b4a:	8d 8f       	std	Y+29, r24	; 0x1d
    1b4c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b4e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1b50:	01 97       	sbiw	r24, 0x01	; 1
    1b52:	f1 f7       	brne	.-4      	; 0x1b50 <LCD_sendCommand+0x606>
    1b54:	9e 8f       	std	Y+30, r25	; 0x1e
    1b56:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* Delay for processing Tpw - Tdws = 190ns */

	/* Out the lowest 4 bits of the required command to the data bus D4 --> D7 */
	LCD_DATA_OUTPUT = (LCD_DATA_OUTPUT & MASK_FOUR_HIGH_PINS) | ((au8_command & MASK_FOUR_HIGH_PINS) << 4);
    1b58:	ab e3       	ldi	r26, 0x3B	; 59
    1b5a:	b0 e0       	ldi	r27, 0x00	; 0
    1b5c:	eb e3       	ldi	r30, 0x3B	; 59
    1b5e:	f0 e0       	ldi	r31, 0x00	; 0
    1b60:	80 81       	ld	r24, Z
    1b62:	98 2f       	mov	r25, r24
    1b64:	9f 70       	andi	r25, 0x0F	; 15
    1b66:	fe 01       	movw	r30, r28
    1b68:	ed 59       	subi	r30, 0x9D	; 157
    1b6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b6c:	80 81       	ld	r24, Z
    1b6e:	82 95       	swap	r24
    1b70:	80 7f       	andi	r24, 0xF0	; 240
    1b72:	89 2b       	or	r24, r25
    1b74:	8c 93       	st	X, r24
    1b76:	80 e0       	ldi	r24, 0x00	; 0
    1b78:	90 e0       	ldi	r25, 0x00	; 0
    1b7a:	a0 e8       	ldi	r26, 0x80	; 128
    1b7c:	bf e3       	ldi	r27, 0x3F	; 63
    1b7e:	89 8f       	std	Y+25, r24	; 0x19
    1b80:	9a 8f       	std	Y+26, r25	; 0x1a
    1b82:	ab 8f       	std	Y+27, r26	; 0x1b
    1b84:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b86:	69 8d       	ldd	r22, Y+25	; 0x19
    1b88:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b8a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b8c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b8e:	20 e0       	ldi	r18, 0x00	; 0
    1b90:	30 e0       	ldi	r19, 0x00	; 0
    1b92:	4a ef       	ldi	r20, 0xFA	; 250
    1b94:	54 e4       	ldi	r21, 0x44	; 68
    1b96:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b9a:	dc 01       	movw	r26, r24
    1b9c:	cb 01       	movw	r24, r22
    1b9e:	8d 8b       	std	Y+21, r24	; 0x15
    1ba0:	9e 8b       	std	Y+22, r25	; 0x16
    1ba2:	af 8b       	std	Y+23, r26	; 0x17
    1ba4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1ba6:	6d 89       	ldd	r22, Y+21	; 0x15
    1ba8:	7e 89       	ldd	r23, Y+22	; 0x16
    1baa:	8f 89       	ldd	r24, Y+23	; 0x17
    1bac:	98 8d       	ldd	r25, Y+24	; 0x18
    1bae:	20 e0       	ldi	r18, 0x00	; 0
    1bb0:	30 e0       	ldi	r19, 0x00	; 0
    1bb2:	40 e8       	ldi	r20, 0x80	; 128
    1bb4:	5f e3       	ldi	r21, 0x3F	; 63
    1bb6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1bba:	88 23       	and	r24, r24
    1bbc:	2c f4       	brge	.+10     	; 0x1bc8 <LCD_sendCommand+0x67e>
		__ticks = 1;
    1bbe:	81 e0       	ldi	r24, 0x01	; 1
    1bc0:	90 e0       	ldi	r25, 0x00	; 0
    1bc2:	9c 8b       	std	Y+20, r25	; 0x14
    1bc4:	8b 8b       	std	Y+19, r24	; 0x13
    1bc6:	3f c0       	rjmp	.+126    	; 0x1c46 <LCD_sendCommand+0x6fc>
	else if (__tmp > 65535)
    1bc8:	6d 89       	ldd	r22, Y+21	; 0x15
    1bca:	7e 89       	ldd	r23, Y+22	; 0x16
    1bcc:	8f 89       	ldd	r24, Y+23	; 0x17
    1bce:	98 8d       	ldd	r25, Y+24	; 0x18
    1bd0:	20 e0       	ldi	r18, 0x00	; 0
    1bd2:	3f ef       	ldi	r19, 0xFF	; 255
    1bd4:	4f e7       	ldi	r20, 0x7F	; 127
    1bd6:	57 e4       	ldi	r21, 0x47	; 71
    1bd8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1bdc:	18 16       	cp	r1, r24
    1bde:	4c f5       	brge	.+82     	; 0x1c32 <LCD_sendCommand+0x6e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1be0:	69 8d       	ldd	r22, Y+25	; 0x19
    1be2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1be4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1be6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1be8:	20 e0       	ldi	r18, 0x00	; 0
    1bea:	30 e0       	ldi	r19, 0x00	; 0
    1bec:	40 e2       	ldi	r20, 0x20	; 32
    1bee:	51 e4       	ldi	r21, 0x41	; 65
    1bf0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bf4:	dc 01       	movw	r26, r24
    1bf6:	cb 01       	movw	r24, r22
    1bf8:	bc 01       	movw	r22, r24
    1bfa:	cd 01       	movw	r24, r26
    1bfc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c00:	dc 01       	movw	r26, r24
    1c02:	cb 01       	movw	r24, r22
    1c04:	9c 8b       	std	Y+20, r25	; 0x14
    1c06:	8b 8b       	std	Y+19, r24	; 0x13
    1c08:	0f c0       	rjmp	.+30     	; 0x1c28 <LCD_sendCommand+0x6de>
    1c0a:	88 ec       	ldi	r24, 0xC8	; 200
    1c0c:	90 e0       	ldi	r25, 0x00	; 0
    1c0e:	9a 8b       	std	Y+18, r25	; 0x12
    1c10:	89 8b       	std	Y+17, r24	; 0x11
    1c12:	89 89       	ldd	r24, Y+17	; 0x11
    1c14:	9a 89       	ldd	r25, Y+18	; 0x12
    1c16:	01 97       	sbiw	r24, 0x01	; 1
    1c18:	f1 f7       	brne	.-4      	; 0x1c16 <LCD_sendCommand+0x6cc>
    1c1a:	9a 8b       	std	Y+18, r25	; 0x12
    1c1c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c1e:	8b 89       	ldd	r24, Y+19	; 0x13
    1c20:	9c 89       	ldd	r25, Y+20	; 0x14
    1c22:	01 97       	sbiw	r24, 0x01	; 1
    1c24:	9c 8b       	std	Y+20, r25	; 0x14
    1c26:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c28:	8b 89       	ldd	r24, Y+19	; 0x13
    1c2a:	9c 89       	ldd	r25, Y+20	; 0x14
    1c2c:	00 97       	sbiw	r24, 0x00	; 0
    1c2e:	69 f7       	brne	.-38     	; 0x1c0a <LCD_sendCommand+0x6c0>
    1c30:	14 c0       	rjmp	.+40     	; 0x1c5a <LCD_sendCommand+0x710>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c32:	6d 89       	ldd	r22, Y+21	; 0x15
    1c34:	7e 89       	ldd	r23, Y+22	; 0x16
    1c36:	8f 89       	ldd	r24, Y+23	; 0x17
    1c38:	98 8d       	ldd	r25, Y+24	; 0x18
    1c3a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c3e:	dc 01       	movw	r26, r24
    1c40:	cb 01       	movw	r24, r22
    1c42:	9c 8b       	std	Y+20, r25	; 0x14
    1c44:	8b 8b       	std	Y+19, r24	; 0x13
    1c46:	8b 89       	ldd	r24, Y+19	; 0x13
    1c48:	9c 89       	ldd	r25, Y+20	; 0x14
    1c4a:	98 8b       	std	Y+16, r25	; 0x10
    1c4c:	8f 87       	std	Y+15, r24	; 0x0f
    1c4e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c50:	98 89       	ldd	r25, Y+16	; 0x10
    1c52:	01 97       	sbiw	r24, 0x01	; 1
    1c54:	f1 f7       	brne	.-4      	; 0x1c52 <LCD_sendCommand+0x708>
    1c56:	98 8b       	std	Y+16, r25	; 0x10
    1c58:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* Delay for processing Tdsw = 100ns */

	DIO_writePin(LCD_CTRL_PORT, E, LOW);	/* Disable LCD E = 0 */
    1c5a:	80 e0       	ldi	r24, 0x00	; 0
    1c5c:	63 e0       	ldi	r22, 0x03	; 3
    1c5e:	40 e0       	ldi	r20, 0x00	; 0
    1c60:	0e 94 94 07 	call	0xf28	; 0xf28 <DIO_writePin>
    1c64:	80 e0       	ldi	r24, 0x00	; 0
    1c66:	90 e0       	ldi	r25, 0x00	; 0
    1c68:	a0 e8       	ldi	r26, 0x80	; 128
    1c6a:	bf e3       	ldi	r27, 0x3F	; 63
    1c6c:	8b 87       	std	Y+11, r24	; 0x0b
    1c6e:	9c 87       	std	Y+12, r25	; 0x0c
    1c70:	ad 87       	std	Y+13, r26	; 0x0d
    1c72:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c74:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c76:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c78:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c7a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c7c:	20 e0       	ldi	r18, 0x00	; 0
    1c7e:	30 e0       	ldi	r19, 0x00	; 0
    1c80:	4a ef       	ldi	r20, 0xFA	; 250
    1c82:	54 e4       	ldi	r21, 0x44	; 68
    1c84:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c88:	dc 01       	movw	r26, r24
    1c8a:	cb 01       	movw	r24, r22
    1c8c:	8f 83       	std	Y+7, r24	; 0x07
    1c8e:	98 87       	std	Y+8, r25	; 0x08
    1c90:	a9 87       	std	Y+9, r26	; 0x09
    1c92:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c94:	6f 81       	ldd	r22, Y+7	; 0x07
    1c96:	78 85       	ldd	r23, Y+8	; 0x08
    1c98:	89 85       	ldd	r24, Y+9	; 0x09
    1c9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c9c:	20 e0       	ldi	r18, 0x00	; 0
    1c9e:	30 e0       	ldi	r19, 0x00	; 0
    1ca0:	40 e8       	ldi	r20, 0x80	; 128
    1ca2:	5f e3       	ldi	r21, 0x3F	; 63
    1ca4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1ca8:	88 23       	and	r24, r24
    1caa:	2c f4       	brge	.+10     	; 0x1cb6 <LCD_sendCommand+0x76c>
		__ticks = 1;
    1cac:	81 e0       	ldi	r24, 0x01	; 1
    1cae:	90 e0       	ldi	r25, 0x00	; 0
    1cb0:	9e 83       	std	Y+6, r25	; 0x06
    1cb2:	8d 83       	std	Y+5, r24	; 0x05
    1cb4:	3f c0       	rjmp	.+126    	; 0x1d34 <LCD_sendCommand+0x7ea>
	else if (__tmp > 65535)
    1cb6:	6f 81       	ldd	r22, Y+7	; 0x07
    1cb8:	78 85       	ldd	r23, Y+8	; 0x08
    1cba:	89 85       	ldd	r24, Y+9	; 0x09
    1cbc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cbe:	20 e0       	ldi	r18, 0x00	; 0
    1cc0:	3f ef       	ldi	r19, 0xFF	; 255
    1cc2:	4f e7       	ldi	r20, 0x7F	; 127
    1cc4:	57 e4       	ldi	r21, 0x47	; 71
    1cc6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1cca:	18 16       	cp	r1, r24
    1ccc:	4c f5       	brge	.+82     	; 0x1d20 <LCD_sendCommand+0x7d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cce:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cd0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cd2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cd4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cd6:	20 e0       	ldi	r18, 0x00	; 0
    1cd8:	30 e0       	ldi	r19, 0x00	; 0
    1cda:	40 e2       	ldi	r20, 0x20	; 32
    1cdc:	51 e4       	ldi	r21, 0x41	; 65
    1cde:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ce2:	dc 01       	movw	r26, r24
    1ce4:	cb 01       	movw	r24, r22
    1ce6:	bc 01       	movw	r22, r24
    1ce8:	cd 01       	movw	r24, r26
    1cea:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cee:	dc 01       	movw	r26, r24
    1cf0:	cb 01       	movw	r24, r22
    1cf2:	9e 83       	std	Y+6, r25	; 0x06
    1cf4:	8d 83       	std	Y+5, r24	; 0x05
    1cf6:	0f c0       	rjmp	.+30     	; 0x1d16 <LCD_sendCommand+0x7cc>
    1cf8:	88 ec       	ldi	r24, 0xC8	; 200
    1cfa:	90 e0       	ldi	r25, 0x00	; 0
    1cfc:	9c 83       	std	Y+4, r25	; 0x04
    1cfe:	8b 83       	std	Y+3, r24	; 0x03
    1d00:	8b 81       	ldd	r24, Y+3	; 0x03
    1d02:	9c 81       	ldd	r25, Y+4	; 0x04
    1d04:	01 97       	sbiw	r24, 0x01	; 1
    1d06:	f1 f7       	brne	.-4      	; 0x1d04 <LCD_sendCommand+0x7ba>
    1d08:	9c 83       	std	Y+4, r25	; 0x04
    1d0a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d0c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d0e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d10:	01 97       	sbiw	r24, 0x01	; 1
    1d12:	9e 83       	std	Y+6, r25	; 0x06
    1d14:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d16:	8d 81       	ldd	r24, Y+5	; 0x05
    1d18:	9e 81       	ldd	r25, Y+6	; 0x06
    1d1a:	00 97       	sbiw	r24, 0x00	; 0
    1d1c:	69 f7       	brne	.-38     	; 0x1cf8 <LCD_sendCommand+0x7ae>
    1d1e:	14 c0       	rjmp	.+40     	; 0x1d48 <LCD_sendCommand+0x7fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d20:	6f 81       	ldd	r22, Y+7	; 0x07
    1d22:	78 85       	ldd	r23, Y+8	; 0x08
    1d24:	89 85       	ldd	r24, Y+9	; 0x09
    1d26:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d28:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d2c:	dc 01       	movw	r26, r24
    1d2e:	cb 01       	movw	r24, r22
    1d30:	9e 83       	std	Y+6, r25	; 0x06
    1d32:	8d 83       	std	Y+5, r24	; 0x05
    1d34:	8d 81       	ldd	r24, Y+5	; 0x05
    1d36:	9e 81       	ldd	r25, Y+6	; 0x06
    1d38:	9a 83       	std	Y+2, r25	; 0x02
    1d3a:	89 83       	std	Y+1, r24	; 0x01
    1d3c:	89 81       	ldd	r24, Y+1	; 0x01
    1d3e:	9a 81       	ldd	r25, Y+2	; 0x02
    1d40:	01 97       	sbiw	r24, 0x01	; 1
    1d42:	f1 f7       	brne	.-4      	; 0x1d40 <LCD_sendCommand+0x7f6>
    1d44:	9a 83       	std	Y+2, r25	; 0x02
    1d46:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* Delay for processing Th = 13ns */
}
    1d48:	cd 59       	subi	r28, 0x9D	; 157
    1d4a:	df 4f       	sbci	r29, 0xFF	; 255
    1d4c:	0f b6       	in	r0, 0x3f	; 63
    1d4e:	f8 94       	cli
    1d50:	de bf       	out	0x3e, r29	; 62
    1d52:	0f be       	out	0x3f, r0	; 63
    1d54:	cd bf       	out	0x3d, r28	; 61
    1d56:	cf 91       	pop	r28
    1d58:	df 91       	pop	r29
    1d5a:	1f 91       	pop	r17
    1d5c:	0f 91       	pop	r16
    1d5e:	08 95       	ret

00001d60 <LCD_displayCharacter>:

void LCD_displayCharacter(uint8_t au8_data)
{
    1d60:	0f 93       	push	r16
    1d62:	1f 93       	push	r17
    1d64:	df 93       	push	r29
    1d66:	cf 93       	push	r28
    1d68:	cd b7       	in	r28, 0x3d	; 61
    1d6a:	de b7       	in	r29, 0x3e	; 62
    1d6c:	c3 56       	subi	r28, 0x63	; 99
    1d6e:	d0 40       	sbci	r29, 0x00	; 0
    1d70:	0f b6       	in	r0, 0x3f	; 63
    1d72:	f8 94       	cli
    1d74:	de bf       	out	0x3e, r29	; 62
    1d76:	0f be       	out	0x3f, r0	; 63
    1d78:	cd bf       	out	0x3d, r28	; 61
    1d7a:	fe 01       	movw	r30, r28
    1d7c:	ed 59       	subi	r30, 0x9D	; 157
    1d7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d80:	80 83       	st	Z, r24
	DIO_writePin(DIO_PORTA, RS, HIGH);	/* Data Mode RS = 1 */
    1d82:	80 e0       	ldi	r24, 0x00	; 0
    1d84:	61 e0       	ldi	r22, 0x01	; 1
    1d86:	41 e0       	ldi	r20, 0x01	; 1
    1d88:	0e 94 94 07 	call	0xf28	; 0xf28 <DIO_writePin>
	DIO_writePin(DIO_PORTA, RW, LOW);	/* Write data to LCD so RW = 0 */
    1d8c:	80 e0       	ldi	r24, 0x00	; 0
    1d8e:	62 e0       	ldi	r22, 0x02	; 2
    1d90:	40 e0       	ldi	r20, 0x00	; 0
    1d92:	0e 94 94 07 	call	0xf28	; 0xf28 <DIO_writePin>
    1d96:	fe 01       	movw	r30, r28
    1d98:	e1 5a       	subi	r30, 0xA1	; 161
    1d9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d9c:	80 e0       	ldi	r24, 0x00	; 0
    1d9e:	90 e0       	ldi	r25, 0x00	; 0
    1da0:	a0 e8       	ldi	r26, 0x80	; 128
    1da2:	bf e3       	ldi	r27, 0x3F	; 63
    1da4:	80 83       	st	Z, r24
    1da6:	91 83       	std	Z+1, r25	; 0x01
    1da8:	a2 83       	std	Z+2, r26	; 0x02
    1daa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dac:	8e 01       	movw	r16, r28
    1dae:	05 5a       	subi	r16, 0xA5	; 165
    1db0:	1f 4f       	sbci	r17, 0xFF	; 255
    1db2:	fe 01       	movw	r30, r28
    1db4:	e1 5a       	subi	r30, 0xA1	; 161
    1db6:	ff 4f       	sbci	r31, 0xFF	; 255
    1db8:	60 81       	ld	r22, Z
    1dba:	71 81       	ldd	r23, Z+1	; 0x01
    1dbc:	82 81       	ldd	r24, Z+2	; 0x02
    1dbe:	93 81       	ldd	r25, Z+3	; 0x03
    1dc0:	20 e0       	ldi	r18, 0x00	; 0
    1dc2:	30 e0       	ldi	r19, 0x00	; 0
    1dc4:	4a ef       	ldi	r20, 0xFA	; 250
    1dc6:	54 e4       	ldi	r21, 0x44	; 68
    1dc8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1dcc:	dc 01       	movw	r26, r24
    1dce:	cb 01       	movw	r24, r22
    1dd0:	f8 01       	movw	r30, r16
    1dd2:	80 83       	st	Z, r24
    1dd4:	91 83       	std	Z+1, r25	; 0x01
    1dd6:	a2 83       	std	Z+2, r26	; 0x02
    1dd8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1dda:	fe 01       	movw	r30, r28
    1ddc:	e5 5a       	subi	r30, 0xA5	; 165
    1dde:	ff 4f       	sbci	r31, 0xFF	; 255
    1de0:	60 81       	ld	r22, Z
    1de2:	71 81       	ldd	r23, Z+1	; 0x01
    1de4:	82 81       	ldd	r24, Z+2	; 0x02
    1de6:	93 81       	ldd	r25, Z+3	; 0x03
    1de8:	20 e0       	ldi	r18, 0x00	; 0
    1dea:	30 e0       	ldi	r19, 0x00	; 0
    1dec:	40 e8       	ldi	r20, 0x80	; 128
    1dee:	5f e3       	ldi	r21, 0x3F	; 63
    1df0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1df4:	88 23       	and	r24, r24
    1df6:	44 f4       	brge	.+16     	; 0x1e08 <LCD_displayCharacter+0xa8>
		__ticks = 1;
    1df8:	fe 01       	movw	r30, r28
    1dfa:	e7 5a       	subi	r30, 0xA7	; 167
    1dfc:	ff 4f       	sbci	r31, 0xFF	; 255
    1dfe:	81 e0       	ldi	r24, 0x01	; 1
    1e00:	90 e0       	ldi	r25, 0x00	; 0
    1e02:	91 83       	std	Z+1, r25	; 0x01
    1e04:	80 83       	st	Z, r24
    1e06:	64 c0       	rjmp	.+200    	; 0x1ed0 <LCD_displayCharacter+0x170>
	else if (__tmp > 65535)
    1e08:	fe 01       	movw	r30, r28
    1e0a:	e5 5a       	subi	r30, 0xA5	; 165
    1e0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e0e:	60 81       	ld	r22, Z
    1e10:	71 81       	ldd	r23, Z+1	; 0x01
    1e12:	82 81       	ldd	r24, Z+2	; 0x02
    1e14:	93 81       	ldd	r25, Z+3	; 0x03
    1e16:	20 e0       	ldi	r18, 0x00	; 0
    1e18:	3f ef       	ldi	r19, 0xFF	; 255
    1e1a:	4f e7       	ldi	r20, 0x7F	; 127
    1e1c:	57 e4       	ldi	r21, 0x47	; 71
    1e1e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1e22:	18 16       	cp	r1, r24
    1e24:	0c f0       	brlt	.+2      	; 0x1e28 <LCD_displayCharacter+0xc8>
    1e26:	43 c0       	rjmp	.+134    	; 0x1eae <LCD_displayCharacter+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e28:	fe 01       	movw	r30, r28
    1e2a:	e1 5a       	subi	r30, 0xA1	; 161
    1e2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e2e:	60 81       	ld	r22, Z
    1e30:	71 81       	ldd	r23, Z+1	; 0x01
    1e32:	82 81       	ldd	r24, Z+2	; 0x02
    1e34:	93 81       	ldd	r25, Z+3	; 0x03
    1e36:	20 e0       	ldi	r18, 0x00	; 0
    1e38:	30 e0       	ldi	r19, 0x00	; 0
    1e3a:	40 e2       	ldi	r20, 0x20	; 32
    1e3c:	51 e4       	ldi	r21, 0x41	; 65
    1e3e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e42:	dc 01       	movw	r26, r24
    1e44:	cb 01       	movw	r24, r22
    1e46:	8e 01       	movw	r16, r28
    1e48:	07 5a       	subi	r16, 0xA7	; 167
    1e4a:	1f 4f       	sbci	r17, 0xFF	; 255
    1e4c:	bc 01       	movw	r22, r24
    1e4e:	cd 01       	movw	r24, r26
    1e50:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e54:	dc 01       	movw	r26, r24
    1e56:	cb 01       	movw	r24, r22
    1e58:	f8 01       	movw	r30, r16
    1e5a:	91 83       	std	Z+1, r25	; 0x01
    1e5c:	80 83       	st	Z, r24
    1e5e:	1f c0       	rjmp	.+62     	; 0x1e9e <LCD_displayCharacter+0x13e>
    1e60:	fe 01       	movw	r30, r28
    1e62:	e9 5a       	subi	r30, 0xA9	; 169
    1e64:	ff 4f       	sbci	r31, 0xFF	; 255
    1e66:	88 ec       	ldi	r24, 0xC8	; 200
    1e68:	90 e0       	ldi	r25, 0x00	; 0
    1e6a:	91 83       	std	Z+1, r25	; 0x01
    1e6c:	80 83       	st	Z, r24
    1e6e:	fe 01       	movw	r30, r28
    1e70:	e9 5a       	subi	r30, 0xA9	; 169
    1e72:	ff 4f       	sbci	r31, 0xFF	; 255
    1e74:	80 81       	ld	r24, Z
    1e76:	91 81       	ldd	r25, Z+1	; 0x01
    1e78:	01 97       	sbiw	r24, 0x01	; 1
    1e7a:	f1 f7       	brne	.-4      	; 0x1e78 <LCD_displayCharacter+0x118>
    1e7c:	fe 01       	movw	r30, r28
    1e7e:	e9 5a       	subi	r30, 0xA9	; 169
    1e80:	ff 4f       	sbci	r31, 0xFF	; 255
    1e82:	91 83       	std	Z+1, r25	; 0x01
    1e84:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e86:	de 01       	movw	r26, r28
    1e88:	a7 5a       	subi	r26, 0xA7	; 167
    1e8a:	bf 4f       	sbci	r27, 0xFF	; 255
    1e8c:	fe 01       	movw	r30, r28
    1e8e:	e7 5a       	subi	r30, 0xA7	; 167
    1e90:	ff 4f       	sbci	r31, 0xFF	; 255
    1e92:	80 81       	ld	r24, Z
    1e94:	91 81       	ldd	r25, Z+1	; 0x01
    1e96:	01 97       	sbiw	r24, 0x01	; 1
    1e98:	11 96       	adiw	r26, 0x01	; 1
    1e9a:	9c 93       	st	X, r25
    1e9c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e9e:	fe 01       	movw	r30, r28
    1ea0:	e7 5a       	subi	r30, 0xA7	; 167
    1ea2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea4:	80 81       	ld	r24, Z
    1ea6:	91 81       	ldd	r25, Z+1	; 0x01
    1ea8:	00 97       	sbiw	r24, 0x00	; 0
    1eaa:	d1 f6       	brne	.-76     	; 0x1e60 <LCD_displayCharacter+0x100>
    1eac:	27 c0       	rjmp	.+78     	; 0x1efc <LCD_displayCharacter+0x19c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1eae:	8e 01       	movw	r16, r28
    1eb0:	07 5a       	subi	r16, 0xA7	; 167
    1eb2:	1f 4f       	sbci	r17, 0xFF	; 255
    1eb4:	fe 01       	movw	r30, r28
    1eb6:	e5 5a       	subi	r30, 0xA5	; 165
    1eb8:	ff 4f       	sbci	r31, 0xFF	; 255
    1eba:	60 81       	ld	r22, Z
    1ebc:	71 81       	ldd	r23, Z+1	; 0x01
    1ebe:	82 81       	ldd	r24, Z+2	; 0x02
    1ec0:	93 81       	ldd	r25, Z+3	; 0x03
    1ec2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ec6:	dc 01       	movw	r26, r24
    1ec8:	cb 01       	movw	r24, r22
    1eca:	f8 01       	movw	r30, r16
    1ecc:	91 83       	std	Z+1, r25	; 0x01
    1ece:	80 83       	st	Z, r24
    1ed0:	de 01       	movw	r26, r28
    1ed2:	ab 5a       	subi	r26, 0xAB	; 171
    1ed4:	bf 4f       	sbci	r27, 0xFF	; 255
    1ed6:	fe 01       	movw	r30, r28
    1ed8:	e7 5a       	subi	r30, 0xA7	; 167
    1eda:	ff 4f       	sbci	r31, 0xFF	; 255
    1edc:	80 81       	ld	r24, Z
    1ede:	91 81       	ldd	r25, Z+1	; 0x01
    1ee0:	8d 93       	st	X+, r24
    1ee2:	9c 93       	st	X, r25
    1ee4:	fe 01       	movw	r30, r28
    1ee6:	eb 5a       	subi	r30, 0xAB	; 171
    1ee8:	ff 4f       	sbci	r31, 0xFF	; 255
    1eea:	80 81       	ld	r24, Z
    1eec:	91 81       	ldd	r25, Z+1	; 0x01
    1eee:	01 97       	sbiw	r24, 0x01	; 1
    1ef0:	f1 f7       	brne	.-4      	; 0x1eee <LCD_displayCharacter+0x18e>
    1ef2:	fe 01       	movw	r30, r28
    1ef4:	eb 5a       	subi	r30, 0xAB	; 171
    1ef6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef8:	91 83       	std	Z+1, r25	; 0x01
    1efa:	80 83       	st	Z, r24
	_delay_ms(1); 						/* Delay for processing Tas = 50ns */

	DIO_writePin(DIO_PORTA, E, HIGH);	/* Enable LCD E = 1 */
    1efc:	80 e0       	ldi	r24, 0x00	; 0
    1efe:	63 e0       	ldi	r22, 0x03	; 3
    1f00:	41 e0       	ldi	r20, 0x01	; 1
    1f02:	0e 94 94 07 	call	0xf28	; 0xf28 <DIO_writePin>
    1f06:	fe 01       	movw	r30, r28
    1f08:	ef 5a       	subi	r30, 0xAF	; 175
    1f0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f0c:	80 e0       	ldi	r24, 0x00	; 0
    1f0e:	90 e0       	ldi	r25, 0x00	; 0
    1f10:	a0 e8       	ldi	r26, 0x80	; 128
    1f12:	bf e3       	ldi	r27, 0x3F	; 63
    1f14:	80 83       	st	Z, r24
    1f16:	91 83       	std	Z+1, r25	; 0x01
    1f18:	a2 83       	std	Z+2, r26	; 0x02
    1f1a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f1c:	8e 01       	movw	r16, r28
    1f1e:	03 5b       	subi	r16, 0xB3	; 179
    1f20:	1f 4f       	sbci	r17, 0xFF	; 255
    1f22:	fe 01       	movw	r30, r28
    1f24:	ef 5a       	subi	r30, 0xAF	; 175
    1f26:	ff 4f       	sbci	r31, 0xFF	; 255
    1f28:	60 81       	ld	r22, Z
    1f2a:	71 81       	ldd	r23, Z+1	; 0x01
    1f2c:	82 81       	ldd	r24, Z+2	; 0x02
    1f2e:	93 81       	ldd	r25, Z+3	; 0x03
    1f30:	20 e0       	ldi	r18, 0x00	; 0
    1f32:	30 e0       	ldi	r19, 0x00	; 0
    1f34:	4a ef       	ldi	r20, 0xFA	; 250
    1f36:	54 e4       	ldi	r21, 0x44	; 68
    1f38:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f3c:	dc 01       	movw	r26, r24
    1f3e:	cb 01       	movw	r24, r22
    1f40:	f8 01       	movw	r30, r16
    1f42:	80 83       	st	Z, r24
    1f44:	91 83       	std	Z+1, r25	; 0x01
    1f46:	a2 83       	std	Z+2, r26	; 0x02
    1f48:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f4a:	fe 01       	movw	r30, r28
    1f4c:	e3 5b       	subi	r30, 0xB3	; 179
    1f4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f50:	60 81       	ld	r22, Z
    1f52:	71 81       	ldd	r23, Z+1	; 0x01
    1f54:	82 81       	ldd	r24, Z+2	; 0x02
    1f56:	93 81       	ldd	r25, Z+3	; 0x03
    1f58:	20 e0       	ldi	r18, 0x00	; 0
    1f5a:	30 e0       	ldi	r19, 0x00	; 0
    1f5c:	40 e8       	ldi	r20, 0x80	; 128
    1f5e:	5f e3       	ldi	r21, 0x3F	; 63
    1f60:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1f64:	88 23       	and	r24, r24
    1f66:	44 f4       	brge	.+16     	; 0x1f78 <LCD_displayCharacter+0x218>
		__ticks = 1;
    1f68:	fe 01       	movw	r30, r28
    1f6a:	e5 5b       	subi	r30, 0xB5	; 181
    1f6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f6e:	81 e0       	ldi	r24, 0x01	; 1
    1f70:	90 e0       	ldi	r25, 0x00	; 0
    1f72:	91 83       	std	Z+1, r25	; 0x01
    1f74:	80 83       	st	Z, r24
    1f76:	64 c0       	rjmp	.+200    	; 0x2040 <LCD_displayCharacter+0x2e0>
	else if (__tmp > 65535)
    1f78:	fe 01       	movw	r30, r28
    1f7a:	e3 5b       	subi	r30, 0xB3	; 179
    1f7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f7e:	60 81       	ld	r22, Z
    1f80:	71 81       	ldd	r23, Z+1	; 0x01
    1f82:	82 81       	ldd	r24, Z+2	; 0x02
    1f84:	93 81       	ldd	r25, Z+3	; 0x03
    1f86:	20 e0       	ldi	r18, 0x00	; 0
    1f88:	3f ef       	ldi	r19, 0xFF	; 255
    1f8a:	4f e7       	ldi	r20, 0x7F	; 127
    1f8c:	57 e4       	ldi	r21, 0x47	; 71
    1f8e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1f92:	18 16       	cp	r1, r24
    1f94:	0c f0       	brlt	.+2      	; 0x1f98 <LCD_displayCharacter+0x238>
    1f96:	43 c0       	rjmp	.+134    	; 0x201e <LCD_displayCharacter+0x2be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f98:	fe 01       	movw	r30, r28
    1f9a:	ef 5a       	subi	r30, 0xAF	; 175
    1f9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f9e:	60 81       	ld	r22, Z
    1fa0:	71 81       	ldd	r23, Z+1	; 0x01
    1fa2:	82 81       	ldd	r24, Z+2	; 0x02
    1fa4:	93 81       	ldd	r25, Z+3	; 0x03
    1fa6:	20 e0       	ldi	r18, 0x00	; 0
    1fa8:	30 e0       	ldi	r19, 0x00	; 0
    1faa:	40 e2       	ldi	r20, 0x20	; 32
    1fac:	51 e4       	ldi	r21, 0x41	; 65
    1fae:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fb2:	dc 01       	movw	r26, r24
    1fb4:	cb 01       	movw	r24, r22
    1fb6:	8e 01       	movw	r16, r28
    1fb8:	05 5b       	subi	r16, 0xB5	; 181
    1fba:	1f 4f       	sbci	r17, 0xFF	; 255
    1fbc:	bc 01       	movw	r22, r24
    1fbe:	cd 01       	movw	r24, r26
    1fc0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fc4:	dc 01       	movw	r26, r24
    1fc6:	cb 01       	movw	r24, r22
    1fc8:	f8 01       	movw	r30, r16
    1fca:	91 83       	std	Z+1, r25	; 0x01
    1fcc:	80 83       	st	Z, r24
    1fce:	1f c0       	rjmp	.+62     	; 0x200e <LCD_displayCharacter+0x2ae>
    1fd0:	fe 01       	movw	r30, r28
    1fd2:	e7 5b       	subi	r30, 0xB7	; 183
    1fd4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd6:	88 ec       	ldi	r24, 0xC8	; 200
    1fd8:	90 e0       	ldi	r25, 0x00	; 0
    1fda:	91 83       	std	Z+1, r25	; 0x01
    1fdc:	80 83       	st	Z, r24
    1fde:	fe 01       	movw	r30, r28
    1fe0:	e7 5b       	subi	r30, 0xB7	; 183
    1fe2:	ff 4f       	sbci	r31, 0xFF	; 255
    1fe4:	80 81       	ld	r24, Z
    1fe6:	91 81       	ldd	r25, Z+1	; 0x01
    1fe8:	01 97       	sbiw	r24, 0x01	; 1
    1fea:	f1 f7       	brne	.-4      	; 0x1fe8 <LCD_displayCharacter+0x288>
    1fec:	fe 01       	movw	r30, r28
    1fee:	e7 5b       	subi	r30, 0xB7	; 183
    1ff0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff2:	91 83       	std	Z+1, r25	; 0x01
    1ff4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ff6:	de 01       	movw	r26, r28
    1ff8:	a5 5b       	subi	r26, 0xB5	; 181
    1ffa:	bf 4f       	sbci	r27, 0xFF	; 255
    1ffc:	fe 01       	movw	r30, r28
    1ffe:	e5 5b       	subi	r30, 0xB5	; 181
    2000:	ff 4f       	sbci	r31, 0xFF	; 255
    2002:	80 81       	ld	r24, Z
    2004:	91 81       	ldd	r25, Z+1	; 0x01
    2006:	01 97       	sbiw	r24, 0x01	; 1
    2008:	11 96       	adiw	r26, 0x01	; 1
    200a:	9c 93       	st	X, r25
    200c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    200e:	fe 01       	movw	r30, r28
    2010:	e5 5b       	subi	r30, 0xB5	; 181
    2012:	ff 4f       	sbci	r31, 0xFF	; 255
    2014:	80 81       	ld	r24, Z
    2016:	91 81       	ldd	r25, Z+1	; 0x01
    2018:	00 97       	sbiw	r24, 0x00	; 0
    201a:	d1 f6       	brne	.-76     	; 0x1fd0 <LCD_displayCharacter+0x270>
    201c:	27 c0       	rjmp	.+78     	; 0x206c <LCD_displayCharacter+0x30c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    201e:	8e 01       	movw	r16, r28
    2020:	05 5b       	subi	r16, 0xB5	; 181
    2022:	1f 4f       	sbci	r17, 0xFF	; 255
    2024:	fe 01       	movw	r30, r28
    2026:	e3 5b       	subi	r30, 0xB3	; 179
    2028:	ff 4f       	sbci	r31, 0xFF	; 255
    202a:	60 81       	ld	r22, Z
    202c:	71 81       	ldd	r23, Z+1	; 0x01
    202e:	82 81       	ldd	r24, Z+2	; 0x02
    2030:	93 81       	ldd	r25, Z+3	; 0x03
    2032:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2036:	dc 01       	movw	r26, r24
    2038:	cb 01       	movw	r24, r22
    203a:	f8 01       	movw	r30, r16
    203c:	91 83       	std	Z+1, r25	; 0x01
    203e:	80 83       	st	Z, r24
    2040:	de 01       	movw	r26, r28
    2042:	a9 5b       	subi	r26, 0xB9	; 185
    2044:	bf 4f       	sbci	r27, 0xFF	; 255
    2046:	fe 01       	movw	r30, r28
    2048:	e5 5b       	subi	r30, 0xB5	; 181
    204a:	ff 4f       	sbci	r31, 0xFF	; 255
    204c:	80 81       	ld	r24, Z
    204e:	91 81       	ldd	r25, Z+1	; 0x01
    2050:	8d 93       	st	X+, r24
    2052:	9c 93       	st	X, r25
    2054:	fe 01       	movw	r30, r28
    2056:	e9 5b       	subi	r30, 0xB9	; 185
    2058:	ff 4f       	sbci	r31, 0xFF	; 255
    205a:	80 81       	ld	r24, Z
    205c:	91 81       	ldd	r25, Z+1	; 0x01
    205e:	01 97       	sbiw	r24, 0x01	; 1
    2060:	f1 f7       	brne	.-4      	; 0x205e <LCD_displayCharacter+0x2fe>
    2062:	fe 01       	movw	r30, r28
    2064:	e9 5b       	subi	r30, 0xB9	; 185
    2066:	ff 4f       	sbci	r31, 0xFF	; 255
    2068:	91 83       	std	Z+1, r25	; 0x01
    206a:	80 83       	st	Z, r24
	_delay_ms(1); /* Delay for processing Tpw - Tdws = 190ns */

	/* Out the highest 4 bits of the required data to the data bus D4 --> D7 */
	LCD_DATA_OUTPUT = (LCD_DATA_OUTPUT & MASK_FOUR_HIGH_PINS) | (au8_data & MASK_FOUR_LOW_PINS);
    206c:	ab e3       	ldi	r26, 0x3B	; 59
    206e:	b0 e0       	ldi	r27, 0x00	; 0
    2070:	eb e3       	ldi	r30, 0x3B	; 59
    2072:	f0 e0       	ldi	r31, 0x00	; 0
    2074:	80 81       	ld	r24, Z
    2076:	98 2f       	mov	r25, r24
    2078:	9f 70       	andi	r25, 0x0F	; 15
    207a:	fe 01       	movw	r30, r28
    207c:	ed 59       	subi	r30, 0x9D	; 157
    207e:	ff 4f       	sbci	r31, 0xFF	; 255
    2080:	80 81       	ld	r24, Z
    2082:	80 7f       	andi	r24, 0xF0	; 240
    2084:	89 2b       	or	r24, r25
    2086:	8c 93       	st	X, r24
    2088:	fe 01       	movw	r30, r28
    208a:	ed 5b       	subi	r30, 0xBD	; 189
    208c:	ff 4f       	sbci	r31, 0xFF	; 255
    208e:	80 e0       	ldi	r24, 0x00	; 0
    2090:	90 e0       	ldi	r25, 0x00	; 0
    2092:	a0 e8       	ldi	r26, 0x80	; 128
    2094:	bf e3       	ldi	r27, 0x3F	; 63
    2096:	80 83       	st	Z, r24
    2098:	91 83       	std	Z+1, r25	; 0x01
    209a:	a2 83       	std	Z+2, r26	; 0x02
    209c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    209e:	8e 01       	movw	r16, r28
    20a0:	01 5c       	subi	r16, 0xC1	; 193
    20a2:	1f 4f       	sbci	r17, 0xFF	; 255
    20a4:	fe 01       	movw	r30, r28
    20a6:	ed 5b       	subi	r30, 0xBD	; 189
    20a8:	ff 4f       	sbci	r31, 0xFF	; 255
    20aa:	60 81       	ld	r22, Z
    20ac:	71 81       	ldd	r23, Z+1	; 0x01
    20ae:	82 81       	ldd	r24, Z+2	; 0x02
    20b0:	93 81       	ldd	r25, Z+3	; 0x03
    20b2:	20 e0       	ldi	r18, 0x00	; 0
    20b4:	30 e0       	ldi	r19, 0x00	; 0
    20b6:	4a ef       	ldi	r20, 0xFA	; 250
    20b8:	54 e4       	ldi	r21, 0x44	; 68
    20ba:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20be:	dc 01       	movw	r26, r24
    20c0:	cb 01       	movw	r24, r22
    20c2:	f8 01       	movw	r30, r16
    20c4:	80 83       	st	Z, r24
    20c6:	91 83       	std	Z+1, r25	; 0x01
    20c8:	a2 83       	std	Z+2, r26	; 0x02
    20ca:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    20cc:	fe 01       	movw	r30, r28
    20ce:	ff 96       	adiw	r30, 0x3f	; 63
    20d0:	60 81       	ld	r22, Z
    20d2:	71 81       	ldd	r23, Z+1	; 0x01
    20d4:	82 81       	ldd	r24, Z+2	; 0x02
    20d6:	93 81       	ldd	r25, Z+3	; 0x03
    20d8:	20 e0       	ldi	r18, 0x00	; 0
    20da:	30 e0       	ldi	r19, 0x00	; 0
    20dc:	40 e8       	ldi	r20, 0x80	; 128
    20de:	5f e3       	ldi	r21, 0x3F	; 63
    20e0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    20e4:	88 23       	and	r24, r24
    20e6:	2c f4       	brge	.+10     	; 0x20f2 <LCD_displayCharacter+0x392>
		__ticks = 1;
    20e8:	81 e0       	ldi	r24, 0x01	; 1
    20ea:	90 e0       	ldi	r25, 0x00	; 0
    20ec:	9e af       	std	Y+62, r25	; 0x3e
    20ee:	8d af       	std	Y+61, r24	; 0x3d
    20f0:	46 c0       	rjmp	.+140    	; 0x217e <LCD_displayCharacter+0x41e>
	else if (__tmp > 65535)
    20f2:	fe 01       	movw	r30, r28
    20f4:	ff 96       	adiw	r30, 0x3f	; 63
    20f6:	60 81       	ld	r22, Z
    20f8:	71 81       	ldd	r23, Z+1	; 0x01
    20fa:	82 81       	ldd	r24, Z+2	; 0x02
    20fc:	93 81       	ldd	r25, Z+3	; 0x03
    20fe:	20 e0       	ldi	r18, 0x00	; 0
    2100:	3f ef       	ldi	r19, 0xFF	; 255
    2102:	4f e7       	ldi	r20, 0x7F	; 127
    2104:	57 e4       	ldi	r21, 0x47	; 71
    2106:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    210a:	18 16       	cp	r1, r24
    210c:	64 f5       	brge	.+88     	; 0x2166 <LCD_displayCharacter+0x406>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    210e:	fe 01       	movw	r30, r28
    2110:	ed 5b       	subi	r30, 0xBD	; 189
    2112:	ff 4f       	sbci	r31, 0xFF	; 255
    2114:	60 81       	ld	r22, Z
    2116:	71 81       	ldd	r23, Z+1	; 0x01
    2118:	82 81       	ldd	r24, Z+2	; 0x02
    211a:	93 81       	ldd	r25, Z+3	; 0x03
    211c:	20 e0       	ldi	r18, 0x00	; 0
    211e:	30 e0       	ldi	r19, 0x00	; 0
    2120:	40 e2       	ldi	r20, 0x20	; 32
    2122:	51 e4       	ldi	r21, 0x41	; 65
    2124:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2128:	dc 01       	movw	r26, r24
    212a:	cb 01       	movw	r24, r22
    212c:	bc 01       	movw	r22, r24
    212e:	cd 01       	movw	r24, r26
    2130:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2134:	dc 01       	movw	r26, r24
    2136:	cb 01       	movw	r24, r22
    2138:	9e af       	std	Y+62, r25	; 0x3e
    213a:	8d af       	std	Y+61, r24	; 0x3d
    213c:	0f c0       	rjmp	.+30     	; 0x215c <LCD_displayCharacter+0x3fc>
    213e:	88 ec       	ldi	r24, 0xC8	; 200
    2140:	90 e0       	ldi	r25, 0x00	; 0
    2142:	9c af       	std	Y+60, r25	; 0x3c
    2144:	8b af       	std	Y+59, r24	; 0x3b
    2146:	8b ad       	ldd	r24, Y+59	; 0x3b
    2148:	9c ad       	ldd	r25, Y+60	; 0x3c
    214a:	01 97       	sbiw	r24, 0x01	; 1
    214c:	f1 f7       	brne	.-4      	; 0x214a <LCD_displayCharacter+0x3ea>
    214e:	9c af       	std	Y+60, r25	; 0x3c
    2150:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2152:	8d ad       	ldd	r24, Y+61	; 0x3d
    2154:	9e ad       	ldd	r25, Y+62	; 0x3e
    2156:	01 97       	sbiw	r24, 0x01	; 1
    2158:	9e af       	std	Y+62, r25	; 0x3e
    215a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    215c:	8d ad       	ldd	r24, Y+61	; 0x3d
    215e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2160:	00 97       	sbiw	r24, 0x00	; 0
    2162:	69 f7       	brne	.-38     	; 0x213e <LCD_displayCharacter+0x3de>
    2164:	16 c0       	rjmp	.+44     	; 0x2192 <LCD_displayCharacter+0x432>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2166:	fe 01       	movw	r30, r28
    2168:	ff 96       	adiw	r30, 0x3f	; 63
    216a:	60 81       	ld	r22, Z
    216c:	71 81       	ldd	r23, Z+1	; 0x01
    216e:	82 81       	ldd	r24, Z+2	; 0x02
    2170:	93 81       	ldd	r25, Z+3	; 0x03
    2172:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2176:	dc 01       	movw	r26, r24
    2178:	cb 01       	movw	r24, r22
    217a:	9e af       	std	Y+62, r25	; 0x3e
    217c:	8d af       	std	Y+61, r24	; 0x3d
    217e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2180:	9e ad       	ldd	r25, Y+62	; 0x3e
    2182:	9a af       	std	Y+58, r25	; 0x3a
    2184:	89 af       	std	Y+57, r24	; 0x39
    2186:	89 ad       	ldd	r24, Y+57	; 0x39
    2188:	9a ad       	ldd	r25, Y+58	; 0x3a
    218a:	01 97       	sbiw	r24, 0x01	; 1
    218c:	f1 f7       	brne	.-4      	; 0x218a <LCD_displayCharacter+0x42a>
    218e:	9a af       	std	Y+58, r25	; 0x3a
    2190:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1); /* Delay for processing Tdsw = 100ns */

	DIO_writePin(DIO_PORTA, E, LOW);	/* Disable LCD E = 0 */
    2192:	80 e0       	ldi	r24, 0x00	; 0
    2194:	63 e0       	ldi	r22, 0x03	; 3
    2196:	40 e0       	ldi	r20, 0x00	; 0
    2198:	0e 94 94 07 	call	0xf28	; 0xf28 <DIO_writePin>
    219c:	80 e0       	ldi	r24, 0x00	; 0
    219e:	90 e0       	ldi	r25, 0x00	; 0
    21a0:	a0 e8       	ldi	r26, 0x80	; 128
    21a2:	bf e3       	ldi	r27, 0x3F	; 63
    21a4:	8d ab       	std	Y+53, r24	; 0x35
    21a6:	9e ab       	std	Y+54, r25	; 0x36
    21a8:	af ab       	std	Y+55, r26	; 0x37
    21aa:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21ac:	6d a9       	ldd	r22, Y+53	; 0x35
    21ae:	7e a9       	ldd	r23, Y+54	; 0x36
    21b0:	8f a9       	ldd	r24, Y+55	; 0x37
    21b2:	98 ad       	ldd	r25, Y+56	; 0x38
    21b4:	20 e0       	ldi	r18, 0x00	; 0
    21b6:	30 e0       	ldi	r19, 0x00	; 0
    21b8:	4a ef       	ldi	r20, 0xFA	; 250
    21ba:	54 e4       	ldi	r21, 0x44	; 68
    21bc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21c0:	dc 01       	movw	r26, r24
    21c2:	cb 01       	movw	r24, r22
    21c4:	89 ab       	std	Y+49, r24	; 0x31
    21c6:	9a ab       	std	Y+50, r25	; 0x32
    21c8:	ab ab       	std	Y+51, r26	; 0x33
    21ca:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    21cc:	69 a9       	ldd	r22, Y+49	; 0x31
    21ce:	7a a9       	ldd	r23, Y+50	; 0x32
    21d0:	8b a9       	ldd	r24, Y+51	; 0x33
    21d2:	9c a9       	ldd	r25, Y+52	; 0x34
    21d4:	20 e0       	ldi	r18, 0x00	; 0
    21d6:	30 e0       	ldi	r19, 0x00	; 0
    21d8:	40 e8       	ldi	r20, 0x80	; 128
    21da:	5f e3       	ldi	r21, 0x3F	; 63
    21dc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    21e0:	88 23       	and	r24, r24
    21e2:	2c f4       	brge	.+10     	; 0x21ee <LCD_displayCharacter+0x48e>
		__ticks = 1;
    21e4:	81 e0       	ldi	r24, 0x01	; 1
    21e6:	90 e0       	ldi	r25, 0x00	; 0
    21e8:	98 ab       	std	Y+48, r25	; 0x30
    21ea:	8f a7       	std	Y+47, r24	; 0x2f
    21ec:	3f c0       	rjmp	.+126    	; 0x226c <LCD_displayCharacter+0x50c>
	else if (__tmp > 65535)
    21ee:	69 a9       	ldd	r22, Y+49	; 0x31
    21f0:	7a a9       	ldd	r23, Y+50	; 0x32
    21f2:	8b a9       	ldd	r24, Y+51	; 0x33
    21f4:	9c a9       	ldd	r25, Y+52	; 0x34
    21f6:	20 e0       	ldi	r18, 0x00	; 0
    21f8:	3f ef       	ldi	r19, 0xFF	; 255
    21fa:	4f e7       	ldi	r20, 0x7F	; 127
    21fc:	57 e4       	ldi	r21, 0x47	; 71
    21fe:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2202:	18 16       	cp	r1, r24
    2204:	4c f5       	brge	.+82     	; 0x2258 <LCD_displayCharacter+0x4f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2206:	6d a9       	ldd	r22, Y+53	; 0x35
    2208:	7e a9       	ldd	r23, Y+54	; 0x36
    220a:	8f a9       	ldd	r24, Y+55	; 0x37
    220c:	98 ad       	ldd	r25, Y+56	; 0x38
    220e:	20 e0       	ldi	r18, 0x00	; 0
    2210:	30 e0       	ldi	r19, 0x00	; 0
    2212:	40 e2       	ldi	r20, 0x20	; 32
    2214:	51 e4       	ldi	r21, 0x41	; 65
    2216:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    221a:	dc 01       	movw	r26, r24
    221c:	cb 01       	movw	r24, r22
    221e:	bc 01       	movw	r22, r24
    2220:	cd 01       	movw	r24, r26
    2222:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2226:	dc 01       	movw	r26, r24
    2228:	cb 01       	movw	r24, r22
    222a:	98 ab       	std	Y+48, r25	; 0x30
    222c:	8f a7       	std	Y+47, r24	; 0x2f
    222e:	0f c0       	rjmp	.+30     	; 0x224e <LCD_displayCharacter+0x4ee>
    2230:	88 ec       	ldi	r24, 0xC8	; 200
    2232:	90 e0       	ldi	r25, 0x00	; 0
    2234:	9e a7       	std	Y+46, r25	; 0x2e
    2236:	8d a7       	std	Y+45, r24	; 0x2d
    2238:	8d a5       	ldd	r24, Y+45	; 0x2d
    223a:	9e a5       	ldd	r25, Y+46	; 0x2e
    223c:	01 97       	sbiw	r24, 0x01	; 1
    223e:	f1 f7       	brne	.-4      	; 0x223c <LCD_displayCharacter+0x4dc>
    2240:	9e a7       	std	Y+46, r25	; 0x2e
    2242:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2244:	8f a5       	ldd	r24, Y+47	; 0x2f
    2246:	98 a9       	ldd	r25, Y+48	; 0x30
    2248:	01 97       	sbiw	r24, 0x01	; 1
    224a:	98 ab       	std	Y+48, r25	; 0x30
    224c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    224e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2250:	98 a9       	ldd	r25, Y+48	; 0x30
    2252:	00 97       	sbiw	r24, 0x00	; 0
    2254:	69 f7       	brne	.-38     	; 0x2230 <LCD_displayCharacter+0x4d0>
    2256:	14 c0       	rjmp	.+40     	; 0x2280 <LCD_displayCharacter+0x520>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2258:	69 a9       	ldd	r22, Y+49	; 0x31
    225a:	7a a9       	ldd	r23, Y+50	; 0x32
    225c:	8b a9       	ldd	r24, Y+51	; 0x33
    225e:	9c a9       	ldd	r25, Y+52	; 0x34
    2260:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2264:	dc 01       	movw	r26, r24
    2266:	cb 01       	movw	r24, r22
    2268:	98 ab       	std	Y+48, r25	; 0x30
    226a:	8f a7       	std	Y+47, r24	; 0x2f
    226c:	8f a5       	ldd	r24, Y+47	; 0x2f
    226e:	98 a9       	ldd	r25, Y+48	; 0x30
    2270:	9c a7       	std	Y+44, r25	; 0x2c
    2272:	8b a7       	std	Y+43, r24	; 0x2b
    2274:	8b a5       	ldd	r24, Y+43	; 0x2b
    2276:	9c a5       	ldd	r25, Y+44	; 0x2c
    2278:	01 97       	sbiw	r24, 0x01	; 1
    227a:	f1 f7       	brne	.-4      	; 0x2278 <LCD_displayCharacter+0x518>
    227c:	9c a7       	std	Y+44, r25	; 0x2c
    227e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* Delay for processing Th = 13ns */

	DIO_writePin(DIO_PORTA, E, HIGH);	/* Enable LCD E = 0 */
    2280:	80 e0       	ldi	r24, 0x00	; 0
    2282:	63 e0       	ldi	r22, 0x03	; 3
    2284:	41 e0       	ldi	r20, 0x01	; 1
    2286:	0e 94 94 07 	call	0xf28	; 0xf28 <DIO_writePin>
    228a:	80 e0       	ldi	r24, 0x00	; 0
    228c:	90 e0       	ldi	r25, 0x00	; 0
    228e:	a0 e8       	ldi	r26, 0x80	; 128
    2290:	bf e3       	ldi	r27, 0x3F	; 63
    2292:	8f a3       	std	Y+39, r24	; 0x27
    2294:	98 a7       	std	Y+40, r25	; 0x28
    2296:	a9 a7       	std	Y+41, r26	; 0x29
    2298:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    229a:	6f a1       	ldd	r22, Y+39	; 0x27
    229c:	78 a5       	ldd	r23, Y+40	; 0x28
    229e:	89 a5       	ldd	r24, Y+41	; 0x29
    22a0:	9a a5       	ldd	r25, Y+42	; 0x2a
    22a2:	20 e0       	ldi	r18, 0x00	; 0
    22a4:	30 e0       	ldi	r19, 0x00	; 0
    22a6:	4a ef       	ldi	r20, 0xFA	; 250
    22a8:	54 e4       	ldi	r21, 0x44	; 68
    22aa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22ae:	dc 01       	movw	r26, r24
    22b0:	cb 01       	movw	r24, r22
    22b2:	8b a3       	std	Y+35, r24	; 0x23
    22b4:	9c a3       	std	Y+36, r25	; 0x24
    22b6:	ad a3       	std	Y+37, r26	; 0x25
    22b8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    22ba:	6b a1       	ldd	r22, Y+35	; 0x23
    22bc:	7c a1       	ldd	r23, Y+36	; 0x24
    22be:	8d a1       	ldd	r24, Y+37	; 0x25
    22c0:	9e a1       	ldd	r25, Y+38	; 0x26
    22c2:	20 e0       	ldi	r18, 0x00	; 0
    22c4:	30 e0       	ldi	r19, 0x00	; 0
    22c6:	40 e8       	ldi	r20, 0x80	; 128
    22c8:	5f e3       	ldi	r21, 0x3F	; 63
    22ca:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    22ce:	88 23       	and	r24, r24
    22d0:	2c f4       	brge	.+10     	; 0x22dc <LCD_displayCharacter+0x57c>
		__ticks = 1;
    22d2:	81 e0       	ldi	r24, 0x01	; 1
    22d4:	90 e0       	ldi	r25, 0x00	; 0
    22d6:	9a a3       	std	Y+34, r25	; 0x22
    22d8:	89 a3       	std	Y+33, r24	; 0x21
    22da:	3f c0       	rjmp	.+126    	; 0x235a <LCD_displayCharacter+0x5fa>
	else if (__tmp > 65535)
    22dc:	6b a1       	ldd	r22, Y+35	; 0x23
    22de:	7c a1       	ldd	r23, Y+36	; 0x24
    22e0:	8d a1       	ldd	r24, Y+37	; 0x25
    22e2:	9e a1       	ldd	r25, Y+38	; 0x26
    22e4:	20 e0       	ldi	r18, 0x00	; 0
    22e6:	3f ef       	ldi	r19, 0xFF	; 255
    22e8:	4f e7       	ldi	r20, 0x7F	; 127
    22ea:	57 e4       	ldi	r21, 0x47	; 71
    22ec:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    22f0:	18 16       	cp	r1, r24
    22f2:	4c f5       	brge	.+82     	; 0x2346 <LCD_displayCharacter+0x5e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22f4:	6f a1       	ldd	r22, Y+39	; 0x27
    22f6:	78 a5       	ldd	r23, Y+40	; 0x28
    22f8:	89 a5       	ldd	r24, Y+41	; 0x29
    22fa:	9a a5       	ldd	r25, Y+42	; 0x2a
    22fc:	20 e0       	ldi	r18, 0x00	; 0
    22fe:	30 e0       	ldi	r19, 0x00	; 0
    2300:	40 e2       	ldi	r20, 0x20	; 32
    2302:	51 e4       	ldi	r21, 0x41	; 65
    2304:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2308:	dc 01       	movw	r26, r24
    230a:	cb 01       	movw	r24, r22
    230c:	bc 01       	movw	r22, r24
    230e:	cd 01       	movw	r24, r26
    2310:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2314:	dc 01       	movw	r26, r24
    2316:	cb 01       	movw	r24, r22
    2318:	9a a3       	std	Y+34, r25	; 0x22
    231a:	89 a3       	std	Y+33, r24	; 0x21
    231c:	0f c0       	rjmp	.+30     	; 0x233c <LCD_displayCharacter+0x5dc>
    231e:	88 ec       	ldi	r24, 0xC8	; 200
    2320:	90 e0       	ldi	r25, 0x00	; 0
    2322:	98 a3       	std	Y+32, r25	; 0x20
    2324:	8f 8f       	std	Y+31, r24	; 0x1f
    2326:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2328:	98 a1       	ldd	r25, Y+32	; 0x20
    232a:	01 97       	sbiw	r24, 0x01	; 1
    232c:	f1 f7       	brne	.-4      	; 0x232a <LCD_displayCharacter+0x5ca>
    232e:	98 a3       	std	Y+32, r25	; 0x20
    2330:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2332:	89 a1       	ldd	r24, Y+33	; 0x21
    2334:	9a a1       	ldd	r25, Y+34	; 0x22
    2336:	01 97       	sbiw	r24, 0x01	; 1
    2338:	9a a3       	std	Y+34, r25	; 0x22
    233a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    233c:	89 a1       	ldd	r24, Y+33	; 0x21
    233e:	9a a1       	ldd	r25, Y+34	; 0x22
    2340:	00 97       	sbiw	r24, 0x00	; 0
    2342:	69 f7       	brne	.-38     	; 0x231e <LCD_displayCharacter+0x5be>
    2344:	14 c0       	rjmp	.+40     	; 0x236e <LCD_displayCharacter+0x60e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2346:	6b a1       	ldd	r22, Y+35	; 0x23
    2348:	7c a1       	ldd	r23, Y+36	; 0x24
    234a:	8d a1       	ldd	r24, Y+37	; 0x25
    234c:	9e a1       	ldd	r25, Y+38	; 0x26
    234e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2352:	dc 01       	movw	r26, r24
    2354:	cb 01       	movw	r24, r22
    2356:	9a a3       	std	Y+34, r25	; 0x22
    2358:	89 a3       	std	Y+33, r24	; 0x21
    235a:	89 a1       	ldd	r24, Y+33	; 0x21
    235c:	9a a1       	ldd	r25, Y+34	; 0x22
    235e:	9e 8f       	std	Y+30, r25	; 0x1e
    2360:	8d 8f       	std	Y+29, r24	; 0x1d
    2362:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2364:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2366:	01 97       	sbiw	r24, 0x01	; 1
    2368:	f1 f7       	brne	.-4      	; 0x2366 <LCD_displayCharacter+0x606>
    236a:	9e 8f       	std	Y+30, r25	; 0x1e
    236c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* Delay for processing Tpw - Tdws = 190ns */

	/* Out the lowest 4 bits of the required data to the data bus D4 --> D7 */
	LCD_DATA_OUTPUT = (LCD_DATA_OUTPUT & MASK_FOUR_HIGH_PINS) | ((au8_data & MASK_FOUR_HIGH_PINS) << 4);
    236e:	ab e3       	ldi	r26, 0x3B	; 59
    2370:	b0 e0       	ldi	r27, 0x00	; 0
    2372:	eb e3       	ldi	r30, 0x3B	; 59
    2374:	f0 e0       	ldi	r31, 0x00	; 0
    2376:	80 81       	ld	r24, Z
    2378:	98 2f       	mov	r25, r24
    237a:	9f 70       	andi	r25, 0x0F	; 15
    237c:	fe 01       	movw	r30, r28
    237e:	ed 59       	subi	r30, 0x9D	; 157
    2380:	ff 4f       	sbci	r31, 0xFF	; 255
    2382:	80 81       	ld	r24, Z
    2384:	82 95       	swap	r24
    2386:	80 7f       	andi	r24, 0xF0	; 240
    2388:	89 2b       	or	r24, r25
    238a:	8c 93       	st	X, r24
    238c:	80 e0       	ldi	r24, 0x00	; 0
    238e:	90 e0       	ldi	r25, 0x00	; 0
    2390:	a0 e8       	ldi	r26, 0x80	; 128
    2392:	bf e3       	ldi	r27, 0x3F	; 63
    2394:	89 8f       	std	Y+25, r24	; 0x19
    2396:	9a 8f       	std	Y+26, r25	; 0x1a
    2398:	ab 8f       	std	Y+27, r26	; 0x1b
    239a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    239c:	69 8d       	ldd	r22, Y+25	; 0x19
    239e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23a0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23a2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23a4:	20 e0       	ldi	r18, 0x00	; 0
    23a6:	30 e0       	ldi	r19, 0x00	; 0
    23a8:	4a ef       	ldi	r20, 0xFA	; 250
    23aa:	54 e4       	ldi	r21, 0x44	; 68
    23ac:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23b0:	dc 01       	movw	r26, r24
    23b2:	cb 01       	movw	r24, r22
    23b4:	8d 8b       	std	Y+21, r24	; 0x15
    23b6:	9e 8b       	std	Y+22, r25	; 0x16
    23b8:	af 8b       	std	Y+23, r26	; 0x17
    23ba:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    23bc:	6d 89       	ldd	r22, Y+21	; 0x15
    23be:	7e 89       	ldd	r23, Y+22	; 0x16
    23c0:	8f 89       	ldd	r24, Y+23	; 0x17
    23c2:	98 8d       	ldd	r25, Y+24	; 0x18
    23c4:	20 e0       	ldi	r18, 0x00	; 0
    23c6:	30 e0       	ldi	r19, 0x00	; 0
    23c8:	40 e8       	ldi	r20, 0x80	; 128
    23ca:	5f e3       	ldi	r21, 0x3F	; 63
    23cc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    23d0:	88 23       	and	r24, r24
    23d2:	2c f4       	brge	.+10     	; 0x23de <LCD_displayCharacter+0x67e>
		__ticks = 1;
    23d4:	81 e0       	ldi	r24, 0x01	; 1
    23d6:	90 e0       	ldi	r25, 0x00	; 0
    23d8:	9c 8b       	std	Y+20, r25	; 0x14
    23da:	8b 8b       	std	Y+19, r24	; 0x13
    23dc:	3f c0       	rjmp	.+126    	; 0x245c <LCD_displayCharacter+0x6fc>
	else if (__tmp > 65535)
    23de:	6d 89       	ldd	r22, Y+21	; 0x15
    23e0:	7e 89       	ldd	r23, Y+22	; 0x16
    23e2:	8f 89       	ldd	r24, Y+23	; 0x17
    23e4:	98 8d       	ldd	r25, Y+24	; 0x18
    23e6:	20 e0       	ldi	r18, 0x00	; 0
    23e8:	3f ef       	ldi	r19, 0xFF	; 255
    23ea:	4f e7       	ldi	r20, 0x7F	; 127
    23ec:	57 e4       	ldi	r21, 0x47	; 71
    23ee:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    23f2:	18 16       	cp	r1, r24
    23f4:	4c f5       	brge	.+82     	; 0x2448 <LCD_displayCharacter+0x6e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23f6:	69 8d       	ldd	r22, Y+25	; 0x19
    23f8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23fa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23fc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23fe:	20 e0       	ldi	r18, 0x00	; 0
    2400:	30 e0       	ldi	r19, 0x00	; 0
    2402:	40 e2       	ldi	r20, 0x20	; 32
    2404:	51 e4       	ldi	r21, 0x41	; 65
    2406:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    240a:	dc 01       	movw	r26, r24
    240c:	cb 01       	movw	r24, r22
    240e:	bc 01       	movw	r22, r24
    2410:	cd 01       	movw	r24, r26
    2412:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2416:	dc 01       	movw	r26, r24
    2418:	cb 01       	movw	r24, r22
    241a:	9c 8b       	std	Y+20, r25	; 0x14
    241c:	8b 8b       	std	Y+19, r24	; 0x13
    241e:	0f c0       	rjmp	.+30     	; 0x243e <LCD_displayCharacter+0x6de>
    2420:	88 ec       	ldi	r24, 0xC8	; 200
    2422:	90 e0       	ldi	r25, 0x00	; 0
    2424:	9a 8b       	std	Y+18, r25	; 0x12
    2426:	89 8b       	std	Y+17, r24	; 0x11
    2428:	89 89       	ldd	r24, Y+17	; 0x11
    242a:	9a 89       	ldd	r25, Y+18	; 0x12
    242c:	01 97       	sbiw	r24, 0x01	; 1
    242e:	f1 f7       	brne	.-4      	; 0x242c <LCD_displayCharacter+0x6cc>
    2430:	9a 8b       	std	Y+18, r25	; 0x12
    2432:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2434:	8b 89       	ldd	r24, Y+19	; 0x13
    2436:	9c 89       	ldd	r25, Y+20	; 0x14
    2438:	01 97       	sbiw	r24, 0x01	; 1
    243a:	9c 8b       	std	Y+20, r25	; 0x14
    243c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    243e:	8b 89       	ldd	r24, Y+19	; 0x13
    2440:	9c 89       	ldd	r25, Y+20	; 0x14
    2442:	00 97       	sbiw	r24, 0x00	; 0
    2444:	69 f7       	brne	.-38     	; 0x2420 <LCD_displayCharacter+0x6c0>
    2446:	14 c0       	rjmp	.+40     	; 0x2470 <LCD_displayCharacter+0x710>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2448:	6d 89       	ldd	r22, Y+21	; 0x15
    244a:	7e 89       	ldd	r23, Y+22	; 0x16
    244c:	8f 89       	ldd	r24, Y+23	; 0x17
    244e:	98 8d       	ldd	r25, Y+24	; 0x18
    2450:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2454:	dc 01       	movw	r26, r24
    2456:	cb 01       	movw	r24, r22
    2458:	9c 8b       	std	Y+20, r25	; 0x14
    245a:	8b 8b       	std	Y+19, r24	; 0x13
    245c:	8b 89       	ldd	r24, Y+19	; 0x13
    245e:	9c 89       	ldd	r25, Y+20	; 0x14
    2460:	98 8b       	std	Y+16, r25	; 0x10
    2462:	8f 87       	std	Y+15, r24	; 0x0f
    2464:	8f 85       	ldd	r24, Y+15	; 0x0f
    2466:	98 89       	ldd	r25, Y+16	; 0x10
    2468:	01 97       	sbiw	r24, 0x01	; 1
    246a:	f1 f7       	brne	.-4      	; 0x2468 <LCD_displayCharacter+0x708>
    246c:	98 8b       	std	Y+16, r25	; 0x10
    246e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* Delay for processing Tdsw = 100ns */

	DIO_writePin(DIO_PORTA, E, LOW);	/* Disable LCD E = 0 */
    2470:	80 e0       	ldi	r24, 0x00	; 0
    2472:	63 e0       	ldi	r22, 0x03	; 3
    2474:	40 e0       	ldi	r20, 0x00	; 0
    2476:	0e 94 94 07 	call	0xf28	; 0xf28 <DIO_writePin>
    247a:	80 e0       	ldi	r24, 0x00	; 0
    247c:	90 e0       	ldi	r25, 0x00	; 0
    247e:	a0 e8       	ldi	r26, 0x80	; 128
    2480:	bf e3       	ldi	r27, 0x3F	; 63
    2482:	8b 87       	std	Y+11, r24	; 0x0b
    2484:	9c 87       	std	Y+12, r25	; 0x0c
    2486:	ad 87       	std	Y+13, r26	; 0x0d
    2488:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    248a:	6b 85       	ldd	r22, Y+11	; 0x0b
    248c:	7c 85       	ldd	r23, Y+12	; 0x0c
    248e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2490:	9e 85       	ldd	r25, Y+14	; 0x0e
    2492:	20 e0       	ldi	r18, 0x00	; 0
    2494:	30 e0       	ldi	r19, 0x00	; 0
    2496:	4a ef       	ldi	r20, 0xFA	; 250
    2498:	54 e4       	ldi	r21, 0x44	; 68
    249a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    249e:	dc 01       	movw	r26, r24
    24a0:	cb 01       	movw	r24, r22
    24a2:	8f 83       	std	Y+7, r24	; 0x07
    24a4:	98 87       	std	Y+8, r25	; 0x08
    24a6:	a9 87       	std	Y+9, r26	; 0x09
    24a8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24aa:	6f 81       	ldd	r22, Y+7	; 0x07
    24ac:	78 85       	ldd	r23, Y+8	; 0x08
    24ae:	89 85       	ldd	r24, Y+9	; 0x09
    24b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    24b2:	20 e0       	ldi	r18, 0x00	; 0
    24b4:	30 e0       	ldi	r19, 0x00	; 0
    24b6:	40 e8       	ldi	r20, 0x80	; 128
    24b8:	5f e3       	ldi	r21, 0x3F	; 63
    24ba:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    24be:	88 23       	and	r24, r24
    24c0:	2c f4       	brge	.+10     	; 0x24cc <LCD_displayCharacter+0x76c>
		__ticks = 1;
    24c2:	81 e0       	ldi	r24, 0x01	; 1
    24c4:	90 e0       	ldi	r25, 0x00	; 0
    24c6:	9e 83       	std	Y+6, r25	; 0x06
    24c8:	8d 83       	std	Y+5, r24	; 0x05
    24ca:	3f c0       	rjmp	.+126    	; 0x254a <LCD_displayCharacter+0x7ea>
	else if (__tmp > 65535)
    24cc:	6f 81       	ldd	r22, Y+7	; 0x07
    24ce:	78 85       	ldd	r23, Y+8	; 0x08
    24d0:	89 85       	ldd	r24, Y+9	; 0x09
    24d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    24d4:	20 e0       	ldi	r18, 0x00	; 0
    24d6:	3f ef       	ldi	r19, 0xFF	; 255
    24d8:	4f e7       	ldi	r20, 0x7F	; 127
    24da:	57 e4       	ldi	r21, 0x47	; 71
    24dc:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    24e0:	18 16       	cp	r1, r24
    24e2:	4c f5       	brge	.+82     	; 0x2536 <LCD_displayCharacter+0x7d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    24e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    24e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    24ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    24ec:	20 e0       	ldi	r18, 0x00	; 0
    24ee:	30 e0       	ldi	r19, 0x00	; 0
    24f0:	40 e2       	ldi	r20, 0x20	; 32
    24f2:	51 e4       	ldi	r21, 0x41	; 65
    24f4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    24f8:	dc 01       	movw	r26, r24
    24fa:	cb 01       	movw	r24, r22
    24fc:	bc 01       	movw	r22, r24
    24fe:	cd 01       	movw	r24, r26
    2500:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2504:	dc 01       	movw	r26, r24
    2506:	cb 01       	movw	r24, r22
    2508:	9e 83       	std	Y+6, r25	; 0x06
    250a:	8d 83       	std	Y+5, r24	; 0x05
    250c:	0f c0       	rjmp	.+30     	; 0x252c <LCD_displayCharacter+0x7cc>
    250e:	88 ec       	ldi	r24, 0xC8	; 200
    2510:	90 e0       	ldi	r25, 0x00	; 0
    2512:	9c 83       	std	Y+4, r25	; 0x04
    2514:	8b 83       	std	Y+3, r24	; 0x03
    2516:	8b 81       	ldd	r24, Y+3	; 0x03
    2518:	9c 81       	ldd	r25, Y+4	; 0x04
    251a:	01 97       	sbiw	r24, 0x01	; 1
    251c:	f1 f7       	brne	.-4      	; 0x251a <LCD_displayCharacter+0x7ba>
    251e:	9c 83       	std	Y+4, r25	; 0x04
    2520:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2522:	8d 81       	ldd	r24, Y+5	; 0x05
    2524:	9e 81       	ldd	r25, Y+6	; 0x06
    2526:	01 97       	sbiw	r24, 0x01	; 1
    2528:	9e 83       	std	Y+6, r25	; 0x06
    252a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    252c:	8d 81       	ldd	r24, Y+5	; 0x05
    252e:	9e 81       	ldd	r25, Y+6	; 0x06
    2530:	00 97       	sbiw	r24, 0x00	; 0
    2532:	69 f7       	brne	.-38     	; 0x250e <LCD_displayCharacter+0x7ae>
    2534:	14 c0       	rjmp	.+40     	; 0x255e <LCD_displayCharacter+0x7fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2536:	6f 81       	ldd	r22, Y+7	; 0x07
    2538:	78 85       	ldd	r23, Y+8	; 0x08
    253a:	89 85       	ldd	r24, Y+9	; 0x09
    253c:	9a 85       	ldd	r25, Y+10	; 0x0a
    253e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2542:	dc 01       	movw	r26, r24
    2544:	cb 01       	movw	r24, r22
    2546:	9e 83       	std	Y+6, r25	; 0x06
    2548:	8d 83       	std	Y+5, r24	; 0x05
    254a:	8d 81       	ldd	r24, Y+5	; 0x05
    254c:	9e 81       	ldd	r25, Y+6	; 0x06
    254e:	9a 83       	std	Y+2, r25	; 0x02
    2550:	89 83       	std	Y+1, r24	; 0x01
    2552:	89 81       	ldd	r24, Y+1	; 0x01
    2554:	9a 81       	ldd	r25, Y+2	; 0x02
    2556:	01 97       	sbiw	r24, 0x01	; 1
    2558:	f1 f7       	brne	.-4      	; 0x2556 <LCD_displayCharacter+0x7f6>
    255a:	9a 83       	std	Y+2, r25	; 0x02
    255c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* Delay for processing Th = 13ns */
}
    255e:	cd 59       	subi	r28, 0x9D	; 157
    2560:	df 4f       	sbci	r29, 0xFF	; 255
    2562:	0f b6       	in	r0, 0x3f	; 63
    2564:	f8 94       	cli
    2566:	de bf       	out	0x3e, r29	; 62
    2568:	0f be       	out	0x3f, r0	; 63
    256a:	cd bf       	out	0x3d, r28	; 61
    256c:	cf 91       	pop	r28
    256e:	df 91       	pop	r29
    2570:	1f 91       	pop	r17
    2572:	0f 91       	pop	r16
    2574:	08 95       	ret

00002576 <LCD_displayString>:

void LCD_displayString(const uint8_t * Str)
{
    2576:	df 93       	push	r29
    2578:	cf 93       	push	r28
    257a:	00 d0       	rcall	.+0      	; 0x257c <LCD_displayString+0x6>
    257c:	0f 92       	push	r0
    257e:	cd b7       	in	r28, 0x3d	; 61
    2580:	de b7       	in	r29, 0x3e	; 62
    2582:	9b 83       	std	Y+3, r25	; 0x03
    2584:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t au8_index = 0;
    2586:	19 82       	std	Y+1, r1	; 0x01
    2588:	0e c0       	rjmp	.+28     	; 0x25a6 <LCD_displayString+0x30>

	while(Str[au8_index] != '\0')
	{
		LCD_displayCharacter(Str[au8_index]);
    258a:	89 81       	ldd	r24, Y+1	; 0x01
    258c:	28 2f       	mov	r18, r24
    258e:	30 e0       	ldi	r19, 0x00	; 0
    2590:	8a 81       	ldd	r24, Y+2	; 0x02
    2592:	9b 81       	ldd	r25, Y+3	; 0x03
    2594:	fc 01       	movw	r30, r24
    2596:	e2 0f       	add	r30, r18
    2598:	f3 1f       	adc	r31, r19
    259a:	80 81       	ld	r24, Z
    259c:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <LCD_displayCharacter>
		au8_index++;
    25a0:	89 81       	ldd	r24, Y+1	; 0x01
    25a2:	8f 5f       	subi	r24, 0xFF	; 255
    25a4:	89 83       	std	Y+1, r24	; 0x01

void LCD_displayString(const uint8_t * Str)
{
	uint8_t au8_index = 0;

	while(Str[au8_index] != '\0')
    25a6:	89 81       	ldd	r24, Y+1	; 0x01
    25a8:	28 2f       	mov	r18, r24
    25aa:	30 e0       	ldi	r19, 0x00	; 0
    25ac:	8a 81       	ldd	r24, Y+2	; 0x02
    25ae:	9b 81       	ldd	r25, Y+3	; 0x03
    25b0:	fc 01       	movw	r30, r24
    25b2:	e2 0f       	add	r30, r18
    25b4:	f3 1f       	adc	r31, r19
    25b6:	80 81       	ld	r24, Z
    25b8:	88 23       	and	r24, r24
    25ba:	39 f7       	brne	.-50     	; 0x258a <LCD_displayString+0x14>
	{
		LCD_displayCharacter(Str[au8_index]);
		au8_index++;
	}
}
    25bc:	0f 90       	pop	r0
    25be:	0f 90       	pop	r0
    25c0:	0f 90       	pop	r0
    25c2:	cf 91       	pop	r28
    25c4:	df 91       	pop	r29
    25c6:	08 95       	ret

000025c8 <LCD_goToRowColumn>:

void LCD_goToRowColumn(uint8_t au8_row, uint8_t au8_col)
{
    25c8:	df 93       	push	r29
    25ca:	cf 93       	push	r28
    25cc:	00 d0       	rcall	.+0      	; 0x25ce <LCD_goToRowColumn+0x6>
    25ce:	00 d0       	rcall	.+0      	; 0x25d0 <LCD_goToRowColumn+0x8>
    25d0:	0f 92       	push	r0
    25d2:	cd b7       	in	r28, 0x3d	; 61
    25d4:	de b7       	in	r29, 0x3e	; 62
    25d6:	8a 83       	std	Y+2, r24	; 0x02
    25d8:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t au8_address;
	
	/* First of all calculate the required address */
	switch(au8_row)
    25da:	8a 81       	ldd	r24, Y+2	; 0x02
    25dc:	28 2f       	mov	r18, r24
    25de:	30 e0       	ldi	r19, 0x00	; 0
    25e0:	3d 83       	std	Y+5, r19	; 0x05
    25e2:	2c 83       	std	Y+4, r18	; 0x04
    25e4:	8c 81       	ldd	r24, Y+4	; 0x04
    25e6:	9d 81       	ldd	r25, Y+5	; 0x05
    25e8:	81 30       	cpi	r24, 0x01	; 1
    25ea:	91 05       	cpc	r25, r1
    25ec:	c1 f0       	breq	.+48     	; 0x261e <LCD_goToRowColumn+0x56>
    25ee:	2c 81       	ldd	r18, Y+4	; 0x04
    25f0:	3d 81       	ldd	r19, Y+5	; 0x05
    25f2:	22 30       	cpi	r18, 0x02	; 2
    25f4:	31 05       	cpc	r19, r1
    25f6:	2c f4       	brge	.+10     	; 0x2602 <LCD_goToRowColumn+0x3a>
    25f8:	8c 81       	ldd	r24, Y+4	; 0x04
    25fa:	9d 81       	ldd	r25, Y+5	; 0x05
    25fc:	00 97       	sbiw	r24, 0x00	; 0
    25fe:	61 f0       	breq	.+24     	; 0x2618 <LCD_goToRowColumn+0x50>
    2600:	19 c0       	rjmp	.+50     	; 0x2634 <LCD_goToRowColumn+0x6c>
    2602:	2c 81       	ldd	r18, Y+4	; 0x04
    2604:	3d 81       	ldd	r19, Y+5	; 0x05
    2606:	22 30       	cpi	r18, 0x02	; 2
    2608:	31 05       	cpc	r19, r1
    260a:	69 f0       	breq	.+26     	; 0x2626 <LCD_goToRowColumn+0x5e>
    260c:	8c 81       	ldd	r24, Y+4	; 0x04
    260e:	9d 81       	ldd	r25, Y+5	; 0x05
    2610:	83 30       	cpi	r24, 0x03	; 3
    2612:	91 05       	cpc	r25, r1
    2614:	61 f0       	breq	.+24     	; 0x262e <LCD_goToRowColumn+0x66>
    2616:	0e c0       	rjmp	.+28     	; 0x2634 <LCD_goToRowColumn+0x6c>
	{
		case 0:
			au8_address = au8_col;
    2618:	8b 81       	ldd	r24, Y+3	; 0x03
    261a:	89 83       	std	Y+1, r24	; 0x01
    261c:	0b c0       	rjmp	.+22     	; 0x2634 <LCD_goToRowColumn+0x6c>
			break;
		case 1:
			au8_address = au8_col + FIRST_ROW;
    261e:	8b 81       	ldd	r24, Y+3	; 0x03
    2620:	80 5c       	subi	r24, 0xC0	; 192
    2622:	89 83       	std	Y+1, r24	; 0x01
    2624:	07 c0       	rjmp	.+14     	; 0x2634 <LCD_goToRowColumn+0x6c>
			break;
		case 2:
			au8_address = au8_col + SECOND_ROW;
    2626:	8b 81       	ldd	r24, Y+3	; 0x03
    2628:	80 5f       	subi	r24, 0xF0	; 240
    262a:	89 83       	std	Y+1, r24	; 0x01
    262c:	03 c0       	rjmp	.+6      	; 0x2634 <LCD_goToRowColumn+0x6c>
			break;
		case 3:
			au8_address = au8_col + THIRD_ROW;
    262e:	8b 81       	ldd	r24, Y+3	; 0x03
    2630:	80 5b       	subi	r24, 0xB0	; 176
    2632:	89 83       	std	Y+1, r24	; 0x01
	}					
	/* 
	 * To write to a specific address in the LCD 
	 * we need to apply the corresponding command 0b10000000+Address 
	 */
	LCD_sendCommand(au8_address | SET_CURSOR_LOCATION);
    2634:	89 81       	ldd	r24, Y+1	; 0x01
    2636:	80 68       	ori	r24, 0x80	; 128
    2638:	0e 94 a5 0a 	call	0x154a	; 0x154a <LCD_sendCommand>
}
    263c:	0f 90       	pop	r0
    263e:	0f 90       	pop	r0
    2640:	0f 90       	pop	r0
    2642:	0f 90       	pop	r0
    2644:	0f 90       	pop	r0
    2646:	cf 91       	pop	r28
    2648:	df 91       	pop	r29
    264a:	08 95       	ret

0000264c <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8_t au8_row, uint8_t au8_col, const char * Str)
{
    264c:	df 93       	push	r29
    264e:	cf 93       	push	r28
    2650:	00 d0       	rcall	.+0      	; 0x2652 <LCD_displayStringRowColumn+0x6>
    2652:	00 d0       	rcall	.+0      	; 0x2654 <LCD_displayStringRowColumn+0x8>
    2654:	cd b7       	in	r28, 0x3d	; 61
    2656:	de b7       	in	r29, 0x3e	; 62
    2658:	89 83       	std	Y+1, r24	; 0x01
    265a:	6a 83       	std	Y+2, r22	; 0x02
    265c:	5c 83       	std	Y+4, r21	; 0x04
    265e:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(au8_row, au8_col); /* Go to to the required LCD position */
    2660:	89 81       	ldd	r24, Y+1	; 0x01
    2662:	6a 81       	ldd	r22, Y+2	; 0x02
    2664:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <LCD_goToRowColumn>
	LCD_displayString(Str); 	 /* Display the string */
    2668:	8b 81       	ldd	r24, Y+3	; 0x03
    266a:	9c 81       	ldd	r25, Y+4	; 0x04
    266c:	0e 94 bb 12 	call	0x2576	; 0x2576 <LCD_displayString>
}
    2670:	0f 90       	pop	r0
    2672:	0f 90       	pop	r0
    2674:	0f 90       	pop	r0
    2676:	0f 90       	pop	r0
    2678:	cf 91       	pop	r28
    267a:	df 91       	pop	r29
    267c:	08 95       	ret

0000267e <LCD_intgerToString>:

void LCD_intgerToString(int32_t s32_data)
{
    267e:	df 93       	push	r29
    2680:	cf 93       	push	r28
    2682:	cd b7       	in	r28, 0x3d	; 61
    2684:	de b7       	in	r29, 0x3e	; 62
    2686:	64 97       	sbiw	r28, 0x14	; 20
    2688:	0f b6       	in	r0, 0x3f	; 63
    268a:	f8 94       	cli
    268c:	de bf       	out	0x3e, r29	; 62
    268e:	0f be       	out	0x3f, r0	; 63
    2690:	cd bf       	out	0x3d, r28	; 61
    2692:	69 8b       	std	Y+17, r22	; 0x11
    2694:	7a 8b       	std	Y+18, r23	; 0x12
    2696:	8b 8b       	std	Y+19, r24	; 0x13
    2698:	9c 8b       	std	Y+20, r25	; 0x14
   char buff[16]; 	   /* String to hold the ASCII result */
   itoa(s32_data,buff,10); /* 10 for decimal */
    269a:	89 89       	ldd	r24, Y+17	; 0x11
    269c:	9a 89       	ldd	r25, Y+18	; 0x12
    269e:	9e 01       	movw	r18, r28
    26a0:	2f 5f       	subi	r18, 0xFF	; 255
    26a2:	3f 4f       	sbci	r19, 0xFF	; 255
    26a4:	b9 01       	movw	r22, r18
    26a6:	4a e0       	ldi	r20, 0x0A	; 10
    26a8:	50 e0       	ldi	r21, 0x00	; 0
    26aa:	0e 94 41 14 	call	0x2882	; 0x2882 <itoa>
   LCD_displayString(buff);
    26ae:	ce 01       	movw	r24, r28
    26b0:	01 96       	adiw	r24, 0x01	; 1
    26b2:	0e 94 bb 12 	call	0x2576	; 0x2576 <LCD_displayString>
}
    26b6:	64 96       	adiw	r28, 0x14	; 20
    26b8:	0f b6       	in	r0, 0x3f	; 63
    26ba:	f8 94       	cli
    26bc:	de bf       	out	0x3e, r29	; 62
    26be:	0f be       	out	0x3f, r0	; 63
    26c0:	cd bf       	out	0x3d, r28	; 61
    26c2:	cf 91       	pop	r28
    26c4:	df 91       	pop	r29
    26c6:	08 95       	ret

000026c8 <LCD_clearScreen>:

void LCD_clearScreen(void)
{
    26c8:	df 93       	push	r29
    26ca:	cf 93       	push	r28
    26cc:	cd b7       	in	r28, 0x3d	; 61
    26ce:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND); /* Clear display */
    26d0:	81 e0       	ldi	r24, 0x01	; 1
    26d2:	0e 94 a5 0a 	call	0x154a	; 0x154a <LCD_sendCommand>
}
    26d6:	cf 91       	pop	r28
    26d8:	df 91       	pop	r29
    26da:	08 95       	ret

000026dc <App_init>:
 * [in/out]	  None
 *
 * [Returns]:     None
 *******************************************************************************/
void App_init(void)
{
    26dc:	df 93       	push	r29
    26de:	cf 93       	push	r28
    26e0:	cd b7       	in	r28, 0x3d	; 61
    26e2:	de b7       	in	r29, 0x3e	; 62
    26e4:	2e 97       	sbiw	r28, 0x0e	; 14
    26e6:	0f b6       	in	r0, 0x3f	; 63
    26e8:	f8 94       	cli
    26ea:	de bf       	out	0x3e, r29	; 62
    26ec:	0f be       	out	0x3f, r0	; 63
    26ee:	cd bf       	out	0x3d, r28	; 61
	LCD_init();	/* LCD Initialization */
    26f0:	0e 94 6f 0a 	call	0x14de	; 0x14de <LCD_init>
	LCD_displayStringRowColumn(0, 0, "Hello Sprints!!!");
    26f4:	20 e6       	ldi	r18, 0x60	; 96
    26f6:	30 e0       	ldi	r19, 0x00	; 0
    26f8:	80 e0       	ldi	r24, 0x00	; 0
    26fa:	60 e0       	ldi	r22, 0x00	; 0
    26fc:	a9 01       	movw	r20, r18
    26fe:	0e 94 26 13 	call	0x264c	; 0x264c <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1, 0, "4 Bits Data Mode");
    2702:	21 e7       	ldi	r18, 0x71	; 113
    2704:	30 e0       	ldi	r19, 0x00	; 0
    2706:	81 e0       	ldi	r24, 0x01	; 1
    2708:	60 e0       	ldi	r22, 0x00	; 0
    270a:	a9 01       	movw	r20, r18
    270c:	0e 94 26 13 	call	0x264c	; 0x264c <LCD_displayStringRowColumn>
    2710:	80 e0       	ldi	r24, 0x00	; 0
    2712:	90 e8       	ldi	r25, 0x80	; 128
    2714:	ab e3       	ldi	r26, 0x3B	; 59
    2716:	b5 e4       	ldi	r27, 0x45	; 69
    2718:	8b 87       	std	Y+11, r24	; 0x0b
    271a:	9c 87       	std	Y+12, r25	; 0x0c
    271c:	ad 87       	std	Y+13, r26	; 0x0d
    271e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2720:	6b 85       	ldd	r22, Y+11	; 0x0b
    2722:	7c 85       	ldd	r23, Y+12	; 0x0c
    2724:	8d 85       	ldd	r24, Y+13	; 0x0d
    2726:	9e 85       	ldd	r25, Y+14	; 0x0e
    2728:	20 e0       	ldi	r18, 0x00	; 0
    272a:	30 e0       	ldi	r19, 0x00	; 0
    272c:	4a ef       	ldi	r20, 0xFA	; 250
    272e:	54 e4       	ldi	r21, 0x44	; 68
    2730:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2734:	dc 01       	movw	r26, r24
    2736:	cb 01       	movw	r24, r22
    2738:	8f 83       	std	Y+7, r24	; 0x07
    273a:	98 87       	std	Y+8, r25	; 0x08
    273c:	a9 87       	std	Y+9, r26	; 0x09
    273e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2740:	6f 81       	ldd	r22, Y+7	; 0x07
    2742:	78 85       	ldd	r23, Y+8	; 0x08
    2744:	89 85       	ldd	r24, Y+9	; 0x09
    2746:	9a 85       	ldd	r25, Y+10	; 0x0a
    2748:	20 e0       	ldi	r18, 0x00	; 0
    274a:	30 e0       	ldi	r19, 0x00	; 0
    274c:	40 e8       	ldi	r20, 0x80	; 128
    274e:	5f e3       	ldi	r21, 0x3F	; 63
    2750:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2754:	88 23       	and	r24, r24
    2756:	2c f4       	brge	.+10     	; 0x2762 <App_init+0x86>
		__ticks = 1;
    2758:	81 e0       	ldi	r24, 0x01	; 1
    275a:	90 e0       	ldi	r25, 0x00	; 0
    275c:	9e 83       	std	Y+6, r25	; 0x06
    275e:	8d 83       	std	Y+5, r24	; 0x05
    2760:	3f c0       	rjmp	.+126    	; 0x27e0 <App_init+0x104>
	else if (__tmp > 65535)
    2762:	6f 81       	ldd	r22, Y+7	; 0x07
    2764:	78 85       	ldd	r23, Y+8	; 0x08
    2766:	89 85       	ldd	r24, Y+9	; 0x09
    2768:	9a 85       	ldd	r25, Y+10	; 0x0a
    276a:	20 e0       	ldi	r18, 0x00	; 0
    276c:	3f ef       	ldi	r19, 0xFF	; 255
    276e:	4f e7       	ldi	r20, 0x7F	; 127
    2770:	57 e4       	ldi	r21, 0x47	; 71
    2772:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2776:	18 16       	cp	r1, r24
    2778:	4c f5       	brge	.+82     	; 0x27cc <App_init+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    277a:	6b 85       	ldd	r22, Y+11	; 0x0b
    277c:	7c 85       	ldd	r23, Y+12	; 0x0c
    277e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2780:	9e 85       	ldd	r25, Y+14	; 0x0e
    2782:	20 e0       	ldi	r18, 0x00	; 0
    2784:	30 e0       	ldi	r19, 0x00	; 0
    2786:	40 e2       	ldi	r20, 0x20	; 32
    2788:	51 e4       	ldi	r21, 0x41	; 65
    278a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    278e:	dc 01       	movw	r26, r24
    2790:	cb 01       	movw	r24, r22
    2792:	bc 01       	movw	r22, r24
    2794:	cd 01       	movw	r24, r26
    2796:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    279a:	dc 01       	movw	r26, r24
    279c:	cb 01       	movw	r24, r22
    279e:	9e 83       	std	Y+6, r25	; 0x06
    27a0:	8d 83       	std	Y+5, r24	; 0x05
    27a2:	0f c0       	rjmp	.+30     	; 0x27c2 <App_init+0xe6>
    27a4:	88 ec       	ldi	r24, 0xC8	; 200
    27a6:	90 e0       	ldi	r25, 0x00	; 0
    27a8:	9c 83       	std	Y+4, r25	; 0x04
    27aa:	8b 83       	std	Y+3, r24	; 0x03
    27ac:	8b 81       	ldd	r24, Y+3	; 0x03
    27ae:	9c 81       	ldd	r25, Y+4	; 0x04
    27b0:	01 97       	sbiw	r24, 0x01	; 1
    27b2:	f1 f7       	brne	.-4      	; 0x27b0 <App_init+0xd4>
    27b4:	9c 83       	std	Y+4, r25	; 0x04
    27b6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27b8:	8d 81       	ldd	r24, Y+5	; 0x05
    27ba:	9e 81       	ldd	r25, Y+6	; 0x06
    27bc:	01 97       	sbiw	r24, 0x01	; 1
    27be:	9e 83       	std	Y+6, r25	; 0x06
    27c0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27c2:	8d 81       	ldd	r24, Y+5	; 0x05
    27c4:	9e 81       	ldd	r25, Y+6	; 0x06
    27c6:	00 97       	sbiw	r24, 0x00	; 0
    27c8:	69 f7       	brne	.-38     	; 0x27a4 <App_init+0xc8>
    27ca:	14 c0       	rjmp	.+40     	; 0x27f4 <App_init+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27cc:	6f 81       	ldd	r22, Y+7	; 0x07
    27ce:	78 85       	ldd	r23, Y+8	; 0x08
    27d0:	89 85       	ldd	r24, Y+9	; 0x09
    27d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    27d4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    27d8:	dc 01       	movw	r26, r24
    27da:	cb 01       	movw	r24, r22
    27dc:	9e 83       	std	Y+6, r25	; 0x06
    27de:	8d 83       	std	Y+5, r24	; 0x05
    27e0:	8d 81       	ldd	r24, Y+5	; 0x05
    27e2:	9e 81       	ldd	r25, Y+6	; 0x06
    27e4:	9a 83       	std	Y+2, r25	; 0x02
    27e6:	89 83       	std	Y+1, r24	; 0x01
    27e8:	89 81       	ldd	r24, Y+1	; 0x01
    27ea:	9a 81       	ldd	r25, Y+2	; 0x02
    27ec:	01 97       	sbiw	r24, 0x01	; 1
    27ee:	f1 f7       	brne	.-4      	; 0x27ec <App_init+0x110>
    27f0:	9a 83       	std	Y+2, r25	; 0x02
    27f2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(3000); /* Display Time */
}
    27f4:	2e 96       	adiw	r28, 0x0e	; 14
    27f6:	0f b6       	in	r0, 0x3f	; 63
    27f8:	f8 94       	cli
    27fa:	de bf       	out	0x3e, r29	; 62
    27fc:	0f be       	out	0x3f, r0	; 63
    27fe:	cd bf       	out	0x3d, r28	; 61
    2800:	cf 91       	pop	r28
    2802:	df 91       	pop	r29
    2804:	08 95       	ret

00002806 <main>:
/*****************************************************************************************
 *                                MAIN FUNCTION                                          *
 *****************************************************************************************/

int main(void)
{
    2806:	df 93       	push	r29
    2808:	cf 93       	push	r28
    280a:	cd b7       	in	r28, 0x3d	; 61
    280c:	de b7       	in	r29, 0x3e	; 62
	/********************************************************************************
	 *                           SYSTEM INITIALIZATION                              *
	 ********************************************************************************/

	App_init();	/* Test LCD in simple application */
    280e:	0e 94 6e 13 	call	0x26dc	; 0x26dc <App_init>
    2812:	ff cf       	rjmp	.-2      	; 0x2812 <main+0xc>

00002814 <__prologue_saves__>:
    2814:	2f 92       	push	r2
    2816:	3f 92       	push	r3
    2818:	4f 92       	push	r4
    281a:	5f 92       	push	r5
    281c:	6f 92       	push	r6
    281e:	7f 92       	push	r7
    2820:	8f 92       	push	r8
    2822:	9f 92       	push	r9
    2824:	af 92       	push	r10
    2826:	bf 92       	push	r11
    2828:	cf 92       	push	r12
    282a:	df 92       	push	r13
    282c:	ef 92       	push	r14
    282e:	ff 92       	push	r15
    2830:	0f 93       	push	r16
    2832:	1f 93       	push	r17
    2834:	cf 93       	push	r28
    2836:	df 93       	push	r29
    2838:	cd b7       	in	r28, 0x3d	; 61
    283a:	de b7       	in	r29, 0x3e	; 62
    283c:	ca 1b       	sub	r28, r26
    283e:	db 0b       	sbc	r29, r27
    2840:	0f b6       	in	r0, 0x3f	; 63
    2842:	f8 94       	cli
    2844:	de bf       	out	0x3e, r29	; 62
    2846:	0f be       	out	0x3f, r0	; 63
    2848:	cd bf       	out	0x3d, r28	; 61
    284a:	09 94       	ijmp

0000284c <__epilogue_restores__>:
    284c:	2a 88       	ldd	r2, Y+18	; 0x12
    284e:	39 88       	ldd	r3, Y+17	; 0x11
    2850:	48 88       	ldd	r4, Y+16	; 0x10
    2852:	5f 84       	ldd	r5, Y+15	; 0x0f
    2854:	6e 84       	ldd	r6, Y+14	; 0x0e
    2856:	7d 84       	ldd	r7, Y+13	; 0x0d
    2858:	8c 84       	ldd	r8, Y+12	; 0x0c
    285a:	9b 84       	ldd	r9, Y+11	; 0x0b
    285c:	aa 84       	ldd	r10, Y+10	; 0x0a
    285e:	b9 84       	ldd	r11, Y+9	; 0x09
    2860:	c8 84       	ldd	r12, Y+8	; 0x08
    2862:	df 80       	ldd	r13, Y+7	; 0x07
    2864:	ee 80       	ldd	r14, Y+6	; 0x06
    2866:	fd 80       	ldd	r15, Y+5	; 0x05
    2868:	0c 81       	ldd	r16, Y+4	; 0x04
    286a:	1b 81       	ldd	r17, Y+3	; 0x03
    286c:	aa 81       	ldd	r26, Y+2	; 0x02
    286e:	b9 81       	ldd	r27, Y+1	; 0x01
    2870:	ce 0f       	add	r28, r30
    2872:	d1 1d       	adc	r29, r1
    2874:	0f b6       	in	r0, 0x3f	; 63
    2876:	f8 94       	cli
    2878:	de bf       	out	0x3e, r29	; 62
    287a:	0f be       	out	0x3f, r0	; 63
    287c:	cd bf       	out	0x3d, r28	; 61
    287e:	ed 01       	movw	r28, r26
    2880:	08 95       	ret

00002882 <itoa>:
    2882:	fb 01       	movw	r30, r22
    2884:	9f 01       	movw	r18, r30
    2886:	e8 94       	clt
    2888:	42 30       	cpi	r20, 0x02	; 2
    288a:	c4 f0       	brlt	.+48     	; 0x28bc <itoa+0x3a>
    288c:	45 32       	cpi	r20, 0x25	; 37
    288e:	b4 f4       	brge	.+44     	; 0x28bc <itoa+0x3a>
    2890:	4a 30       	cpi	r20, 0x0A	; 10
    2892:	29 f4       	brne	.+10     	; 0x289e <itoa+0x1c>
    2894:	97 fb       	bst	r25, 7
    2896:	1e f4       	brtc	.+6      	; 0x289e <itoa+0x1c>
    2898:	90 95       	com	r25
    289a:	81 95       	neg	r24
    289c:	9f 4f       	sbci	r25, 0xFF	; 255
    289e:	64 2f       	mov	r22, r20
    28a0:	77 27       	eor	r23, r23
    28a2:	0e 94 72 14 	call	0x28e4	; 0x28e4 <__udivmodhi4>
    28a6:	80 5d       	subi	r24, 0xD0	; 208
    28a8:	8a 33       	cpi	r24, 0x3A	; 58
    28aa:	0c f0       	brlt	.+2      	; 0x28ae <itoa+0x2c>
    28ac:	89 5d       	subi	r24, 0xD9	; 217
    28ae:	81 93       	st	Z+, r24
    28b0:	cb 01       	movw	r24, r22
    28b2:	00 97       	sbiw	r24, 0x00	; 0
    28b4:	a1 f7       	brne	.-24     	; 0x289e <itoa+0x1c>
    28b6:	16 f4       	brtc	.+4      	; 0x28bc <itoa+0x3a>
    28b8:	5d e2       	ldi	r21, 0x2D	; 45
    28ba:	51 93       	st	Z+, r21
    28bc:	10 82       	st	Z, r1
    28be:	c9 01       	movw	r24, r18
    28c0:	0c 94 62 14 	jmp	0x28c4	; 0x28c4 <strrev>

000028c4 <strrev>:
    28c4:	dc 01       	movw	r26, r24
    28c6:	fc 01       	movw	r30, r24
    28c8:	67 2f       	mov	r22, r23
    28ca:	71 91       	ld	r23, Z+
    28cc:	77 23       	and	r23, r23
    28ce:	e1 f7       	brne	.-8      	; 0x28c8 <strrev+0x4>
    28d0:	32 97       	sbiw	r30, 0x02	; 2
    28d2:	04 c0       	rjmp	.+8      	; 0x28dc <strrev+0x18>
    28d4:	7c 91       	ld	r23, X
    28d6:	6d 93       	st	X+, r22
    28d8:	70 83       	st	Z, r23
    28da:	62 91       	ld	r22, -Z
    28dc:	ae 17       	cp	r26, r30
    28de:	bf 07       	cpc	r27, r31
    28e0:	c8 f3       	brcs	.-14     	; 0x28d4 <strrev+0x10>
    28e2:	08 95       	ret

000028e4 <__udivmodhi4>:
    28e4:	aa 1b       	sub	r26, r26
    28e6:	bb 1b       	sub	r27, r27
    28e8:	51 e1       	ldi	r21, 0x11	; 17
    28ea:	07 c0       	rjmp	.+14     	; 0x28fa <__udivmodhi4_ep>

000028ec <__udivmodhi4_loop>:
    28ec:	aa 1f       	adc	r26, r26
    28ee:	bb 1f       	adc	r27, r27
    28f0:	a6 17       	cp	r26, r22
    28f2:	b7 07       	cpc	r27, r23
    28f4:	10 f0       	brcs	.+4      	; 0x28fa <__udivmodhi4_ep>
    28f6:	a6 1b       	sub	r26, r22
    28f8:	b7 0b       	sbc	r27, r23

000028fa <__udivmodhi4_ep>:
    28fa:	88 1f       	adc	r24, r24
    28fc:	99 1f       	adc	r25, r25
    28fe:	5a 95       	dec	r21
    2900:	a9 f7       	brne	.-22     	; 0x28ec <__udivmodhi4_loop>
    2902:	80 95       	com	r24
    2904:	90 95       	com	r25
    2906:	bc 01       	movw	r22, r24
    2908:	cd 01       	movw	r24, r26
    290a:	08 95       	ret

0000290c <_exit>:
    290c:	f8 94       	cli

0000290e <__stop_program>:
    290e:	ff cf       	rjmp	.-2      	; 0x290e <__stop_program>
