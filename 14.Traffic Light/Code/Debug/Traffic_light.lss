
Traffic_light.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001092  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000052  00800060  00001092  00001126  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  008000b2  008000b2  00001178  2**0
                  ALLOC
  3 .stab         00001b78  00000000  00000000  00001178  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000174b  00000000  00000000  00002cf0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e9       	ldi	r30, 0x92	; 146
      68:	f0 e1       	ldi	r31, 0x10	; 16
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 3b       	cpi	r26, 0xB2	; 178
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a2 eb       	ldi	r26, 0xB2	; 178
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 3c       	cpi	r26, 0xC6	; 198
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 13 08 	call	0x1026	; 0x1026 <main>
      8a:	0c 94 47 08 	jmp	0x108e	; 0x108e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <UART_init>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 ******************************************************************************************/
void UART_init(const UART_ConfigType * Config_Ptr)
{
      92:	0f 93       	push	r16
      94:	1f 93       	push	r17
      96:	df 93       	push	r29
      98:	cf 93       	push	r28
      9a:	00 d0       	rcall	.+0      	; 0x9c <UART_init+0xa>
      9c:	00 d0       	rcall	.+0      	; 0x9e <UART_init+0xc>
      9e:	cd b7       	in	r28, 0x3d	; 61
      a0:	de b7       	in	r29, 0x3e	; 62
      a2:	9a 83       	std	Y+2, r25	; 0x02
      a4:	89 83       	std	Y+1, r24	; 0x01
	/* Insert the required Mode in U2X bit in UCSRA Register */
	UCSRA = (UCSRA & 0xFD) | ( (Config_Ptr -> uart_Mode) << 1);
      a6:	ab e2       	ldi	r26, 0x2B	; 43
      a8:	b0 e0       	ldi	r27, 0x00	; 0
      aa:	eb e2       	ldi	r30, 0x2B	; 43
      ac:	f0 e0       	ldi	r31, 0x00	; 0
      ae:	80 81       	ld	r24, Z
      b0:	28 2f       	mov	r18, r24
      b2:	2d 7f       	andi	r18, 0xFD	; 253
      b4:	e9 81       	ldd	r30, Y+1	; 0x01
      b6:	fa 81       	ldd	r31, Y+2	; 0x02
      b8:	84 81       	ldd	r24, Z+4	; 0x04
      ba:	88 2f       	mov	r24, r24
      bc:	90 e0       	ldi	r25, 0x00	; 0
      be:	88 0f       	add	r24, r24
      c0:	99 1f       	adc	r25, r25
      c2:	82 2b       	or	r24, r18
      c4:	8c 93       	st	X, r24

	/* In Case of Nine Bit Data */
	if(Config_Ptr -> uart_DataBits == NINE_BITS)
      c6:	e9 81       	ldd	r30, Y+1	; 0x01
      c8:	fa 81       	ldd	r31, Y+2	; 0x02
      ca:	85 81       	ldd	r24, Z+5	; 0x05
      cc:	87 30       	cpi	r24, 0x07	; 7
      ce:	a1 f4       	brne	.+40     	; 0xf8 <UART_init+0x66>
	{
		/* Insert the last bit of required data bits in bit UCSZ2 in UCSRB Register */
		UCSRB = (UCSRB & 0xFB) | ( (Config_Ptr -> uart_DataBits) & 0x04);
      d0:	aa e2       	ldi	r26, 0x2A	; 42
      d2:	b0 e0       	ldi	r27, 0x00	; 0
      d4:	ea e2       	ldi	r30, 0x2A	; 42
      d6:	f0 e0       	ldi	r31, 0x00	; 0
      d8:	80 81       	ld	r24, Z
      da:	98 2f       	mov	r25, r24
      dc:	9b 7f       	andi	r25, 0xFB	; 251
      de:	e9 81       	ldd	r30, Y+1	; 0x01
      e0:	fa 81       	ldd	r31, Y+2	; 0x02
      e2:	85 81       	ldd	r24, Z+5	; 0x05
      e4:	84 70       	andi	r24, 0x04	; 4
      e6:	89 2b       	or	r24, r25
      e8:	8c 93       	st	X, r24

		/* Two bits RXB8 & TXB8 must be Enabled in UCSRB Register */
		UCSRB |= (1 << RXB8) | (1 << TXB8);
      ea:	aa e2       	ldi	r26, 0x2A	; 42
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	ea e2       	ldi	r30, 0x2A	; 42
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	80 81       	ld	r24, Z
      f4:	83 60       	ori	r24, 0x03	; 3
      f6:	8c 93       	st	X, r24

	/*
	 * Enable Transmitter & Receiver to be able to transmit and receive thought
	 * the UART driver
	 */
	UCSRB |= (1 << RXEN) | (1 << TXEN);
      f8:	aa e2       	ldi	r26, 0x2A	; 42
      fa:	b0 e0       	ldi	r27, 0x00	; 0
      fc:	ea e2       	ldi	r30, 0x2A	; 42
      fe:	f0 e0       	ldi	r31, 0x00	; 0
     100:	80 81       	ld	r24, Z
     102:	88 61       	ori	r24, 0x18	; 24
     104:	8c 93       	st	X, r24

	/* URSEL must be one when writing the UCSRC */
	UCSRC |= (1 << URSEL);
     106:	a0 e4       	ldi	r26, 0x40	; 64
     108:	b0 e0       	ldi	r27, 0x00	; 0
     10a:	e0 e4       	ldi	r30, 0x40	; 64
     10c:	f0 e0       	ldi	r31, 0x00	; 0
     10e:	80 81       	ld	r24, Z
     110:	80 68       	ori	r24, 0x80	; 128
     112:	8c 93       	st	X, r24

	/*
	 * Insert the First two bits of required data bits in bits (UCSZ0, UCSZ1)
	 * in UCSRC Register in case of (5,6,7 or 8) Data bits
	 */
	UCSRC = (UCSRC & 0xF9) | ( (Config_Ptr -> uart_DataBits & 0x03) << 1);
     114:	a0 e4       	ldi	r26, 0x40	; 64
     116:	b0 e0       	ldi	r27, 0x00	; 0
     118:	e0 e4       	ldi	r30, 0x40	; 64
     11a:	f0 e0       	ldi	r31, 0x00	; 0
     11c:	80 81       	ld	r24, Z
     11e:	28 2f       	mov	r18, r24
     120:	29 7f       	andi	r18, 0xF9	; 249
     122:	e9 81       	ldd	r30, Y+1	; 0x01
     124:	fa 81       	ldd	r31, Y+2	; 0x02
     126:	85 81       	ldd	r24, Z+5	; 0x05
     128:	88 2f       	mov	r24, r24
     12a:	90 e0       	ldi	r25, 0x00	; 0
     12c:	83 70       	andi	r24, 0x03	; 3
     12e:	90 70       	andi	r25, 0x00	; 0
     130:	88 0f       	add	r24, r24
     132:	99 1f       	adc	r25, r25
     134:	82 2b       	or	r24, r18
     136:	8c 93       	st	X, r24

	/* Insert the required parity type in bits (UPM0, UPM1) in UCSRC Register */
	UCSRC = (UCSRC & 0xCF) | ( (Config_Ptr -> uart_Parity) << 4);
     138:	a0 e4       	ldi	r26, 0x40	; 64
     13a:	b0 e0       	ldi	r27, 0x00	; 0
     13c:	e0 e4       	ldi	r30, 0x40	; 64
     13e:	f0 e0       	ldi	r31, 0x00	; 0
     140:	80 81       	ld	r24, Z
     142:	28 2f       	mov	r18, r24
     144:	2f 7c       	andi	r18, 0xCF	; 207
     146:	e9 81       	ldd	r30, Y+1	; 0x01
     148:	fa 81       	ldd	r31, Y+2	; 0x02
     14a:	86 81       	ldd	r24, Z+6	; 0x06
     14c:	88 2f       	mov	r24, r24
     14e:	90 e0       	ldi	r25, 0x00	; 0
     150:	82 95       	swap	r24
     152:	92 95       	swap	r25
     154:	90 7f       	andi	r25, 0xF0	; 240
     156:	98 27       	eor	r25, r24
     158:	80 7f       	andi	r24, 0xF0	; 240
     15a:	98 27       	eor	r25, r24
     15c:	82 2b       	or	r24, r18
     15e:	8c 93       	st	X, r24

	/* Insert the required number of stop bit(s) in bit USBS in UCSRC Register */
	UCSRC = (UCSRC & 0xF7) | ( (Config_Ptr -> uart_StopBit) << 3);
     160:	a0 e4       	ldi	r26, 0x40	; 64
     162:	b0 e0       	ldi	r27, 0x00	; 0
     164:	e0 e4       	ldi	r30, 0x40	; 64
     166:	f0 e0       	ldi	r31, 0x00	; 0
     168:	80 81       	ld	r24, Z
     16a:	28 2f       	mov	r18, r24
     16c:	27 7f       	andi	r18, 0xF7	; 247
     16e:	e9 81       	ldd	r30, Y+1	; 0x01
     170:	fa 81       	ldd	r31, Y+2	; 0x02
     172:	87 81       	ldd	r24, Z+7	; 0x07
     174:	88 2f       	mov	r24, r24
     176:	90 e0       	ldi	r25, 0x00	; 0
     178:	88 0f       	add	r24, r24
     17a:	99 1f       	adc	r25, r25
     17c:	88 0f       	add	r24, r24
     17e:	99 1f       	adc	r25, r25
     180:	88 0f       	add	r24, r24
     182:	99 1f       	adc	r25, r25
     184:	82 2b       	or	r24, r18
     186:	8c 93       	st	X, r24
	/*
	 * This switch case is to choose between two Modes (Normal, Double Speed),
	 * then calculate and insert the required Baud rate in First 8 bits from the
	 * BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH
	 */
	switch(Config_Ptr -> uart_Mode)
     188:	e9 81       	ldd	r30, Y+1	; 0x01
     18a:	fa 81       	ldd	r31, Y+2	; 0x02
     18c:	84 81       	ldd	r24, Z+4	; 0x04
     18e:	28 2f       	mov	r18, r24
     190:	30 e0       	ldi	r19, 0x00	; 0
     192:	3c 83       	std	Y+4, r19	; 0x04
     194:	2b 83       	std	Y+3, r18	; 0x03
     196:	8b 81       	ldd	r24, Y+3	; 0x03
     198:	9c 81       	ldd	r25, Y+4	; 0x04
     19a:	00 97       	sbiw	r24, 0x00	; 0
     19c:	39 f0       	breq	.+14     	; 0x1ac <UART_init+0x11a>
     19e:	eb 81       	ldd	r30, Y+3	; 0x03
     1a0:	fc 81       	ldd	r31, Y+4	; 0x04
     1a2:	e1 30       	cpi	r30, 0x01	; 1
     1a4:	f1 05       	cpc	r31, r1
     1a6:	09 f4       	brne	.+2      	; 0x1aa <UART_init+0x118>
     1a8:	56 c0       	rjmp	.+172    	; 0x256 <UART_init+0x1c4>
     1aa:	a1 c0       	rjmp	.+322    	; 0x2ee <UART_init+0x25c>
	{
	case NORMAL_SPEED:	UBRRH = ( (((F_CPU / (Config_Ptr -> uart_BaudRate * 16UL))) - 1) >> 8 );
     1ac:	00 e4       	ldi	r16, 0x40	; 64
     1ae:	10 e0       	ldi	r17, 0x00	; 0
     1b0:	e9 81       	ldd	r30, Y+1	; 0x01
     1b2:	fa 81       	ldd	r31, Y+2	; 0x02
     1b4:	80 81       	ld	r24, Z
     1b6:	91 81       	ldd	r25, Z+1	; 0x01
     1b8:	a2 81       	ldd	r26, Z+2	; 0x02
     1ba:	b3 81       	ldd	r27, Z+3	; 0x03
     1bc:	88 0f       	add	r24, r24
     1be:	99 1f       	adc	r25, r25
     1c0:	aa 1f       	adc	r26, r26
     1c2:	bb 1f       	adc	r27, r27
     1c4:	88 0f       	add	r24, r24
     1c6:	99 1f       	adc	r25, r25
     1c8:	aa 1f       	adc	r26, r26
     1ca:	bb 1f       	adc	r27, r27
     1cc:	88 0f       	add	r24, r24
     1ce:	99 1f       	adc	r25, r25
     1d0:	aa 1f       	adc	r26, r26
     1d2:	bb 1f       	adc	r27, r27
     1d4:	88 0f       	add	r24, r24
     1d6:	99 1f       	adc	r25, r25
     1d8:	aa 1f       	adc	r26, r26
     1da:	bb 1f       	adc	r27, r27
     1dc:	9c 01       	movw	r18, r24
     1de:	ad 01       	movw	r20, r26
     1e0:	80 e0       	ldi	r24, 0x00	; 0
     1e2:	92 e1       	ldi	r25, 0x12	; 18
     1e4:	aa e7       	ldi	r26, 0x7A	; 122
     1e6:	b0 e0       	ldi	r27, 0x00	; 0
     1e8:	bc 01       	movw	r22, r24
     1ea:	cd 01       	movw	r24, r26
     1ec:	0e 94 1c 08 	call	0x1038	; 0x1038 <__udivmodsi4>
     1f0:	da 01       	movw	r26, r20
     1f2:	c9 01       	movw	r24, r18
     1f4:	01 97       	sbiw	r24, 0x01	; 1
     1f6:	a1 09       	sbc	r26, r1
     1f8:	b1 09       	sbc	r27, r1
     1fa:	89 2f       	mov	r24, r25
     1fc:	9a 2f       	mov	r25, r26
     1fe:	ab 2f       	mov	r26, r27
     200:	bb 27       	eor	r27, r27
     202:	f8 01       	movw	r30, r16
     204:	80 83       	st	Z, r24
						UBRRL = ( ((F_CPU / (Config_Ptr -> uart_BaudRate * 16UL))) - 1 );
     206:	09 e2       	ldi	r16, 0x29	; 41
     208:	10 e0       	ldi	r17, 0x00	; 0
     20a:	e9 81       	ldd	r30, Y+1	; 0x01
     20c:	fa 81       	ldd	r31, Y+2	; 0x02
     20e:	80 81       	ld	r24, Z
     210:	91 81       	ldd	r25, Z+1	; 0x01
     212:	a2 81       	ldd	r26, Z+2	; 0x02
     214:	b3 81       	ldd	r27, Z+3	; 0x03
     216:	88 0f       	add	r24, r24
     218:	99 1f       	adc	r25, r25
     21a:	aa 1f       	adc	r26, r26
     21c:	bb 1f       	adc	r27, r27
     21e:	88 0f       	add	r24, r24
     220:	99 1f       	adc	r25, r25
     222:	aa 1f       	adc	r26, r26
     224:	bb 1f       	adc	r27, r27
     226:	88 0f       	add	r24, r24
     228:	99 1f       	adc	r25, r25
     22a:	aa 1f       	adc	r26, r26
     22c:	bb 1f       	adc	r27, r27
     22e:	88 0f       	add	r24, r24
     230:	99 1f       	adc	r25, r25
     232:	aa 1f       	adc	r26, r26
     234:	bb 1f       	adc	r27, r27
     236:	9c 01       	movw	r18, r24
     238:	ad 01       	movw	r20, r26
     23a:	80 e0       	ldi	r24, 0x00	; 0
     23c:	92 e1       	ldi	r25, 0x12	; 18
     23e:	aa e7       	ldi	r26, 0x7A	; 122
     240:	b0 e0       	ldi	r27, 0x00	; 0
     242:	bc 01       	movw	r22, r24
     244:	cd 01       	movw	r24, r26
     246:	0e 94 1c 08 	call	0x1038	; 0x1038 <__udivmodsi4>
     24a:	da 01       	movw	r26, r20
     24c:	c9 01       	movw	r24, r18
     24e:	81 50       	subi	r24, 0x01	; 1
     250:	f8 01       	movw	r30, r16
     252:	80 83       	st	Z, r24
     254:	4c c0       	rjmp	.+152    	; 0x2ee <UART_init+0x25c>
						break;

	case DOUBLE_SPEED:	UBRRH = ( (((F_CPU / (Config_Ptr -> uart_BaudRate * 8UL))) - 1) >> 8 );
     256:	00 e4       	ldi	r16, 0x40	; 64
     258:	10 e0       	ldi	r17, 0x00	; 0
     25a:	e9 81       	ldd	r30, Y+1	; 0x01
     25c:	fa 81       	ldd	r31, Y+2	; 0x02
     25e:	80 81       	ld	r24, Z
     260:	91 81       	ldd	r25, Z+1	; 0x01
     262:	a2 81       	ldd	r26, Z+2	; 0x02
     264:	b3 81       	ldd	r27, Z+3	; 0x03
     266:	88 0f       	add	r24, r24
     268:	99 1f       	adc	r25, r25
     26a:	aa 1f       	adc	r26, r26
     26c:	bb 1f       	adc	r27, r27
     26e:	88 0f       	add	r24, r24
     270:	99 1f       	adc	r25, r25
     272:	aa 1f       	adc	r26, r26
     274:	bb 1f       	adc	r27, r27
     276:	88 0f       	add	r24, r24
     278:	99 1f       	adc	r25, r25
     27a:	aa 1f       	adc	r26, r26
     27c:	bb 1f       	adc	r27, r27
     27e:	9c 01       	movw	r18, r24
     280:	ad 01       	movw	r20, r26
     282:	80 e0       	ldi	r24, 0x00	; 0
     284:	92 e1       	ldi	r25, 0x12	; 18
     286:	aa e7       	ldi	r26, 0x7A	; 122
     288:	b0 e0       	ldi	r27, 0x00	; 0
     28a:	bc 01       	movw	r22, r24
     28c:	cd 01       	movw	r24, r26
     28e:	0e 94 1c 08 	call	0x1038	; 0x1038 <__udivmodsi4>
     292:	da 01       	movw	r26, r20
     294:	c9 01       	movw	r24, r18
     296:	01 97       	sbiw	r24, 0x01	; 1
     298:	a1 09       	sbc	r26, r1
     29a:	b1 09       	sbc	r27, r1
     29c:	89 2f       	mov	r24, r25
     29e:	9a 2f       	mov	r25, r26
     2a0:	ab 2f       	mov	r26, r27
     2a2:	bb 27       	eor	r27, r27
     2a4:	f8 01       	movw	r30, r16
     2a6:	80 83       	st	Z, r24
						UBRRL = ( ((F_CPU / (Config_Ptr -> uart_BaudRate * 8UL))) - 1 );
     2a8:	09 e2       	ldi	r16, 0x29	; 41
     2aa:	10 e0       	ldi	r17, 0x00	; 0
     2ac:	e9 81       	ldd	r30, Y+1	; 0x01
     2ae:	fa 81       	ldd	r31, Y+2	; 0x02
     2b0:	80 81       	ld	r24, Z
     2b2:	91 81       	ldd	r25, Z+1	; 0x01
     2b4:	a2 81       	ldd	r26, Z+2	; 0x02
     2b6:	b3 81       	ldd	r27, Z+3	; 0x03
     2b8:	88 0f       	add	r24, r24
     2ba:	99 1f       	adc	r25, r25
     2bc:	aa 1f       	adc	r26, r26
     2be:	bb 1f       	adc	r27, r27
     2c0:	88 0f       	add	r24, r24
     2c2:	99 1f       	adc	r25, r25
     2c4:	aa 1f       	adc	r26, r26
     2c6:	bb 1f       	adc	r27, r27
     2c8:	88 0f       	add	r24, r24
     2ca:	99 1f       	adc	r25, r25
     2cc:	aa 1f       	adc	r26, r26
     2ce:	bb 1f       	adc	r27, r27
     2d0:	9c 01       	movw	r18, r24
     2d2:	ad 01       	movw	r20, r26
     2d4:	80 e0       	ldi	r24, 0x00	; 0
     2d6:	92 e1       	ldi	r25, 0x12	; 18
     2d8:	aa e7       	ldi	r26, 0x7A	; 122
     2da:	b0 e0       	ldi	r27, 0x00	; 0
     2dc:	bc 01       	movw	r22, r24
     2de:	cd 01       	movw	r24, r26
     2e0:	0e 94 1c 08 	call	0x1038	; 0x1038 <__udivmodsi4>
     2e4:	da 01       	movw	r26, r20
     2e6:	c9 01       	movw	r24, r18
     2e8:	81 50       	subi	r24, 0x01	; 1
     2ea:	f8 01       	movw	r30, r16
     2ec:	80 83       	st	Z, r24
						break;
	}
}
     2ee:	0f 90       	pop	r0
     2f0:	0f 90       	pop	r0
     2f2:	0f 90       	pop	r0
     2f4:	0f 90       	pop	r0
     2f6:	cf 91       	pop	r28
     2f8:	df 91       	pop	r29
     2fa:	1f 91       	pop	r17
     2fc:	0f 91       	pop	r16
     2fe:	08 95       	ret

00000300 <UART_sendByte>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 ****************************************************************************************/
void UART_sendByte(const uint8_t au8_data)
{
     300:	df 93       	push	r29
     302:	cf 93       	push	r28
     304:	0f 92       	push	r0
     306:	cd b7       	in	r28, 0x3d	; 61
     308:	de b7       	in	r29, 0x3e	; 62
     30a:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the TX buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
     30c:	eb e2       	ldi	r30, 0x2B	; 43
     30e:	f0 e0       	ldi	r31, 0x00	; 0
     310:	80 81       	ld	r24, Z
     312:	88 2f       	mov	r24, r24
     314:	90 e0       	ldi	r25, 0x00	; 0
     316:	80 72       	andi	r24, 0x20	; 32
     318:	90 70       	andi	r25, 0x00	; 0
     31a:	00 97       	sbiw	r24, 0x00	; 0
     31c:	b9 f3       	breq	.-18     	; 0x30c <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE
	 * flag as the UDR register is not empty now
	 */
	UDR = au8_data;
     31e:	ec e2       	ldi	r30, 0x2C	; 44
     320:	f0 e0       	ldi	r31, 0x00	; 0
     322:	89 81       	ldd	r24, Y+1	; 0x01
     324:	80 83       	st	Z, r24
}
     326:	0f 90       	pop	r0
     328:	cf 91       	pop	r28
     32a:	df 91       	pop	r29
     32c:	08 95       	ret

0000032e <UART_recieveByte>:
 * [in/out]		 	None
 *
 * [Returns]:       The Byte that received through the UART
 ****************************************************************************************/
uint8_t UART_recieveByte(void)
{
     32e:	df 93       	push	r29
     330:	cf 93       	push	r28
     332:	cd b7       	in	r28, 0x3d	; 61
     334:	de b7       	in	r29, 0x3e	; 62
	/*
	 * RXC flag is set when the UART receive data so wait until this
	 * flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
     336:	eb e2       	ldi	r30, 0x2B	; 43
     338:	f0 e0       	ldi	r31, 0x00	; 0
     33a:	80 81       	ld	r24, Z
     33c:	88 23       	and	r24, r24
     33e:	dc f7       	brge	.-10     	; 0x336 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the RX buffer (UDR) and the RXC flag
	 * will be cleared after read this data
	 */
	return UDR;
     340:	ec e2       	ldi	r30, 0x2C	; 44
     342:	f0 e0       	ldi	r31, 0x00	; 0
     344:	80 81       	ld	r24, Z
}
     346:	cf 91       	pop	r28
     348:	df 91       	pop	r29
     34a:	08 95       	ret

0000034c <UART_sendString>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 ****************************************************************************************/
void UART_sendString(const uint8_t * aStr_message)
{
     34c:	df 93       	push	r29
     34e:	cf 93       	push	r28
     350:	00 d0       	rcall	.+0      	; 0x352 <UART_sendString+0x6>
     352:	0f 92       	push	r0
     354:	cd b7       	in	r28, 0x3d	; 61
     356:	de b7       	in	r29, 0x3e	; 62
     358:	9b 83       	std	Y+3, r25	; 0x03
     35a:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t i = 0;
     35c:	19 82       	std	Y+1, r1	; 0x01
     35e:	0e c0       	rjmp	.+28     	; 0x37c <UART_sendString+0x30>

	while(aStr_message[i] != '\0')
	{
		UART_sendByte(aStr_message[i]);
     360:	89 81       	ldd	r24, Y+1	; 0x01
     362:	28 2f       	mov	r18, r24
     364:	30 e0       	ldi	r19, 0x00	; 0
     366:	8a 81       	ldd	r24, Y+2	; 0x02
     368:	9b 81       	ldd	r25, Y+3	; 0x03
     36a:	fc 01       	movw	r30, r24
     36c:	e2 0f       	add	r30, r18
     36e:	f3 1f       	adc	r31, r19
     370:	80 81       	ld	r24, Z
     372:	0e 94 80 01 	call	0x300	; 0x300 <UART_sendByte>
		i++;
     376:	89 81       	ldd	r24, Y+1	; 0x01
     378:	8f 5f       	subi	r24, 0xFF	; 255
     37a:	89 83       	std	Y+1, r24	; 0x01
 ****************************************************************************************/
void UART_sendString(const uint8_t * aStr_message)
{
	uint8_t i = 0;

	while(aStr_message[i] != '\0')
     37c:	89 81       	ldd	r24, Y+1	; 0x01
     37e:	28 2f       	mov	r18, r24
     380:	30 e0       	ldi	r19, 0x00	; 0
     382:	8a 81       	ldd	r24, Y+2	; 0x02
     384:	9b 81       	ldd	r25, Y+3	; 0x03
     386:	fc 01       	movw	r30, r24
     388:	e2 0f       	add	r30, r18
     38a:	f3 1f       	adc	r31, r19
     38c:	80 81       	ld	r24, Z
     38e:	88 23       	and	r24, r24
     390:	39 f7       	brne	.-50     	; 0x360 <UART_sendString+0x14>
	{
		UART_sendByte(aStr_message[i]);
		i++;
	}
}
     392:	0f 90       	pop	r0
     394:	0f 90       	pop	r0
     396:	0f 90       	pop	r0
     398:	cf 91       	pop	r28
     39a:	df 91       	pop	r29
     39c:	08 95       	ret

0000039e <UART_receiveString>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 ****************************************************************************************/
void UART_receiveString(uint8_t * aStr_message)
{
     39e:	0f 93       	push	r16
     3a0:	1f 93       	push	r17
     3a2:	df 93       	push	r29
     3a4:	cf 93       	push	r28
     3a6:	00 d0       	rcall	.+0      	; 0x3a8 <UART_receiveString+0xa>
     3a8:	0f 92       	push	r0
     3aa:	cd b7       	in	r28, 0x3d	; 61
     3ac:	de b7       	in	r29, 0x3e	; 62
     3ae:	9b 83       	std	Y+3, r25	; 0x03
     3b0:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t i = 0;
     3b2:	19 82       	std	Y+1, r1	; 0x01

	aStr_message[i] = UART_recieveByte();
     3b4:	89 81       	ldd	r24, Y+1	; 0x01
     3b6:	28 2f       	mov	r18, r24
     3b8:	30 e0       	ldi	r19, 0x00	; 0
     3ba:	8a 81       	ldd	r24, Y+2	; 0x02
     3bc:	9b 81       	ldd	r25, Y+3	; 0x03
     3be:	8c 01       	movw	r16, r24
     3c0:	02 0f       	add	r16, r18
     3c2:	13 1f       	adc	r17, r19
     3c4:	0e 94 97 01 	call	0x32e	; 0x32e <UART_recieveByte>
     3c8:	f8 01       	movw	r30, r16
     3ca:	80 83       	st	Z, r24
     3cc:	0f c0       	rjmp	.+30     	; 0x3ec <UART_receiveString+0x4e>
	while(aStr_message[i] != '\r')
	{
		i++;
     3ce:	89 81       	ldd	r24, Y+1	; 0x01
     3d0:	8f 5f       	subi	r24, 0xFF	; 255
     3d2:	89 83       	std	Y+1, r24	; 0x01
		aStr_message[i] = UART_recieveByte();
     3d4:	89 81       	ldd	r24, Y+1	; 0x01
     3d6:	28 2f       	mov	r18, r24
     3d8:	30 e0       	ldi	r19, 0x00	; 0
     3da:	8a 81       	ldd	r24, Y+2	; 0x02
     3dc:	9b 81       	ldd	r25, Y+3	; 0x03
     3de:	8c 01       	movw	r16, r24
     3e0:	02 0f       	add	r16, r18
     3e2:	13 1f       	adc	r17, r19
     3e4:	0e 94 97 01 	call	0x32e	; 0x32e <UART_recieveByte>
     3e8:	f8 01       	movw	r30, r16
     3ea:	80 83       	st	Z, r24
void UART_receiveString(uint8_t * aStr_message)
{
	uint8_t i = 0;

	aStr_message[i] = UART_recieveByte();
	while(aStr_message[i] != '\r')
     3ec:	89 81       	ldd	r24, Y+1	; 0x01
     3ee:	28 2f       	mov	r18, r24
     3f0:	30 e0       	ldi	r19, 0x00	; 0
     3f2:	8a 81       	ldd	r24, Y+2	; 0x02
     3f4:	9b 81       	ldd	r25, Y+3	; 0x03
     3f6:	fc 01       	movw	r30, r24
     3f8:	e2 0f       	add	r30, r18
     3fa:	f3 1f       	adc	r31, r19
     3fc:	80 81       	ld	r24, Z
     3fe:	8d 30       	cpi	r24, 0x0D	; 13
     400:	31 f7       	brne	.-52     	; 0x3ce <UART_receiveString+0x30>
	{
		i++;
		aStr_message[i] = UART_recieveByte();
	}
	aStr_message[i] = '\0';
     402:	89 81       	ldd	r24, Y+1	; 0x01
     404:	28 2f       	mov	r18, r24
     406:	30 e0       	ldi	r19, 0x00	; 0
     408:	8a 81       	ldd	r24, Y+2	; 0x02
     40a:	9b 81       	ldd	r25, Y+3	; 0x03
     40c:	fc 01       	movw	r30, r24
     40e:	e2 0f       	add	r30, r18
     410:	f3 1f       	adc	r31, r19
     412:	10 82       	st	Z, r1
}
     414:	0f 90       	pop	r0
     416:	0f 90       	pop	r0
     418:	0f 90       	pop	r0
     41a:	cf 91       	pop	r28
     41c:	df 91       	pop	r29
     41e:	1f 91       	pop	r17
     420:	0f 91       	pop	r16
     422:	08 95       	ret

00000424 <UART_setParityType>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 ****************************************************************************************/
void UART_setParityType(const enuUART_ParityType_t enu_parityType)
{
     424:	df 93       	push	r29
     426:	cf 93       	push	r28
     428:	0f 92       	push	r0
     42a:	cd b7       	in	r28, 0x3d	; 61
     42c:	de b7       	in	r29, 0x3e	; 62
     42e:	89 83       	std	Y+1, r24	; 0x01
	/* Insert the required parity type in bits (UPM0, UPM1) in UCSRC Register */
	UCSRC = (UCSRC & 0xCF) | (enu_parityType << 4);
     430:	a0 e4       	ldi	r26, 0x40	; 64
     432:	b0 e0       	ldi	r27, 0x00	; 0
     434:	e0 e4       	ldi	r30, 0x40	; 64
     436:	f0 e0       	ldi	r31, 0x00	; 0
     438:	80 81       	ld	r24, Z
     43a:	28 2f       	mov	r18, r24
     43c:	2f 7c       	andi	r18, 0xCF	; 207
     43e:	89 81       	ldd	r24, Y+1	; 0x01
     440:	88 2f       	mov	r24, r24
     442:	90 e0       	ldi	r25, 0x00	; 0
     444:	82 95       	swap	r24
     446:	92 95       	swap	r25
     448:	90 7f       	andi	r25, 0xF0	; 240
     44a:	98 27       	eor	r25, r24
     44c:	80 7f       	andi	r24, 0xF0	; 240
     44e:	98 27       	eor	r25, r24
     450:	82 2b       	or	r24, r18
     452:	8c 93       	st	X, r24
}
     454:	0f 90       	pop	r0
     456:	cf 91       	pop	r28
     458:	df 91       	pop	r29
     45a:	08 95       	ret

0000045c <UART_setStopBit>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 ****************************************************************************************/
void UART_setStopBit(const enuUART_StopBit_t enu_stopBit)
{
     45c:	df 93       	push	r29
     45e:	cf 93       	push	r28
     460:	0f 92       	push	r0
     462:	cd b7       	in	r28, 0x3d	; 61
     464:	de b7       	in	r29, 0x3e	; 62
     466:	89 83       	std	Y+1, r24	; 0x01
	/* Insert the required number of stop bit(s) in bit USBS in UCSRC Register */
	UCSRC = (UCSRC & 0xF7) | (enu_stopBit << 3);
     468:	a0 e4       	ldi	r26, 0x40	; 64
     46a:	b0 e0       	ldi	r27, 0x00	; 0
     46c:	e0 e4       	ldi	r30, 0x40	; 64
     46e:	f0 e0       	ldi	r31, 0x00	; 0
     470:	80 81       	ld	r24, Z
     472:	28 2f       	mov	r18, r24
     474:	27 7f       	andi	r18, 0xF7	; 247
     476:	89 81       	ldd	r24, Y+1	; 0x01
     478:	88 2f       	mov	r24, r24
     47a:	90 e0       	ldi	r25, 0x00	; 0
     47c:	88 0f       	add	r24, r24
     47e:	99 1f       	adc	r25, r25
     480:	88 0f       	add	r24, r24
     482:	99 1f       	adc	r25, r25
     484:	88 0f       	add	r24, r24
     486:	99 1f       	adc	r25, r25
     488:	82 2b       	or	r24, r18
     48a:	8c 93       	st	X, r24
}
     48c:	0f 90       	pop	r0
     48e:	cf 91       	pop	r28
     490:	df 91       	pop	r29
     492:	08 95       	ret

00000494 <UART_DeInit>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 ****************************************************************************************/
void UART_DeInit(void)
{
     494:	df 93       	push	r29
     496:	cf 93       	push	r28
     498:	cd b7       	in	r28, 0x3d	; 61
     49a:	de b7       	in	r29, 0x3e	; 62
	/* Reset All UART Registers to its initial value */
	UCSRA = 0x20;
     49c:	eb e2       	ldi	r30, 0x2B	; 43
     49e:	f0 e0       	ldi	r31, 0x00	; 0
     4a0:	80 e2       	ldi	r24, 0x20	; 32
     4a2:	80 83       	st	Z, r24
	UCSRB = 0;
     4a4:	ea e2       	ldi	r30, 0x2A	; 42
     4a6:	f0 e0       	ldi	r31, 0x00	; 0
     4a8:	10 82       	st	Z, r1
	UCSRC = 0x86;
     4aa:	e0 e4       	ldi	r30, 0x40	; 64
     4ac:	f0 e0       	ldi	r31, 0x00	; 0
     4ae:	86 e8       	ldi	r24, 0x86	; 134
     4b0:	80 83       	st	Z, r24

	/* Clear UART Baud Rate Registers */
	UBRRH = 0;
     4b2:	e0 e4       	ldi	r30, 0x40	; 64
     4b4:	f0 e0       	ldi	r31, 0x00	; 0
     4b6:	10 82       	st	Z, r1
	UBRRL = 0;
     4b8:	e9 e2       	ldi	r30, 0x29	; 41
     4ba:	f0 e0       	ldi	r31, 0x00	; 0
     4bc:	10 82       	st	Z, r1
}
     4be:	cf 91       	pop	r28
     4c0:	df 91       	pop	r29
     4c2:	08 95       	ret

000004c4 <DIO_setPortDirection>:
 * [in/out]		 	None
 *
 * [Returns]:       Error state
 ******************************************************************************/
enuDIO_E_STATE_t DIO_setPortDirection(enuDIO_PortId_t enu_portID, enuDIO_DirectionType_t enu_portDirection)
{
     4c4:	df 93       	push	r29
     4c6:	cf 93       	push	r28
     4c8:	cd b7       	in	r28, 0x3d	; 61
     4ca:	de b7       	in	r29, 0x3e	; 62
     4cc:	27 97       	sbiw	r28, 0x07	; 7
     4ce:	0f b6       	in	r0, 0x3f	; 63
     4d0:	f8 94       	cli
     4d2:	de bf       	out	0x3e, r29	; 62
     4d4:	0f be       	out	0x3f, r0	; 63
     4d6:	cd bf       	out	0x3d, r28	; 61
     4d8:	8a 83       	std	Y+2, r24	; 0x02
     4da:	6b 83       	std	Y+3, r22	; 0x03
	enuDIO_E_STATE_t enu_ErrorState = E_NOT_OK;
     4dc:	81 e0       	ldi	r24, 0x01	; 1
     4de:	89 83       	std	Y+1, r24	; 0x01

	/* Check if the PORT is input or output */
    if(enu_portDirection == HIGH)
     4e0:	8b 81       	ldd	r24, Y+3	; 0x03
     4e2:	81 30       	cpi	r24, 0x01	; 1
     4e4:	d1 f5       	brne	.+116    	; 0x55a <DIO_setPortDirection+0x96>
    {
    	switch (enu_portID)
     4e6:	8a 81       	ldd	r24, Y+2	; 0x02
     4e8:	28 2f       	mov	r18, r24
     4ea:	30 e0       	ldi	r19, 0x00	; 0
     4ec:	3f 83       	std	Y+7, r19	; 0x07
     4ee:	2e 83       	std	Y+6, r18	; 0x06
     4f0:	8e 81       	ldd	r24, Y+6	; 0x06
     4f2:	9f 81       	ldd	r25, Y+7	; 0x07
     4f4:	81 30       	cpi	r24, 0x01	; 1
     4f6:	91 05       	cpc	r25, r1
     4f8:	d9 f0       	breq	.+54     	; 0x530 <DIO_setPortDirection+0x6c>
     4fa:	2e 81       	ldd	r18, Y+6	; 0x06
     4fc:	3f 81       	ldd	r19, Y+7	; 0x07
     4fe:	22 30       	cpi	r18, 0x02	; 2
     500:	31 05       	cpc	r19, r1
     502:	2c f4       	brge	.+10     	; 0x50e <DIO_setPortDirection+0x4a>
     504:	8e 81       	ldd	r24, Y+6	; 0x06
     506:	9f 81       	ldd	r25, Y+7	; 0x07
     508:	00 97       	sbiw	r24, 0x00	; 0
     50a:	61 f0       	breq	.+24     	; 0x524 <DIO_setPortDirection+0x60>
     50c:	23 c0       	rjmp	.+70     	; 0x554 <DIO_setPortDirection+0x90>
     50e:	2e 81       	ldd	r18, Y+6	; 0x06
     510:	3f 81       	ldd	r19, Y+7	; 0x07
     512:	22 30       	cpi	r18, 0x02	; 2
     514:	31 05       	cpc	r19, r1
     516:	91 f0       	breq	.+36     	; 0x53c <DIO_setPortDirection+0x78>
     518:	8e 81       	ldd	r24, Y+6	; 0x06
     51a:	9f 81       	ldd	r25, Y+7	; 0x07
     51c:	83 30       	cpi	r24, 0x03	; 3
     51e:	91 05       	cpc	r25, r1
     520:	99 f0       	breq	.+38     	; 0x548 <DIO_setPortDirection+0x84>
     522:	18 c0       	rjmp	.+48     	; 0x554 <DIO_setPortDirection+0x90>
		{
		case DIO_PORTA:
			DDRA_DIR_R = OUTPUT_PORT;
     524:	ea e3       	ldi	r30, 0x3A	; 58
     526:	f0 e0       	ldi	r31, 0x00	; 0
     528:	8f ef       	ldi	r24, 0xFF	; 255
     52a:	80 83       	st	Z, r24
			enu_ErrorState = DIO_E_PARAM_VALID;
     52c:	19 82       	std	Y+1, r1	; 0x01
     52e:	50 c0       	rjmp	.+160    	; 0x5d0 <DIO_setPortDirection+0x10c>
			break;
		case DIO_PORTB:
			DDRB_DIR_R = OUTPUT_PORT;
     530:	e7 e3       	ldi	r30, 0x37	; 55
     532:	f0 e0       	ldi	r31, 0x00	; 0
     534:	8f ef       	ldi	r24, 0xFF	; 255
     536:	80 83       	st	Z, r24
			enu_ErrorState = DIO_E_PARAM_VALID;
     538:	19 82       	std	Y+1, r1	; 0x01
     53a:	4a c0       	rjmp	.+148    	; 0x5d0 <DIO_setPortDirection+0x10c>
			break;
		case DIO_PORTC:
			DDRC_DIR_R = OUTPUT_PORT;
     53c:	e4 e3       	ldi	r30, 0x34	; 52
     53e:	f0 e0       	ldi	r31, 0x00	; 0
     540:	8f ef       	ldi	r24, 0xFF	; 255
     542:	80 83       	st	Z, r24
			enu_ErrorState = DIO_E_PARAM_VALID;
     544:	19 82       	std	Y+1, r1	; 0x01
     546:	44 c0       	rjmp	.+136    	; 0x5d0 <DIO_setPortDirection+0x10c>
			break;
		case DIO_PORTD:
			DDRD_DIR_R = OUTPUT_PORT;
     548:	e1 e3       	ldi	r30, 0x31	; 49
     54a:	f0 e0       	ldi	r31, 0x00	; 0
     54c:	8f ef       	ldi	r24, 0xFF	; 255
     54e:	80 83       	st	Z, r24
			enu_ErrorState = DIO_E_PARAM_VALID;
     550:	19 82       	std	Y+1, r1	; 0x01
     552:	3e c0       	rjmp	.+124    	; 0x5d0 <DIO_setPortDirection+0x10c>
			break;
		default:
			enu_ErrorState = DIO_E_PARAM_INVALID_PORT_ID;
     554:	81 e0       	ldi	r24, 0x01	; 1
     556:	89 83       	std	Y+1, r24	; 0x01
     558:	3b c0       	rjmp	.+118    	; 0x5d0 <DIO_setPortDirection+0x10c>
			break;
		}
    }
    else if(enu_portDirection == LOW)
     55a:	8b 81       	ldd	r24, Y+3	; 0x03
     55c:	88 23       	and	r24, r24
     55e:	b1 f5       	brne	.+108    	; 0x5cc <DIO_setPortDirection+0x108>
    {
		switch (enu_portID)
     560:	8a 81       	ldd	r24, Y+2	; 0x02
     562:	28 2f       	mov	r18, r24
     564:	30 e0       	ldi	r19, 0x00	; 0
     566:	3d 83       	std	Y+5, r19	; 0x05
     568:	2c 83       	std	Y+4, r18	; 0x04
     56a:	8c 81       	ldd	r24, Y+4	; 0x04
     56c:	9d 81       	ldd	r25, Y+5	; 0x05
     56e:	81 30       	cpi	r24, 0x01	; 1
     570:	91 05       	cpc	r25, r1
     572:	d1 f0       	breq	.+52     	; 0x5a8 <DIO_setPortDirection+0xe4>
     574:	2c 81       	ldd	r18, Y+4	; 0x04
     576:	3d 81       	ldd	r19, Y+5	; 0x05
     578:	22 30       	cpi	r18, 0x02	; 2
     57a:	31 05       	cpc	r19, r1
     57c:	2c f4       	brge	.+10     	; 0x588 <DIO_setPortDirection+0xc4>
     57e:	8c 81       	ldd	r24, Y+4	; 0x04
     580:	9d 81       	ldd	r25, Y+5	; 0x05
     582:	00 97       	sbiw	r24, 0x00	; 0
     584:	61 f0       	breq	.+24     	; 0x59e <DIO_setPortDirection+0xda>
     586:	1f c0       	rjmp	.+62     	; 0x5c6 <DIO_setPortDirection+0x102>
     588:	2c 81       	ldd	r18, Y+4	; 0x04
     58a:	3d 81       	ldd	r19, Y+5	; 0x05
     58c:	22 30       	cpi	r18, 0x02	; 2
     58e:	31 05       	cpc	r19, r1
     590:	81 f0       	breq	.+32     	; 0x5b2 <DIO_setPortDirection+0xee>
     592:	8c 81       	ldd	r24, Y+4	; 0x04
     594:	9d 81       	ldd	r25, Y+5	; 0x05
     596:	83 30       	cpi	r24, 0x03	; 3
     598:	91 05       	cpc	r25, r1
     59a:	81 f0       	breq	.+32     	; 0x5bc <DIO_setPortDirection+0xf8>
     59c:	14 c0       	rjmp	.+40     	; 0x5c6 <DIO_setPortDirection+0x102>
		{
		case DIO_PORTA:
			DDRA_DIR_R = INPUT_PORT;
     59e:	ea e3       	ldi	r30, 0x3A	; 58
     5a0:	f0 e0       	ldi	r31, 0x00	; 0
     5a2:	10 82       	st	Z, r1
			enu_ErrorState = DIO_E_PARAM_VALID;
     5a4:	19 82       	std	Y+1, r1	; 0x01
     5a6:	14 c0       	rjmp	.+40     	; 0x5d0 <DIO_setPortDirection+0x10c>
			break;
		case DIO_PORTB:
			DDRB_DIR_R = INPUT_PORT;
     5a8:	e7 e3       	ldi	r30, 0x37	; 55
     5aa:	f0 e0       	ldi	r31, 0x00	; 0
     5ac:	10 82       	st	Z, r1
			enu_ErrorState = DIO_E_PARAM_VALID;
     5ae:	19 82       	std	Y+1, r1	; 0x01
     5b0:	0f c0       	rjmp	.+30     	; 0x5d0 <DIO_setPortDirection+0x10c>
			break;
		case DIO_PORTC:
			DDRC_DIR_R = INPUT_PORT;
     5b2:	e4 e3       	ldi	r30, 0x34	; 52
     5b4:	f0 e0       	ldi	r31, 0x00	; 0
     5b6:	10 82       	st	Z, r1
			enu_ErrorState = DIO_E_PARAM_VALID;
     5b8:	19 82       	std	Y+1, r1	; 0x01
     5ba:	0a c0       	rjmp	.+20     	; 0x5d0 <DIO_setPortDirection+0x10c>
			break;
		case DIO_PORTD:
			DDRD_DIR_R = INPUT_PORT;
     5bc:	e1 e3       	ldi	r30, 0x31	; 49
     5be:	f0 e0       	ldi	r31, 0x00	; 0
     5c0:	10 82       	st	Z, r1
			enu_ErrorState = DIO_E_PARAM_VALID;
     5c2:	19 82       	std	Y+1, r1	; 0x01
     5c4:	05 c0       	rjmp	.+10     	; 0x5d0 <DIO_setPortDirection+0x10c>
			break;
		default:
			enu_ErrorState = DIO_E_PARAM_INVALID_PORT_ID;
     5c6:	81 e0       	ldi	r24, 0x01	; 1
     5c8:	89 83       	std	Y+1, r24	; 0x01
     5ca:	02 c0       	rjmp	.+4      	; 0x5d0 <DIO_setPortDirection+0x10c>
			break;
		}
    }
    else
    {
    	enu_ErrorState = DIO_E_PARAM_INVALID_PORT_DIR;	/* Invalid port direction */
     5cc:	84 e0       	ldi	r24, 0x04	; 4
     5ce:	89 83       	std	Y+1, r24	; 0x01
    }
    return enu_ErrorState;
     5d0:	89 81       	ldd	r24, Y+1	; 0x01
}
     5d2:	27 96       	adiw	r28, 0x07	; 7
     5d4:	0f b6       	in	r0, 0x3f	; 63
     5d6:	f8 94       	cli
     5d8:	de bf       	out	0x3e, r29	; 62
     5da:	0f be       	out	0x3f, r0	; 63
     5dc:	cd bf       	out	0x3d, r28	; 61
     5de:	cf 91       	pop	r28
     5e0:	df 91       	pop	r29
     5e2:	08 95       	ret

000005e4 <DIO_setPinDirection>:
 *
 * [Returns]:       Error State
 ******************************************************************************/
enuDIO_E_STATE_t DIO_setPinDirection(enuDIO_PortId_t enu_portID , enuDIO_PinId_t enu_pinID,
								     enuDIO_DirectionType_t enu_pinDirection)
{
     5e4:	df 93       	push	r29
     5e6:	cf 93       	push	r28
     5e8:	cd b7       	in	r28, 0x3d	; 61
     5ea:	de b7       	in	r29, 0x3e	; 62
     5ec:	28 97       	sbiw	r28, 0x08	; 8
     5ee:	0f b6       	in	r0, 0x3f	; 63
     5f0:	f8 94       	cli
     5f2:	de bf       	out	0x3e, r29	; 62
     5f4:	0f be       	out	0x3f, r0	; 63
     5f6:	cd bf       	out	0x3d, r28	; 61
     5f8:	8a 83       	std	Y+2, r24	; 0x02
     5fa:	6b 83       	std	Y+3, r22	; 0x03
     5fc:	4c 83       	std	Y+4, r20	; 0x04
	enuDIO_E_STATE_t enu_ErrorState = E_NOT_OK;
     5fe:	81 e0       	ldi	r24, 0x01	; 1
     600:	89 83       	std	Y+1, r24	; 0x01

	/* Check if the pin id is one of the existed pin or not */
	if ((enu_pinID >= PIN_0) && (enu_pinID <= PIN_7))
     602:	8b 81       	ldd	r24, Y+3	; 0x03
     604:	88 30       	cpi	r24, 0x08	; 8
     606:	08 f0       	brcs	.+2      	; 0x60a <DIO_setPinDirection+0x26>
     608:	fd c0       	rjmp	.+506    	; 0x804 <DIO_setPinDirection+0x220>
	{
		if (enu_pinDirection == OUTPUT)
     60a:	8c 81       	ldd	r24, Y+4	; 0x04
     60c:	81 30       	cpi	r24, 0x01	; 1
     60e:	09 f0       	breq	.+2      	; 0x612 <DIO_setPinDirection+0x2e>
     610:	77 c0       	rjmp	.+238    	; 0x700 <DIO_setPinDirection+0x11c>
		{
			switch (enu_portID)
     612:	8a 81       	ldd	r24, Y+2	; 0x02
     614:	28 2f       	mov	r18, r24
     616:	30 e0       	ldi	r19, 0x00	; 0
     618:	38 87       	std	Y+8, r19	; 0x08
     61a:	2f 83       	std	Y+7, r18	; 0x07
     61c:	8f 81       	ldd	r24, Y+7	; 0x07
     61e:	98 85       	ldd	r25, Y+8	; 0x08
     620:	81 30       	cpi	r24, 0x01	; 1
     622:	91 05       	cpc	r25, r1
     624:	59 f1       	breq	.+86     	; 0x67c <DIO_setPinDirection+0x98>
     626:	2f 81       	ldd	r18, Y+7	; 0x07
     628:	38 85       	ldd	r19, Y+8	; 0x08
     62a:	22 30       	cpi	r18, 0x02	; 2
     62c:	31 05       	cpc	r19, r1
     62e:	2c f4       	brge	.+10     	; 0x63a <DIO_setPinDirection+0x56>
     630:	8f 81       	ldd	r24, Y+7	; 0x07
     632:	98 85       	ldd	r25, Y+8	; 0x08
     634:	00 97       	sbiw	r24, 0x00	; 0
     636:	69 f0       	breq	.+26     	; 0x652 <DIO_setPinDirection+0x6e>
     638:	60 c0       	rjmp	.+192    	; 0x6fa <DIO_setPinDirection+0x116>
     63a:	2f 81       	ldd	r18, Y+7	; 0x07
     63c:	38 85       	ldd	r19, Y+8	; 0x08
     63e:	22 30       	cpi	r18, 0x02	; 2
     640:	31 05       	cpc	r19, r1
     642:	89 f1       	breq	.+98     	; 0x6a6 <DIO_setPinDirection+0xc2>
     644:	8f 81       	ldd	r24, Y+7	; 0x07
     646:	98 85       	ldd	r25, Y+8	; 0x08
     648:	83 30       	cpi	r24, 0x03	; 3
     64a:	91 05       	cpc	r25, r1
     64c:	09 f4       	brne	.+2      	; 0x650 <DIO_setPinDirection+0x6c>
     64e:	40 c0       	rjmp	.+128    	; 0x6d0 <DIO_setPinDirection+0xec>
     650:	54 c0       	rjmp	.+168    	; 0x6fa <DIO_setPinDirection+0x116>
			{
			case DIO_PORTA:
				SET_BIT(DDRA_DIR_R, enu_pinID);
     652:	aa e3       	ldi	r26, 0x3A	; 58
     654:	b0 e0       	ldi	r27, 0x00	; 0
     656:	ea e3       	ldi	r30, 0x3A	; 58
     658:	f0 e0       	ldi	r31, 0x00	; 0
     65a:	80 81       	ld	r24, Z
     65c:	48 2f       	mov	r20, r24
     65e:	8b 81       	ldd	r24, Y+3	; 0x03
     660:	28 2f       	mov	r18, r24
     662:	30 e0       	ldi	r19, 0x00	; 0
     664:	81 e0       	ldi	r24, 0x01	; 1
     666:	90 e0       	ldi	r25, 0x00	; 0
     668:	02 2e       	mov	r0, r18
     66a:	02 c0       	rjmp	.+4      	; 0x670 <DIO_setPinDirection+0x8c>
     66c:	88 0f       	add	r24, r24
     66e:	99 1f       	adc	r25, r25
     670:	0a 94       	dec	r0
     672:	e2 f7       	brpl	.-8      	; 0x66c <DIO_setPinDirection+0x88>
     674:	84 2b       	or	r24, r20
     676:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
     678:	19 82       	std	Y+1, r1	; 0x01
     67a:	c6 c0       	rjmp	.+396    	; 0x808 <DIO_setPinDirection+0x224>
				break;
			case DIO_PORTB:
				SET_BIT(DDRB_DIR_R, enu_pinID);
     67c:	a7 e3       	ldi	r26, 0x37	; 55
     67e:	b0 e0       	ldi	r27, 0x00	; 0
     680:	e7 e3       	ldi	r30, 0x37	; 55
     682:	f0 e0       	ldi	r31, 0x00	; 0
     684:	80 81       	ld	r24, Z
     686:	48 2f       	mov	r20, r24
     688:	8b 81       	ldd	r24, Y+3	; 0x03
     68a:	28 2f       	mov	r18, r24
     68c:	30 e0       	ldi	r19, 0x00	; 0
     68e:	81 e0       	ldi	r24, 0x01	; 1
     690:	90 e0       	ldi	r25, 0x00	; 0
     692:	02 2e       	mov	r0, r18
     694:	02 c0       	rjmp	.+4      	; 0x69a <DIO_setPinDirection+0xb6>
     696:	88 0f       	add	r24, r24
     698:	99 1f       	adc	r25, r25
     69a:	0a 94       	dec	r0
     69c:	e2 f7       	brpl	.-8      	; 0x696 <DIO_setPinDirection+0xb2>
     69e:	84 2b       	or	r24, r20
     6a0:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
     6a2:	19 82       	std	Y+1, r1	; 0x01
     6a4:	b1 c0       	rjmp	.+354    	; 0x808 <DIO_setPinDirection+0x224>
				break;
			case DIO_PORTC:
				SET_BIT(DDRC_DIR_R, enu_pinID);
     6a6:	a4 e3       	ldi	r26, 0x34	; 52
     6a8:	b0 e0       	ldi	r27, 0x00	; 0
     6aa:	e4 e3       	ldi	r30, 0x34	; 52
     6ac:	f0 e0       	ldi	r31, 0x00	; 0
     6ae:	80 81       	ld	r24, Z
     6b0:	48 2f       	mov	r20, r24
     6b2:	8b 81       	ldd	r24, Y+3	; 0x03
     6b4:	28 2f       	mov	r18, r24
     6b6:	30 e0       	ldi	r19, 0x00	; 0
     6b8:	81 e0       	ldi	r24, 0x01	; 1
     6ba:	90 e0       	ldi	r25, 0x00	; 0
     6bc:	02 2e       	mov	r0, r18
     6be:	02 c0       	rjmp	.+4      	; 0x6c4 <DIO_setPinDirection+0xe0>
     6c0:	88 0f       	add	r24, r24
     6c2:	99 1f       	adc	r25, r25
     6c4:	0a 94       	dec	r0
     6c6:	e2 f7       	brpl	.-8      	; 0x6c0 <DIO_setPinDirection+0xdc>
     6c8:	84 2b       	or	r24, r20
     6ca:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
     6cc:	19 82       	std	Y+1, r1	; 0x01
     6ce:	9c c0       	rjmp	.+312    	; 0x808 <DIO_setPinDirection+0x224>
				break;
			case DIO_PORTD:
				SET_BIT(DDRD_DIR_R, enu_pinID);
     6d0:	a1 e3       	ldi	r26, 0x31	; 49
     6d2:	b0 e0       	ldi	r27, 0x00	; 0
     6d4:	e1 e3       	ldi	r30, 0x31	; 49
     6d6:	f0 e0       	ldi	r31, 0x00	; 0
     6d8:	80 81       	ld	r24, Z
     6da:	48 2f       	mov	r20, r24
     6dc:	8b 81       	ldd	r24, Y+3	; 0x03
     6de:	28 2f       	mov	r18, r24
     6e0:	30 e0       	ldi	r19, 0x00	; 0
     6e2:	81 e0       	ldi	r24, 0x01	; 1
     6e4:	90 e0       	ldi	r25, 0x00	; 0
     6e6:	02 2e       	mov	r0, r18
     6e8:	02 c0       	rjmp	.+4      	; 0x6ee <DIO_setPinDirection+0x10a>
     6ea:	88 0f       	add	r24, r24
     6ec:	99 1f       	adc	r25, r25
     6ee:	0a 94       	dec	r0
     6f0:	e2 f7       	brpl	.-8      	; 0x6ea <DIO_setPinDirection+0x106>
     6f2:	84 2b       	or	r24, r20
     6f4:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
     6f6:	19 82       	std	Y+1, r1	; 0x01
     6f8:	87 c0       	rjmp	.+270    	; 0x808 <DIO_setPinDirection+0x224>
				break;
            default:
            	enu_ErrorState = DIO_E_PARAM_INVALID_PORT_ID;	/* Invalid port id */
     6fa:	81 e0       	ldi	r24, 0x01	; 1
     6fc:	89 83       	std	Y+1, r24	; 0x01
     6fe:	84 c0       	rjmp	.+264    	; 0x808 <DIO_setPinDirection+0x224>
                break;
			}
		}
		else if (enu_pinDirection == INPUT)
     700:	8c 81       	ldd	r24, Y+4	; 0x04
     702:	88 23       	and	r24, r24
     704:	09 f0       	breq	.+2      	; 0x708 <DIO_setPinDirection+0x124>
     706:	7b c0       	rjmp	.+246    	; 0x7fe <DIO_setPinDirection+0x21a>
		{
			switch (enu_portID)
     708:	8a 81       	ldd	r24, Y+2	; 0x02
     70a:	28 2f       	mov	r18, r24
     70c:	30 e0       	ldi	r19, 0x00	; 0
     70e:	3e 83       	std	Y+6, r19	; 0x06
     710:	2d 83       	std	Y+5, r18	; 0x05
     712:	8d 81       	ldd	r24, Y+5	; 0x05
     714:	9e 81       	ldd	r25, Y+6	; 0x06
     716:	81 30       	cpi	r24, 0x01	; 1
     718:	91 05       	cpc	r25, r1
     71a:	61 f1       	breq	.+88     	; 0x774 <DIO_setPinDirection+0x190>
     71c:	2d 81       	ldd	r18, Y+5	; 0x05
     71e:	3e 81       	ldd	r19, Y+6	; 0x06
     720:	22 30       	cpi	r18, 0x02	; 2
     722:	31 05       	cpc	r19, r1
     724:	2c f4       	brge	.+10     	; 0x730 <DIO_setPinDirection+0x14c>
     726:	8d 81       	ldd	r24, Y+5	; 0x05
     728:	9e 81       	ldd	r25, Y+6	; 0x06
     72a:	00 97       	sbiw	r24, 0x00	; 0
     72c:	69 f0       	breq	.+26     	; 0x748 <DIO_setPinDirection+0x164>
     72e:	64 c0       	rjmp	.+200    	; 0x7f8 <DIO_setPinDirection+0x214>
     730:	2d 81       	ldd	r18, Y+5	; 0x05
     732:	3e 81       	ldd	r19, Y+6	; 0x06
     734:	22 30       	cpi	r18, 0x02	; 2
     736:	31 05       	cpc	r19, r1
     738:	99 f1       	breq	.+102    	; 0x7a0 <DIO_setPinDirection+0x1bc>
     73a:	8d 81       	ldd	r24, Y+5	; 0x05
     73c:	9e 81       	ldd	r25, Y+6	; 0x06
     73e:	83 30       	cpi	r24, 0x03	; 3
     740:	91 05       	cpc	r25, r1
     742:	09 f4       	brne	.+2      	; 0x746 <DIO_setPinDirection+0x162>
     744:	43 c0       	rjmp	.+134    	; 0x7cc <DIO_setPinDirection+0x1e8>
     746:	58 c0       	rjmp	.+176    	; 0x7f8 <DIO_setPinDirection+0x214>
			{
			case DIO_PORTA:
				CLEAR_BIT(DDRA_DIR_R, enu_pinID);
     748:	aa e3       	ldi	r26, 0x3A	; 58
     74a:	b0 e0       	ldi	r27, 0x00	; 0
     74c:	ea e3       	ldi	r30, 0x3A	; 58
     74e:	f0 e0       	ldi	r31, 0x00	; 0
     750:	80 81       	ld	r24, Z
     752:	48 2f       	mov	r20, r24
     754:	8b 81       	ldd	r24, Y+3	; 0x03
     756:	28 2f       	mov	r18, r24
     758:	30 e0       	ldi	r19, 0x00	; 0
     75a:	81 e0       	ldi	r24, 0x01	; 1
     75c:	90 e0       	ldi	r25, 0x00	; 0
     75e:	02 2e       	mov	r0, r18
     760:	02 c0       	rjmp	.+4      	; 0x766 <DIO_setPinDirection+0x182>
     762:	88 0f       	add	r24, r24
     764:	99 1f       	adc	r25, r25
     766:	0a 94       	dec	r0
     768:	e2 f7       	brpl	.-8      	; 0x762 <DIO_setPinDirection+0x17e>
     76a:	80 95       	com	r24
     76c:	84 23       	and	r24, r20
     76e:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
     770:	19 82       	std	Y+1, r1	; 0x01
     772:	4a c0       	rjmp	.+148    	; 0x808 <DIO_setPinDirection+0x224>
				break;
			case DIO_PORTB:
				CLEAR_BIT(DDRB_DIR_R, enu_pinID);
     774:	a7 e3       	ldi	r26, 0x37	; 55
     776:	b0 e0       	ldi	r27, 0x00	; 0
     778:	e7 e3       	ldi	r30, 0x37	; 55
     77a:	f0 e0       	ldi	r31, 0x00	; 0
     77c:	80 81       	ld	r24, Z
     77e:	48 2f       	mov	r20, r24
     780:	8b 81       	ldd	r24, Y+3	; 0x03
     782:	28 2f       	mov	r18, r24
     784:	30 e0       	ldi	r19, 0x00	; 0
     786:	81 e0       	ldi	r24, 0x01	; 1
     788:	90 e0       	ldi	r25, 0x00	; 0
     78a:	02 2e       	mov	r0, r18
     78c:	02 c0       	rjmp	.+4      	; 0x792 <DIO_setPinDirection+0x1ae>
     78e:	88 0f       	add	r24, r24
     790:	99 1f       	adc	r25, r25
     792:	0a 94       	dec	r0
     794:	e2 f7       	brpl	.-8      	; 0x78e <DIO_setPinDirection+0x1aa>
     796:	80 95       	com	r24
     798:	84 23       	and	r24, r20
     79a:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
     79c:	19 82       	std	Y+1, r1	; 0x01
     79e:	34 c0       	rjmp	.+104    	; 0x808 <DIO_setPinDirection+0x224>
				break;
			case DIO_PORTC:
				CLEAR_BIT(DDRC_DIR_R, enu_pinID);
     7a0:	a4 e3       	ldi	r26, 0x34	; 52
     7a2:	b0 e0       	ldi	r27, 0x00	; 0
     7a4:	e4 e3       	ldi	r30, 0x34	; 52
     7a6:	f0 e0       	ldi	r31, 0x00	; 0
     7a8:	80 81       	ld	r24, Z
     7aa:	48 2f       	mov	r20, r24
     7ac:	8b 81       	ldd	r24, Y+3	; 0x03
     7ae:	28 2f       	mov	r18, r24
     7b0:	30 e0       	ldi	r19, 0x00	; 0
     7b2:	81 e0       	ldi	r24, 0x01	; 1
     7b4:	90 e0       	ldi	r25, 0x00	; 0
     7b6:	02 2e       	mov	r0, r18
     7b8:	02 c0       	rjmp	.+4      	; 0x7be <DIO_setPinDirection+0x1da>
     7ba:	88 0f       	add	r24, r24
     7bc:	99 1f       	adc	r25, r25
     7be:	0a 94       	dec	r0
     7c0:	e2 f7       	brpl	.-8      	; 0x7ba <DIO_setPinDirection+0x1d6>
     7c2:	80 95       	com	r24
     7c4:	84 23       	and	r24, r20
     7c6:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
     7c8:	19 82       	std	Y+1, r1	; 0x01
     7ca:	1e c0       	rjmp	.+60     	; 0x808 <DIO_setPinDirection+0x224>
				break;
			case DIO_PORTD:
				CLEAR_BIT(DDRD_DIR_R, enu_pinID);
     7cc:	a1 e3       	ldi	r26, 0x31	; 49
     7ce:	b0 e0       	ldi	r27, 0x00	; 0
     7d0:	e1 e3       	ldi	r30, 0x31	; 49
     7d2:	f0 e0       	ldi	r31, 0x00	; 0
     7d4:	80 81       	ld	r24, Z
     7d6:	48 2f       	mov	r20, r24
     7d8:	8b 81       	ldd	r24, Y+3	; 0x03
     7da:	28 2f       	mov	r18, r24
     7dc:	30 e0       	ldi	r19, 0x00	; 0
     7de:	81 e0       	ldi	r24, 0x01	; 1
     7e0:	90 e0       	ldi	r25, 0x00	; 0
     7e2:	02 2e       	mov	r0, r18
     7e4:	02 c0       	rjmp	.+4      	; 0x7ea <DIO_setPinDirection+0x206>
     7e6:	88 0f       	add	r24, r24
     7e8:	99 1f       	adc	r25, r25
     7ea:	0a 94       	dec	r0
     7ec:	e2 f7       	brpl	.-8      	; 0x7e6 <DIO_setPinDirection+0x202>
     7ee:	80 95       	com	r24
     7f0:	84 23       	and	r24, r20
     7f2:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
     7f4:	19 82       	std	Y+1, r1	; 0x01
     7f6:	08 c0       	rjmp	.+16     	; 0x808 <DIO_setPinDirection+0x224>
				break;
            default:
            	enu_ErrorState = DIO_E_PARAM_INVALID_PORT_ID;	/* Invalid port id */
     7f8:	81 e0       	ldi	r24, 0x01	; 1
     7fa:	89 83       	std	Y+1, r24	; 0x01
     7fc:	05 c0       	rjmp	.+10     	; 0x808 <DIO_setPinDirection+0x224>
                break;
			}
		}
		else
		{
			enu_ErrorState = DIO_E_PARAM_INVALID_PORT_DIR;	/* Invalid port direction */
     7fe:	84 e0       	ldi	r24, 0x04	; 4
     800:	89 83       	std	Y+1, r24	; 0x01
     802:	02 c0       	rjmp	.+4      	; 0x808 <DIO_setPinDirection+0x224>
		}
	}
	else
	{
		enu_ErrorState = DIO_E_PARAM_INVALID_PIN_ID;	/* Invalid pin id */
     804:	82 e0       	ldi	r24, 0x02	; 2
     806:	89 83       	std	Y+1, r24	; 0x01
	}
	return enu_ErrorState;
     808:	89 81       	ldd	r24, Y+1	; 0x01
}
     80a:	28 96       	adiw	r28, 0x08	; 8
     80c:	0f b6       	in	r0, 0x3f	; 63
     80e:	f8 94       	cli
     810:	de bf       	out	0x3e, r29	; 62
     812:	0f be       	out	0x3f, r0	; 63
     814:	cd bf       	out	0x3d, r28	; 61
     816:	cf 91       	pop	r28
     818:	df 91       	pop	r29
     81a:	08 95       	ret

0000081c <DIO_writePort>:
 * [in/out]		 	None
 *
 * [Returns]:       Error State
 ******************************************************************************/
enuDIO_E_STATE_t DIO_writePort(enuDIO_PortId_t enu_portID, uint8_t au8_portValue)
{
     81c:	df 93       	push	r29
     81e:	cf 93       	push	r28
     820:	00 d0       	rcall	.+0      	; 0x822 <DIO_writePort+0x6>
     822:	00 d0       	rcall	.+0      	; 0x824 <DIO_writePort+0x8>
     824:	0f 92       	push	r0
     826:	cd b7       	in	r28, 0x3d	; 61
     828:	de b7       	in	r29, 0x3e	; 62
     82a:	8a 83       	std	Y+2, r24	; 0x02
     82c:	6b 83       	std	Y+3, r22	; 0x03
	enuDIO_E_STATE_t enu_ErrorState = E_NOT_OK;
     82e:	81 e0       	ldi	r24, 0x01	; 1
     830:	89 83       	std	Y+1, r24	; 0x01

    switch (enu_portID)
     832:	8a 81       	ldd	r24, Y+2	; 0x02
     834:	28 2f       	mov	r18, r24
     836:	30 e0       	ldi	r19, 0x00	; 0
     838:	3d 83       	std	Y+5, r19	; 0x05
     83a:	2c 83       	std	Y+4, r18	; 0x04
     83c:	8c 81       	ldd	r24, Y+4	; 0x04
     83e:	9d 81       	ldd	r25, Y+5	; 0x05
     840:	81 30       	cpi	r24, 0x01	; 1
     842:	91 05       	cpc	r25, r1
     844:	d9 f0       	breq	.+54     	; 0x87c <__stack+0x1d>
     846:	2c 81       	ldd	r18, Y+4	; 0x04
     848:	3d 81       	ldd	r19, Y+5	; 0x05
     84a:	22 30       	cpi	r18, 0x02	; 2
     84c:	31 05       	cpc	r19, r1
     84e:	2c f4       	brge	.+10     	; 0x85a <DIO_writePort+0x3e>
     850:	8c 81       	ldd	r24, Y+4	; 0x04
     852:	9d 81       	ldd	r25, Y+5	; 0x05
     854:	00 97       	sbiw	r24, 0x00	; 0
     856:	61 f0       	breq	.+24     	; 0x870 <__stack+0x11>
     858:	23 c0       	rjmp	.+70     	; 0x8a0 <__stack+0x41>
     85a:	2c 81       	ldd	r18, Y+4	; 0x04
     85c:	3d 81       	ldd	r19, Y+5	; 0x05
     85e:	22 30       	cpi	r18, 0x02	; 2
     860:	31 05       	cpc	r19, r1
     862:	91 f0       	breq	.+36     	; 0x888 <__stack+0x29>
     864:	8c 81       	ldd	r24, Y+4	; 0x04
     866:	9d 81       	ldd	r25, Y+5	; 0x05
     868:	83 30       	cpi	r24, 0x03	; 3
     86a:	91 05       	cpc	r25, r1
     86c:	99 f0       	breq	.+38     	; 0x894 <__stack+0x35>
     86e:	18 c0       	rjmp	.+48     	; 0x8a0 <__stack+0x41>
    {
    case DIO_PORTA:
        PORTA_DATA_R = au8_portValue;
     870:	eb e3       	ldi	r30, 0x3B	; 59
     872:	f0 e0       	ldi	r31, 0x00	; 0
     874:	8b 81       	ldd	r24, Y+3	; 0x03
     876:	80 83       	st	Z, r24
        enu_ErrorState = DIO_E_PARAM_VALID;
     878:	19 82       	std	Y+1, r1	; 0x01
     87a:	14 c0       	rjmp	.+40     	; 0x8a4 <__stack+0x45>
        break;
    case DIO_PORTB:
        PORTB_DATA_R = au8_portValue;
     87c:	e8 e3       	ldi	r30, 0x38	; 56
     87e:	f0 e0       	ldi	r31, 0x00	; 0
     880:	8b 81       	ldd	r24, Y+3	; 0x03
     882:	80 83       	st	Z, r24
        enu_ErrorState = DIO_E_PARAM_VALID;
     884:	19 82       	std	Y+1, r1	; 0x01
     886:	0e c0       	rjmp	.+28     	; 0x8a4 <__stack+0x45>
        break;
    case DIO_PORTC:
        PORTC_DATA_R = au8_portValue;
     888:	e5 e3       	ldi	r30, 0x35	; 53
     88a:	f0 e0       	ldi	r31, 0x00	; 0
     88c:	8b 81       	ldd	r24, Y+3	; 0x03
     88e:	80 83       	st	Z, r24
        enu_ErrorState = DIO_E_PARAM_VALID;
     890:	19 82       	std	Y+1, r1	; 0x01
     892:	08 c0       	rjmp	.+16     	; 0x8a4 <__stack+0x45>
        break;
    case DIO_PORTD:
        PORTD_DATA_R = au8_portValue;
     894:	e2 e3       	ldi	r30, 0x32	; 50
     896:	f0 e0       	ldi	r31, 0x00	; 0
     898:	8b 81       	ldd	r24, Y+3	; 0x03
     89a:	80 83       	st	Z, r24
        enu_ErrorState = DIO_E_PARAM_VALID;
     89c:	19 82       	std	Y+1, r1	; 0x01
     89e:	02 c0       	rjmp	.+4      	; 0x8a4 <__stack+0x45>
        break;
    default:
    	enu_ErrorState = DIO_E_PARAM_INVALID_PORT_ID;	/* Invalid port id */
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	89 83       	std	Y+1, r24	; 0x01
        break;
    }
    return enu_ErrorState;
     8a4:	89 81       	ldd	r24, Y+1	; 0x01
}
     8a6:	0f 90       	pop	r0
     8a8:	0f 90       	pop	r0
     8aa:	0f 90       	pop	r0
     8ac:	0f 90       	pop	r0
     8ae:	0f 90       	pop	r0
     8b0:	cf 91       	pop	r28
     8b2:	df 91       	pop	r29
     8b4:	08 95       	ret

000008b6 <DIO_writePin>:
 * [in/out]		 	None
 *
 * [Returns]:       Error State
 ******************************************************************************/
enuDIO_E_STATE_t DIO_writePin(enuDIO_PortId_t enu_portID, enuDIO_PinId_t enu_pinID, uint8_t au8_pinValue)
{
     8b6:	df 93       	push	r29
     8b8:	cf 93       	push	r28
     8ba:	cd b7       	in	r28, 0x3d	; 61
     8bc:	de b7       	in	r29, 0x3e	; 62
     8be:	28 97       	sbiw	r28, 0x08	; 8
     8c0:	0f b6       	in	r0, 0x3f	; 63
     8c2:	f8 94       	cli
     8c4:	de bf       	out	0x3e, r29	; 62
     8c6:	0f be       	out	0x3f, r0	; 63
     8c8:	cd bf       	out	0x3d, r28	; 61
     8ca:	8a 83       	std	Y+2, r24	; 0x02
     8cc:	6b 83       	std	Y+3, r22	; 0x03
     8ce:	4c 83       	std	Y+4, r20	; 0x04
	enuDIO_E_STATE_t enu_ErrorState = E_NOT_OK;
     8d0:	81 e0       	ldi	r24, 0x01	; 1
     8d2:	89 83       	std	Y+1, r24	; 0x01

	/* Check if the pin id is one of the existed pin or not */
	if ((enu_pinID >= PIN_0) && (enu_pinID <= PIN_7))
     8d4:	8b 81       	ldd	r24, Y+3	; 0x03
     8d6:	88 30       	cpi	r24, 0x08	; 8
     8d8:	08 f0       	brcs	.+2      	; 0x8dc <DIO_writePin+0x26>
     8da:	fd c0       	rjmp	.+506    	; 0xad6 <DIO_writePin+0x220>
	{
		if (au8_pinValue == HIGH)
     8dc:	8c 81       	ldd	r24, Y+4	; 0x04
     8de:	81 30       	cpi	r24, 0x01	; 1
     8e0:	09 f0       	breq	.+2      	; 0x8e4 <DIO_writePin+0x2e>
     8e2:	77 c0       	rjmp	.+238    	; 0x9d2 <DIO_writePin+0x11c>
		{
			switch (enu_portID)
     8e4:	8a 81       	ldd	r24, Y+2	; 0x02
     8e6:	28 2f       	mov	r18, r24
     8e8:	30 e0       	ldi	r19, 0x00	; 0
     8ea:	38 87       	std	Y+8, r19	; 0x08
     8ec:	2f 83       	std	Y+7, r18	; 0x07
     8ee:	8f 81       	ldd	r24, Y+7	; 0x07
     8f0:	98 85       	ldd	r25, Y+8	; 0x08
     8f2:	81 30       	cpi	r24, 0x01	; 1
     8f4:	91 05       	cpc	r25, r1
     8f6:	59 f1       	breq	.+86     	; 0x94e <DIO_writePin+0x98>
     8f8:	2f 81       	ldd	r18, Y+7	; 0x07
     8fa:	38 85       	ldd	r19, Y+8	; 0x08
     8fc:	22 30       	cpi	r18, 0x02	; 2
     8fe:	31 05       	cpc	r19, r1
     900:	2c f4       	brge	.+10     	; 0x90c <DIO_writePin+0x56>
     902:	8f 81       	ldd	r24, Y+7	; 0x07
     904:	98 85       	ldd	r25, Y+8	; 0x08
     906:	00 97       	sbiw	r24, 0x00	; 0
     908:	69 f0       	breq	.+26     	; 0x924 <DIO_writePin+0x6e>
     90a:	60 c0       	rjmp	.+192    	; 0x9cc <DIO_writePin+0x116>
     90c:	2f 81       	ldd	r18, Y+7	; 0x07
     90e:	38 85       	ldd	r19, Y+8	; 0x08
     910:	22 30       	cpi	r18, 0x02	; 2
     912:	31 05       	cpc	r19, r1
     914:	89 f1       	breq	.+98     	; 0x978 <DIO_writePin+0xc2>
     916:	8f 81       	ldd	r24, Y+7	; 0x07
     918:	98 85       	ldd	r25, Y+8	; 0x08
     91a:	83 30       	cpi	r24, 0x03	; 3
     91c:	91 05       	cpc	r25, r1
     91e:	09 f4       	brne	.+2      	; 0x922 <DIO_writePin+0x6c>
     920:	40 c0       	rjmp	.+128    	; 0x9a2 <DIO_writePin+0xec>
     922:	54 c0       	rjmp	.+168    	; 0x9cc <DIO_writePin+0x116>
			{
			case DIO_PORTA:
				SET_BIT(PORTA_DATA_R, enu_pinID);
     924:	ab e3       	ldi	r26, 0x3B	; 59
     926:	b0 e0       	ldi	r27, 0x00	; 0
     928:	eb e3       	ldi	r30, 0x3B	; 59
     92a:	f0 e0       	ldi	r31, 0x00	; 0
     92c:	80 81       	ld	r24, Z
     92e:	48 2f       	mov	r20, r24
     930:	8b 81       	ldd	r24, Y+3	; 0x03
     932:	28 2f       	mov	r18, r24
     934:	30 e0       	ldi	r19, 0x00	; 0
     936:	81 e0       	ldi	r24, 0x01	; 1
     938:	90 e0       	ldi	r25, 0x00	; 0
     93a:	02 2e       	mov	r0, r18
     93c:	02 c0       	rjmp	.+4      	; 0x942 <DIO_writePin+0x8c>
     93e:	88 0f       	add	r24, r24
     940:	99 1f       	adc	r25, r25
     942:	0a 94       	dec	r0
     944:	e2 f7       	brpl	.-8      	; 0x93e <DIO_writePin+0x88>
     946:	84 2b       	or	r24, r20
     948:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
     94a:	19 82       	std	Y+1, r1	; 0x01
     94c:	c6 c0       	rjmp	.+396    	; 0xada <DIO_writePin+0x224>
				break;
			case DIO_PORTB:
				SET_BIT(PORTB_DATA_R, enu_pinID);
     94e:	a8 e3       	ldi	r26, 0x38	; 56
     950:	b0 e0       	ldi	r27, 0x00	; 0
     952:	e8 e3       	ldi	r30, 0x38	; 56
     954:	f0 e0       	ldi	r31, 0x00	; 0
     956:	80 81       	ld	r24, Z
     958:	48 2f       	mov	r20, r24
     95a:	8b 81       	ldd	r24, Y+3	; 0x03
     95c:	28 2f       	mov	r18, r24
     95e:	30 e0       	ldi	r19, 0x00	; 0
     960:	81 e0       	ldi	r24, 0x01	; 1
     962:	90 e0       	ldi	r25, 0x00	; 0
     964:	02 2e       	mov	r0, r18
     966:	02 c0       	rjmp	.+4      	; 0x96c <DIO_writePin+0xb6>
     968:	88 0f       	add	r24, r24
     96a:	99 1f       	adc	r25, r25
     96c:	0a 94       	dec	r0
     96e:	e2 f7       	brpl	.-8      	; 0x968 <DIO_writePin+0xb2>
     970:	84 2b       	or	r24, r20
     972:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
     974:	19 82       	std	Y+1, r1	; 0x01
     976:	b1 c0       	rjmp	.+354    	; 0xada <DIO_writePin+0x224>
				break;
			case DIO_PORTC:
				SET_BIT(PORTC_DATA_R, enu_pinID);
     978:	a5 e3       	ldi	r26, 0x35	; 53
     97a:	b0 e0       	ldi	r27, 0x00	; 0
     97c:	e5 e3       	ldi	r30, 0x35	; 53
     97e:	f0 e0       	ldi	r31, 0x00	; 0
     980:	80 81       	ld	r24, Z
     982:	48 2f       	mov	r20, r24
     984:	8b 81       	ldd	r24, Y+3	; 0x03
     986:	28 2f       	mov	r18, r24
     988:	30 e0       	ldi	r19, 0x00	; 0
     98a:	81 e0       	ldi	r24, 0x01	; 1
     98c:	90 e0       	ldi	r25, 0x00	; 0
     98e:	02 2e       	mov	r0, r18
     990:	02 c0       	rjmp	.+4      	; 0x996 <DIO_writePin+0xe0>
     992:	88 0f       	add	r24, r24
     994:	99 1f       	adc	r25, r25
     996:	0a 94       	dec	r0
     998:	e2 f7       	brpl	.-8      	; 0x992 <DIO_writePin+0xdc>
     99a:	84 2b       	or	r24, r20
     99c:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
     99e:	19 82       	std	Y+1, r1	; 0x01
     9a0:	9c c0       	rjmp	.+312    	; 0xada <DIO_writePin+0x224>
				break;
			case DIO_PORTD:
				SET_BIT(PORTD_DATA_R, enu_pinID);
     9a2:	a2 e3       	ldi	r26, 0x32	; 50
     9a4:	b0 e0       	ldi	r27, 0x00	; 0
     9a6:	e2 e3       	ldi	r30, 0x32	; 50
     9a8:	f0 e0       	ldi	r31, 0x00	; 0
     9aa:	80 81       	ld	r24, Z
     9ac:	48 2f       	mov	r20, r24
     9ae:	8b 81       	ldd	r24, Y+3	; 0x03
     9b0:	28 2f       	mov	r18, r24
     9b2:	30 e0       	ldi	r19, 0x00	; 0
     9b4:	81 e0       	ldi	r24, 0x01	; 1
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	02 2e       	mov	r0, r18
     9ba:	02 c0       	rjmp	.+4      	; 0x9c0 <DIO_writePin+0x10a>
     9bc:	88 0f       	add	r24, r24
     9be:	99 1f       	adc	r25, r25
     9c0:	0a 94       	dec	r0
     9c2:	e2 f7       	brpl	.-8      	; 0x9bc <DIO_writePin+0x106>
     9c4:	84 2b       	or	r24, r20
     9c6:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
     9c8:	19 82       	std	Y+1, r1	; 0x01
     9ca:	87 c0       	rjmp	.+270    	; 0xada <DIO_writePin+0x224>
				break;
            default:
            	enu_ErrorState = DIO_E_PARAM_INVALID_PORT_ID;	/* Invalid port id */
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	89 83       	std	Y+1, r24	; 0x01
     9d0:	84 c0       	rjmp	.+264    	; 0xada <DIO_writePin+0x224>
                break;
			}
		}
		else if (au8_pinValue == LOW)
     9d2:	8c 81       	ldd	r24, Y+4	; 0x04
     9d4:	88 23       	and	r24, r24
     9d6:	09 f0       	breq	.+2      	; 0x9da <DIO_writePin+0x124>
     9d8:	7b c0       	rjmp	.+246    	; 0xad0 <DIO_writePin+0x21a>
		{
			switch (enu_portID)
     9da:	8a 81       	ldd	r24, Y+2	; 0x02
     9dc:	28 2f       	mov	r18, r24
     9de:	30 e0       	ldi	r19, 0x00	; 0
     9e0:	3e 83       	std	Y+6, r19	; 0x06
     9e2:	2d 83       	std	Y+5, r18	; 0x05
     9e4:	8d 81       	ldd	r24, Y+5	; 0x05
     9e6:	9e 81       	ldd	r25, Y+6	; 0x06
     9e8:	81 30       	cpi	r24, 0x01	; 1
     9ea:	91 05       	cpc	r25, r1
     9ec:	61 f1       	breq	.+88     	; 0xa46 <DIO_writePin+0x190>
     9ee:	2d 81       	ldd	r18, Y+5	; 0x05
     9f0:	3e 81       	ldd	r19, Y+6	; 0x06
     9f2:	22 30       	cpi	r18, 0x02	; 2
     9f4:	31 05       	cpc	r19, r1
     9f6:	2c f4       	brge	.+10     	; 0xa02 <DIO_writePin+0x14c>
     9f8:	8d 81       	ldd	r24, Y+5	; 0x05
     9fa:	9e 81       	ldd	r25, Y+6	; 0x06
     9fc:	00 97       	sbiw	r24, 0x00	; 0
     9fe:	69 f0       	breq	.+26     	; 0xa1a <DIO_writePin+0x164>
     a00:	64 c0       	rjmp	.+200    	; 0xaca <DIO_writePin+0x214>
     a02:	2d 81       	ldd	r18, Y+5	; 0x05
     a04:	3e 81       	ldd	r19, Y+6	; 0x06
     a06:	22 30       	cpi	r18, 0x02	; 2
     a08:	31 05       	cpc	r19, r1
     a0a:	99 f1       	breq	.+102    	; 0xa72 <DIO_writePin+0x1bc>
     a0c:	8d 81       	ldd	r24, Y+5	; 0x05
     a0e:	9e 81       	ldd	r25, Y+6	; 0x06
     a10:	83 30       	cpi	r24, 0x03	; 3
     a12:	91 05       	cpc	r25, r1
     a14:	09 f4       	brne	.+2      	; 0xa18 <DIO_writePin+0x162>
     a16:	43 c0       	rjmp	.+134    	; 0xa9e <DIO_writePin+0x1e8>
     a18:	58 c0       	rjmp	.+176    	; 0xaca <DIO_writePin+0x214>
			{
			case DIO_PORTA:
				CLEAR_BIT(PORTA_DATA_R, enu_pinID);
     a1a:	ab e3       	ldi	r26, 0x3B	; 59
     a1c:	b0 e0       	ldi	r27, 0x00	; 0
     a1e:	eb e3       	ldi	r30, 0x3B	; 59
     a20:	f0 e0       	ldi	r31, 0x00	; 0
     a22:	80 81       	ld	r24, Z
     a24:	48 2f       	mov	r20, r24
     a26:	8b 81       	ldd	r24, Y+3	; 0x03
     a28:	28 2f       	mov	r18, r24
     a2a:	30 e0       	ldi	r19, 0x00	; 0
     a2c:	81 e0       	ldi	r24, 0x01	; 1
     a2e:	90 e0       	ldi	r25, 0x00	; 0
     a30:	02 2e       	mov	r0, r18
     a32:	02 c0       	rjmp	.+4      	; 0xa38 <DIO_writePin+0x182>
     a34:	88 0f       	add	r24, r24
     a36:	99 1f       	adc	r25, r25
     a38:	0a 94       	dec	r0
     a3a:	e2 f7       	brpl	.-8      	; 0xa34 <DIO_writePin+0x17e>
     a3c:	80 95       	com	r24
     a3e:	84 23       	and	r24, r20
     a40:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
     a42:	19 82       	std	Y+1, r1	; 0x01
     a44:	4a c0       	rjmp	.+148    	; 0xada <DIO_writePin+0x224>
				break;
			case DIO_PORTB:
				CLEAR_BIT(PORTB_DATA_R, enu_pinID);
     a46:	a8 e3       	ldi	r26, 0x38	; 56
     a48:	b0 e0       	ldi	r27, 0x00	; 0
     a4a:	e8 e3       	ldi	r30, 0x38	; 56
     a4c:	f0 e0       	ldi	r31, 0x00	; 0
     a4e:	80 81       	ld	r24, Z
     a50:	48 2f       	mov	r20, r24
     a52:	8b 81       	ldd	r24, Y+3	; 0x03
     a54:	28 2f       	mov	r18, r24
     a56:	30 e0       	ldi	r19, 0x00	; 0
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	90 e0       	ldi	r25, 0x00	; 0
     a5c:	02 2e       	mov	r0, r18
     a5e:	02 c0       	rjmp	.+4      	; 0xa64 <DIO_writePin+0x1ae>
     a60:	88 0f       	add	r24, r24
     a62:	99 1f       	adc	r25, r25
     a64:	0a 94       	dec	r0
     a66:	e2 f7       	brpl	.-8      	; 0xa60 <DIO_writePin+0x1aa>
     a68:	80 95       	com	r24
     a6a:	84 23       	and	r24, r20
     a6c:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
     a6e:	19 82       	std	Y+1, r1	; 0x01
     a70:	34 c0       	rjmp	.+104    	; 0xada <DIO_writePin+0x224>
				break;
			case DIO_PORTC:
				CLEAR_BIT(PORTC_DATA_R, enu_pinID);
     a72:	a5 e3       	ldi	r26, 0x35	; 53
     a74:	b0 e0       	ldi	r27, 0x00	; 0
     a76:	e5 e3       	ldi	r30, 0x35	; 53
     a78:	f0 e0       	ldi	r31, 0x00	; 0
     a7a:	80 81       	ld	r24, Z
     a7c:	48 2f       	mov	r20, r24
     a7e:	8b 81       	ldd	r24, Y+3	; 0x03
     a80:	28 2f       	mov	r18, r24
     a82:	30 e0       	ldi	r19, 0x00	; 0
     a84:	81 e0       	ldi	r24, 0x01	; 1
     a86:	90 e0       	ldi	r25, 0x00	; 0
     a88:	02 2e       	mov	r0, r18
     a8a:	02 c0       	rjmp	.+4      	; 0xa90 <DIO_writePin+0x1da>
     a8c:	88 0f       	add	r24, r24
     a8e:	99 1f       	adc	r25, r25
     a90:	0a 94       	dec	r0
     a92:	e2 f7       	brpl	.-8      	; 0xa8c <DIO_writePin+0x1d6>
     a94:	80 95       	com	r24
     a96:	84 23       	and	r24, r20
     a98:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
     a9a:	19 82       	std	Y+1, r1	; 0x01
     a9c:	1e c0       	rjmp	.+60     	; 0xada <DIO_writePin+0x224>
				break;
			case DIO_PORTD:
				CLEAR_BIT(PORTD_DATA_R, enu_pinID);
     a9e:	a2 e3       	ldi	r26, 0x32	; 50
     aa0:	b0 e0       	ldi	r27, 0x00	; 0
     aa2:	e2 e3       	ldi	r30, 0x32	; 50
     aa4:	f0 e0       	ldi	r31, 0x00	; 0
     aa6:	80 81       	ld	r24, Z
     aa8:	48 2f       	mov	r20, r24
     aaa:	8b 81       	ldd	r24, Y+3	; 0x03
     aac:	28 2f       	mov	r18, r24
     aae:	30 e0       	ldi	r19, 0x00	; 0
     ab0:	81 e0       	ldi	r24, 0x01	; 1
     ab2:	90 e0       	ldi	r25, 0x00	; 0
     ab4:	02 2e       	mov	r0, r18
     ab6:	02 c0       	rjmp	.+4      	; 0xabc <DIO_writePin+0x206>
     ab8:	88 0f       	add	r24, r24
     aba:	99 1f       	adc	r25, r25
     abc:	0a 94       	dec	r0
     abe:	e2 f7       	brpl	.-8      	; 0xab8 <DIO_writePin+0x202>
     ac0:	80 95       	com	r24
     ac2:	84 23       	and	r24, r20
     ac4:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
     ac6:	19 82       	std	Y+1, r1	; 0x01
     ac8:	08 c0       	rjmp	.+16     	; 0xada <DIO_writePin+0x224>
				break;
            default:
            	enu_ErrorState = DIO_E_PARAM_INVALID_PORT_ID;	/* Invalid port id */
     aca:	81 e0       	ldi	r24, 0x01	; 1
     acc:	89 83       	std	Y+1, r24	; 0x01
     ace:	05 c0       	rjmp	.+10     	; 0xada <DIO_writePin+0x224>
                break;
			}
		}
		else
        {
			enu_ErrorState = DIO_E_PARAM_INVALID_PORT_DIR;	/* Invalid port direction */
     ad0:	84 e0       	ldi	r24, 0x04	; 4
     ad2:	89 83       	std	Y+1, r24	; 0x01
     ad4:	02 c0       	rjmp	.+4      	; 0xada <DIO_writePin+0x224>
		}
	}
	else
	{
		enu_ErrorState = DIO_E_PARAM_INVALID_PIN_ID;	/* Invalid pin id */
     ad6:	82 e0       	ldi	r24, 0x02	; 2
     ad8:	89 83       	std	Y+1, r24	; 0x01
	}
	return enu_ErrorState;
     ada:	89 81       	ldd	r24, Y+1	; 0x01
}
     adc:	28 96       	adiw	r28, 0x08	; 8
     ade:	0f b6       	in	r0, 0x3f	; 63
     ae0:	f8 94       	cli
     ae2:	de bf       	out	0x3e, r29	; 62
     ae4:	0f be       	out	0x3f, r0	; 63
     ae6:	cd bf       	out	0x3d, r28	; 61
     ae8:	cf 91       	pop	r28
     aea:	df 91       	pop	r29
     aec:	08 95       	ret

00000aee <DIO_readPort>:
 * [in/out]		 	None
 *
 * [Returns]:       Error State
 ******************************************************************************/
enuDIO_E_STATE_t DIO_readPort(enuDIO_PortId_t enu_portID, uint8_t * ptr_portState)
{
     aee:	df 93       	push	r29
     af0:	cf 93       	push	r28
     af2:	00 d0       	rcall	.+0      	; 0xaf4 <DIO_readPort+0x6>
     af4:	00 d0       	rcall	.+0      	; 0xaf6 <DIO_readPort+0x8>
     af6:	00 d0       	rcall	.+0      	; 0xaf8 <DIO_readPort+0xa>
     af8:	cd b7       	in	r28, 0x3d	; 61
     afa:	de b7       	in	r29, 0x3e	; 62
     afc:	8a 83       	std	Y+2, r24	; 0x02
     afe:	7c 83       	std	Y+4, r23	; 0x04
     b00:	6b 83       	std	Y+3, r22	; 0x03
	enuDIO_E_STATE_t enu_ErrorState = E_NOT_OK;
     b02:	81 e0       	ldi	r24, 0x01	; 1
     b04:	89 83       	std	Y+1, r24	; 0x01

	/* Check if the pointer is NULL pointer or not */
	if(ptr_portState == NULL_PTR)
     b06:	8b 81       	ldd	r24, Y+3	; 0x03
     b08:	9c 81       	ldd	r25, Y+4	; 0x04
     b0a:	00 97       	sbiw	r24, 0x00	; 0
     b0c:	19 f4       	brne	.+6      	; 0xb14 <DIO_readPort+0x26>
    {
		enu_ErrorState = DIO_E_PARAM_POINTER;	/* Invalid pointer */
     b0e:	85 e0       	ldi	r24, 0x05	; 5
     b10:	89 83       	std	Y+1, r24	; 0x01
     b12:	41 c0       	rjmp	.+130    	; 0xb96 <DIO_readPort+0xa8>
	}
	else
	{
		switch (enu_portID)
     b14:	8a 81       	ldd	r24, Y+2	; 0x02
     b16:	28 2f       	mov	r18, r24
     b18:	30 e0       	ldi	r19, 0x00	; 0
     b1a:	3e 83       	std	Y+6, r19	; 0x06
     b1c:	2d 83       	std	Y+5, r18	; 0x05
     b1e:	8d 81       	ldd	r24, Y+5	; 0x05
     b20:	9e 81       	ldd	r25, Y+6	; 0x06
     b22:	81 30       	cpi	r24, 0x01	; 1
     b24:	91 05       	cpc	r25, r1
     b26:	e9 f0       	breq	.+58     	; 0xb62 <DIO_readPort+0x74>
     b28:	2d 81       	ldd	r18, Y+5	; 0x05
     b2a:	3e 81       	ldd	r19, Y+6	; 0x06
     b2c:	22 30       	cpi	r18, 0x02	; 2
     b2e:	31 05       	cpc	r19, r1
     b30:	2c f4       	brge	.+10     	; 0xb3c <DIO_readPort+0x4e>
     b32:	8d 81       	ldd	r24, Y+5	; 0x05
     b34:	9e 81       	ldd	r25, Y+6	; 0x06
     b36:	00 97       	sbiw	r24, 0x00	; 0
     b38:	61 f0       	breq	.+24     	; 0xb52 <DIO_readPort+0x64>
     b3a:	2b c0       	rjmp	.+86     	; 0xb92 <DIO_readPort+0xa4>
     b3c:	2d 81       	ldd	r18, Y+5	; 0x05
     b3e:	3e 81       	ldd	r19, Y+6	; 0x06
     b40:	22 30       	cpi	r18, 0x02	; 2
     b42:	31 05       	cpc	r19, r1
     b44:	b1 f0       	breq	.+44     	; 0xb72 <DIO_readPort+0x84>
     b46:	8d 81       	ldd	r24, Y+5	; 0x05
     b48:	9e 81       	ldd	r25, Y+6	; 0x06
     b4a:	83 30       	cpi	r24, 0x03	; 3
     b4c:	91 05       	cpc	r25, r1
     b4e:	c9 f0       	breq	.+50     	; 0xb82 <DIO_readPort+0x94>
     b50:	20 c0       	rjmp	.+64     	; 0xb92 <DIO_readPort+0xa4>
		{
		case DIO_PORTA:
			*ptr_portState = PINA_INPUT_R;
     b52:	e9 e3       	ldi	r30, 0x39	; 57
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	eb 81       	ldd	r30, Y+3	; 0x03
     b5a:	fc 81       	ldd	r31, Y+4	; 0x04
     b5c:	80 83       	st	Z, r24
			enu_ErrorState = DIO_E_PARAM_VALID;
     b5e:	19 82       	std	Y+1, r1	; 0x01
     b60:	1a c0       	rjmp	.+52     	; 0xb96 <DIO_readPort+0xa8>
			break;
		case DIO_PORTB:
			*ptr_portState = PINB_INPUT_R;
     b62:	e6 e3       	ldi	r30, 0x36	; 54
     b64:	f0 e0       	ldi	r31, 0x00	; 0
     b66:	80 81       	ld	r24, Z
     b68:	eb 81       	ldd	r30, Y+3	; 0x03
     b6a:	fc 81       	ldd	r31, Y+4	; 0x04
     b6c:	80 83       	st	Z, r24
			enu_ErrorState = DIO_E_PARAM_VALID;;
     b6e:	19 82       	std	Y+1, r1	; 0x01
     b70:	12 c0       	rjmp	.+36     	; 0xb96 <DIO_readPort+0xa8>
			break;
		case DIO_PORTC:
			*ptr_portState = PINC_INPUT_R;
     b72:	e3 e3       	ldi	r30, 0x33	; 51
     b74:	f0 e0       	ldi	r31, 0x00	; 0
     b76:	80 81       	ld	r24, Z
     b78:	eb 81       	ldd	r30, Y+3	; 0x03
     b7a:	fc 81       	ldd	r31, Y+4	; 0x04
     b7c:	80 83       	st	Z, r24
			enu_ErrorState = DIO_E_PARAM_VALID;
     b7e:	19 82       	std	Y+1, r1	; 0x01
     b80:	0a c0       	rjmp	.+20     	; 0xb96 <DIO_readPort+0xa8>
			break;
		case DIO_PORTD:
			*ptr_portState = PIND_INPUT_R;
     b82:	e0 e3       	ldi	r30, 0x30	; 48
     b84:	f0 e0       	ldi	r31, 0x00	; 0
     b86:	80 81       	ld	r24, Z
     b88:	eb 81       	ldd	r30, Y+3	; 0x03
     b8a:	fc 81       	ldd	r31, Y+4	; 0x04
     b8c:	80 83       	st	Z, r24
			enu_ErrorState = DIO_E_PARAM_VALID;
     b8e:	19 82       	std	Y+1, r1	; 0x01
     b90:	02 c0       	rjmp	.+4      	; 0xb96 <DIO_readPort+0xa8>
			break;
		default:
			enu_ErrorState = DIO_E_PARAM_INVALID_PORT_ID;	/* Invalid port id */
     b92:	81 e0       	ldi	r24, 0x01	; 1
     b94:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return enu_ErrorState;
     b96:	89 81       	ldd	r24, Y+1	; 0x01
}
     b98:	26 96       	adiw	r28, 0x06	; 6
     b9a:	0f b6       	in	r0, 0x3f	; 63
     b9c:	f8 94       	cli
     b9e:	de bf       	out	0x3e, r29	; 62
     ba0:	0f be       	out	0x3f, r0	; 63
     ba2:	cd bf       	out	0x3d, r28	; 61
     ba4:	cf 91       	pop	r28
     ba6:	df 91       	pop	r29
     ba8:	08 95       	ret

00000baa <DIO_readPin>:
 * [in/out]		 	None
 *
 * [Returns]:       Error State
 ******************************************************************************/
enuDIO_E_STATE_t DIO_readPin(enuDIO_PortId_t enu_portID, enuDIO_PinId_t enu_pinID, uint8_t * ptr_pinState)
{
     baa:	df 93       	push	r29
     bac:	cf 93       	push	r28
     bae:	cd b7       	in	r28, 0x3d	; 61
     bb0:	de b7       	in	r29, 0x3e	; 62
     bb2:	27 97       	sbiw	r28, 0x07	; 7
     bb4:	0f b6       	in	r0, 0x3f	; 63
     bb6:	f8 94       	cli
     bb8:	de bf       	out	0x3e, r29	; 62
     bba:	0f be       	out	0x3f, r0	; 63
     bbc:	cd bf       	out	0x3d, r28	; 61
     bbe:	8a 83       	std	Y+2, r24	; 0x02
     bc0:	6b 83       	std	Y+3, r22	; 0x03
     bc2:	5d 83       	std	Y+5, r21	; 0x05
     bc4:	4c 83       	std	Y+4, r20	; 0x04
	enuDIO_E_STATE_t enu_ErrorState = E_NOT_OK;
     bc6:	81 e0       	ldi	r24, 0x01	; 1
     bc8:	89 83       	std	Y+1, r24	; 0x01

	/* Check if the pointer is NULL pointer or not */
	if(ptr_pinState == NULL_PTR)
     bca:	8c 81       	ldd	r24, Y+4	; 0x04
     bcc:	9d 81       	ldd	r25, Y+5	; 0x05
     bce:	00 97       	sbiw	r24, 0x00	; 0
     bd0:	19 f4       	brne	.+6      	; 0xbd8 <DIO_readPin+0x2e>
    {
		enu_ErrorState = DIO_E_PARAM_POINTER;
     bd2:	85 e0       	ldi	r24, 0x05	; 5
     bd4:	89 83       	std	Y+1, r24	; 0x01
     bd6:	af c0       	rjmp	.+350    	; 0xd36 <DIO_readPin+0x18c>
	}
	else
	{
        if((enu_pinID >= PIN_0) && (enu_pinID <= PIN_7))
     bd8:	8b 81       	ldd	r24, Y+3	; 0x03
     bda:	88 30       	cpi	r24, 0x08	; 8
     bdc:	08 f0       	brcs	.+2      	; 0xbe0 <DIO_readPin+0x36>
     bde:	a9 c0       	rjmp	.+338    	; 0xd32 <DIO_readPin+0x188>
        {
            switch (enu_portID)
     be0:	8a 81       	ldd	r24, Y+2	; 0x02
     be2:	28 2f       	mov	r18, r24
     be4:	30 e0       	ldi	r19, 0x00	; 0
     be6:	3f 83       	std	Y+7, r19	; 0x07
     be8:	2e 83       	std	Y+6, r18	; 0x06
     bea:	4e 81       	ldd	r20, Y+6	; 0x06
     bec:	5f 81       	ldd	r21, Y+7	; 0x07
     bee:	41 30       	cpi	r20, 0x01	; 1
     bf0:	51 05       	cpc	r21, r1
     bf2:	c9 f1       	breq	.+114    	; 0xc66 <DIO_readPin+0xbc>
     bf4:	8e 81       	ldd	r24, Y+6	; 0x06
     bf6:	9f 81       	ldd	r25, Y+7	; 0x07
     bf8:	82 30       	cpi	r24, 0x02	; 2
     bfa:	91 05       	cpc	r25, r1
     bfc:	34 f4       	brge	.+12     	; 0xc0a <DIO_readPin+0x60>
     bfe:	2e 81       	ldd	r18, Y+6	; 0x06
     c00:	3f 81       	ldd	r19, Y+7	; 0x07
     c02:	21 15       	cp	r18, r1
     c04:	31 05       	cpc	r19, r1
     c06:	71 f0       	breq	.+28     	; 0xc24 <DIO_readPin+0x7a>
     c08:	91 c0       	rjmp	.+290    	; 0xd2c <DIO_readPin+0x182>
     c0a:	4e 81       	ldd	r20, Y+6	; 0x06
     c0c:	5f 81       	ldd	r21, Y+7	; 0x07
     c0e:	42 30       	cpi	r20, 0x02	; 2
     c10:	51 05       	cpc	r21, r1
     c12:	09 f4       	brne	.+2      	; 0xc16 <DIO_readPin+0x6c>
     c14:	49 c0       	rjmp	.+146    	; 0xca8 <DIO_readPin+0xfe>
     c16:	8e 81       	ldd	r24, Y+6	; 0x06
     c18:	9f 81       	ldd	r25, Y+7	; 0x07
     c1a:	83 30       	cpi	r24, 0x03	; 3
     c1c:	91 05       	cpc	r25, r1
     c1e:	09 f4       	brne	.+2      	; 0xc22 <DIO_readPin+0x78>
     c20:	64 c0       	rjmp	.+200    	; 0xcea <DIO_readPin+0x140>
     c22:	84 c0       	rjmp	.+264    	; 0xd2c <DIO_readPin+0x182>
            {
            case DIO_PORTA:
                *ptr_pinState = READ_BIT(PINA_INPUT_R, enu_pinID);
     c24:	e9 e3       	ldi	r30, 0x39	; 57
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	80 81       	ld	r24, Z
     c2a:	48 2f       	mov	r20, r24
     c2c:	50 e0       	ldi	r21, 0x00	; 0
     c2e:	8b 81       	ldd	r24, Y+3	; 0x03
     c30:	28 2f       	mov	r18, r24
     c32:	30 e0       	ldi	r19, 0x00	; 0
     c34:	81 e0       	ldi	r24, 0x01	; 1
     c36:	90 e0       	ldi	r25, 0x00	; 0
     c38:	02 c0       	rjmp	.+4      	; 0xc3e <DIO_readPin+0x94>
     c3a:	88 0f       	add	r24, r24
     c3c:	99 1f       	adc	r25, r25
     c3e:	2a 95       	dec	r18
     c40:	e2 f7       	brpl	.-8      	; 0xc3a <DIO_readPin+0x90>
     c42:	9a 01       	movw	r18, r20
     c44:	28 23       	and	r18, r24
     c46:	39 23       	and	r19, r25
     c48:	8b 81       	ldd	r24, Y+3	; 0x03
     c4a:	88 2f       	mov	r24, r24
     c4c:	90 e0       	ldi	r25, 0x00	; 0
     c4e:	a9 01       	movw	r20, r18
     c50:	02 c0       	rjmp	.+4      	; 0xc56 <DIO_readPin+0xac>
     c52:	55 95       	asr	r21
     c54:	47 95       	ror	r20
     c56:	8a 95       	dec	r24
     c58:	e2 f7       	brpl	.-8      	; 0xc52 <DIO_readPin+0xa8>
     c5a:	ca 01       	movw	r24, r20
     c5c:	ec 81       	ldd	r30, Y+4	; 0x04
     c5e:	fd 81       	ldd	r31, Y+5	; 0x05
     c60:	80 83       	st	Z, r24
                enu_ErrorState = DIO_E_PARAM_VALID;
     c62:	19 82       	std	Y+1, r1	; 0x01
     c64:	68 c0       	rjmp	.+208    	; 0xd36 <DIO_readPin+0x18c>
                break;
            case DIO_PORTB:
                *ptr_pinState = READ_BIT(PINB_INPUT_R, enu_pinID);
     c66:	e6 e3       	ldi	r30, 0x36	; 54
     c68:	f0 e0       	ldi	r31, 0x00	; 0
     c6a:	80 81       	ld	r24, Z
     c6c:	48 2f       	mov	r20, r24
     c6e:	50 e0       	ldi	r21, 0x00	; 0
     c70:	8b 81       	ldd	r24, Y+3	; 0x03
     c72:	28 2f       	mov	r18, r24
     c74:	30 e0       	ldi	r19, 0x00	; 0
     c76:	81 e0       	ldi	r24, 0x01	; 1
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	02 c0       	rjmp	.+4      	; 0xc80 <DIO_readPin+0xd6>
     c7c:	88 0f       	add	r24, r24
     c7e:	99 1f       	adc	r25, r25
     c80:	2a 95       	dec	r18
     c82:	e2 f7       	brpl	.-8      	; 0xc7c <DIO_readPin+0xd2>
     c84:	9a 01       	movw	r18, r20
     c86:	28 23       	and	r18, r24
     c88:	39 23       	and	r19, r25
     c8a:	8b 81       	ldd	r24, Y+3	; 0x03
     c8c:	88 2f       	mov	r24, r24
     c8e:	90 e0       	ldi	r25, 0x00	; 0
     c90:	a9 01       	movw	r20, r18
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <DIO_readPin+0xee>
     c94:	55 95       	asr	r21
     c96:	47 95       	ror	r20
     c98:	8a 95       	dec	r24
     c9a:	e2 f7       	brpl	.-8      	; 0xc94 <DIO_readPin+0xea>
     c9c:	ca 01       	movw	r24, r20
     c9e:	ec 81       	ldd	r30, Y+4	; 0x04
     ca0:	fd 81       	ldd	r31, Y+5	; 0x05
     ca2:	80 83       	st	Z, r24
                enu_ErrorState = DIO_E_PARAM_VALID;
     ca4:	19 82       	std	Y+1, r1	; 0x01
     ca6:	47 c0       	rjmp	.+142    	; 0xd36 <DIO_readPin+0x18c>
                break;
            case DIO_PORTC:
                *ptr_pinState = READ_BIT(PINC_INPUT_R, enu_pinID);
     ca8:	e3 e3       	ldi	r30, 0x33	; 51
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	80 81       	ld	r24, Z
     cae:	48 2f       	mov	r20, r24
     cb0:	50 e0       	ldi	r21, 0x00	; 0
     cb2:	8b 81       	ldd	r24, Y+3	; 0x03
     cb4:	28 2f       	mov	r18, r24
     cb6:	30 e0       	ldi	r19, 0x00	; 0
     cb8:	81 e0       	ldi	r24, 0x01	; 1
     cba:	90 e0       	ldi	r25, 0x00	; 0
     cbc:	02 c0       	rjmp	.+4      	; 0xcc2 <DIO_readPin+0x118>
     cbe:	88 0f       	add	r24, r24
     cc0:	99 1f       	adc	r25, r25
     cc2:	2a 95       	dec	r18
     cc4:	e2 f7       	brpl	.-8      	; 0xcbe <DIO_readPin+0x114>
     cc6:	9a 01       	movw	r18, r20
     cc8:	28 23       	and	r18, r24
     cca:	39 23       	and	r19, r25
     ccc:	8b 81       	ldd	r24, Y+3	; 0x03
     cce:	88 2f       	mov	r24, r24
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	a9 01       	movw	r20, r18
     cd4:	02 c0       	rjmp	.+4      	; 0xcda <DIO_readPin+0x130>
     cd6:	55 95       	asr	r21
     cd8:	47 95       	ror	r20
     cda:	8a 95       	dec	r24
     cdc:	e2 f7       	brpl	.-8      	; 0xcd6 <DIO_readPin+0x12c>
     cde:	ca 01       	movw	r24, r20
     ce0:	ec 81       	ldd	r30, Y+4	; 0x04
     ce2:	fd 81       	ldd	r31, Y+5	; 0x05
     ce4:	80 83       	st	Z, r24
                enu_ErrorState = DIO_E_PARAM_VALID;
     ce6:	19 82       	std	Y+1, r1	; 0x01
     ce8:	26 c0       	rjmp	.+76     	; 0xd36 <DIO_readPin+0x18c>
                break;
            case DIO_PORTD:
                *ptr_pinState = READ_BIT(PIND_INPUT_R, enu_pinID);
     cea:	e0 e3       	ldi	r30, 0x30	; 48
     cec:	f0 e0       	ldi	r31, 0x00	; 0
     cee:	80 81       	ld	r24, Z
     cf0:	48 2f       	mov	r20, r24
     cf2:	50 e0       	ldi	r21, 0x00	; 0
     cf4:	8b 81       	ldd	r24, Y+3	; 0x03
     cf6:	28 2f       	mov	r18, r24
     cf8:	30 e0       	ldi	r19, 0x00	; 0
     cfa:	81 e0       	ldi	r24, 0x01	; 1
     cfc:	90 e0       	ldi	r25, 0x00	; 0
     cfe:	02 c0       	rjmp	.+4      	; 0xd04 <DIO_readPin+0x15a>
     d00:	88 0f       	add	r24, r24
     d02:	99 1f       	adc	r25, r25
     d04:	2a 95       	dec	r18
     d06:	e2 f7       	brpl	.-8      	; 0xd00 <DIO_readPin+0x156>
     d08:	9a 01       	movw	r18, r20
     d0a:	28 23       	and	r18, r24
     d0c:	39 23       	and	r19, r25
     d0e:	8b 81       	ldd	r24, Y+3	; 0x03
     d10:	88 2f       	mov	r24, r24
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	a9 01       	movw	r20, r18
     d16:	02 c0       	rjmp	.+4      	; 0xd1c <DIO_readPin+0x172>
     d18:	55 95       	asr	r21
     d1a:	47 95       	ror	r20
     d1c:	8a 95       	dec	r24
     d1e:	e2 f7       	brpl	.-8      	; 0xd18 <DIO_readPin+0x16e>
     d20:	ca 01       	movw	r24, r20
     d22:	ec 81       	ldd	r30, Y+4	; 0x04
     d24:	fd 81       	ldd	r31, Y+5	; 0x05
     d26:	80 83       	st	Z, r24
                enu_ErrorState = DIO_E_PARAM_VALID;
     d28:	19 82       	std	Y+1, r1	; 0x01
     d2a:	05 c0       	rjmp	.+10     	; 0xd36 <DIO_readPin+0x18c>
                break;
            default:
            	enu_ErrorState = DIO_E_PARAM_INVALID_PORT_ID;	/* Invalid port id */
     d2c:	81 e0       	ldi	r24, 0x01	; 1
     d2e:	89 83       	std	Y+1, r24	; 0x01
     d30:	02 c0       	rjmp	.+4      	; 0xd36 <DIO_readPin+0x18c>
                break;
            }
        }
        else
        {
        	enu_ErrorState = DIO_E_PARAM_INVALID_PIN_ID;	/* Invalid pin id */
     d32:	82 e0       	ldi	r24, 0x02	; 2
     d34:	89 83       	std	Y+1, r24	; 0x01
        }
	}
    return enu_ErrorState;
     d36:	89 81       	ldd	r24, Y+1	; 0x01
}
     d38:	27 96       	adiw	r28, 0x07	; 7
     d3a:	0f b6       	in	r0, 0x3f	; 63
     d3c:	f8 94       	cli
     d3e:	de bf       	out	0x3e, r29	; 62
     d40:	0f be       	out	0x3f, r0	; 63
     d42:	cd bf       	out	0x3d, r28	; 61
     d44:	cf 91       	pop	r28
     d46:	df 91       	pop	r29
     d48:	08 95       	ret

00000d4a <DIO_TogglePin>:
 * [in/out]		 	None
 *
 * [Returns]:       Error State
 ******************************************************************************/
enuDIO_E_STATE_t DIO_TogglePin(enuDIO_PortId_t enu_portID, enuDIO_PinId_t enu_pinID)
{
     d4a:	df 93       	push	r29
     d4c:	cf 93       	push	r28
     d4e:	00 d0       	rcall	.+0      	; 0xd50 <DIO_TogglePin+0x6>
     d50:	00 d0       	rcall	.+0      	; 0xd52 <DIO_TogglePin+0x8>
     d52:	0f 92       	push	r0
     d54:	cd b7       	in	r28, 0x3d	; 61
     d56:	de b7       	in	r29, 0x3e	; 62
     d58:	8a 83       	std	Y+2, r24	; 0x02
     d5a:	6b 83       	std	Y+3, r22	; 0x03
	enuDIO_E_STATE_t enu_ErrorState = E_NOT_OK;
     d5c:	81 e0       	ldi	r24, 0x01	; 1
     d5e:	89 83       	std	Y+1, r24	; 0x01

	/* Check if the pointer is NULL pointer or not */
    if ((enu_pinID >= PIN_0) && (enu_pinID <= PIN_7))
     d60:	8b 81       	ldd	r24, Y+3	; 0x03
     d62:	88 30       	cpi	r24, 0x08	; 8
     d64:	08 f0       	brcs	.+2      	; 0xd68 <DIO_TogglePin+0x1e>
     d66:	77 c0       	rjmp	.+238    	; 0xe56 <DIO_TogglePin+0x10c>
    {
        switch (enu_portID)
     d68:	8a 81       	ldd	r24, Y+2	; 0x02
     d6a:	28 2f       	mov	r18, r24
     d6c:	30 e0       	ldi	r19, 0x00	; 0
     d6e:	3d 83       	std	Y+5, r19	; 0x05
     d70:	2c 83       	std	Y+4, r18	; 0x04
     d72:	8c 81       	ldd	r24, Y+4	; 0x04
     d74:	9d 81       	ldd	r25, Y+5	; 0x05
     d76:	81 30       	cpi	r24, 0x01	; 1
     d78:	91 05       	cpc	r25, r1
     d7a:	59 f1       	breq	.+86     	; 0xdd2 <DIO_TogglePin+0x88>
     d7c:	2c 81       	ldd	r18, Y+4	; 0x04
     d7e:	3d 81       	ldd	r19, Y+5	; 0x05
     d80:	22 30       	cpi	r18, 0x02	; 2
     d82:	31 05       	cpc	r19, r1
     d84:	2c f4       	brge	.+10     	; 0xd90 <DIO_TogglePin+0x46>
     d86:	8c 81       	ldd	r24, Y+4	; 0x04
     d88:	9d 81       	ldd	r25, Y+5	; 0x05
     d8a:	00 97       	sbiw	r24, 0x00	; 0
     d8c:	69 f0       	breq	.+26     	; 0xda8 <DIO_TogglePin+0x5e>
     d8e:	60 c0       	rjmp	.+192    	; 0xe50 <DIO_TogglePin+0x106>
     d90:	2c 81       	ldd	r18, Y+4	; 0x04
     d92:	3d 81       	ldd	r19, Y+5	; 0x05
     d94:	22 30       	cpi	r18, 0x02	; 2
     d96:	31 05       	cpc	r19, r1
     d98:	89 f1       	breq	.+98     	; 0xdfc <DIO_TogglePin+0xb2>
     d9a:	8c 81       	ldd	r24, Y+4	; 0x04
     d9c:	9d 81       	ldd	r25, Y+5	; 0x05
     d9e:	83 30       	cpi	r24, 0x03	; 3
     da0:	91 05       	cpc	r25, r1
     da2:	09 f4       	brne	.+2      	; 0xda6 <DIO_TogglePin+0x5c>
     da4:	40 c0       	rjmp	.+128    	; 0xe26 <DIO_TogglePin+0xdc>
     da6:	54 c0       	rjmp	.+168    	; 0xe50 <DIO_TogglePin+0x106>
        {
        case DIO_PORTA:
            TOGGLE_BIT(PORTA_DATA_R, enu_pinID);
     da8:	ab e3       	ldi	r26, 0x3B	; 59
     daa:	b0 e0       	ldi	r27, 0x00	; 0
     dac:	eb e3       	ldi	r30, 0x3B	; 59
     dae:	f0 e0       	ldi	r31, 0x00	; 0
     db0:	80 81       	ld	r24, Z
     db2:	48 2f       	mov	r20, r24
     db4:	8b 81       	ldd	r24, Y+3	; 0x03
     db6:	28 2f       	mov	r18, r24
     db8:	30 e0       	ldi	r19, 0x00	; 0
     dba:	81 e0       	ldi	r24, 0x01	; 1
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	02 2e       	mov	r0, r18
     dc0:	02 c0       	rjmp	.+4      	; 0xdc6 <DIO_TogglePin+0x7c>
     dc2:	88 0f       	add	r24, r24
     dc4:	99 1f       	adc	r25, r25
     dc6:	0a 94       	dec	r0
     dc8:	e2 f7       	brpl	.-8      	; 0xdc2 <DIO_TogglePin+0x78>
     dca:	84 27       	eor	r24, r20
     dcc:	8c 93       	st	X, r24
            enu_ErrorState = DIO_E_PARAM_VALID;
     dce:	19 82       	std	Y+1, r1	; 0x01
     dd0:	44 c0       	rjmp	.+136    	; 0xe5a <DIO_TogglePin+0x110>
            break;
        case DIO_PORTB:
        	TOGGLE_BIT(PORTB_DATA_R, enu_pinID);
     dd2:	a8 e3       	ldi	r26, 0x38	; 56
     dd4:	b0 e0       	ldi	r27, 0x00	; 0
     dd6:	e8 e3       	ldi	r30, 0x38	; 56
     dd8:	f0 e0       	ldi	r31, 0x00	; 0
     dda:	80 81       	ld	r24, Z
     ddc:	48 2f       	mov	r20, r24
     dde:	8b 81       	ldd	r24, Y+3	; 0x03
     de0:	28 2f       	mov	r18, r24
     de2:	30 e0       	ldi	r19, 0x00	; 0
     de4:	81 e0       	ldi	r24, 0x01	; 1
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	02 2e       	mov	r0, r18
     dea:	02 c0       	rjmp	.+4      	; 0xdf0 <DIO_TogglePin+0xa6>
     dec:	88 0f       	add	r24, r24
     dee:	99 1f       	adc	r25, r25
     df0:	0a 94       	dec	r0
     df2:	e2 f7       	brpl	.-8      	; 0xdec <DIO_TogglePin+0xa2>
     df4:	84 27       	eor	r24, r20
     df6:	8c 93       	st	X, r24
            enu_ErrorState = DIO_E_PARAM_VALID;
     df8:	19 82       	std	Y+1, r1	; 0x01
     dfa:	2f c0       	rjmp	.+94     	; 0xe5a <DIO_TogglePin+0x110>
            break;
        case DIO_PORTC:
        	TOGGLE_BIT(PORTC_DATA_R, enu_pinID);
     dfc:	a5 e3       	ldi	r26, 0x35	; 53
     dfe:	b0 e0       	ldi	r27, 0x00	; 0
     e00:	e5 e3       	ldi	r30, 0x35	; 53
     e02:	f0 e0       	ldi	r31, 0x00	; 0
     e04:	80 81       	ld	r24, Z
     e06:	48 2f       	mov	r20, r24
     e08:	8b 81       	ldd	r24, Y+3	; 0x03
     e0a:	28 2f       	mov	r18, r24
     e0c:	30 e0       	ldi	r19, 0x00	; 0
     e0e:	81 e0       	ldi	r24, 0x01	; 1
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	02 2e       	mov	r0, r18
     e14:	02 c0       	rjmp	.+4      	; 0xe1a <DIO_TogglePin+0xd0>
     e16:	88 0f       	add	r24, r24
     e18:	99 1f       	adc	r25, r25
     e1a:	0a 94       	dec	r0
     e1c:	e2 f7       	brpl	.-8      	; 0xe16 <DIO_TogglePin+0xcc>
     e1e:	84 27       	eor	r24, r20
     e20:	8c 93       	st	X, r24
            enu_ErrorState = DIO_E_PARAM_VALID;
     e22:	19 82       	std	Y+1, r1	; 0x01
     e24:	1a c0       	rjmp	.+52     	; 0xe5a <DIO_TogglePin+0x110>
            break;
        case DIO_PORTD:
        	TOGGLE_BIT(PORTD_DATA_R, enu_pinID);
     e26:	a2 e3       	ldi	r26, 0x32	; 50
     e28:	b0 e0       	ldi	r27, 0x00	; 0
     e2a:	e2 e3       	ldi	r30, 0x32	; 50
     e2c:	f0 e0       	ldi	r31, 0x00	; 0
     e2e:	80 81       	ld	r24, Z
     e30:	48 2f       	mov	r20, r24
     e32:	8b 81       	ldd	r24, Y+3	; 0x03
     e34:	28 2f       	mov	r18, r24
     e36:	30 e0       	ldi	r19, 0x00	; 0
     e38:	81 e0       	ldi	r24, 0x01	; 1
     e3a:	90 e0       	ldi	r25, 0x00	; 0
     e3c:	02 2e       	mov	r0, r18
     e3e:	02 c0       	rjmp	.+4      	; 0xe44 <DIO_TogglePin+0xfa>
     e40:	88 0f       	add	r24, r24
     e42:	99 1f       	adc	r25, r25
     e44:	0a 94       	dec	r0
     e46:	e2 f7       	brpl	.-8      	; 0xe40 <DIO_TogglePin+0xf6>
     e48:	84 27       	eor	r24, r20
     e4a:	8c 93       	st	X, r24
            enu_ErrorState = DIO_E_PARAM_VALID;
     e4c:	19 82       	std	Y+1, r1	; 0x01
     e4e:	05 c0       	rjmp	.+10     	; 0xe5a <DIO_TogglePin+0x110>
            break;
        default:
        	enu_ErrorState = E_NOT_OK;	/* Invalid port id */
     e50:	81 e0       	ldi	r24, 0x01	; 1
     e52:	89 83       	std	Y+1, r24	; 0x01
     e54:	02 c0       	rjmp	.+4      	; 0xe5a <DIO_TogglePin+0x110>
            break;
        }
    }
    else
    {
    	enu_ErrorState = DIO_E_PARAM_INVALID_PIN_ID;	/* Invalid pin id */
     e56:	82 e0       	ldi	r24, 0x02	; 2
     e58:	89 83       	std	Y+1, r24	; 0x01
    }
    return enu_ErrorState;
     e5a:	89 81       	ldd	r24, Y+1	; 0x01
}
     e5c:	0f 90       	pop	r0
     e5e:	0f 90       	pop	r0
     e60:	0f 90       	pop	r0
     e62:	0f 90       	pop	r0
     e64:	0f 90       	pop	r0
     e66:	cf 91       	pop	r28
     e68:	df 91       	pop	r29
     e6a:	08 95       	ret

00000e6c <LED_init>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 *******************************************************************************/
void LED_init(void)
{
     e6c:	df 93       	push	r29
     e6e:	cf 93       	push	r28
     e70:	0f 92       	push	r0
     e72:	cd b7       	in	r28, 0x3d	; 61
     e74:	de b7       	in	r29, 0x3e	; 62
	enuLED_Id_t enu_LedId;

	for(enu_LedId = LED_0; enu_LedId <= LED_NUM; enu_LedId++)
     e76:	19 82       	std	Y+1, r1	; 0x01
     e78:	0d c0       	rjmp	.+26     	; 0xe94 <LED_init+0x28>
	{
		/* Configure LED pin as an output pin */
		DIO_setPinDirection(LED_PORT_NUM, enu_LedId , OUTPUT);
     e7a:	81 e0       	ldi	r24, 0x01	; 1
     e7c:	69 81       	ldd	r22, Y+1	; 0x01
     e7e:	41 e0       	ldi	r20, 0x01	; 1
     e80:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <DIO_setPinDirection>
		/* Turn off LED at the beginning as the initial state */
		DIO_writePin(LED_PORT_NUM, enu_LedId, LOW);
     e84:	81 e0       	ldi	r24, 0x01	; 1
     e86:	69 81       	ldd	r22, Y+1	; 0x01
     e88:	40 e0       	ldi	r20, 0x00	; 0
     e8a:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <DIO_writePin>
 *******************************************************************************/
void LED_init(void)
{
	enuLED_Id_t enu_LedId;

	for(enu_LedId = LED_0; enu_LedId <= LED_NUM; enu_LedId++)
     e8e:	89 81       	ldd	r24, Y+1	; 0x01
     e90:	8f 5f       	subi	r24, 0xFF	; 255
     e92:	89 83       	std	Y+1, r24	; 0x01
     e94:	89 81       	ldd	r24, Y+1	; 0x01
     e96:	85 30       	cpi	r24, 0x05	; 5
     e98:	80 f3       	brcs	.-32     	; 0xe7a <LED_init+0xe>
		/* Configure LED pin as an output pin */
		DIO_setPinDirection(LED_PORT_NUM, enu_LedId , OUTPUT);
		/* Turn off LED at the beginning as the initial state */
		DIO_writePin(LED_PORT_NUM, enu_LedId, LOW);
	}
}
     e9a:	0f 90       	pop	r0
     e9c:	cf 91       	pop	r28
     e9e:	df 91       	pop	r29
     ea0:	08 95       	ret

00000ea2 <LED_turnOn>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 *******************************************************************************/
void LED_turnOn(const enuLED_Id_t enu_LedId)
{
     ea2:	df 93       	push	r29
     ea4:	cf 93       	push	r28
     ea6:	0f 92       	push	r0
     ea8:	cd b7       	in	r28, 0x3d	; 61
     eaa:	de b7       	in	r29, 0x3e	; 62
     eac:	89 83       	std	Y+1, r24	; 0x01
	DIO_writePin(LED_PORT_NUM, enu_LedId, HIGH);	/* Turn On LED */
     eae:	81 e0       	ldi	r24, 0x01	; 1
     eb0:	69 81       	ldd	r22, Y+1	; 0x01
     eb2:	41 e0       	ldi	r20, 0x01	; 1
     eb4:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <DIO_writePin>
}
     eb8:	0f 90       	pop	r0
     eba:	cf 91       	pop	r28
     ebc:	df 91       	pop	r29
     ebe:	08 95       	ret

00000ec0 <LED_turnOff>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 *******************************************************************************/
void LED_turnOff(const enuLED_Id_t enu_LedId)
{
     ec0:	df 93       	push	r29
     ec2:	cf 93       	push	r28
     ec4:	0f 92       	push	r0
     ec6:	cd b7       	in	r28, 0x3d	; 61
     ec8:	de b7       	in	r29, 0x3e	; 62
     eca:	89 83       	std	Y+1, r24	; 0x01
	DIO_writePin(LED_PORT_NUM, enu_LedId, LOW);	/* Turn Off LED */
     ecc:	81 e0       	ldi	r24, 0x01	; 1
     ece:	69 81       	ldd	r22, Y+1	; 0x01
     ed0:	40 e0       	ldi	r20, 0x00	; 0
     ed2:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <DIO_writePin>
}
     ed6:	0f 90       	pop	r0
     ed8:	cf 91       	pop	r28
     eda:	df 91       	pop	r29
     edc:	08 95       	ret

00000ede <LED_toggle>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 *******************************************************************************/
void LED_toggle(const enuLED_Id_t enu_LedId)
{
     ede:	df 93       	push	r29
     ee0:	cf 93       	push	r28
     ee2:	0f 92       	push	r0
     ee4:	cd b7       	in	r28, 0x3d	; 61
     ee6:	de b7       	in	r29, 0x3e	; 62
     ee8:	89 83       	std	Y+1, r24	; 0x01
	DIO_TogglePin(LED_PORT_NUM, enu_LedId);	/* Toggle the LED */
     eea:	81 e0       	ldi	r24, 0x01	; 1
     eec:	69 81       	ldd	r22, Y+1	; 0x01
     eee:	0e 94 a5 06 	call	0xd4a	; 0xd4a <DIO_TogglePin>
}
     ef2:	0f 90       	pop	r0
     ef4:	cf 91       	pop	r28
     ef6:	df 91       	pop	r29
     ef8:	08 95       	ret

00000efa <App_init>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 *******************************************************************************/
void App_init(void)
{
     efa:	df 93       	push	r29
     efc:	cf 93       	push	r28
     efe:	cd b7       	in	r28, 0x3d	; 61
     f00:	de b7       	in	r29, 0x3e	; 62
     f02:	2d 97       	sbiw	r28, 0x0d	; 13
     f04:	0f b6       	in	r0, 0x3f	; 63
     f06:	f8 94       	cli
     f08:	de bf       	out	0x3e, r29	; 62
     f0a:	0f be       	out	0x3f, r0	; 63
     f0c:	cd bf       	out	0x3d, r28	; 61
	LED_init();	/* Initialize LED Driver */
     f0e:	0e 94 36 07 	call	0xe6c	; 0xe6c <LED_init>
	UART_ConfigType uart_config = {BPS_9600, NORMAL_SPEED, EIGHT_BITS, DISABLED, ONE_BIT};
     f12:	ce 01       	movw	r24, r28
     f14:	01 96       	adiw	r24, 0x01	; 1
     f16:	9a 87       	std	Y+10, r25	; 0x0a
     f18:	89 87       	std	Y+9, r24	; 0x09
     f1a:	e9 ea       	ldi	r30, 0xA9	; 169
     f1c:	f0 e0       	ldi	r31, 0x00	; 0
     f1e:	fc 87       	std	Y+12, r31	; 0x0c
     f20:	eb 87       	std	Y+11, r30	; 0x0b
     f22:	f8 e0       	ldi	r31, 0x08	; 8
     f24:	fd 87       	std	Y+13, r31	; 0x0d
     f26:	eb 85       	ldd	r30, Y+11	; 0x0b
     f28:	fc 85       	ldd	r31, Y+12	; 0x0c
     f2a:	00 80       	ld	r0, Z
     f2c:	8b 85       	ldd	r24, Y+11	; 0x0b
     f2e:	9c 85       	ldd	r25, Y+12	; 0x0c
     f30:	01 96       	adiw	r24, 0x01	; 1
     f32:	9c 87       	std	Y+12, r25	; 0x0c
     f34:	8b 87       	std	Y+11, r24	; 0x0b
     f36:	e9 85       	ldd	r30, Y+9	; 0x09
     f38:	fa 85       	ldd	r31, Y+10	; 0x0a
     f3a:	00 82       	st	Z, r0
     f3c:	89 85       	ldd	r24, Y+9	; 0x09
     f3e:	9a 85       	ldd	r25, Y+10	; 0x0a
     f40:	01 96       	adiw	r24, 0x01	; 1
     f42:	9a 87       	std	Y+10, r25	; 0x0a
     f44:	89 87       	std	Y+9, r24	; 0x09
     f46:	9d 85       	ldd	r25, Y+13	; 0x0d
     f48:	91 50       	subi	r25, 0x01	; 1
     f4a:	9d 87       	std	Y+13, r25	; 0x0d
     f4c:	ed 85       	ldd	r30, Y+13	; 0x0d
     f4e:	ee 23       	and	r30, r30
     f50:	51 f7       	brne	.-44     	; 0xf26 <App_init+0x2c>
	UART_init(&uart_config);
     f52:	ce 01       	movw	r24, r28
     f54:	01 96       	adiw	r24, 0x01	; 1
     f56:	0e 94 49 00 	call	0x92	; 0x92 <UART_init>
}
     f5a:	2d 96       	adiw	r28, 0x0d	; 13
     f5c:	0f b6       	in	r0, 0x3f	; 63
     f5e:	f8 94       	cli
     f60:	de bf       	out	0x3e, r29	; 62
     f62:	0f be       	out	0x3f, r0	; 63
     f64:	cd bf       	out	0x3d, r28	; 61
     f66:	cf 91       	pop	r28
     f68:	df 91       	pop	r29
     f6a:	08 95       	ret

00000f6c <App_Update>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 *******************************************************************************/
void App_Update(void)
{
     f6c:	df 93       	push	r29
     f6e:	cf 93       	push	r28
     f70:	cd b7       	in	r28, 0x3d	; 61
     f72:	de b7       	in	r29, 0x3e	; 62
	UART_receiveString(gStr_message); /* Receive String from Terminal */
     f74:	82 eb       	ldi	r24, 0xB2	; 178
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	0e 94 cf 01 	call	0x39e	; 0x39e <UART_receiveString>

	if(strcmp(gStr_message, "START") == IDENTICAL)
     f7c:	82 eb       	ldi	r24, 0xB2	; 178
     f7e:	90 e0       	ldi	r25, 0x00	; 0
     f80:	20 e6       	ldi	r18, 0x60	; 96
     f82:	30 e0       	ldi	r19, 0x00	; 0
     f84:	b9 01       	movw	r22, r18
     f86:	0e 94 3e 08 	call	0x107c	; 0x107c <strcmp>
     f8a:	00 97       	sbiw	r24, 0x00	; 0
     f8c:	71 f4       	brne	.+28     	; 0xfaa <App_Update+0x3e>
	{
		LED_turnOn(LED_GREEN);
     f8e:	80 e0       	ldi	r24, 0x00	; 0
     f90:	0e 94 51 07 	call	0xea2	; 0xea2 <LED_turnOn>
		LED_turnOff(LED_YELLOW);
     f94:	81 e0       	ldi	r24, 0x01	; 1
     f96:	0e 94 60 07 	call	0xec0	; 0xec0 <LED_turnOff>
		LED_turnOff(LED_RED);
     f9a:	82 e0       	ldi	r24, 0x02	; 2
     f9c:	0e 94 60 07 	call	0xec0	; 0xec0 <LED_turnOff>
		UART_sendString("Green LED is on\r");
     fa0:	86 e6       	ldi	r24, 0x66	; 102
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	0e 94 a6 01 	call	0x34c	; 0x34c <UART_sendString>
     fa8:	3b c0       	rjmp	.+118    	; 0x1020 <App_Update+0xb4>
	}
	else if(strcmp(gStr_message, "WAIT") == IDENTICAL)
     faa:	82 eb       	ldi	r24, 0xB2	; 178
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	27 e7       	ldi	r18, 0x77	; 119
     fb0:	30 e0       	ldi	r19, 0x00	; 0
     fb2:	b9 01       	movw	r22, r18
     fb4:	0e 94 3e 08 	call	0x107c	; 0x107c <strcmp>
     fb8:	00 97       	sbiw	r24, 0x00	; 0
     fba:	71 f4       	brne	.+28     	; 0xfd8 <App_Update+0x6c>
	{
		LED_turnOn(LED_YELLOW);
     fbc:	81 e0       	ldi	r24, 0x01	; 1
     fbe:	0e 94 51 07 	call	0xea2	; 0xea2 <LED_turnOn>
		LED_turnOff(LED_GREEN);
     fc2:	80 e0       	ldi	r24, 0x00	; 0
     fc4:	0e 94 60 07 	call	0xec0	; 0xec0 <LED_turnOff>
		LED_turnOff(LED_RED);
     fc8:	82 e0       	ldi	r24, 0x02	; 2
     fca:	0e 94 60 07 	call	0xec0	; 0xec0 <LED_turnOff>
		UART_sendString("Yellow LED is on\r");
     fce:	8c e7       	ldi	r24, 0x7C	; 124
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	0e 94 a6 01 	call	0x34c	; 0x34c <UART_sendString>
     fd6:	24 c0       	rjmp	.+72     	; 0x1020 <App_Update+0xb4>
	}
	else if(strcmp(gStr_message, "STOP") == IDENTICAL)
     fd8:	82 eb       	ldi	r24, 0xB2	; 178
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	2e e8       	ldi	r18, 0x8E	; 142
     fde:	30 e0       	ldi	r19, 0x00	; 0
     fe0:	b9 01       	movw	r22, r18
     fe2:	0e 94 3e 08 	call	0x107c	; 0x107c <strcmp>
     fe6:	00 97       	sbiw	r24, 0x00	; 0
     fe8:	71 f4       	brne	.+28     	; 0x1006 <App_Update+0x9a>
	{
		LED_turnOn(LED_RED);
     fea:	82 e0       	ldi	r24, 0x02	; 2
     fec:	0e 94 51 07 	call	0xea2	; 0xea2 <LED_turnOn>
		LED_turnOff(LED_YELLOW);
     ff0:	81 e0       	ldi	r24, 0x01	; 1
     ff2:	0e 94 60 07 	call	0xec0	; 0xec0 <LED_turnOff>
		LED_turnOff(LED_GREEN);
     ff6:	80 e0       	ldi	r24, 0x00	; 0
     ff8:	0e 94 60 07 	call	0xec0	; 0xec0 <LED_turnOff>
		UART_sendString("Red LED is on\r");
     ffc:	83 e9       	ldi	r24, 0x93	; 147
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	0e 94 a6 01 	call	0x34c	; 0x34c <UART_sendString>
    1004:	0d c0       	rjmp	.+26     	; 0x1020 <App_Update+0xb4>
	}
	else if(strcmp(gStr_message, "AT") == IDENTICAL)
    1006:	82 eb       	ldi	r24, 0xB2	; 178
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	22 ea       	ldi	r18, 0xA2	; 162
    100c:	30 e0       	ldi	r19, 0x00	; 0
    100e:	b9 01       	movw	r22, r18
    1010:	0e 94 3e 08 	call	0x107c	; 0x107c <strcmp>
    1014:	00 97       	sbiw	r24, 0x00	; 0
    1016:	21 f4       	brne	.+8      	; 0x1020 <App_Update+0xb4>
	{
		UART_sendString("OK\r");
    1018:	85 ea       	ldi	r24, 0xA5	; 165
    101a:	90 e0       	ldi	r25, 0x00	; 0
    101c:	0e 94 a6 01 	call	0x34c	; 0x34c <UART_sendString>
	}
	else
	{
		/* No thing to do */
	}
}
    1020:	cf 91       	pop	r28
    1022:	df 91       	pop	r29
    1024:	08 95       	ret

00001026 <main>:
/*****************************************************************************************
 *                                MAIN FUNCTION                                          *
 *****************************************************************************************/

int main(void)
{
    1026:	df 93       	push	r29
    1028:	cf 93       	push	r28
    102a:	cd b7       	in	r28, 0x3d	; 61
    102c:	de b7       	in	r29, 0x3e	; 62
	/********************************************************************************
	 *                           SYSTEM INITIALIZATION                              *
	 ********************************************************************************/

	App_init();	/* Initialize the application */
    102e:	0e 94 7d 07 	call	0xefa	; 0xefa <App_init>
	 *                        APPLICATION	(SUPER LOOP)						    *
	 ********************************************************************************/

	while(1)
	{
		App_Update();
    1032:	0e 94 b6 07 	call	0xf6c	; 0xf6c <App_Update>
    1036:	fd cf       	rjmp	.-6      	; 0x1032 <main+0xc>

00001038 <__udivmodsi4>:
    1038:	a1 e2       	ldi	r26, 0x21	; 33
    103a:	1a 2e       	mov	r1, r26
    103c:	aa 1b       	sub	r26, r26
    103e:	bb 1b       	sub	r27, r27
    1040:	fd 01       	movw	r30, r26
    1042:	0d c0       	rjmp	.+26     	; 0x105e <__udivmodsi4_ep>

00001044 <__udivmodsi4_loop>:
    1044:	aa 1f       	adc	r26, r26
    1046:	bb 1f       	adc	r27, r27
    1048:	ee 1f       	adc	r30, r30
    104a:	ff 1f       	adc	r31, r31
    104c:	a2 17       	cp	r26, r18
    104e:	b3 07       	cpc	r27, r19
    1050:	e4 07       	cpc	r30, r20
    1052:	f5 07       	cpc	r31, r21
    1054:	20 f0       	brcs	.+8      	; 0x105e <__udivmodsi4_ep>
    1056:	a2 1b       	sub	r26, r18
    1058:	b3 0b       	sbc	r27, r19
    105a:	e4 0b       	sbc	r30, r20
    105c:	f5 0b       	sbc	r31, r21

0000105e <__udivmodsi4_ep>:
    105e:	66 1f       	adc	r22, r22
    1060:	77 1f       	adc	r23, r23
    1062:	88 1f       	adc	r24, r24
    1064:	99 1f       	adc	r25, r25
    1066:	1a 94       	dec	r1
    1068:	69 f7       	brne	.-38     	; 0x1044 <__udivmodsi4_loop>
    106a:	60 95       	com	r22
    106c:	70 95       	com	r23
    106e:	80 95       	com	r24
    1070:	90 95       	com	r25
    1072:	9b 01       	movw	r18, r22
    1074:	ac 01       	movw	r20, r24
    1076:	bd 01       	movw	r22, r26
    1078:	cf 01       	movw	r24, r30
    107a:	08 95       	ret

0000107c <strcmp>:
    107c:	fb 01       	movw	r30, r22
    107e:	dc 01       	movw	r26, r24
    1080:	8d 91       	ld	r24, X+
    1082:	01 90       	ld	r0, Z+
    1084:	80 19       	sub	r24, r0
    1086:	01 10       	cpse	r0, r1
    1088:	d9 f3       	breq	.-10     	; 0x1080 <strcmp+0x4>
    108a:	99 0b       	sbc	r25, r25
    108c:	08 95       	ret

0000108e <_exit>:
    108e:	f8 94       	cli

00001090 <__stop_program>:
    1090:	ff cf       	rjmp	.-2      	; 0x1090 <__stop_program>
