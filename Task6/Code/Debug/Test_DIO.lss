
Test_DIO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b30  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000001  00800060  00800060  00000ba4  2**0
                  ALLOC
  2 .stab         00001398  00000000  00000000  00000ba4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000cfe  00000000  00000000  00001f3c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 8d 05 	call	0xb1a	; 0xb1a <main>
  74:	0c 94 96 05 	jmp	0xb2c	; 0xb2c <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <DIO_setPortDirection>:
 * [in/out]		 	None
 *
 * [Returns]:       Error state
 ******************************************************************************/
enuDIO_E_STATE_t DIO_setPortDirection(enuDIO_PortId_t enu_portID, enuDIO_DirectionType_t enu_portDirection)
{
  7c:	df 93       	push	r29
  7e:	cf 93       	push	r28
  80:	cd b7       	in	r28, 0x3d	; 61
  82:	de b7       	in	r29, 0x3e	; 62
  84:	27 97       	sbiw	r28, 0x07	; 7
  86:	0f b6       	in	r0, 0x3f	; 63
  88:	f8 94       	cli
  8a:	de bf       	out	0x3e, r29	; 62
  8c:	0f be       	out	0x3f, r0	; 63
  8e:	cd bf       	out	0x3d, r28	; 61
  90:	8a 83       	std	Y+2, r24	; 0x02
  92:	6b 83       	std	Y+3, r22	; 0x03
	enuDIO_E_STATE_t enu_ErrorState = E_NOT_OK;
  94:	81 e0       	ldi	r24, 0x01	; 1
  96:	89 83       	std	Y+1, r24	; 0x01

	/* Check if the PORT is input or output */
    if(enu_portDirection == HIGH)
  98:	8b 81       	ldd	r24, Y+3	; 0x03
  9a:	81 30       	cpi	r24, 0x01	; 1
  9c:	d1 f5       	brne	.+116    	; 0x112 <DIO_setPortDirection+0x96>
    {
    	switch (enu_portID)
  9e:	8a 81       	ldd	r24, Y+2	; 0x02
  a0:	28 2f       	mov	r18, r24
  a2:	30 e0       	ldi	r19, 0x00	; 0
  a4:	3f 83       	std	Y+7, r19	; 0x07
  a6:	2e 83       	std	Y+6, r18	; 0x06
  a8:	8e 81       	ldd	r24, Y+6	; 0x06
  aa:	9f 81       	ldd	r25, Y+7	; 0x07
  ac:	81 30       	cpi	r24, 0x01	; 1
  ae:	91 05       	cpc	r25, r1
  b0:	d9 f0       	breq	.+54     	; 0xe8 <DIO_setPortDirection+0x6c>
  b2:	2e 81       	ldd	r18, Y+6	; 0x06
  b4:	3f 81       	ldd	r19, Y+7	; 0x07
  b6:	22 30       	cpi	r18, 0x02	; 2
  b8:	31 05       	cpc	r19, r1
  ba:	2c f4       	brge	.+10     	; 0xc6 <DIO_setPortDirection+0x4a>
  bc:	8e 81       	ldd	r24, Y+6	; 0x06
  be:	9f 81       	ldd	r25, Y+7	; 0x07
  c0:	00 97       	sbiw	r24, 0x00	; 0
  c2:	61 f0       	breq	.+24     	; 0xdc <DIO_setPortDirection+0x60>
  c4:	23 c0       	rjmp	.+70     	; 0x10c <DIO_setPortDirection+0x90>
  c6:	2e 81       	ldd	r18, Y+6	; 0x06
  c8:	3f 81       	ldd	r19, Y+7	; 0x07
  ca:	22 30       	cpi	r18, 0x02	; 2
  cc:	31 05       	cpc	r19, r1
  ce:	91 f0       	breq	.+36     	; 0xf4 <DIO_setPortDirection+0x78>
  d0:	8e 81       	ldd	r24, Y+6	; 0x06
  d2:	9f 81       	ldd	r25, Y+7	; 0x07
  d4:	83 30       	cpi	r24, 0x03	; 3
  d6:	91 05       	cpc	r25, r1
  d8:	99 f0       	breq	.+38     	; 0x100 <DIO_setPortDirection+0x84>
  da:	18 c0       	rjmp	.+48     	; 0x10c <DIO_setPortDirection+0x90>
		{
		case DIO_PORTA:
			DDRA_DIR_R = OUTPUT_PORT;
  dc:	ea e3       	ldi	r30, 0x3A	; 58
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	8f ef       	ldi	r24, 0xFF	; 255
  e2:	80 83       	st	Z, r24
			enu_ErrorState = DIO_E_PARAM_VALID;
  e4:	19 82       	std	Y+1, r1	; 0x01
  e6:	50 c0       	rjmp	.+160    	; 0x188 <DIO_setPortDirection+0x10c>
			break;
		case DIO_PORTB:
			DDRB_DIR_R = OUTPUT_PORT;
  e8:	e7 e3       	ldi	r30, 0x37	; 55
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	8f ef       	ldi	r24, 0xFF	; 255
  ee:	80 83       	st	Z, r24
			enu_ErrorState = DIO_E_PARAM_VALID;
  f0:	19 82       	std	Y+1, r1	; 0x01
  f2:	4a c0       	rjmp	.+148    	; 0x188 <DIO_setPortDirection+0x10c>
			break;
		case DIO_PORTC:
			DDRC_DIR_R = OUTPUT_PORT;
  f4:	e4 e3       	ldi	r30, 0x34	; 52
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	8f ef       	ldi	r24, 0xFF	; 255
  fa:	80 83       	st	Z, r24
			enu_ErrorState = DIO_E_PARAM_VALID;
  fc:	19 82       	std	Y+1, r1	; 0x01
  fe:	44 c0       	rjmp	.+136    	; 0x188 <DIO_setPortDirection+0x10c>
			break;
		case DIO_PORTD:
			DDRD_DIR_R = OUTPUT_PORT;
 100:	e1 e3       	ldi	r30, 0x31	; 49
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	8f ef       	ldi	r24, 0xFF	; 255
 106:	80 83       	st	Z, r24
			enu_ErrorState = DIO_E_PARAM_VALID;
 108:	19 82       	std	Y+1, r1	; 0x01
 10a:	3e c0       	rjmp	.+124    	; 0x188 <DIO_setPortDirection+0x10c>
			break;
		default:
			enu_ErrorState = DIO_E_PARAM_INVALID_PORT_ID;
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	89 83       	std	Y+1, r24	; 0x01
 110:	3b c0       	rjmp	.+118    	; 0x188 <DIO_setPortDirection+0x10c>
			break;
		}
    }
    else if(enu_portDirection == LOW)
 112:	8b 81       	ldd	r24, Y+3	; 0x03
 114:	88 23       	and	r24, r24
 116:	b1 f5       	brne	.+108    	; 0x184 <DIO_setPortDirection+0x108>
    {
		switch (enu_portID)
 118:	8a 81       	ldd	r24, Y+2	; 0x02
 11a:	28 2f       	mov	r18, r24
 11c:	30 e0       	ldi	r19, 0x00	; 0
 11e:	3d 83       	std	Y+5, r19	; 0x05
 120:	2c 83       	std	Y+4, r18	; 0x04
 122:	8c 81       	ldd	r24, Y+4	; 0x04
 124:	9d 81       	ldd	r25, Y+5	; 0x05
 126:	81 30       	cpi	r24, 0x01	; 1
 128:	91 05       	cpc	r25, r1
 12a:	d1 f0       	breq	.+52     	; 0x160 <DIO_setPortDirection+0xe4>
 12c:	2c 81       	ldd	r18, Y+4	; 0x04
 12e:	3d 81       	ldd	r19, Y+5	; 0x05
 130:	22 30       	cpi	r18, 0x02	; 2
 132:	31 05       	cpc	r19, r1
 134:	2c f4       	brge	.+10     	; 0x140 <DIO_setPortDirection+0xc4>
 136:	8c 81       	ldd	r24, Y+4	; 0x04
 138:	9d 81       	ldd	r25, Y+5	; 0x05
 13a:	00 97       	sbiw	r24, 0x00	; 0
 13c:	61 f0       	breq	.+24     	; 0x156 <DIO_setPortDirection+0xda>
 13e:	1f c0       	rjmp	.+62     	; 0x17e <DIO_setPortDirection+0x102>
 140:	2c 81       	ldd	r18, Y+4	; 0x04
 142:	3d 81       	ldd	r19, Y+5	; 0x05
 144:	22 30       	cpi	r18, 0x02	; 2
 146:	31 05       	cpc	r19, r1
 148:	81 f0       	breq	.+32     	; 0x16a <DIO_setPortDirection+0xee>
 14a:	8c 81       	ldd	r24, Y+4	; 0x04
 14c:	9d 81       	ldd	r25, Y+5	; 0x05
 14e:	83 30       	cpi	r24, 0x03	; 3
 150:	91 05       	cpc	r25, r1
 152:	81 f0       	breq	.+32     	; 0x174 <DIO_setPortDirection+0xf8>
 154:	14 c0       	rjmp	.+40     	; 0x17e <DIO_setPortDirection+0x102>
		{
		case DIO_PORTA:
			DDRA_DIR_R = INPUT_PORT;
 156:	ea e3       	ldi	r30, 0x3A	; 58
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	10 82       	st	Z, r1
			enu_ErrorState = DIO_E_PARAM_VALID;
 15c:	19 82       	std	Y+1, r1	; 0x01
 15e:	14 c0       	rjmp	.+40     	; 0x188 <DIO_setPortDirection+0x10c>
			break;
		case DIO_PORTB:
			DDRB_DIR_R = INPUT_PORT;
 160:	e7 e3       	ldi	r30, 0x37	; 55
 162:	f0 e0       	ldi	r31, 0x00	; 0
 164:	10 82       	st	Z, r1
			enu_ErrorState = DIO_E_PARAM_VALID;
 166:	19 82       	std	Y+1, r1	; 0x01
 168:	0f c0       	rjmp	.+30     	; 0x188 <DIO_setPortDirection+0x10c>
			break;
		case DIO_PORTC:
			DDRC_DIR_R = INPUT_PORT;
 16a:	e4 e3       	ldi	r30, 0x34	; 52
 16c:	f0 e0       	ldi	r31, 0x00	; 0
 16e:	10 82       	st	Z, r1
			enu_ErrorState = DIO_E_PARAM_VALID;
 170:	19 82       	std	Y+1, r1	; 0x01
 172:	0a c0       	rjmp	.+20     	; 0x188 <DIO_setPortDirection+0x10c>
			break;
		case DIO_PORTD:
			DDRD_DIR_R = INPUT_PORT;
 174:	e1 e3       	ldi	r30, 0x31	; 49
 176:	f0 e0       	ldi	r31, 0x00	; 0
 178:	10 82       	st	Z, r1
			enu_ErrorState = DIO_E_PARAM_VALID;
 17a:	19 82       	std	Y+1, r1	; 0x01
 17c:	05 c0       	rjmp	.+10     	; 0x188 <DIO_setPortDirection+0x10c>
			break;
		default:
			enu_ErrorState = DIO_E_PARAM_INVALID_PORT_ID;
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	89 83       	std	Y+1, r24	; 0x01
 182:	02 c0       	rjmp	.+4      	; 0x188 <DIO_setPortDirection+0x10c>
			break;
		}
    }
    else
    {
    	enu_ErrorState = DIO_E_PARAM_INVALID_PORT_DIR;	/* Invalid port direction */
 184:	84 e0       	ldi	r24, 0x04	; 4
 186:	89 83       	std	Y+1, r24	; 0x01
    }
    return enu_ErrorState;
 188:	89 81       	ldd	r24, Y+1	; 0x01
}
 18a:	27 96       	adiw	r28, 0x07	; 7
 18c:	0f b6       	in	r0, 0x3f	; 63
 18e:	f8 94       	cli
 190:	de bf       	out	0x3e, r29	; 62
 192:	0f be       	out	0x3f, r0	; 63
 194:	cd bf       	out	0x3d, r28	; 61
 196:	cf 91       	pop	r28
 198:	df 91       	pop	r29
 19a:	08 95       	ret

0000019c <DIO_setPinDirection>:
 *
 * [Returns]:       Error State
 ******************************************************************************/
enuDIO_E_STATE_t DIO_setPinDirection(enuDIO_PortId_t enu_portID , enuDIO_PinId_t enu_pinID,
								     enuDIO_DirectionType_t enu_pinDirection)
{
 19c:	df 93       	push	r29
 19e:	cf 93       	push	r28
 1a0:	cd b7       	in	r28, 0x3d	; 61
 1a2:	de b7       	in	r29, 0x3e	; 62
 1a4:	28 97       	sbiw	r28, 0x08	; 8
 1a6:	0f b6       	in	r0, 0x3f	; 63
 1a8:	f8 94       	cli
 1aa:	de bf       	out	0x3e, r29	; 62
 1ac:	0f be       	out	0x3f, r0	; 63
 1ae:	cd bf       	out	0x3d, r28	; 61
 1b0:	8a 83       	std	Y+2, r24	; 0x02
 1b2:	6b 83       	std	Y+3, r22	; 0x03
 1b4:	4c 83       	std	Y+4, r20	; 0x04
	enuDIO_E_STATE_t enu_ErrorState = E_NOT_OK;
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	89 83       	std	Y+1, r24	; 0x01

	/* Check if the pin id is one of the existed pin or not */
	if ((enu_pinID >= PIN_0) && (enu_pinID <= PIN_7))
 1ba:	8b 81       	ldd	r24, Y+3	; 0x03
 1bc:	88 30       	cpi	r24, 0x08	; 8
 1be:	08 f0       	brcs	.+2      	; 0x1c2 <DIO_setPinDirection+0x26>
 1c0:	fd c0       	rjmp	.+506    	; 0x3bc <DIO_setPinDirection+0x220>
	{
		if (enu_pinDirection == OUTPUT)
 1c2:	8c 81       	ldd	r24, Y+4	; 0x04
 1c4:	81 30       	cpi	r24, 0x01	; 1
 1c6:	09 f0       	breq	.+2      	; 0x1ca <DIO_setPinDirection+0x2e>
 1c8:	77 c0       	rjmp	.+238    	; 0x2b8 <DIO_setPinDirection+0x11c>
		{
			switch (enu_portID)
 1ca:	8a 81       	ldd	r24, Y+2	; 0x02
 1cc:	28 2f       	mov	r18, r24
 1ce:	30 e0       	ldi	r19, 0x00	; 0
 1d0:	38 87       	std	Y+8, r19	; 0x08
 1d2:	2f 83       	std	Y+7, r18	; 0x07
 1d4:	8f 81       	ldd	r24, Y+7	; 0x07
 1d6:	98 85       	ldd	r25, Y+8	; 0x08
 1d8:	81 30       	cpi	r24, 0x01	; 1
 1da:	91 05       	cpc	r25, r1
 1dc:	59 f1       	breq	.+86     	; 0x234 <DIO_setPinDirection+0x98>
 1de:	2f 81       	ldd	r18, Y+7	; 0x07
 1e0:	38 85       	ldd	r19, Y+8	; 0x08
 1e2:	22 30       	cpi	r18, 0x02	; 2
 1e4:	31 05       	cpc	r19, r1
 1e6:	2c f4       	brge	.+10     	; 0x1f2 <DIO_setPinDirection+0x56>
 1e8:	8f 81       	ldd	r24, Y+7	; 0x07
 1ea:	98 85       	ldd	r25, Y+8	; 0x08
 1ec:	00 97       	sbiw	r24, 0x00	; 0
 1ee:	69 f0       	breq	.+26     	; 0x20a <DIO_setPinDirection+0x6e>
 1f0:	60 c0       	rjmp	.+192    	; 0x2b2 <DIO_setPinDirection+0x116>
 1f2:	2f 81       	ldd	r18, Y+7	; 0x07
 1f4:	38 85       	ldd	r19, Y+8	; 0x08
 1f6:	22 30       	cpi	r18, 0x02	; 2
 1f8:	31 05       	cpc	r19, r1
 1fa:	89 f1       	breq	.+98     	; 0x25e <DIO_setPinDirection+0xc2>
 1fc:	8f 81       	ldd	r24, Y+7	; 0x07
 1fe:	98 85       	ldd	r25, Y+8	; 0x08
 200:	83 30       	cpi	r24, 0x03	; 3
 202:	91 05       	cpc	r25, r1
 204:	09 f4       	brne	.+2      	; 0x208 <DIO_setPinDirection+0x6c>
 206:	40 c0       	rjmp	.+128    	; 0x288 <DIO_setPinDirection+0xec>
 208:	54 c0       	rjmp	.+168    	; 0x2b2 <DIO_setPinDirection+0x116>
			{
			case DIO_PORTA:
				SET_BIT(DDRA_DIR_R, enu_pinID);
 20a:	aa e3       	ldi	r26, 0x3A	; 58
 20c:	b0 e0       	ldi	r27, 0x00	; 0
 20e:	ea e3       	ldi	r30, 0x3A	; 58
 210:	f0 e0       	ldi	r31, 0x00	; 0
 212:	80 81       	ld	r24, Z
 214:	48 2f       	mov	r20, r24
 216:	8b 81       	ldd	r24, Y+3	; 0x03
 218:	28 2f       	mov	r18, r24
 21a:	30 e0       	ldi	r19, 0x00	; 0
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	02 2e       	mov	r0, r18
 222:	02 c0       	rjmp	.+4      	; 0x228 <DIO_setPinDirection+0x8c>
 224:	88 0f       	add	r24, r24
 226:	99 1f       	adc	r25, r25
 228:	0a 94       	dec	r0
 22a:	e2 f7       	brpl	.-8      	; 0x224 <DIO_setPinDirection+0x88>
 22c:	84 2b       	or	r24, r20
 22e:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
 230:	19 82       	std	Y+1, r1	; 0x01
 232:	c6 c0       	rjmp	.+396    	; 0x3c0 <DIO_setPinDirection+0x224>
				break;
			case DIO_PORTB:
				SET_BIT(DDRB_DIR_R, enu_pinID);
 234:	a7 e3       	ldi	r26, 0x37	; 55
 236:	b0 e0       	ldi	r27, 0x00	; 0
 238:	e7 e3       	ldi	r30, 0x37	; 55
 23a:	f0 e0       	ldi	r31, 0x00	; 0
 23c:	80 81       	ld	r24, Z
 23e:	48 2f       	mov	r20, r24
 240:	8b 81       	ldd	r24, Y+3	; 0x03
 242:	28 2f       	mov	r18, r24
 244:	30 e0       	ldi	r19, 0x00	; 0
 246:	81 e0       	ldi	r24, 0x01	; 1
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	02 2e       	mov	r0, r18
 24c:	02 c0       	rjmp	.+4      	; 0x252 <DIO_setPinDirection+0xb6>
 24e:	88 0f       	add	r24, r24
 250:	99 1f       	adc	r25, r25
 252:	0a 94       	dec	r0
 254:	e2 f7       	brpl	.-8      	; 0x24e <DIO_setPinDirection+0xb2>
 256:	84 2b       	or	r24, r20
 258:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
 25a:	19 82       	std	Y+1, r1	; 0x01
 25c:	b1 c0       	rjmp	.+354    	; 0x3c0 <DIO_setPinDirection+0x224>
				break;
			case DIO_PORTC:
				SET_BIT(DDRC_DIR_R, enu_pinID);
 25e:	a4 e3       	ldi	r26, 0x34	; 52
 260:	b0 e0       	ldi	r27, 0x00	; 0
 262:	e4 e3       	ldi	r30, 0x34	; 52
 264:	f0 e0       	ldi	r31, 0x00	; 0
 266:	80 81       	ld	r24, Z
 268:	48 2f       	mov	r20, r24
 26a:	8b 81       	ldd	r24, Y+3	; 0x03
 26c:	28 2f       	mov	r18, r24
 26e:	30 e0       	ldi	r19, 0x00	; 0
 270:	81 e0       	ldi	r24, 0x01	; 1
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	02 2e       	mov	r0, r18
 276:	02 c0       	rjmp	.+4      	; 0x27c <DIO_setPinDirection+0xe0>
 278:	88 0f       	add	r24, r24
 27a:	99 1f       	adc	r25, r25
 27c:	0a 94       	dec	r0
 27e:	e2 f7       	brpl	.-8      	; 0x278 <DIO_setPinDirection+0xdc>
 280:	84 2b       	or	r24, r20
 282:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
 284:	19 82       	std	Y+1, r1	; 0x01
 286:	9c c0       	rjmp	.+312    	; 0x3c0 <DIO_setPinDirection+0x224>
				break;
			case DIO_PORTD:
				SET_BIT(DDRD_DIR_R, enu_pinID);
 288:	a1 e3       	ldi	r26, 0x31	; 49
 28a:	b0 e0       	ldi	r27, 0x00	; 0
 28c:	e1 e3       	ldi	r30, 0x31	; 49
 28e:	f0 e0       	ldi	r31, 0x00	; 0
 290:	80 81       	ld	r24, Z
 292:	48 2f       	mov	r20, r24
 294:	8b 81       	ldd	r24, Y+3	; 0x03
 296:	28 2f       	mov	r18, r24
 298:	30 e0       	ldi	r19, 0x00	; 0
 29a:	81 e0       	ldi	r24, 0x01	; 1
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	02 2e       	mov	r0, r18
 2a0:	02 c0       	rjmp	.+4      	; 0x2a6 <DIO_setPinDirection+0x10a>
 2a2:	88 0f       	add	r24, r24
 2a4:	99 1f       	adc	r25, r25
 2a6:	0a 94       	dec	r0
 2a8:	e2 f7       	brpl	.-8      	; 0x2a2 <DIO_setPinDirection+0x106>
 2aa:	84 2b       	or	r24, r20
 2ac:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
 2ae:	19 82       	std	Y+1, r1	; 0x01
 2b0:	87 c0       	rjmp	.+270    	; 0x3c0 <DIO_setPinDirection+0x224>
				break;
            default:
            	enu_ErrorState = DIO_E_PARAM_INVALID_PORT_ID;	/* Invalid port id */
 2b2:	81 e0       	ldi	r24, 0x01	; 1
 2b4:	89 83       	std	Y+1, r24	; 0x01
 2b6:	84 c0       	rjmp	.+264    	; 0x3c0 <DIO_setPinDirection+0x224>
                break;
			}
		}
		else if (enu_pinDirection == INPUT)
 2b8:	8c 81       	ldd	r24, Y+4	; 0x04
 2ba:	88 23       	and	r24, r24
 2bc:	09 f0       	breq	.+2      	; 0x2c0 <DIO_setPinDirection+0x124>
 2be:	7b c0       	rjmp	.+246    	; 0x3b6 <DIO_setPinDirection+0x21a>
		{
			switch (enu_portID)
 2c0:	8a 81       	ldd	r24, Y+2	; 0x02
 2c2:	28 2f       	mov	r18, r24
 2c4:	30 e0       	ldi	r19, 0x00	; 0
 2c6:	3e 83       	std	Y+6, r19	; 0x06
 2c8:	2d 83       	std	Y+5, r18	; 0x05
 2ca:	8d 81       	ldd	r24, Y+5	; 0x05
 2cc:	9e 81       	ldd	r25, Y+6	; 0x06
 2ce:	81 30       	cpi	r24, 0x01	; 1
 2d0:	91 05       	cpc	r25, r1
 2d2:	61 f1       	breq	.+88     	; 0x32c <DIO_setPinDirection+0x190>
 2d4:	2d 81       	ldd	r18, Y+5	; 0x05
 2d6:	3e 81       	ldd	r19, Y+6	; 0x06
 2d8:	22 30       	cpi	r18, 0x02	; 2
 2da:	31 05       	cpc	r19, r1
 2dc:	2c f4       	brge	.+10     	; 0x2e8 <DIO_setPinDirection+0x14c>
 2de:	8d 81       	ldd	r24, Y+5	; 0x05
 2e0:	9e 81       	ldd	r25, Y+6	; 0x06
 2e2:	00 97       	sbiw	r24, 0x00	; 0
 2e4:	69 f0       	breq	.+26     	; 0x300 <DIO_setPinDirection+0x164>
 2e6:	64 c0       	rjmp	.+200    	; 0x3b0 <DIO_setPinDirection+0x214>
 2e8:	2d 81       	ldd	r18, Y+5	; 0x05
 2ea:	3e 81       	ldd	r19, Y+6	; 0x06
 2ec:	22 30       	cpi	r18, 0x02	; 2
 2ee:	31 05       	cpc	r19, r1
 2f0:	99 f1       	breq	.+102    	; 0x358 <DIO_setPinDirection+0x1bc>
 2f2:	8d 81       	ldd	r24, Y+5	; 0x05
 2f4:	9e 81       	ldd	r25, Y+6	; 0x06
 2f6:	83 30       	cpi	r24, 0x03	; 3
 2f8:	91 05       	cpc	r25, r1
 2fa:	09 f4       	brne	.+2      	; 0x2fe <DIO_setPinDirection+0x162>
 2fc:	43 c0       	rjmp	.+134    	; 0x384 <DIO_setPinDirection+0x1e8>
 2fe:	58 c0       	rjmp	.+176    	; 0x3b0 <DIO_setPinDirection+0x214>
			{
			case DIO_PORTA:
				CLEAR_BIT(DDRA_DIR_R, enu_pinID);
 300:	aa e3       	ldi	r26, 0x3A	; 58
 302:	b0 e0       	ldi	r27, 0x00	; 0
 304:	ea e3       	ldi	r30, 0x3A	; 58
 306:	f0 e0       	ldi	r31, 0x00	; 0
 308:	80 81       	ld	r24, Z
 30a:	48 2f       	mov	r20, r24
 30c:	8b 81       	ldd	r24, Y+3	; 0x03
 30e:	28 2f       	mov	r18, r24
 310:	30 e0       	ldi	r19, 0x00	; 0
 312:	81 e0       	ldi	r24, 0x01	; 1
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	02 2e       	mov	r0, r18
 318:	02 c0       	rjmp	.+4      	; 0x31e <DIO_setPinDirection+0x182>
 31a:	88 0f       	add	r24, r24
 31c:	99 1f       	adc	r25, r25
 31e:	0a 94       	dec	r0
 320:	e2 f7       	brpl	.-8      	; 0x31a <DIO_setPinDirection+0x17e>
 322:	80 95       	com	r24
 324:	84 23       	and	r24, r20
 326:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
 328:	19 82       	std	Y+1, r1	; 0x01
 32a:	4a c0       	rjmp	.+148    	; 0x3c0 <DIO_setPinDirection+0x224>
				break;
			case DIO_PORTB:
				CLEAR_BIT(DDRB_DIR_R, enu_pinID);
 32c:	a7 e3       	ldi	r26, 0x37	; 55
 32e:	b0 e0       	ldi	r27, 0x00	; 0
 330:	e7 e3       	ldi	r30, 0x37	; 55
 332:	f0 e0       	ldi	r31, 0x00	; 0
 334:	80 81       	ld	r24, Z
 336:	48 2f       	mov	r20, r24
 338:	8b 81       	ldd	r24, Y+3	; 0x03
 33a:	28 2f       	mov	r18, r24
 33c:	30 e0       	ldi	r19, 0x00	; 0
 33e:	81 e0       	ldi	r24, 0x01	; 1
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	02 2e       	mov	r0, r18
 344:	02 c0       	rjmp	.+4      	; 0x34a <DIO_setPinDirection+0x1ae>
 346:	88 0f       	add	r24, r24
 348:	99 1f       	adc	r25, r25
 34a:	0a 94       	dec	r0
 34c:	e2 f7       	brpl	.-8      	; 0x346 <DIO_setPinDirection+0x1aa>
 34e:	80 95       	com	r24
 350:	84 23       	and	r24, r20
 352:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
 354:	19 82       	std	Y+1, r1	; 0x01
 356:	34 c0       	rjmp	.+104    	; 0x3c0 <DIO_setPinDirection+0x224>
				break;
			case DIO_PORTC:
				CLEAR_BIT(DDRC_DIR_R, enu_pinID);
 358:	a4 e3       	ldi	r26, 0x34	; 52
 35a:	b0 e0       	ldi	r27, 0x00	; 0
 35c:	e4 e3       	ldi	r30, 0x34	; 52
 35e:	f0 e0       	ldi	r31, 0x00	; 0
 360:	80 81       	ld	r24, Z
 362:	48 2f       	mov	r20, r24
 364:	8b 81       	ldd	r24, Y+3	; 0x03
 366:	28 2f       	mov	r18, r24
 368:	30 e0       	ldi	r19, 0x00	; 0
 36a:	81 e0       	ldi	r24, 0x01	; 1
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	02 2e       	mov	r0, r18
 370:	02 c0       	rjmp	.+4      	; 0x376 <DIO_setPinDirection+0x1da>
 372:	88 0f       	add	r24, r24
 374:	99 1f       	adc	r25, r25
 376:	0a 94       	dec	r0
 378:	e2 f7       	brpl	.-8      	; 0x372 <DIO_setPinDirection+0x1d6>
 37a:	80 95       	com	r24
 37c:	84 23       	and	r24, r20
 37e:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
 380:	19 82       	std	Y+1, r1	; 0x01
 382:	1e c0       	rjmp	.+60     	; 0x3c0 <DIO_setPinDirection+0x224>
				break;
			case DIO_PORTD:
				CLEAR_BIT(DDRD_DIR_R, enu_pinID);
 384:	a1 e3       	ldi	r26, 0x31	; 49
 386:	b0 e0       	ldi	r27, 0x00	; 0
 388:	e1 e3       	ldi	r30, 0x31	; 49
 38a:	f0 e0       	ldi	r31, 0x00	; 0
 38c:	80 81       	ld	r24, Z
 38e:	48 2f       	mov	r20, r24
 390:	8b 81       	ldd	r24, Y+3	; 0x03
 392:	28 2f       	mov	r18, r24
 394:	30 e0       	ldi	r19, 0x00	; 0
 396:	81 e0       	ldi	r24, 0x01	; 1
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	02 2e       	mov	r0, r18
 39c:	02 c0       	rjmp	.+4      	; 0x3a2 <DIO_setPinDirection+0x206>
 39e:	88 0f       	add	r24, r24
 3a0:	99 1f       	adc	r25, r25
 3a2:	0a 94       	dec	r0
 3a4:	e2 f7       	brpl	.-8      	; 0x39e <DIO_setPinDirection+0x202>
 3a6:	80 95       	com	r24
 3a8:	84 23       	and	r24, r20
 3aa:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
 3ac:	19 82       	std	Y+1, r1	; 0x01
 3ae:	08 c0       	rjmp	.+16     	; 0x3c0 <DIO_setPinDirection+0x224>
				break;
            default:
            	enu_ErrorState = DIO_E_PARAM_INVALID_PORT_ID;	/* Invalid port id */
 3b0:	81 e0       	ldi	r24, 0x01	; 1
 3b2:	89 83       	std	Y+1, r24	; 0x01
 3b4:	05 c0       	rjmp	.+10     	; 0x3c0 <DIO_setPinDirection+0x224>
                break;
			}
		}
		else
		{
			enu_ErrorState = DIO_E_PARAM_INVALID_PORT_DIR;	/* Invalid port direction */
 3b6:	84 e0       	ldi	r24, 0x04	; 4
 3b8:	89 83       	std	Y+1, r24	; 0x01
 3ba:	02 c0       	rjmp	.+4      	; 0x3c0 <DIO_setPinDirection+0x224>
		}
	}
	else
	{
		enu_ErrorState = DIO_E_PARAM_INVALID_PIN_ID;	/* Invalid pin id */
 3bc:	82 e0       	ldi	r24, 0x02	; 2
 3be:	89 83       	std	Y+1, r24	; 0x01
	}
	return enu_ErrorState;
 3c0:	89 81       	ldd	r24, Y+1	; 0x01
}
 3c2:	28 96       	adiw	r28, 0x08	; 8
 3c4:	0f b6       	in	r0, 0x3f	; 63
 3c6:	f8 94       	cli
 3c8:	de bf       	out	0x3e, r29	; 62
 3ca:	0f be       	out	0x3f, r0	; 63
 3cc:	cd bf       	out	0x3d, r28	; 61
 3ce:	cf 91       	pop	r28
 3d0:	df 91       	pop	r29
 3d2:	08 95       	ret

000003d4 <DIO_writePort>:
 * [in/out]		 	None
 *
 * [Returns]:       Error State
 ******************************************************************************/
enuDIO_E_STATE_t DIO_writePort(enuDIO_PortId_t enu_portID, uint8_t au8_portValue)
{
 3d4:	df 93       	push	r29
 3d6:	cf 93       	push	r28
 3d8:	00 d0       	rcall	.+0      	; 0x3da <DIO_writePort+0x6>
 3da:	00 d0       	rcall	.+0      	; 0x3dc <DIO_writePort+0x8>
 3dc:	0f 92       	push	r0
 3de:	cd b7       	in	r28, 0x3d	; 61
 3e0:	de b7       	in	r29, 0x3e	; 62
 3e2:	8a 83       	std	Y+2, r24	; 0x02
 3e4:	6b 83       	std	Y+3, r22	; 0x03
	enuDIO_E_STATE_t enu_ErrorState = E_NOT_OK;
 3e6:	81 e0       	ldi	r24, 0x01	; 1
 3e8:	89 83       	std	Y+1, r24	; 0x01

    switch (enu_portID)
 3ea:	8a 81       	ldd	r24, Y+2	; 0x02
 3ec:	28 2f       	mov	r18, r24
 3ee:	30 e0       	ldi	r19, 0x00	; 0
 3f0:	3d 83       	std	Y+5, r19	; 0x05
 3f2:	2c 83       	std	Y+4, r18	; 0x04
 3f4:	8c 81       	ldd	r24, Y+4	; 0x04
 3f6:	9d 81       	ldd	r25, Y+5	; 0x05
 3f8:	81 30       	cpi	r24, 0x01	; 1
 3fa:	91 05       	cpc	r25, r1
 3fc:	d9 f0       	breq	.+54     	; 0x434 <DIO_writePort+0x60>
 3fe:	2c 81       	ldd	r18, Y+4	; 0x04
 400:	3d 81       	ldd	r19, Y+5	; 0x05
 402:	22 30       	cpi	r18, 0x02	; 2
 404:	31 05       	cpc	r19, r1
 406:	2c f4       	brge	.+10     	; 0x412 <DIO_writePort+0x3e>
 408:	8c 81       	ldd	r24, Y+4	; 0x04
 40a:	9d 81       	ldd	r25, Y+5	; 0x05
 40c:	00 97       	sbiw	r24, 0x00	; 0
 40e:	61 f0       	breq	.+24     	; 0x428 <DIO_writePort+0x54>
 410:	23 c0       	rjmp	.+70     	; 0x458 <DIO_writePort+0x84>
 412:	2c 81       	ldd	r18, Y+4	; 0x04
 414:	3d 81       	ldd	r19, Y+5	; 0x05
 416:	22 30       	cpi	r18, 0x02	; 2
 418:	31 05       	cpc	r19, r1
 41a:	91 f0       	breq	.+36     	; 0x440 <DIO_writePort+0x6c>
 41c:	8c 81       	ldd	r24, Y+4	; 0x04
 41e:	9d 81       	ldd	r25, Y+5	; 0x05
 420:	83 30       	cpi	r24, 0x03	; 3
 422:	91 05       	cpc	r25, r1
 424:	99 f0       	breq	.+38     	; 0x44c <DIO_writePort+0x78>
 426:	18 c0       	rjmp	.+48     	; 0x458 <DIO_writePort+0x84>
    {
    case DIO_PORTA:
        PORTA_DATA_R = au8_portValue;
 428:	eb e3       	ldi	r30, 0x3B	; 59
 42a:	f0 e0       	ldi	r31, 0x00	; 0
 42c:	8b 81       	ldd	r24, Y+3	; 0x03
 42e:	80 83       	st	Z, r24
        enu_ErrorState = DIO_E_PARAM_VALID;
 430:	19 82       	std	Y+1, r1	; 0x01
 432:	14 c0       	rjmp	.+40     	; 0x45c <DIO_writePort+0x88>
        break;
    case DIO_PORTB:
        PORTB_DATA_R = au8_portValue;
 434:	e8 e3       	ldi	r30, 0x38	; 56
 436:	f0 e0       	ldi	r31, 0x00	; 0
 438:	8b 81       	ldd	r24, Y+3	; 0x03
 43a:	80 83       	st	Z, r24
        enu_ErrorState = DIO_E_PARAM_VALID;
 43c:	19 82       	std	Y+1, r1	; 0x01
 43e:	0e c0       	rjmp	.+28     	; 0x45c <DIO_writePort+0x88>
        break;
    case DIO_PORTC:
        PORTC_DATA_R = au8_portValue;
 440:	e5 e3       	ldi	r30, 0x35	; 53
 442:	f0 e0       	ldi	r31, 0x00	; 0
 444:	8b 81       	ldd	r24, Y+3	; 0x03
 446:	80 83       	st	Z, r24
        enu_ErrorState = DIO_E_PARAM_VALID;
 448:	19 82       	std	Y+1, r1	; 0x01
 44a:	08 c0       	rjmp	.+16     	; 0x45c <DIO_writePort+0x88>
        break;
    case DIO_PORTD:
        PORTD_DATA_R = au8_portValue;
 44c:	e2 e3       	ldi	r30, 0x32	; 50
 44e:	f0 e0       	ldi	r31, 0x00	; 0
 450:	8b 81       	ldd	r24, Y+3	; 0x03
 452:	80 83       	st	Z, r24
        enu_ErrorState = DIO_E_PARAM_VALID;
 454:	19 82       	std	Y+1, r1	; 0x01
 456:	02 c0       	rjmp	.+4      	; 0x45c <DIO_writePort+0x88>
        break;
    default:
    	enu_ErrorState = DIO_E_PARAM_INVALID_PORT_ID;	/* Invalid port id */
 458:	81 e0       	ldi	r24, 0x01	; 1
 45a:	89 83       	std	Y+1, r24	; 0x01
        break;
    }
    return enu_ErrorState;
 45c:	89 81       	ldd	r24, Y+1	; 0x01
}
 45e:	0f 90       	pop	r0
 460:	0f 90       	pop	r0
 462:	0f 90       	pop	r0
 464:	0f 90       	pop	r0
 466:	0f 90       	pop	r0
 468:	cf 91       	pop	r28
 46a:	df 91       	pop	r29
 46c:	08 95       	ret

0000046e <DIO_writePin>:
 * [in/out]		 	None
 *
 * [Returns]:       Error State
 ******************************************************************************/
enuDIO_E_STATE_t DIO_writePin(enuDIO_PortId_t enu_portID, enuDIO_PinId_t enu_pinID, uint8_t au8_pinValue)
{
 46e:	df 93       	push	r29
 470:	cf 93       	push	r28
 472:	cd b7       	in	r28, 0x3d	; 61
 474:	de b7       	in	r29, 0x3e	; 62
 476:	28 97       	sbiw	r28, 0x08	; 8
 478:	0f b6       	in	r0, 0x3f	; 63
 47a:	f8 94       	cli
 47c:	de bf       	out	0x3e, r29	; 62
 47e:	0f be       	out	0x3f, r0	; 63
 480:	cd bf       	out	0x3d, r28	; 61
 482:	8a 83       	std	Y+2, r24	; 0x02
 484:	6b 83       	std	Y+3, r22	; 0x03
 486:	4c 83       	std	Y+4, r20	; 0x04
	enuDIO_E_STATE_t enu_ErrorState = E_NOT_OK;
 488:	81 e0       	ldi	r24, 0x01	; 1
 48a:	89 83       	std	Y+1, r24	; 0x01

	/* Check if the pin id is one of the existed pin or not */
	if ((enu_pinID >= PIN_0) && (enu_pinID <= PIN_7))
 48c:	8b 81       	ldd	r24, Y+3	; 0x03
 48e:	88 30       	cpi	r24, 0x08	; 8
 490:	08 f0       	brcs	.+2      	; 0x494 <DIO_writePin+0x26>
 492:	fd c0       	rjmp	.+506    	; 0x68e <DIO_writePin+0x220>
	{
		if (au8_pinValue == HIGH)
 494:	8c 81       	ldd	r24, Y+4	; 0x04
 496:	81 30       	cpi	r24, 0x01	; 1
 498:	09 f0       	breq	.+2      	; 0x49c <DIO_writePin+0x2e>
 49a:	77 c0       	rjmp	.+238    	; 0x58a <DIO_writePin+0x11c>
		{
			switch (enu_portID)
 49c:	8a 81       	ldd	r24, Y+2	; 0x02
 49e:	28 2f       	mov	r18, r24
 4a0:	30 e0       	ldi	r19, 0x00	; 0
 4a2:	38 87       	std	Y+8, r19	; 0x08
 4a4:	2f 83       	std	Y+7, r18	; 0x07
 4a6:	8f 81       	ldd	r24, Y+7	; 0x07
 4a8:	98 85       	ldd	r25, Y+8	; 0x08
 4aa:	81 30       	cpi	r24, 0x01	; 1
 4ac:	91 05       	cpc	r25, r1
 4ae:	59 f1       	breq	.+86     	; 0x506 <DIO_writePin+0x98>
 4b0:	2f 81       	ldd	r18, Y+7	; 0x07
 4b2:	38 85       	ldd	r19, Y+8	; 0x08
 4b4:	22 30       	cpi	r18, 0x02	; 2
 4b6:	31 05       	cpc	r19, r1
 4b8:	2c f4       	brge	.+10     	; 0x4c4 <DIO_writePin+0x56>
 4ba:	8f 81       	ldd	r24, Y+7	; 0x07
 4bc:	98 85       	ldd	r25, Y+8	; 0x08
 4be:	00 97       	sbiw	r24, 0x00	; 0
 4c0:	69 f0       	breq	.+26     	; 0x4dc <DIO_writePin+0x6e>
 4c2:	60 c0       	rjmp	.+192    	; 0x584 <DIO_writePin+0x116>
 4c4:	2f 81       	ldd	r18, Y+7	; 0x07
 4c6:	38 85       	ldd	r19, Y+8	; 0x08
 4c8:	22 30       	cpi	r18, 0x02	; 2
 4ca:	31 05       	cpc	r19, r1
 4cc:	89 f1       	breq	.+98     	; 0x530 <DIO_writePin+0xc2>
 4ce:	8f 81       	ldd	r24, Y+7	; 0x07
 4d0:	98 85       	ldd	r25, Y+8	; 0x08
 4d2:	83 30       	cpi	r24, 0x03	; 3
 4d4:	91 05       	cpc	r25, r1
 4d6:	09 f4       	brne	.+2      	; 0x4da <DIO_writePin+0x6c>
 4d8:	40 c0       	rjmp	.+128    	; 0x55a <DIO_writePin+0xec>
 4da:	54 c0       	rjmp	.+168    	; 0x584 <DIO_writePin+0x116>
			{
			case DIO_PORTA:
				SET_BIT(PORTA_DATA_R, enu_pinID);
 4dc:	ab e3       	ldi	r26, 0x3B	; 59
 4de:	b0 e0       	ldi	r27, 0x00	; 0
 4e0:	eb e3       	ldi	r30, 0x3B	; 59
 4e2:	f0 e0       	ldi	r31, 0x00	; 0
 4e4:	80 81       	ld	r24, Z
 4e6:	48 2f       	mov	r20, r24
 4e8:	8b 81       	ldd	r24, Y+3	; 0x03
 4ea:	28 2f       	mov	r18, r24
 4ec:	30 e0       	ldi	r19, 0x00	; 0
 4ee:	81 e0       	ldi	r24, 0x01	; 1
 4f0:	90 e0       	ldi	r25, 0x00	; 0
 4f2:	02 2e       	mov	r0, r18
 4f4:	02 c0       	rjmp	.+4      	; 0x4fa <DIO_writePin+0x8c>
 4f6:	88 0f       	add	r24, r24
 4f8:	99 1f       	adc	r25, r25
 4fa:	0a 94       	dec	r0
 4fc:	e2 f7       	brpl	.-8      	; 0x4f6 <DIO_writePin+0x88>
 4fe:	84 2b       	or	r24, r20
 500:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
 502:	19 82       	std	Y+1, r1	; 0x01
 504:	c6 c0       	rjmp	.+396    	; 0x692 <DIO_writePin+0x224>
				break;
			case DIO_PORTB:
				SET_BIT(PORTB_DATA_R, enu_pinID);
 506:	a8 e3       	ldi	r26, 0x38	; 56
 508:	b0 e0       	ldi	r27, 0x00	; 0
 50a:	e8 e3       	ldi	r30, 0x38	; 56
 50c:	f0 e0       	ldi	r31, 0x00	; 0
 50e:	80 81       	ld	r24, Z
 510:	48 2f       	mov	r20, r24
 512:	8b 81       	ldd	r24, Y+3	; 0x03
 514:	28 2f       	mov	r18, r24
 516:	30 e0       	ldi	r19, 0x00	; 0
 518:	81 e0       	ldi	r24, 0x01	; 1
 51a:	90 e0       	ldi	r25, 0x00	; 0
 51c:	02 2e       	mov	r0, r18
 51e:	02 c0       	rjmp	.+4      	; 0x524 <DIO_writePin+0xb6>
 520:	88 0f       	add	r24, r24
 522:	99 1f       	adc	r25, r25
 524:	0a 94       	dec	r0
 526:	e2 f7       	brpl	.-8      	; 0x520 <DIO_writePin+0xb2>
 528:	84 2b       	or	r24, r20
 52a:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
 52c:	19 82       	std	Y+1, r1	; 0x01
 52e:	b1 c0       	rjmp	.+354    	; 0x692 <DIO_writePin+0x224>
				break;
			case DIO_PORTC:
				SET_BIT(PORTC_DATA_R, enu_pinID);
 530:	a5 e3       	ldi	r26, 0x35	; 53
 532:	b0 e0       	ldi	r27, 0x00	; 0
 534:	e5 e3       	ldi	r30, 0x35	; 53
 536:	f0 e0       	ldi	r31, 0x00	; 0
 538:	80 81       	ld	r24, Z
 53a:	48 2f       	mov	r20, r24
 53c:	8b 81       	ldd	r24, Y+3	; 0x03
 53e:	28 2f       	mov	r18, r24
 540:	30 e0       	ldi	r19, 0x00	; 0
 542:	81 e0       	ldi	r24, 0x01	; 1
 544:	90 e0       	ldi	r25, 0x00	; 0
 546:	02 2e       	mov	r0, r18
 548:	02 c0       	rjmp	.+4      	; 0x54e <DIO_writePin+0xe0>
 54a:	88 0f       	add	r24, r24
 54c:	99 1f       	adc	r25, r25
 54e:	0a 94       	dec	r0
 550:	e2 f7       	brpl	.-8      	; 0x54a <DIO_writePin+0xdc>
 552:	84 2b       	or	r24, r20
 554:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
 556:	19 82       	std	Y+1, r1	; 0x01
 558:	9c c0       	rjmp	.+312    	; 0x692 <DIO_writePin+0x224>
				break;
			case DIO_PORTD:
				SET_BIT(PORTD_DATA_R, enu_pinID);
 55a:	a2 e3       	ldi	r26, 0x32	; 50
 55c:	b0 e0       	ldi	r27, 0x00	; 0
 55e:	e2 e3       	ldi	r30, 0x32	; 50
 560:	f0 e0       	ldi	r31, 0x00	; 0
 562:	80 81       	ld	r24, Z
 564:	48 2f       	mov	r20, r24
 566:	8b 81       	ldd	r24, Y+3	; 0x03
 568:	28 2f       	mov	r18, r24
 56a:	30 e0       	ldi	r19, 0x00	; 0
 56c:	81 e0       	ldi	r24, 0x01	; 1
 56e:	90 e0       	ldi	r25, 0x00	; 0
 570:	02 2e       	mov	r0, r18
 572:	02 c0       	rjmp	.+4      	; 0x578 <DIO_writePin+0x10a>
 574:	88 0f       	add	r24, r24
 576:	99 1f       	adc	r25, r25
 578:	0a 94       	dec	r0
 57a:	e2 f7       	brpl	.-8      	; 0x574 <DIO_writePin+0x106>
 57c:	84 2b       	or	r24, r20
 57e:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
 580:	19 82       	std	Y+1, r1	; 0x01
 582:	87 c0       	rjmp	.+270    	; 0x692 <DIO_writePin+0x224>
				break;
            default:
            	enu_ErrorState = DIO_E_PARAM_INVALID_PORT_ID;	/* Invalid port id */
 584:	81 e0       	ldi	r24, 0x01	; 1
 586:	89 83       	std	Y+1, r24	; 0x01
 588:	84 c0       	rjmp	.+264    	; 0x692 <DIO_writePin+0x224>
                break;
			}
		}
		else if (au8_pinValue == LOW)
 58a:	8c 81       	ldd	r24, Y+4	; 0x04
 58c:	88 23       	and	r24, r24
 58e:	09 f0       	breq	.+2      	; 0x592 <DIO_writePin+0x124>
 590:	7b c0       	rjmp	.+246    	; 0x688 <DIO_writePin+0x21a>
		{
			switch (enu_portID)
 592:	8a 81       	ldd	r24, Y+2	; 0x02
 594:	28 2f       	mov	r18, r24
 596:	30 e0       	ldi	r19, 0x00	; 0
 598:	3e 83       	std	Y+6, r19	; 0x06
 59a:	2d 83       	std	Y+5, r18	; 0x05
 59c:	8d 81       	ldd	r24, Y+5	; 0x05
 59e:	9e 81       	ldd	r25, Y+6	; 0x06
 5a0:	81 30       	cpi	r24, 0x01	; 1
 5a2:	91 05       	cpc	r25, r1
 5a4:	61 f1       	breq	.+88     	; 0x5fe <DIO_writePin+0x190>
 5a6:	2d 81       	ldd	r18, Y+5	; 0x05
 5a8:	3e 81       	ldd	r19, Y+6	; 0x06
 5aa:	22 30       	cpi	r18, 0x02	; 2
 5ac:	31 05       	cpc	r19, r1
 5ae:	2c f4       	brge	.+10     	; 0x5ba <DIO_writePin+0x14c>
 5b0:	8d 81       	ldd	r24, Y+5	; 0x05
 5b2:	9e 81       	ldd	r25, Y+6	; 0x06
 5b4:	00 97       	sbiw	r24, 0x00	; 0
 5b6:	69 f0       	breq	.+26     	; 0x5d2 <DIO_writePin+0x164>
 5b8:	64 c0       	rjmp	.+200    	; 0x682 <DIO_writePin+0x214>
 5ba:	2d 81       	ldd	r18, Y+5	; 0x05
 5bc:	3e 81       	ldd	r19, Y+6	; 0x06
 5be:	22 30       	cpi	r18, 0x02	; 2
 5c0:	31 05       	cpc	r19, r1
 5c2:	99 f1       	breq	.+102    	; 0x62a <DIO_writePin+0x1bc>
 5c4:	8d 81       	ldd	r24, Y+5	; 0x05
 5c6:	9e 81       	ldd	r25, Y+6	; 0x06
 5c8:	83 30       	cpi	r24, 0x03	; 3
 5ca:	91 05       	cpc	r25, r1
 5cc:	09 f4       	brne	.+2      	; 0x5d0 <DIO_writePin+0x162>
 5ce:	43 c0       	rjmp	.+134    	; 0x656 <DIO_writePin+0x1e8>
 5d0:	58 c0       	rjmp	.+176    	; 0x682 <DIO_writePin+0x214>
			{
			case DIO_PORTA:
				CLEAR_BIT(PORTA_DATA_R, enu_pinID);
 5d2:	ab e3       	ldi	r26, 0x3B	; 59
 5d4:	b0 e0       	ldi	r27, 0x00	; 0
 5d6:	eb e3       	ldi	r30, 0x3B	; 59
 5d8:	f0 e0       	ldi	r31, 0x00	; 0
 5da:	80 81       	ld	r24, Z
 5dc:	48 2f       	mov	r20, r24
 5de:	8b 81       	ldd	r24, Y+3	; 0x03
 5e0:	28 2f       	mov	r18, r24
 5e2:	30 e0       	ldi	r19, 0x00	; 0
 5e4:	81 e0       	ldi	r24, 0x01	; 1
 5e6:	90 e0       	ldi	r25, 0x00	; 0
 5e8:	02 2e       	mov	r0, r18
 5ea:	02 c0       	rjmp	.+4      	; 0x5f0 <DIO_writePin+0x182>
 5ec:	88 0f       	add	r24, r24
 5ee:	99 1f       	adc	r25, r25
 5f0:	0a 94       	dec	r0
 5f2:	e2 f7       	brpl	.-8      	; 0x5ec <DIO_writePin+0x17e>
 5f4:	80 95       	com	r24
 5f6:	84 23       	and	r24, r20
 5f8:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
 5fa:	19 82       	std	Y+1, r1	; 0x01
 5fc:	4a c0       	rjmp	.+148    	; 0x692 <DIO_writePin+0x224>
				break;
			case DIO_PORTB:
				CLEAR_BIT(PORTB_DATA_R, enu_pinID);
 5fe:	a8 e3       	ldi	r26, 0x38	; 56
 600:	b0 e0       	ldi	r27, 0x00	; 0
 602:	e8 e3       	ldi	r30, 0x38	; 56
 604:	f0 e0       	ldi	r31, 0x00	; 0
 606:	80 81       	ld	r24, Z
 608:	48 2f       	mov	r20, r24
 60a:	8b 81       	ldd	r24, Y+3	; 0x03
 60c:	28 2f       	mov	r18, r24
 60e:	30 e0       	ldi	r19, 0x00	; 0
 610:	81 e0       	ldi	r24, 0x01	; 1
 612:	90 e0       	ldi	r25, 0x00	; 0
 614:	02 2e       	mov	r0, r18
 616:	02 c0       	rjmp	.+4      	; 0x61c <DIO_writePin+0x1ae>
 618:	88 0f       	add	r24, r24
 61a:	99 1f       	adc	r25, r25
 61c:	0a 94       	dec	r0
 61e:	e2 f7       	brpl	.-8      	; 0x618 <DIO_writePin+0x1aa>
 620:	80 95       	com	r24
 622:	84 23       	and	r24, r20
 624:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
 626:	19 82       	std	Y+1, r1	; 0x01
 628:	34 c0       	rjmp	.+104    	; 0x692 <DIO_writePin+0x224>
				break;
			case DIO_PORTC:
				CLEAR_BIT(PORTC_DATA_R, enu_pinID);
 62a:	a5 e3       	ldi	r26, 0x35	; 53
 62c:	b0 e0       	ldi	r27, 0x00	; 0
 62e:	e5 e3       	ldi	r30, 0x35	; 53
 630:	f0 e0       	ldi	r31, 0x00	; 0
 632:	80 81       	ld	r24, Z
 634:	48 2f       	mov	r20, r24
 636:	8b 81       	ldd	r24, Y+3	; 0x03
 638:	28 2f       	mov	r18, r24
 63a:	30 e0       	ldi	r19, 0x00	; 0
 63c:	81 e0       	ldi	r24, 0x01	; 1
 63e:	90 e0       	ldi	r25, 0x00	; 0
 640:	02 2e       	mov	r0, r18
 642:	02 c0       	rjmp	.+4      	; 0x648 <DIO_writePin+0x1da>
 644:	88 0f       	add	r24, r24
 646:	99 1f       	adc	r25, r25
 648:	0a 94       	dec	r0
 64a:	e2 f7       	brpl	.-8      	; 0x644 <DIO_writePin+0x1d6>
 64c:	80 95       	com	r24
 64e:	84 23       	and	r24, r20
 650:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
 652:	19 82       	std	Y+1, r1	; 0x01
 654:	1e c0       	rjmp	.+60     	; 0x692 <DIO_writePin+0x224>
				break;
			case DIO_PORTD:
				CLEAR_BIT(PORTD_DATA_R, enu_pinID);
 656:	a2 e3       	ldi	r26, 0x32	; 50
 658:	b0 e0       	ldi	r27, 0x00	; 0
 65a:	e2 e3       	ldi	r30, 0x32	; 50
 65c:	f0 e0       	ldi	r31, 0x00	; 0
 65e:	80 81       	ld	r24, Z
 660:	48 2f       	mov	r20, r24
 662:	8b 81       	ldd	r24, Y+3	; 0x03
 664:	28 2f       	mov	r18, r24
 666:	30 e0       	ldi	r19, 0x00	; 0
 668:	81 e0       	ldi	r24, 0x01	; 1
 66a:	90 e0       	ldi	r25, 0x00	; 0
 66c:	02 2e       	mov	r0, r18
 66e:	02 c0       	rjmp	.+4      	; 0x674 <DIO_writePin+0x206>
 670:	88 0f       	add	r24, r24
 672:	99 1f       	adc	r25, r25
 674:	0a 94       	dec	r0
 676:	e2 f7       	brpl	.-8      	; 0x670 <DIO_writePin+0x202>
 678:	80 95       	com	r24
 67a:	84 23       	and	r24, r20
 67c:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
 67e:	19 82       	std	Y+1, r1	; 0x01
 680:	08 c0       	rjmp	.+16     	; 0x692 <DIO_writePin+0x224>
				break;
            default:
            	enu_ErrorState = DIO_E_PARAM_INVALID_PORT_ID;	/* Invalid port id */
 682:	81 e0       	ldi	r24, 0x01	; 1
 684:	89 83       	std	Y+1, r24	; 0x01
 686:	05 c0       	rjmp	.+10     	; 0x692 <DIO_writePin+0x224>
                break;
			}
		}
		else
        {
			enu_ErrorState = DIO_E_PARAM_INVALID_PORT_DIR;	/* Invalid port direction */
 688:	84 e0       	ldi	r24, 0x04	; 4
 68a:	89 83       	std	Y+1, r24	; 0x01
 68c:	02 c0       	rjmp	.+4      	; 0x692 <DIO_writePin+0x224>
		}
	}
	else
	{
		enu_ErrorState = DIO_E_PARAM_INVALID_PIN_ID;	/* Invalid pin id */
 68e:	82 e0       	ldi	r24, 0x02	; 2
 690:	89 83       	std	Y+1, r24	; 0x01
	}
	return enu_ErrorState;
 692:	89 81       	ldd	r24, Y+1	; 0x01
}
 694:	28 96       	adiw	r28, 0x08	; 8
 696:	0f b6       	in	r0, 0x3f	; 63
 698:	f8 94       	cli
 69a:	de bf       	out	0x3e, r29	; 62
 69c:	0f be       	out	0x3f, r0	; 63
 69e:	cd bf       	out	0x3d, r28	; 61
 6a0:	cf 91       	pop	r28
 6a2:	df 91       	pop	r29
 6a4:	08 95       	ret

000006a6 <DIO_readPort>:
 * [in/out]		 	None
 *
 * [Returns]:       Error State
 ******************************************************************************/
enuDIO_E_STATE_t DIO_readPort(enuDIO_PortId_t enu_portID, uint8_t * ptr_portState)
{
 6a6:	df 93       	push	r29
 6a8:	cf 93       	push	r28
 6aa:	00 d0       	rcall	.+0      	; 0x6ac <DIO_readPort+0x6>
 6ac:	00 d0       	rcall	.+0      	; 0x6ae <DIO_readPort+0x8>
 6ae:	00 d0       	rcall	.+0      	; 0x6b0 <DIO_readPort+0xa>
 6b0:	cd b7       	in	r28, 0x3d	; 61
 6b2:	de b7       	in	r29, 0x3e	; 62
 6b4:	8a 83       	std	Y+2, r24	; 0x02
 6b6:	7c 83       	std	Y+4, r23	; 0x04
 6b8:	6b 83       	std	Y+3, r22	; 0x03
	enuDIO_E_STATE_t enu_ErrorState = E_NOT_OK;
 6ba:	81 e0       	ldi	r24, 0x01	; 1
 6bc:	89 83       	std	Y+1, r24	; 0x01

	/* Check if the pointer is NULL pointer or not */
	if(ptr_portState == NULL_PTR)
 6be:	8b 81       	ldd	r24, Y+3	; 0x03
 6c0:	9c 81       	ldd	r25, Y+4	; 0x04
 6c2:	00 97       	sbiw	r24, 0x00	; 0
 6c4:	19 f4       	brne	.+6      	; 0x6cc <DIO_readPort+0x26>
    {
		enu_ErrorState = DIO_E_PARAM_POINTER;	/* Invalid pointer */
 6c6:	85 e0       	ldi	r24, 0x05	; 5
 6c8:	89 83       	std	Y+1, r24	; 0x01
 6ca:	41 c0       	rjmp	.+130    	; 0x74e <DIO_readPort+0xa8>
	}
	else
	{
		switch (enu_portID)
 6cc:	8a 81       	ldd	r24, Y+2	; 0x02
 6ce:	28 2f       	mov	r18, r24
 6d0:	30 e0       	ldi	r19, 0x00	; 0
 6d2:	3e 83       	std	Y+6, r19	; 0x06
 6d4:	2d 83       	std	Y+5, r18	; 0x05
 6d6:	8d 81       	ldd	r24, Y+5	; 0x05
 6d8:	9e 81       	ldd	r25, Y+6	; 0x06
 6da:	81 30       	cpi	r24, 0x01	; 1
 6dc:	91 05       	cpc	r25, r1
 6de:	e9 f0       	breq	.+58     	; 0x71a <DIO_readPort+0x74>
 6e0:	2d 81       	ldd	r18, Y+5	; 0x05
 6e2:	3e 81       	ldd	r19, Y+6	; 0x06
 6e4:	22 30       	cpi	r18, 0x02	; 2
 6e6:	31 05       	cpc	r19, r1
 6e8:	2c f4       	brge	.+10     	; 0x6f4 <DIO_readPort+0x4e>
 6ea:	8d 81       	ldd	r24, Y+5	; 0x05
 6ec:	9e 81       	ldd	r25, Y+6	; 0x06
 6ee:	00 97       	sbiw	r24, 0x00	; 0
 6f0:	61 f0       	breq	.+24     	; 0x70a <DIO_readPort+0x64>
 6f2:	2b c0       	rjmp	.+86     	; 0x74a <DIO_readPort+0xa4>
 6f4:	2d 81       	ldd	r18, Y+5	; 0x05
 6f6:	3e 81       	ldd	r19, Y+6	; 0x06
 6f8:	22 30       	cpi	r18, 0x02	; 2
 6fa:	31 05       	cpc	r19, r1
 6fc:	b1 f0       	breq	.+44     	; 0x72a <DIO_readPort+0x84>
 6fe:	8d 81       	ldd	r24, Y+5	; 0x05
 700:	9e 81       	ldd	r25, Y+6	; 0x06
 702:	83 30       	cpi	r24, 0x03	; 3
 704:	91 05       	cpc	r25, r1
 706:	c9 f0       	breq	.+50     	; 0x73a <DIO_readPort+0x94>
 708:	20 c0       	rjmp	.+64     	; 0x74a <DIO_readPort+0xa4>
		{
		case DIO_PORTA:
			*ptr_portState = PINA_INPUT_R;
 70a:	e9 e3       	ldi	r30, 0x39	; 57
 70c:	f0 e0       	ldi	r31, 0x00	; 0
 70e:	80 81       	ld	r24, Z
 710:	eb 81       	ldd	r30, Y+3	; 0x03
 712:	fc 81       	ldd	r31, Y+4	; 0x04
 714:	80 83       	st	Z, r24
			enu_ErrorState = DIO_E_PARAM_VALID;
 716:	19 82       	std	Y+1, r1	; 0x01
 718:	1a c0       	rjmp	.+52     	; 0x74e <DIO_readPort+0xa8>
			break;
		case DIO_PORTB:
			*ptr_portState = PINB_INPUT_R;
 71a:	e6 e3       	ldi	r30, 0x36	; 54
 71c:	f0 e0       	ldi	r31, 0x00	; 0
 71e:	80 81       	ld	r24, Z
 720:	eb 81       	ldd	r30, Y+3	; 0x03
 722:	fc 81       	ldd	r31, Y+4	; 0x04
 724:	80 83       	st	Z, r24
			enu_ErrorState = DIO_E_PARAM_VALID;;
 726:	19 82       	std	Y+1, r1	; 0x01
 728:	12 c0       	rjmp	.+36     	; 0x74e <DIO_readPort+0xa8>
			break;
		case DIO_PORTC:
			*ptr_portState = PINC_INPUT_R;
 72a:	e3 e3       	ldi	r30, 0x33	; 51
 72c:	f0 e0       	ldi	r31, 0x00	; 0
 72e:	80 81       	ld	r24, Z
 730:	eb 81       	ldd	r30, Y+3	; 0x03
 732:	fc 81       	ldd	r31, Y+4	; 0x04
 734:	80 83       	st	Z, r24
			enu_ErrorState = DIO_E_PARAM_VALID;
 736:	19 82       	std	Y+1, r1	; 0x01
 738:	0a c0       	rjmp	.+20     	; 0x74e <DIO_readPort+0xa8>
			break;
		case DIO_PORTD:
			*ptr_portState = PIND_INPUT_R;
 73a:	e0 e3       	ldi	r30, 0x30	; 48
 73c:	f0 e0       	ldi	r31, 0x00	; 0
 73e:	80 81       	ld	r24, Z
 740:	eb 81       	ldd	r30, Y+3	; 0x03
 742:	fc 81       	ldd	r31, Y+4	; 0x04
 744:	80 83       	st	Z, r24
			enu_ErrorState = DIO_E_PARAM_VALID;
 746:	19 82       	std	Y+1, r1	; 0x01
 748:	02 c0       	rjmp	.+4      	; 0x74e <DIO_readPort+0xa8>
			break;
		default:
			enu_ErrorState = DIO_E_PARAM_INVALID_PORT_ID;	/* Invalid port id */
 74a:	81 e0       	ldi	r24, 0x01	; 1
 74c:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return enu_ErrorState;
 74e:	89 81       	ldd	r24, Y+1	; 0x01
}
 750:	26 96       	adiw	r28, 0x06	; 6
 752:	0f b6       	in	r0, 0x3f	; 63
 754:	f8 94       	cli
 756:	de bf       	out	0x3e, r29	; 62
 758:	0f be       	out	0x3f, r0	; 63
 75a:	cd bf       	out	0x3d, r28	; 61
 75c:	cf 91       	pop	r28
 75e:	df 91       	pop	r29
 760:	08 95       	ret

00000762 <DIO_readPin>:
 * [in/out]		 	None
 *
 * [Returns]:       Error State
 ******************************************************************************/
enuDIO_E_STATE_t DIO_readPin(enuDIO_PortId_t enu_portID, enuDIO_PinId_t enu_pinID, uint8_t * ptr_pinState)
{
 762:	df 93       	push	r29
 764:	cf 93       	push	r28
 766:	cd b7       	in	r28, 0x3d	; 61
 768:	de b7       	in	r29, 0x3e	; 62
 76a:	27 97       	sbiw	r28, 0x07	; 7
 76c:	0f b6       	in	r0, 0x3f	; 63
 76e:	f8 94       	cli
 770:	de bf       	out	0x3e, r29	; 62
 772:	0f be       	out	0x3f, r0	; 63
 774:	cd bf       	out	0x3d, r28	; 61
 776:	8a 83       	std	Y+2, r24	; 0x02
 778:	6b 83       	std	Y+3, r22	; 0x03
 77a:	5d 83       	std	Y+5, r21	; 0x05
 77c:	4c 83       	std	Y+4, r20	; 0x04
	enuDIO_E_STATE_t enu_ErrorState = E_NOT_OK;
 77e:	81 e0       	ldi	r24, 0x01	; 1
 780:	89 83       	std	Y+1, r24	; 0x01

	/* Check if the pointer is NULL pointer or not */
	if(ptr_pinState == NULL_PTR)
 782:	8c 81       	ldd	r24, Y+4	; 0x04
 784:	9d 81       	ldd	r25, Y+5	; 0x05
 786:	00 97       	sbiw	r24, 0x00	; 0
 788:	19 f4       	brne	.+6      	; 0x790 <DIO_readPin+0x2e>
    {
		enu_ErrorState = DIO_E_PARAM_POINTER;
 78a:	85 e0       	ldi	r24, 0x05	; 5
 78c:	89 83       	std	Y+1, r24	; 0x01
 78e:	af c0       	rjmp	.+350    	; 0x8ee <__stack+0x8f>
	}
	else
	{
        if((enu_pinID >= PIN_0) && (enu_pinID <= PIN_7))
 790:	8b 81       	ldd	r24, Y+3	; 0x03
 792:	88 30       	cpi	r24, 0x08	; 8
 794:	08 f0       	brcs	.+2      	; 0x798 <DIO_readPin+0x36>
 796:	a9 c0       	rjmp	.+338    	; 0x8ea <__stack+0x8b>
        {
            switch (enu_portID)
 798:	8a 81       	ldd	r24, Y+2	; 0x02
 79a:	28 2f       	mov	r18, r24
 79c:	30 e0       	ldi	r19, 0x00	; 0
 79e:	3f 83       	std	Y+7, r19	; 0x07
 7a0:	2e 83       	std	Y+6, r18	; 0x06
 7a2:	4e 81       	ldd	r20, Y+6	; 0x06
 7a4:	5f 81       	ldd	r21, Y+7	; 0x07
 7a6:	41 30       	cpi	r20, 0x01	; 1
 7a8:	51 05       	cpc	r21, r1
 7aa:	c9 f1       	breq	.+114    	; 0x81e <DIO_readPin+0xbc>
 7ac:	8e 81       	ldd	r24, Y+6	; 0x06
 7ae:	9f 81       	ldd	r25, Y+7	; 0x07
 7b0:	82 30       	cpi	r24, 0x02	; 2
 7b2:	91 05       	cpc	r25, r1
 7b4:	34 f4       	brge	.+12     	; 0x7c2 <DIO_readPin+0x60>
 7b6:	2e 81       	ldd	r18, Y+6	; 0x06
 7b8:	3f 81       	ldd	r19, Y+7	; 0x07
 7ba:	21 15       	cp	r18, r1
 7bc:	31 05       	cpc	r19, r1
 7be:	71 f0       	breq	.+28     	; 0x7dc <DIO_readPin+0x7a>
 7c0:	91 c0       	rjmp	.+290    	; 0x8e4 <__stack+0x85>
 7c2:	4e 81       	ldd	r20, Y+6	; 0x06
 7c4:	5f 81       	ldd	r21, Y+7	; 0x07
 7c6:	42 30       	cpi	r20, 0x02	; 2
 7c8:	51 05       	cpc	r21, r1
 7ca:	09 f4       	brne	.+2      	; 0x7ce <DIO_readPin+0x6c>
 7cc:	49 c0       	rjmp	.+146    	; 0x860 <__stack+0x1>
 7ce:	8e 81       	ldd	r24, Y+6	; 0x06
 7d0:	9f 81       	ldd	r25, Y+7	; 0x07
 7d2:	83 30       	cpi	r24, 0x03	; 3
 7d4:	91 05       	cpc	r25, r1
 7d6:	09 f4       	brne	.+2      	; 0x7da <DIO_readPin+0x78>
 7d8:	64 c0       	rjmp	.+200    	; 0x8a2 <__stack+0x43>
 7da:	84 c0       	rjmp	.+264    	; 0x8e4 <__stack+0x85>
            {
            case DIO_PORTA:
                *ptr_pinState = READ_BIT(PINA_INPUT_R, enu_pinID);
 7dc:	e9 e3       	ldi	r30, 0x39	; 57
 7de:	f0 e0       	ldi	r31, 0x00	; 0
 7e0:	80 81       	ld	r24, Z
 7e2:	48 2f       	mov	r20, r24
 7e4:	50 e0       	ldi	r21, 0x00	; 0
 7e6:	8b 81       	ldd	r24, Y+3	; 0x03
 7e8:	28 2f       	mov	r18, r24
 7ea:	30 e0       	ldi	r19, 0x00	; 0
 7ec:	81 e0       	ldi	r24, 0x01	; 1
 7ee:	90 e0       	ldi	r25, 0x00	; 0
 7f0:	02 c0       	rjmp	.+4      	; 0x7f6 <DIO_readPin+0x94>
 7f2:	88 0f       	add	r24, r24
 7f4:	99 1f       	adc	r25, r25
 7f6:	2a 95       	dec	r18
 7f8:	e2 f7       	brpl	.-8      	; 0x7f2 <DIO_readPin+0x90>
 7fa:	9a 01       	movw	r18, r20
 7fc:	28 23       	and	r18, r24
 7fe:	39 23       	and	r19, r25
 800:	8b 81       	ldd	r24, Y+3	; 0x03
 802:	88 2f       	mov	r24, r24
 804:	90 e0       	ldi	r25, 0x00	; 0
 806:	a9 01       	movw	r20, r18
 808:	02 c0       	rjmp	.+4      	; 0x80e <DIO_readPin+0xac>
 80a:	55 95       	asr	r21
 80c:	47 95       	ror	r20
 80e:	8a 95       	dec	r24
 810:	e2 f7       	brpl	.-8      	; 0x80a <DIO_readPin+0xa8>
 812:	ca 01       	movw	r24, r20
 814:	ec 81       	ldd	r30, Y+4	; 0x04
 816:	fd 81       	ldd	r31, Y+5	; 0x05
 818:	80 83       	st	Z, r24
                enu_ErrorState = DIO_E_PARAM_VALID;
 81a:	19 82       	std	Y+1, r1	; 0x01
 81c:	68 c0       	rjmp	.+208    	; 0x8ee <__stack+0x8f>
                break;
            case DIO_PORTB:
                *ptr_pinState = READ_BIT(PINB_INPUT_R, enu_pinID);
 81e:	e6 e3       	ldi	r30, 0x36	; 54
 820:	f0 e0       	ldi	r31, 0x00	; 0
 822:	80 81       	ld	r24, Z
 824:	48 2f       	mov	r20, r24
 826:	50 e0       	ldi	r21, 0x00	; 0
 828:	8b 81       	ldd	r24, Y+3	; 0x03
 82a:	28 2f       	mov	r18, r24
 82c:	30 e0       	ldi	r19, 0x00	; 0
 82e:	81 e0       	ldi	r24, 0x01	; 1
 830:	90 e0       	ldi	r25, 0x00	; 0
 832:	02 c0       	rjmp	.+4      	; 0x838 <DIO_readPin+0xd6>
 834:	88 0f       	add	r24, r24
 836:	99 1f       	adc	r25, r25
 838:	2a 95       	dec	r18
 83a:	e2 f7       	brpl	.-8      	; 0x834 <DIO_readPin+0xd2>
 83c:	9a 01       	movw	r18, r20
 83e:	28 23       	and	r18, r24
 840:	39 23       	and	r19, r25
 842:	8b 81       	ldd	r24, Y+3	; 0x03
 844:	88 2f       	mov	r24, r24
 846:	90 e0       	ldi	r25, 0x00	; 0
 848:	a9 01       	movw	r20, r18
 84a:	02 c0       	rjmp	.+4      	; 0x850 <DIO_readPin+0xee>
 84c:	55 95       	asr	r21
 84e:	47 95       	ror	r20
 850:	8a 95       	dec	r24
 852:	e2 f7       	brpl	.-8      	; 0x84c <DIO_readPin+0xea>
 854:	ca 01       	movw	r24, r20
 856:	ec 81       	ldd	r30, Y+4	; 0x04
 858:	fd 81       	ldd	r31, Y+5	; 0x05
 85a:	80 83       	st	Z, r24
                enu_ErrorState = DIO_E_PARAM_VALID;
 85c:	19 82       	std	Y+1, r1	; 0x01
 85e:	47 c0       	rjmp	.+142    	; 0x8ee <__stack+0x8f>
                break;
            case DIO_PORTC:
                *ptr_pinState = READ_BIT(PINC_INPUT_R, enu_pinID);
 860:	e3 e3       	ldi	r30, 0x33	; 51
 862:	f0 e0       	ldi	r31, 0x00	; 0
 864:	80 81       	ld	r24, Z
 866:	48 2f       	mov	r20, r24
 868:	50 e0       	ldi	r21, 0x00	; 0
 86a:	8b 81       	ldd	r24, Y+3	; 0x03
 86c:	28 2f       	mov	r18, r24
 86e:	30 e0       	ldi	r19, 0x00	; 0
 870:	81 e0       	ldi	r24, 0x01	; 1
 872:	90 e0       	ldi	r25, 0x00	; 0
 874:	02 c0       	rjmp	.+4      	; 0x87a <__stack+0x1b>
 876:	88 0f       	add	r24, r24
 878:	99 1f       	adc	r25, r25
 87a:	2a 95       	dec	r18
 87c:	e2 f7       	brpl	.-8      	; 0x876 <__stack+0x17>
 87e:	9a 01       	movw	r18, r20
 880:	28 23       	and	r18, r24
 882:	39 23       	and	r19, r25
 884:	8b 81       	ldd	r24, Y+3	; 0x03
 886:	88 2f       	mov	r24, r24
 888:	90 e0       	ldi	r25, 0x00	; 0
 88a:	a9 01       	movw	r20, r18
 88c:	02 c0       	rjmp	.+4      	; 0x892 <__stack+0x33>
 88e:	55 95       	asr	r21
 890:	47 95       	ror	r20
 892:	8a 95       	dec	r24
 894:	e2 f7       	brpl	.-8      	; 0x88e <__stack+0x2f>
 896:	ca 01       	movw	r24, r20
 898:	ec 81       	ldd	r30, Y+4	; 0x04
 89a:	fd 81       	ldd	r31, Y+5	; 0x05
 89c:	80 83       	st	Z, r24
                enu_ErrorState = DIO_E_PARAM_VALID;
 89e:	19 82       	std	Y+1, r1	; 0x01
 8a0:	26 c0       	rjmp	.+76     	; 0x8ee <__stack+0x8f>
                break;
            case DIO_PORTD:
                *ptr_pinState = READ_BIT(PIND_INPUT_R, enu_pinID);
 8a2:	e0 e3       	ldi	r30, 0x30	; 48
 8a4:	f0 e0       	ldi	r31, 0x00	; 0
 8a6:	80 81       	ld	r24, Z
 8a8:	48 2f       	mov	r20, r24
 8aa:	50 e0       	ldi	r21, 0x00	; 0
 8ac:	8b 81       	ldd	r24, Y+3	; 0x03
 8ae:	28 2f       	mov	r18, r24
 8b0:	30 e0       	ldi	r19, 0x00	; 0
 8b2:	81 e0       	ldi	r24, 0x01	; 1
 8b4:	90 e0       	ldi	r25, 0x00	; 0
 8b6:	02 c0       	rjmp	.+4      	; 0x8bc <__stack+0x5d>
 8b8:	88 0f       	add	r24, r24
 8ba:	99 1f       	adc	r25, r25
 8bc:	2a 95       	dec	r18
 8be:	e2 f7       	brpl	.-8      	; 0x8b8 <__stack+0x59>
 8c0:	9a 01       	movw	r18, r20
 8c2:	28 23       	and	r18, r24
 8c4:	39 23       	and	r19, r25
 8c6:	8b 81       	ldd	r24, Y+3	; 0x03
 8c8:	88 2f       	mov	r24, r24
 8ca:	90 e0       	ldi	r25, 0x00	; 0
 8cc:	a9 01       	movw	r20, r18
 8ce:	02 c0       	rjmp	.+4      	; 0x8d4 <__stack+0x75>
 8d0:	55 95       	asr	r21
 8d2:	47 95       	ror	r20
 8d4:	8a 95       	dec	r24
 8d6:	e2 f7       	brpl	.-8      	; 0x8d0 <__stack+0x71>
 8d8:	ca 01       	movw	r24, r20
 8da:	ec 81       	ldd	r30, Y+4	; 0x04
 8dc:	fd 81       	ldd	r31, Y+5	; 0x05
 8de:	80 83       	st	Z, r24
                enu_ErrorState = DIO_E_PARAM_VALID;
 8e0:	19 82       	std	Y+1, r1	; 0x01
 8e2:	05 c0       	rjmp	.+10     	; 0x8ee <__stack+0x8f>
                break;
            default:
            	enu_ErrorState = DIO_E_PARAM_INVALID_PORT_ID;	/* Invalid port id */
 8e4:	81 e0       	ldi	r24, 0x01	; 1
 8e6:	89 83       	std	Y+1, r24	; 0x01
 8e8:	02 c0       	rjmp	.+4      	; 0x8ee <__stack+0x8f>
                break;
            }
        }
        else
        {
        	enu_ErrorState = DIO_E_PARAM_INVALID_PIN_ID;	/* Invalid pin id */
 8ea:	82 e0       	ldi	r24, 0x02	; 2
 8ec:	89 83       	std	Y+1, r24	; 0x01
        }
	}
    return enu_ErrorState;
 8ee:	89 81       	ldd	r24, Y+1	; 0x01
}
 8f0:	27 96       	adiw	r28, 0x07	; 7
 8f2:	0f b6       	in	r0, 0x3f	; 63
 8f4:	f8 94       	cli
 8f6:	de bf       	out	0x3e, r29	; 62
 8f8:	0f be       	out	0x3f, r0	; 63
 8fa:	cd bf       	out	0x3d, r28	; 61
 8fc:	cf 91       	pop	r28
 8fe:	df 91       	pop	r29
 900:	08 95       	ret

00000902 <DIO_TogglePin>:
 * [in/out]		 	None
 *
 * [Returns]:       Error State
 ******************************************************************************/
enuDIO_E_STATE_t DIO_TogglePin(enuDIO_PortId_t enu_portID, enuDIO_PinId_t enu_pinID)
{
 902:	df 93       	push	r29
 904:	cf 93       	push	r28
 906:	00 d0       	rcall	.+0      	; 0x908 <DIO_TogglePin+0x6>
 908:	00 d0       	rcall	.+0      	; 0x90a <DIO_TogglePin+0x8>
 90a:	0f 92       	push	r0
 90c:	cd b7       	in	r28, 0x3d	; 61
 90e:	de b7       	in	r29, 0x3e	; 62
 910:	8a 83       	std	Y+2, r24	; 0x02
 912:	6b 83       	std	Y+3, r22	; 0x03
	enuDIO_E_STATE_t enu_ErrorState = E_NOT_OK;
 914:	81 e0       	ldi	r24, 0x01	; 1
 916:	89 83       	std	Y+1, r24	; 0x01

	/* Check if the pointer is NULL pointer or not */
    if ((enu_pinID >= PIN_0) && (enu_pinID <= PIN_7))
 918:	8b 81       	ldd	r24, Y+3	; 0x03
 91a:	88 30       	cpi	r24, 0x08	; 8
 91c:	08 f0       	brcs	.+2      	; 0x920 <DIO_TogglePin+0x1e>
 91e:	77 c0       	rjmp	.+238    	; 0xa0e <DIO_TogglePin+0x10c>
    {
        switch (enu_portID)
 920:	8a 81       	ldd	r24, Y+2	; 0x02
 922:	28 2f       	mov	r18, r24
 924:	30 e0       	ldi	r19, 0x00	; 0
 926:	3d 83       	std	Y+5, r19	; 0x05
 928:	2c 83       	std	Y+4, r18	; 0x04
 92a:	8c 81       	ldd	r24, Y+4	; 0x04
 92c:	9d 81       	ldd	r25, Y+5	; 0x05
 92e:	81 30       	cpi	r24, 0x01	; 1
 930:	91 05       	cpc	r25, r1
 932:	59 f1       	breq	.+86     	; 0x98a <DIO_TogglePin+0x88>
 934:	2c 81       	ldd	r18, Y+4	; 0x04
 936:	3d 81       	ldd	r19, Y+5	; 0x05
 938:	22 30       	cpi	r18, 0x02	; 2
 93a:	31 05       	cpc	r19, r1
 93c:	2c f4       	brge	.+10     	; 0x948 <DIO_TogglePin+0x46>
 93e:	8c 81       	ldd	r24, Y+4	; 0x04
 940:	9d 81       	ldd	r25, Y+5	; 0x05
 942:	00 97       	sbiw	r24, 0x00	; 0
 944:	69 f0       	breq	.+26     	; 0x960 <DIO_TogglePin+0x5e>
 946:	60 c0       	rjmp	.+192    	; 0xa08 <DIO_TogglePin+0x106>
 948:	2c 81       	ldd	r18, Y+4	; 0x04
 94a:	3d 81       	ldd	r19, Y+5	; 0x05
 94c:	22 30       	cpi	r18, 0x02	; 2
 94e:	31 05       	cpc	r19, r1
 950:	89 f1       	breq	.+98     	; 0x9b4 <DIO_TogglePin+0xb2>
 952:	8c 81       	ldd	r24, Y+4	; 0x04
 954:	9d 81       	ldd	r25, Y+5	; 0x05
 956:	83 30       	cpi	r24, 0x03	; 3
 958:	91 05       	cpc	r25, r1
 95a:	09 f4       	brne	.+2      	; 0x95e <DIO_TogglePin+0x5c>
 95c:	40 c0       	rjmp	.+128    	; 0x9de <DIO_TogglePin+0xdc>
 95e:	54 c0       	rjmp	.+168    	; 0xa08 <DIO_TogglePin+0x106>
        {
        case DIO_PORTA:
            TOGGLE_BIT(PORTA_DATA_R, enu_pinID);
 960:	ab e3       	ldi	r26, 0x3B	; 59
 962:	b0 e0       	ldi	r27, 0x00	; 0
 964:	eb e3       	ldi	r30, 0x3B	; 59
 966:	f0 e0       	ldi	r31, 0x00	; 0
 968:	80 81       	ld	r24, Z
 96a:	48 2f       	mov	r20, r24
 96c:	8b 81       	ldd	r24, Y+3	; 0x03
 96e:	28 2f       	mov	r18, r24
 970:	30 e0       	ldi	r19, 0x00	; 0
 972:	81 e0       	ldi	r24, 0x01	; 1
 974:	90 e0       	ldi	r25, 0x00	; 0
 976:	02 2e       	mov	r0, r18
 978:	02 c0       	rjmp	.+4      	; 0x97e <DIO_TogglePin+0x7c>
 97a:	88 0f       	add	r24, r24
 97c:	99 1f       	adc	r25, r25
 97e:	0a 94       	dec	r0
 980:	e2 f7       	brpl	.-8      	; 0x97a <DIO_TogglePin+0x78>
 982:	84 27       	eor	r24, r20
 984:	8c 93       	st	X, r24
            enu_ErrorState = DIO_E_PARAM_VALID;
 986:	19 82       	std	Y+1, r1	; 0x01
 988:	44 c0       	rjmp	.+136    	; 0xa12 <DIO_TogglePin+0x110>
            break;
        case DIO_PORTB:
        	TOGGLE_BIT(PORTB_DATA_R, enu_pinID);
 98a:	a8 e3       	ldi	r26, 0x38	; 56
 98c:	b0 e0       	ldi	r27, 0x00	; 0
 98e:	e8 e3       	ldi	r30, 0x38	; 56
 990:	f0 e0       	ldi	r31, 0x00	; 0
 992:	80 81       	ld	r24, Z
 994:	48 2f       	mov	r20, r24
 996:	8b 81       	ldd	r24, Y+3	; 0x03
 998:	28 2f       	mov	r18, r24
 99a:	30 e0       	ldi	r19, 0x00	; 0
 99c:	81 e0       	ldi	r24, 0x01	; 1
 99e:	90 e0       	ldi	r25, 0x00	; 0
 9a0:	02 2e       	mov	r0, r18
 9a2:	02 c0       	rjmp	.+4      	; 0x9a8 <DIO_TogglePin+0xa6>
 9a4:	88 0f       	add	r24, r24
 9a6:	99 1f       	adc	r25, r25
 9a8:	0a 94       	dec	r0
 9aa:	e2 f7       	brpl	.-8      	; 0x9a4 <DIO_TogglePin+0xa2>
 9ac:	84 27       	eor	r24, r20
 9ae:	8c 93       	st	X, r24
            enu_ErrorState = DIO_E_PARAM_VALID;
 9b0:	19 82       	std	Y+1, r1	; 0x01
 9b2:	2f c0       	rjmp	.+94     	; 0xa12 <DIO_TogglePin+0x110>
            break;
        case DIO_PORTC:
        	TOGGLE_BIT(PORTC_DATA_R, enu_pinID);
 9b4:	a5 e3       	ldi	r26, 0x35	; 53
 9b6:	b0 e0       	ldi	r27, 0x00	; 0
 9b8:	e5 e3       	ldi	r30, 0x35	; 53
 9ba:	f0 e0       	ldi	r31, 0x00	; 0
 9bc:	80 81       	ld	r24, Z
 9be:	48 2f       	mov	r20, r24
 9c0:	8b 81       	ldd	r24, Y+3	; 0x03
 9c2:	28 2f       	mov	r18, r24
 9c4:	30 e0       	ldi	r19, 0x00	; 0
 9c6:	81 e0       	ldi	r24, 0x01	; 1
 9c8:	90 e0       	ldi	r25, 0x00	; 0
 9ca:	02 2e       	mov	r0, r18
 9cc:	02 c0       	rjmp	.+4      	; 0x9d2 <DIO_TogglePin+0xd0>
 9ce:	88 0f       	add	r24, r24
 9d0:	99 1f       	adc	r25, r25
 9d2:	0a 94       	dec	r0
 9d4:	e2 f7       	brpl	.-8      	; 0x9ce <DIO_TogglePin+0xcc>
 9d6:	84 27       	eor	r24, r20
 9d8:	8c 93       	st	X, r24
            enu_ErrorState = DIO_E_PARAM_VALID;
 9da:	19 82       	std	Y+1, r1	; 0x01
 9dc:	1a c0       	rjmp	.+52     	; 0xa12 <DIO_TogglePin+0x110>
            break;
        case DIO_PORTD:
        	TOGGLE_BIT(PORTD_DATA_R, enu_pinID);
 9de:	a2 e3       	ldi	r26, 0x32	; 50
 9e0:	b0 e0       	ldi	r27, 0x00	; 0
 9e2:	e2 e3       	ldi	r30, 0x32	; 50
 9e4:	f0 e0       	ldi	r31, 0x00	; 0
 9e6:	80 81       	ld	r24, Z
 9e8:	48 2f       	mov	r20, r24
 9ea:	8b 81       	ldd	r24, Y+3	; 0x03
 9ec:	28 2f       	mov	r18, r24
 9ee:	30 e0       	ldi	r19, 0x00	; 0
 9f0:	81 e0       	ldi	r24, 0x01	; 1
 9f2:	90 e0       	ldi	r25, 0x00	; 0
 9f4:	02 2e       	mov	r0, r18
 9f6:	02 c0       	rjmp	.+4      	; 0x9fc <DIO_TogglePin+0xfa>
 9f8:	88 0f       	add	r24, r24
 9fa:	99 1f       	adc	r25, r25
 9fc:	0a 94       	dec	r0
 9fe:	e2 f7       	brpl	.-8      	; 0x9f8 <DIO_TogglePin+0xf6>
 a00:	84 27       	eor	r24, r20
 a02:	8c 93       	st	X, r24
            enu_ErrorState = DIO_E_PARAM_VALID;
 a04:	19 82       	std	Y+1, r1	; 0x01
 a06:	05 c0       	rjmp	.+10     	; 0xa12 <DIO_TogglePin+0x110>
            break;
        default:
        	enu_ErrorState = E_NOT_OK;	/* Invalid port id */
 a08:	81 e0       	ldi	r24, 0x01	; 1
 a0a:	89 83       	std	Y+1, r24	; 0x01
 a0c:	02 c0       	rjmp	.+4      	; 0xa12 <DIO_TogglePin+0x110>
            break;
        }
    }
    else
    {
    	enu_ErrorState = DIO_E_PARAM_INVALID_PIN_ID;	/* Invalid pin id */
 a0e:	82 e0       	ldi	r24, 0x02	; 2
 a10:	89 83       	std	Y+1, r24	; 0x01
    }
    return enu_ErrorState;
 a12:	89 81       	ldd	r24, Y+1	; 0x01
}
 a14:	0f 90       	pop	r0
 a16:	0f 90       	pop	r0
 a18:	0f 90       	pop	r0
 a1a:	0f 90       	pop	r0
 a1c:	0f 90       	pop	r0
 a1e:	cf 91       	pop	r28
 a20:	df 91       	pop	r29
 a22:	08 95       	ret

00000a24 <BUTTON_init>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 *******************************************************************************/
void BUTTON_init(void)
{
 a24:	df 93       	push	r29
 a26:	cf 93       	push	r28
 a28:	cd b7       	in	r28, 0x3d	; 61
 a2a:	de b7       	in	r29, 0x3e	; 62
	/* Configure BUTTON pin as an input pin */
	DIO_setPinDirection(BUTTON_PORT_NUM, BUTTON_PIN_NUM, INPUT);
 a2c:	82 e0       	ldi	r24, 0x02	; 2
 a2e:	64 e0       	ldi	r22, 0x04	; 4
 a30:	40 e0       	ldi	r20, 0x00	; 0
 a32:	0e 94 ce 00 	call	0x19c	; 0x19c <DIO_setPinDirection>
}
 a36:	cf 91       	pop	r28
 a38:	df 91       	pop	r29
 a3a:	08 95       	ret

00000a3c <BUTTON_read>:
 * [in/out]		 	None
 *
 * [Returns]:       Unsigned character that hold the BUTTON state
 *******************************************************************************/
uint8_t BUTTON_read(void)
{
 a3c:	df 93       	push	r29
 a3e:	cf 93       	push	r28
 a40:	00 d0       	rcall	.+0      	; 0xa42 <BUTTON_read+0x6>
 a42:	cd b7       	in	r28, 0x3d	; 61
 a44:	de b7       	in	r29, 0x3e	; 62
	uint8_t au8_ButtonState;

	/* Read the button state */
	DIO_readPin(BUTTON_PORT_NUM, BUTTON_PIN_NUM, &au8_ButtonState);
 a46:	82 e0       	ldi	r24, 0x02	; 2
 a48:	64 e0       	ldi	r22, 0x04	; 4
 a4a:	9e 01       	movw	r18, r28
 a4c:	2f 5f       	subi	r18, 0xFF	; 255
 a4e:	3f 4f       	sbci	r19, 0xFF	; 255
 a50:	a9 01       	movw	r20, r18
 a52:	0e 94 b1 03 	call	0x762	; 0x762 <DIO_readPin>

	/* Check if the button is pressed or not */
	if(au8_ButtonState == HIGH)
 a56:	89 81       	ldd	r24, Y+1	; 0x01
 a58:	81 30       	cpi	r24, 0x01	; 1
 a5a:	19 f4       	brne	.+6      	; 0xa62 <BUTTON_read+0x26>
	{
		return BUTTON_PRESSED;		/* Button is pressed */
 a5c:	81 e0       	ldi	r24, 0x01	; 1
 a5e:	8a 83       	std	Y+2, r24	; 0x02
 a60:	01 c0       	rjmp	.+2      	; 0xa64 <BUTTON_read+0x28>
	}
	else
	{
		return BUTTON_NOT_PRESSED;	/* Button is not pressed */
 a62:	1a 82       	std	Y+2, r1	; 0x02
 a64:	8a 81       	ldd	r24, Y+2	; 0x02
	}
}
 a66:	0f 90       	pop	r0
 a68:	0f 90       	pop	r0
 a6a:	cf 91       	pop	r28
 a6c:	df 91       	pop	r29
 a6e:	08 95       	ret

00000a70 <LED_init>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 *******************************************************************************/
void LED_init(void)
{
 a70:	df 93       	push	r29
 a72:	cf 93       	push	r28
 a74:	cd b7       	in	r28, 0x3d	; 61
 a76:	de b7       	in	r29, 0x3e	; 62
	/* Configure LED pin as an output pin */
	DIO_setPinDirection(LED_PORT_NUM, LED_PIN_NUM, OUTPUT);
 a78:	81 e0       	ldi	r24, 0x01	; 1
 a7a:	64 e0       	ldi	r22, 0x04	; 4
 a7c:	41 e0       	ldi	r20, 0x01	; 1
 a7e:	0e 94 ce 00 	call	0x19c	; 0x19c <DIO_setPinDirection>
	/* Turn off LED at the beginning as the initial state */
	DIO_writePin(LED_PORT_NUM, LED_PIN_NUM, LOW);
 a82:	81 e0       	ldi	r24, 0x01	; 1
 a84:	64 e0       	ldi	r22, 0x04	; 4
 a86:	40 e0       	ldi	r20, 0x00	; 0
 a88:	0e 94 37 02 	call	0x46e	; 0x46e <DIO_writePin>
}
 a8c:	cf 91       	pop	r28
 a8e:	df 91       	pop	r29
 a90:	08 95       	ret

00000a92 <LED_turnOn>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 *******************************************************************************/
void LED_turnOn(void)
{
 a92:	df 93       	push	r29
 a94:	cf 93       	push	r28
 a96:	cd b7       	in	r28, 0x3d	; 61
 a98:	de b7       	in	r29, 0x3e	; 62
	DIO_writePin(LED_PORT_NUM, LED_PIN_NUM, HIGH);	/* Turn On LED */
 a9a:	81 e0       	ldi	r24, 0x01	; 1
 a9c:	64 e0       	ldi	r22, 0x04	; 4
 a9e:	41 e0       	ldi	r20, 0x01	; 1
 aa0:	0e 94 37 02 	call	0x46e	; 0x46e <DIO_writePin>
}
 aa4:	cf 91       	pop	r28
 aa6:	df 91       	pop	r29
 aa8:	08 95       	ret

00000aaa <LED_turnOff>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 *******************************************************************************/
void LED_turnOff(void)
{
 aaa:	df 93       	push	r29
 aac:	cf 93       	push	r28
 aae:	cd b7       	in	r28, 0x3d	; 61
 ab0:	de b7       	in	r29, 0x3e	; 62
	DIO_writePin(LED_PORT_NUM, LED_PIN_NUM, LOW);	/* Turn Off LED */
 ab2:	81 e0       	ldi	r24, 0x01	; 1
 ab4:	64 e0       	ldi	r22, 0x04	; 4
 ab6:	40 e0       	ldi	r20, 0x00	; 0
 ab8:	0e 94 37 02 	call	0x46e	; 0x46e <DIO_writePin>
}
 abc:	cf 91       	pop	r28
 abe:	df 91       	pop	r29
 ac0:	08 95       	ret

00000ac2 <App_init>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 *******************************************************************************/
void App_init(void)
{
 ac2:	df 93       	push	r29
 ac4:	cf 93       	push	r28
 ac6:	cd b7       	in	r28, 0x3d	; 61
 ac8:	de b7       	in	r29, 0x3e	; 62
	BUTTON_init(); 			/* BUTTON Driver Initialization */
 aca:	0e 94 12 05 	call	0xa24	; 0xa24 <BUTTON_init>

	LED_init();				/* LED Driver Initialization */
 ace:	0e 94 38 05 	call	0xa70	; 0xa70 <LED_init>

	gu8_ButtonState = BUTTON_read();
 ad2:	0e 94 1e 05 	call	0xa3c	; 0xa3c <BUTTON_read>
 ad6:	80 93 60 00 	sts	0x0060, r24

	if(gu8_ButtonState == HIGH) /* Check if the button is pressed or not */
 ada:	80 91 60 00 	lds	r24, 0x0060
 ade:	81 30       	cpi	r24, 0x01	; 1
 ae0:	19 f4       	brne	.+6      	; 0xae8 <App_init+0x26>
	{
		LED_turnOn();		 /* Turn on the LED */
 ae2:	0e 94 49 05 	call	0xa92	; 0xa92 <LED_turnOn>
 ae6:	02 c0       	rjmp	.+4      	; 0xaec <App_init+0x2a>
	}
	else
	{
		LED_turnOff();		 /* Turn off the LED */
 ae8:	0e 94 55 05 	call	0xaaa	; 0xaaa <LED_turnOff>
	}
}
 aec:	cf 91       	pop	r28
 aee:	df 91       	pop	r29
 af0:	08 95       	ret

00000af2 <App_update>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 *******************************************************************************/
void App_update(void)
{
 af2:	df 93       	push	r29
 af4:	cf 93       	push	r28
 af6:	cd b7       	in	r28, 0x3d	; 61
 af8:	de b7       	in	r29, 0x3e	; 62
	gu8_ButtonState = BUTTON_read();
 afa:	0e 94 1e 05 	call	0xa3c	; 0xa3c <BUTTON_read>
 afe:	80 93 60 00 	sts	0x0060, r24

	if(gu8_ButtonState == HIGH) /* Check if the button is pressed or not */
 b02:	80 91 60 00 	lds	r24, 0x0060
 b06:	81 30       	cpi	r24, 0x01	; 1
 b08:	19 f4       	brne	.+6      	; 0xb10 <App_update+0x1e>
	{
		LED_turnOn();		 /* Turn on the LED */
 b0a:	0e 94 49 05 	call	0xa92	; 0xa92 <LED_turnOn>
 b0e:	02 c0       	rjmp	.+4      	; 0xb14 <App_update+0x22>
	}
	else
	{
		LED_turnOff();		 /* Turn off the LED */
 b10:	0e 94 55 05 	call	0xaaa	; 0xaaa <LED_turnOff>
	}
}
 b14:	cf 91       	pop	r28
 b16:	df 91       	pop	r29
 b18:	08 95       	ret

00000b1a <main>:
/*****************************************************************************************
 *                                MAIN FUNCTION                                          *
 *****************************************************************************************/

int main(void)
{
 b1a:	df 93       	push	r29
 b1c:	cf 93       	push	r28
 b1e:	cd b7       	in	r28, 0x3d	; 61
 b20:	de b7       	in	r29, 0x3e	; 62
	/********************************************************************************
	 *                           SYSTEM INITIALIZATION                              *
	 ********************************************************************************/

	App_init();
 b22:	0e 94 61 05 	call	0xac2	; 0xac2 <App_init>
	 *                        APPLICATION	(SUPER LOOP)						    *
	 ********************************************************************************/

	while(1)
	{
		App_update();
 b26:	0e 94 79 05 	call	0xaf2	; 0xaf2 <App_update>
 b2a:	fd cf       	rjmp	.-6      	; 0xb26 <main+0xc>

00000b2c <_exit>:
 b2c:	f8 94       	cli

00000b2e <__stop_program>:
 b2e:	ff cf       	rjmp	.-2      	; 0xb2e <__stop_program>
