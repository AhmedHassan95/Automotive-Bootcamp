
MCU2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002ae6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  00002ae6  00002b7a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  0080006e  0080006e  00002b88  2**0
                  ALLOC
  3 .stab         000024fc  00000000  00000000  00002b88  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000148b  00000000  00000000  00005084  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000650f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000664f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000067bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008408  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  000092f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a0a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a200  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a48d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ac5b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 ee       	ldi	r30, 0xE6	; 230
      68:	fa e2       	ldi	r31, 0x2A	; 42
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 36       	cpi	r26, 0x6E	; 110
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ae e6       	ldi	r26, 0x6E	; 110
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 36       	cpi	r26, 0x6F	; 111
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ca 14 	call	0x2994	; 0x2994 <main>
      8a:	0c 94 71 15 	jmp	0x2ae2	; 0x2ae2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 f5 14 	jmp	0x29ea	; 0x29ea <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 11 15 	jmp	0x2a22	; 0x2a22 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 01 15 	jmp	0x2a02	; 0x2a02 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 1d 15 	jmp	0x2a3a	; 0x2a3a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 01 15 	jmp	0x2a02	; 0x2a02 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 1d 15 	jmp	0x2a3a	; 0x2a3a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 f5 14 	jmp	0x29ea	; 0x29ea <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 11 15 	jmp	0x2a22	; 0x2a22 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 01 15 	jmp	0x2a02	; 0x2a02 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 1d 15 	jmp	0x2a3a	; 0x2a3a <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 01 15 	jmp	0x2a02	; 0x2a02 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 1d 15 	jmp	0x2a3a	; 0x2a3a <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 01 15 	jmp	0x2a02	; 0x2a02 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 1d 15 	jmp	0x2a3a	; 0x2a3a <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 05 15 	jmp	0x2a0a	; 0x2a0a <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 21 15 	jmp	0x2a42	; 0x2a42 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <TWI_init>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 ********************************************************************************************/
void TWI_init(const TWI_ConfigType * Config_Ptr)
{
     b46:	cf 92       	push	r12
     b48:	df 92       	push	r13
     b4a:	ef 92       	push	r14
     b4c:	ff 92       	push	r15
     b4e:	0f 93       	push	r16
     b50:	1f 93       	push	r17
     b52:	df 93       	push	r29
     b54:	cf 93       	push	r28
     b56:	00 d0       	rcall	.+0      	; 0xb58 <TWI_init+0x12>
     b58:	cd b7       	in	r28, 0x3d	; 61
     b5a:	de b7       	in	r29, 0x3e	; 62
     b5c:	9a 83       	std	Y+2, r25	; 0x02
     b5e:	89 83       	std	Y+1, r24	; 0x01
	/* Insert the required Pre-scaler in First two bits (TWPS1,TWPS0) in TWSR Register */
	TWSR = (TWSR & 0xFC) | (Config_Ptr -> twi_Prescaler);
     b60:	a1 e2       	ldi	r26, 0x21	; 33
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	e1 e2       	ldi	r30, 0x21	; 33
     b66:	f0 e0       	ldi	r31, 0x00	; 0
     b68:	80 81       	ld	r24, Z
     b6a:	98 2f       	mov	r25, r24
     b6c:	9c 7f       	andi	r25, 0xFC	; 252
     b6e:	e9 81       	ldd	r30, Y+1	; 0x01
     b70:	fa 81       	ldd	r31, Y+2	; 0x02
     b72:	85 81       	ldd	r24, Z+5	; 0x05
     b74:	89 2b       	or	r24, r25
     b76:	8c 93       	st	X, r24

	/* Insert the required Bit Rate in TWBR Register */
	TWBR = ( ( (F_CPU/Config_Ptr -> twi_Clock) -16) * 2 ) / ( 4 << (Config_Ptr -> twi_Prescaler) );
     b78:	cc 24       	eor	r12, r12
     b7a:	dd 24       	eor	r13, r13
     b7c:	68 94       	set
     b7e:	c5 f8       	bld	r12, 5
     b80:	e9 81       	ldd	r30, Y+1	; 0x01
     b82:	fa 81       	ldd	r31, Y+2	; 0x02
     b84:	21 81       	ldd	r18, Z+1	; 0x01
     b86:	32 81       	ldd	r19, Z+2	; 0x02
     b88:	43 81       	ldd	r20, Z+3	; 0x03
     b8a:	54 81       	ldd	r21, Z+4	; 0x04
     b8c:	80 e0       	ldi	r24, 0x00	; 0
     b8e:	92 e1       	ldi	r25, 0x12	; 18
     b90:	aa e7       	ldi	r26, 0x7A	; 122
     b92:	b0 e0       	ldi	r27, 0x00	; 0
     b94:	bc 01       	movw	r22, r24
     b96:	cd 01       	movw	r24, r26
     b98:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <__udivmodsi4>
     b9c:	da 01       	movw	r26, r20
     b9e:	c9 01       	movw	r24, r18
     ba0:	88 0f       	add	r24, r24
     ba2:	99 1f       	adc	r25, r25
     ba4:	aa 1f       	adc	r26, r26
     ba6:	bb 1f       	adc	r27, r27
     ba8:	0f 2e       	mov	r0, r31
     baa:	f0 ee       	ldi	r31, 0xE0	; 224
     bac:	ef 2e       	mov	r14, r31
     bae:	ff ef       	ldi	r31, 0xFF	; 255
     bb0:	ff 2e       	mov	r15, r31
     bb2:	ff ef       	ldi	r31, 0xFF	; 255
     bb4:	0f 2f       	mov	r16, r31
     bb6:	ff ef       	ldi	r31, 0xFF	; 255
     bb8:	1f 2f       	mov	r17, r31
     bba:	f0 2d       	mov	r31, r0
     bbc:	e8 0e       	add	r14, r24
     bbe:	f9 1e       	adc	r15, r25
     bc0:	0a 1f       	adc	r16, r26
     bc2:	1b 1f       	adc	r17, r27
     bc4:	e9 81       	ldd	r30, Y+1	; 0x01
     bc6:	fa 81       	ldd	r31, Y+2	; 0x02
     bc8:	85 81       	ldd	r24, Z+5	; 0x05
     bca:	28 2f       	mov	r18, r24
     bcc:	30 e0       	ldi	r19, 0x00	; 0
     bce:	84 e0       	ldi	r24, 0x04	; 4
     bd0:	90 e0       	ldi	r25, 0x00	; 0
     bd2:	02 c0       	rjmp	.+4      	; 0xbd8 <TWI_init+0x92>
     bd4:	88 0f       	add	r24, r24
     bd6:	99 1f       	adc	r25, r25
     bd8:	2a 95       	dec	r18
     bda:	e2 f7       	brpl	.-8      	; 0xbd4 <TWI_init+0x8e>
     bdc:	9c 01       	movw	r18, r24
     bde:	44 27       	eor	r20, r20
     be0:	37 fd       	sbrc	r19, 7
     be2:	40 95       	com	r20
     be4:	54 2f       	mov	r21, r20
     be6:	c8 01       	movw	r24, r16
     be8:	b7 01       	movw	r22, r14
     bea:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <__udivmodsi4>
     bee:	da 01       	movw	r26, r20
     bf0:	c9 01       	movw	r24, r18
     bf2:	f6 01       	movw	r30, r12
     bf4:	80 83       	st	Z, r24

    /*
     * Insert the required Two Wire Bus address, if any master device want to call MCU
     * (used in case this MC is a slave device), General Call Recognition: Off
     */
    TWAR = ( (Config_Ptr -> twi_Address) << 1 ); /* Shift left to use as address in 7 bits only */
     bf6:	a2 e2       	ldi	r26, 0x22	; 34
     bf8:	b0 e0       	ldi	r27, 0x00	; 0
     bfa:	e9 81       	ldd	r30, Y+1	; 0x01
     bfc:	fa 81       	ldd	r31, Y+2	; 0x02
     bfe:	80 81       	ld	r24, Z
     c00:	88 0f       	add	r24, r24
     c02:	8c 93       	st	X, r24
	
    TWCR = (1 << TWEN); /* Enable TWI */
     c04:	e6 e5       	ldi	r30, 0x56	; 86
     c06:	f0 e0       	ldi	r31, 0x00	; 0
     c08:	84 e0       	ldi	r24, 0x04	; 4
     c0a:	80 83       	st	Z, r24
}
     c0c:	0f 90       	pop	r0
     c0e:	0f 90       	pop	r0
     c10:	cf 91       	pop	r28
     c12:	df 91       	pop	r29
     c14:	1f 91       	pop	r17
     c16:	0f 91       	pop	r16
     c18:	ff 90       	pop	r15
     c1a:	ef 90       	pop	r14
     c1c:	df 90       	pop	r13
     c1e:	cf 90       	pop	r12
     c20:	08 95       	ret

00000c22 <TWI_start>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 ********************************************************************************************/
void TWI_start(void)
{
     c22:	df 93       	push	r29
     c24:	cf 93       	push	r28
     c26:	cd b7       	in	r28, 0x3d	; 61
     c28:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT = 1
	 * send the start bit by TWSTA = 1
	 * Enable TWI Module TWEN = 1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEA) | (1 << TWEN);
     c2a:	e6 e5       	ldi	r30, 0x56	; 86
     c2c:	f0 e0       	ldi	r31, 0x00	; 0
     c2e:	84 ec       	ldi	r24, 0xC4	; 196
     c30:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
     c32:	e6 e5       	ldi	r30, 0x56	; 86
     c34:	f0 e0       	ldi	r31, 0x00	; 0
     c36:	80 81       	ld	r24, Z
     c38:	88 23       	and	r24, r24
     c3a:	dc f7       	brge	.-10     	; 0xc32 <TWI_start+0x10>
}
     c3c:	cf 91       	pop	r28
     c3e:	df 91       	pop	r29
     c40:	08 95       	ret

00000c42 <TWI_stop>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 *****************************************************************************************/
void TWI_stop(void)
{
     c42:	df 93       	push	r29
     c44:	cf 93       	push	r28
     c46:	cd b7       	in	r28, 0x3d	; 61
     c48:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT = 1
	 * send the stop bit by TWSTO = 1
	 * Enable TWI Module TWEN = 1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
     c4a:	e6 e5       	ldi	r30, 0x56	; 86
     c4c:	f0 e0       	ldi	r31, 0x00	; 0
     c4e:	84 e9       	ldi	r24, 0x94	; 148
     c50:	80 83       	st	Z, r24
}
     c52:	cf 91       	pop	r28
     c54:	df 91       	pop	r29
     c56:	08 95       	ret

00000c58 <TWI_write>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 *****************************************************************************************/
void TWI_write(uint8_t au8_data)
{
     c58:	df 93       	push	r29
     c5a:	cf 93       	push	r28
     c5c:	0f 92       	push	r0
     c5e:	cd b7       	in	r28, 0x3d	; 61
     c60:	de b7       	in	r29, 0x3e	; 62
     c62:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = au8_data;
     c64:	e3 e2       	ldi	r30, 0x23	; 35
     c66:	f0 e0       	ldi	r31, 0x00	; 0
     c68:	89 81       	ldd	r24, Y+1	; 0x01
     c6a:	80 83       	st	Z, r24

    /* 
	 * Clear the TWINT flag before sending the data TWINT = 1
	 * Enable TWI Module TWEN = 1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
     c6c:	e6 e5       	ldi	r30, 0x56	; 86
     c6e:	f0 e0       	ldi	r31, 0x00	; 0
     c70:	84 e8       	ldi	r24, 0x84	; 132
     c72:	80 83       	st	Z, r24

    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
     c74:	e6 e5       	ldi	r30, 0x56	; 86
     c76:	f0 e0       	ldi	r31, 0x00	; 0
     c78:	80 81       	ld	r24, Z
     c7a:	88 23       	and	r24, r24
     c7c:	dc f7       	brge	.-10     	; 0xc74 <TWI_write+0x1c>
}
     c7e:	0f 90       	pop	r0
     c80:	cf 91       	pop	r28
     c82:	df 91       	pop	r29
     c84:	08 95       	ret

00000c86 <TWI_readWithACK>:
 * [in/out]		 	None
 *
 * [Returns]:       Data read (with ACK) from the TWI Bus
 *****************************************************************************************/
uint8_t TWI_readWithACK(void)
{
     c86:	df 93       	push	r29
     c88:	cf 93       	push	r28
     c8a:	cd b7       	in	r28, 0x3d	; 61
     c8c:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT =  1
	 * Enable sending ACK after reading or receiving data TWEA = 1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
     c8e:	e6 e5       	ldi	r30, 0x56	; 86
     c90:	f0 e0       	ldi	r31, 0x00	; 0
     c92:	84 ec       	ldi	r24, 0xC4	; 196
     c94:	80 83       	st	Z, r24
	
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
     c96:	e6 e5       	ldi	r30, 0x56	; 86
     c98:	f0 e0       	ldi	r31, 0x00	; 0
     c9a:	80 81       	ld	r24, Z
     c9c:	88 23       	and	r24, r24
     c9e:	dc f7       	brge	.-10     	; 0xc96 <TWI_readWithACK+0x10>

    /* Wait for the acknowledgment */
    while(TWI_getStatus() != TW_SLA_ADD_W_ACK);
     ca0:	0e 94 71 06 	call	0xce2	; 0xce2 <TWI_getStatus>
     ca4:	80 38       	cpi	r24, 0x80	; 128
     ca6:	e1 f7       	brne	.-8      	; 0xca0 <TWI_readWithACK+0x1a>
	
    /* Read Data */
	return TWDR;
     ca8:	e3 e2       	ldi	r30, 0x23	; 35
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	80 81       	ld	r24, Z
}
     cae:	cf 91       	pop	r28
     cb0:	df 91       	pop	r29
     cb2:	08 95       	ret

00000cb4 <TWI_readWithNACK>:
 * [in/out]		 	None
 *
 * [Returns]:       Data read (without ACK) from the TWI Bus
 *****************************************************************************************/
uint8_t TWI_readWithNACK(void)
{
     cb4:	df 93       	push	r29
     cb6:	cf 93       	push	r28
     cb8:	cd b7       	in	r28, 0x3d	; 61
     cba:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT = 1
	 * Enable TWI Module TWEN = 1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
     cbc:	e6 e5       	ldi	r30, 0x56	; 86
     cbe:	f0 e0       	ldi	r31, 0x00	; 0
     cc0:	84 e8       	ldi	r24, 0x84	; 132
     cc2:	80 83       	st	Z, r24
	
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
     cc4:	e6 e5       	ldi	r30, 0x56	; 86
     cc6:	f0 e0       	ldi	r31, 0x00	; 0
     cc8:	80 81       	ld	r24, Z
     cca:	88 23       	and	r24, r24
     ccc:	dc f7       	brge	.-10     	; 0xcc4 <TWI_readWithNACK+0x10>

    while(TWI_getStatus() != TW_SLA_ADD_W_ACK);
     cce:	0e 94 71 06 	call	0xce2	; 0xce2 <TWI_getStatus>
     cd2:	80 38       	cpi	r24, 0x80	; 128
     cd4:	e1 f7       	brne	.-8      	; 0xcce <TWI_readWithNACK+0x1a>

    /* Read Data */
    return TWDR;
     cd6:	e3 e2       	ldi	r30, 0x23	; 35
     cd8:	f0 e0       	ldi	r31, 0x00	; 0
     cda:	80 81       	ld	r24, Z
}
     cdc:	cf 91       	pop	r28
     cde:	df 91       	pop	r29
     ce0:	08 95       	ret

00000ce2 <TWI_getStatus>:
 * [in/out]		 	None
 *
 * [Returns]:       Status of the TWI Bus
 *****************************************************************************************/
uint8_t TWI_getStatus(void)
{
     ce2:	df 93       	push	r29
     ce4:	cf 93       	push	r28
     ce6:	0f 92       	push	r0
     ce8:	cd b7       	in	r28, 0x3d	; 61
     cea:	de b7       	in	r29, 0x3e	; 62
    uint8_t status;
    /* Masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
     cec:	e1 e2       	ldi	r30, 0x21	; 33
     cee:	f0 e0       	ldi	r31, 0x00	; 0
     cf0:	80 81       	ld	r24, Z
     cf2:	88 7f       	andi	r24, 0xF8	; 248
     cf4:	89 83       	std	Y+1, r24	; 0x01
    return status;
     cf6:	89 81       	ldd	r24, Y+1	; 0x01
}
     cf8:	0f 90       	pop	r0
     cfa:	cf 91       	pop	r28
     cfc:	df 91       	pop	r29
     cfe:	08 95       	ret

00000d00 <TWI_DeInit>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 *****************************************************************************************/
void TWI_DeInit(void)
{
     d00:	df 93       	push	r29
     d02:	cf 93       	push	r28
     d04:	cd b7       	in	r28, 0x3d	; 61
     d06:	de b7       	in	r29, 0x3e	; 62
	/* Reset All TWI Registers to its initial value (if they have), and Clear the others */
	TWBR = 0;
     d08:	e0 e2       	ldi	r30, 0x20	; 32
     d0a:	f0 e0       	ldi	r31, 0x00	; 0
     d0c:	10 82       	st	Z, r1
	TWSR = 0xF8;
     d0e:	e1 e2       	ldi	r30, 0x21	; 33
     d10:	f0 e0       	ldi	r31, 0x00	; 0
     d12:	88 ef       	ldi	r24, 0xF8	; 248
     d14:	80 83       	st	Z, r24
	TWAR = 0xFE;
     d16:	e2 e2       	ldi	r30, 0x22	; 34
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	8e ef       	ldi	r24, 0xFE	; 254
     d1c:	80 83       	st	Z, r24

	/* Disable TWI */
	TWCR &= ~(1 << TWEN);
     d1e:	a6 e5       	ldi	r26, 0x56	; 86
     d20:	b0 e0       	ldi	r27, 0x00	; 0
     d22:	e6 e5       	ldi	r30, 0x56	; 86
     d24:	f0 e0       	ldi	r31, 0x00	; 0
     d26:	80 81       	ld	r24, Z
     d28:	8b 7f       	andi	r24, 0xFB	; 251
     d2a:	8c 93       	st	X, r24
}
     d2c:	cf 91       	pop	r28
     d2e:	df 91       	pop	r29
     d30:	08 95       	ret

00000d32 <DIO_setPortDirection>:
 * [in/out]		 	None
 *
 * [Returns]:       Error state
 ******************************************************************************/
enuDIO_E_STATE_t DIO_setPortDirection(enuDIO_PortId_t enu_portID, enuDIO_DirectionType_t enu_portDirection)
{
     d32:	df 93       	push	r29
     d34:	cf 93       	push	r28
     d36:	cd b7       	in	r28, 0x3d	; 61
     d38:	de b7       	in	r29, 0x3e	; 62
     d3a:	27 97       	sbiw	r28, 0x07	; 7
     d3c:	0f b6       	in	r0, 0x3f	; 63
     d3e:	f8 94       	cli
     d40:	de bf       	out	0x3e, r29	; 62
     d42:	0f be       	out	0x3f, r0	; 63
     d44:	cd bf       	out	0x3d, r28	; 61
     d46:	8a 83       	std	Y+2, r24	; 0x02
     d48:	6b 83       	std	Y+3, r22	; 0x03
	enuDIO_E_STATE_t enu_ErrorState = E_NOT_OK;
     d4a:	81 e0       	ldi	r24, 0x01	; 1
     d4c:	89 83       	std	Y+1, r24	; 0x01

	/* Check if the PORT is input or output */
    if(enu_portDirection == HIGH)
     d4e:	8b 81       	ldd	r24, Y+3	; 0x03
     d50:	81 30       	cpi	r24, 0x01	; 1
     d52:	d1 f5       	brne	.+116    	; 0xdc8 <DIO_setPortDirection+0x96>
    {
    	switch (enu_portID)
     d54:	8a 81       	ldd	r24, Y+2	; 0x02
     d56:	28 2f       	mov	r18, r24
     d58:	30 e0       	ldi	r19, 0x00	; 0
     d5a:	3f 83       	std	Y+7, r19	; 0x07
     d5c:	2e 83       	std	Y+6, r18	; 0x06
     d5e:	8e 81       	ldd	r24, Y+6	; 0x06
     d60:	9f 81       	ldd	r25, Y+7	; 0x07
     d62:	81 30       	cpi	r24, 0x01	; 1
     d64:	91 05       	cpc	r25, r1
     d66:	d9 f0       	breq	.+54     	; 0xd9e <DIO_setPortDirection+0x6c>
     d68:	2e 81       	ldd	r18, Y+6	; 0x06
     d6a:	3f 81       	ldd	r19, Y+7	; 0x07
     d6c:	22 30       	cpi	r18, 0x02	; 2
     d6e:	31 05       	cpc	r19, r1
     d70:	2c f4       	brge	.+10     	; 0xd7c <DIO_setPortDirection+0x4a>
     d72:	8e 81       	ldd	r24, Y+6	; 0x06
     d74:	9f 81       	ldd	r25, Y+7	; 0x07
     d76:	00 97       	sbiw	r24, 0x00	; 0
     d78:	61 f0       	breq	.+24     	; 0xd92 <DIO_setPortDirection+0x60>
     d7a:	23 c0       	rjmp	.+70     	; 0xdc2 <DIO_setPortDirection+0x90>
     d7c:	2e 81       	ldd	r18, Y+6	; 0x06
     d7e:	3f 81       	ldd	r19, Y+7	; 0x07
     d80:	22 30       	cpi	r18, 0x02	; 2
     d82:	31 05       	cpc	r19, r1
     d84:	91 f0       	breq	.+36     	; 0xdaa <DIO_setPortDirection+0x78>
     d86:	8e 81       	ldd	r24, Y+6	; 0x06
     d88:	9f 81       	ldd	r25, Y+7	; 0x07
     d8a:	83 30       	cpi	r24, 0x03	; 3
     d8c:	91 05       	cpc	r25, r1
     d8e:	99 f0       	breq	.+38     	; 0xdb6 <DIO_setPortDirection+0x84>
     d90:	18 c0       	rjmp	.+48     	; 0xdc2 <DIO_setPortDirection+0x90>
		{
		case DIO_PORTA:
			DDRA_DIR_R = OUTPUT_PORT;
     d92:	ea e3       	ldi	r30, 0x3A	; 58
     d94:	f0 e0       	ldi	r31, 0x00	; 0
     d96:	8f ef       	ldi	r24, 0xFF	; 255
     d98:	80 83       	st	Z, r24
			enu_ErrorState = DIO_E_PARAM_VALID;
     d9a:	19 82       	std	Y+1, r1	; 0x01
     d9c:	50 c0       	rjmp	.+160    	; 0xe3e <DIO_setPortDirection+0x10c>
			break;
		case DIO_PORTB:
			DDRB_DIR_R = OUTPUT_PORT;
     d9e:	e7 e3       	ldi	r30, 0x37	; 55
     da0:	f0 e0       	ldi	r31, 0x00	; 0
     da2:	8f ef       	ldi	r24, 0xFF	; 255
     da4:	80 83       	st	Z, r24
			enu_ErrorState = DIO_E_PARAM_VALID;
     da6:	19 82       	std	Y+1, r1	; 0x01
     da8:	4a c0       	rjmp	.+148    	; 0xe3e <DIO_setPortDirection+0x10c>
			break;
		case DIO_PORTC:
			DDRC_DIR_R = OUTPUT_PORT;
     daa:	e4 e3       	ldi	r30, 0x34	; 52
     dac:	f0 e0       	ldi	r31, 0x00	; 0
     dae:	8f ef       	ldi	r24, 0xFF	; 255
     db0:	80 83       	st	Z, r24
			enu_ErrorState = DIO_E_PARAM_VALID;
     db2:	19 82       	std	Y+1, r1	; 0x01
     db4:	44 c0       	rjmp	.+136    	; 0xe3e <DIO_setPortDirection+0x10c>
			break;
		case DIO_PORTD:
			DDRD_DIR_R = OUTPUT_PORT;
     db6:	e1 e3       	ldi	r30, 0x31	; 49
     db8:	f0 e0       	ldi	r31, 0x00	; 0
     dba:	8f ef       	ldi	r24, 0xFF	; 255
     dbc:	80 83       	st	Z, r24
			enu_ErrorState = DIO_E_PARAM_VALID;
     dbe:	19 82       	std	Y+1, r1	; 0x01
     dc0:	3e c0       	rjmp	.+124    	; 0xe3e <DIO_setPortDirection+0x10c>
			break;
		default:
			enu_ErrorState = DIO_E_PARAM_INVALID_PORT_ID;
     dc2:	81 e0       	ldi	r24, 0x01	; 1
     dc4:	89 83       	std	Y+1, r24	; 0x01
     dc6:	3b c0       	rjmp	.+118    	; 0xe3e <DIO_setPortDirection+0x10c>
			break;
		}
    }
    else if(enu_portDirection == LOW)
     dc8:	8b 81       	ldd	r24, Y+3	; 0x03
     dca:	88 23       	and	r24, r24
     dcc:	b1 f5       	brne	.+108    	; 0xe3a <DIO_setPortDirection+0x108>
    {
		switch (enu_portID)
     dce:	8a 81       	ldd	r24, Y+2	; 0x02
     dd0:	28 2f       	mov	r18, r24
     dd2:	30 e0       	ldi	r19, 0x00	; 0
     dd4:	3d 83       	std	Y+5, r19	; 0x05
     dd6:	2c 83       	std	Y+4, r18	; 0x04
     dd8:	8c 81       	ldd	r24, Y+4	; 0x04
     dda:	9d 81       	ldd	r25, Y+5	; 0x05
     ddc:	81 30       	cpi	r24, 0x01	; 1
     dde:	91 05       	cpc	r25, r1
     de0:	d1 f0       	breq	.+52     	; 0xe16 <DIO_setPortDirection+0xe4>
     de2:	2c 81       	ldd	r18, Y+4	; 0x04
     de4:	3d 81       	ldd	r19, Y+5	; 0x05
     de6:	22 30       	cpi	r18, 0x02	; 2
     de8:	31 05       	cpc	r19, r1
     dea:	2c f4       	brge	.+10     	; 0xdf6 <DIO_setPortDirection+0xc4>
     dec:	8c 81       	ldd	r24, Y+4	; 0x04
     dee:	9d 81       	ldd	r25, Y+5	; 0x05
     df0:	00 97       	sbiw	r24, 0x00	; 0
     df2:	61 f0       	breq	.+24     	; 0xe0c <DIO_setPortDirection+0xda>
     df4:	1f c0       	rjmp	.+62     	; 0xe34 <DIO_setPortDirection+0x102>
     df6:	2c 81       	ldd	r18, Y+4	; 0x04
     df8:	3d 81       	ldd	r19, Y+5	; 0x05
     dfa:	22 30       	cpi	r18, 0x02	; 2
     dfc:	31 05       	cpc	r19, r1
     dfe:	81 f0       	breq	.+32     	; 0xe20 <DIO_setPortDirection+0xee>
     e00:	8c 81       	ldd	r24, Y+4	; 0x04
     e02:	9d 81       	ldd	r25, Y+5	; 0x05
     e04:	83 30       	cpi	r24, 0x03	; 3
     e06:	91 05       	cpc	r25, r1
     e08:	81 f0       	breq	.+32     	; 0xe2a <DIO_setPortDirection+0xf8>
     e0a:	14 c0       	rjmp	.+40     	; 0xe34 <DIO_setPortDirection+0x102>
		{
		case DIO_PORTA:
			DDRA_DIR_R = INPUT_PORT;
     e0c:	ea e3       	ldi	r30, 0x3A	; 58
     e0e:	f0 e0       	ldi	r31, 0x00	; 0
     e10:	10 82       	st	Z, r1
			enu_ErrorState = DIO_E_PARAM_VALID;
     e12:	19 82       	std	Y+1, r1	; 0x01
     e14:	14 c0       	rjmp	.+40     	; 0xe3e <DIO_setPortDirection+0x10c>
			break;
		case DIO_PORTB:
			DDRB_DIR_R = INPUT_PORT;
     e16:	e7 e3       	ldi	r30, 0x37	; 55
     e18:	f0 e0       	ldi	r31, 0x00	; 0
     e1a:	10 82       	st	Z, r1
			enu_ErrorState = DIO_E_PARAM_VALID;
     e1c:	19 82       	std	Y+1, r1	; 0x01
     e1e:	0f c0       	rjmp	.+30     	; 0xe3e <DIO_setPortDirection+0x10c>
			break;
		case DIO_PORTC:
			DDRC_DIR_R = INPUT_PORT;
     e20:	e4 e3       	ldi	r30, 0x34	; 52
     e22:	f0 e0       	ldi	r31, 0x00	; 0
     e24:	10 82       	st	Z, r1
			enu_ErrorState = DIO_E_PARAM_VALID;
     e26:	19 82       	std	Y+1, r1	; 0x01
     e28:	0a c0       	rjmp	.+20     	; 0xe3e <DIO_setPortDirection+0x10c>
			break;
		case DIO_PORTD:
			DDRD_DIR_R = INPUT_PORT;
     e2a:	e1 e3       	ldi	r30, 0x31	; 49
     e2c:	f0 e0       	ldi	r31, 0x00	; 0
     e2e:	10 82       	st	Z, r1
			enu_ErrorState = DIO_E_PARAM_VALID;
     e30:	19 82       	std	Y+1, r1	; 0x01
     e32:	05 c0       	rjmp	.+10     	; 0xe3e <DIO_setPortDirection+0x10c>
			break;
		default:
			enu_ErrorState = DIO_E_PARAM_INVALID_PORT_ID;
     e34:	81 e0       	ldi	r24, 0x01	; 1
     e36:	89 83       	std	Y+1, r24	; 0x01
     e38:	02 c0       	rjmp	.+4      	; 0xe3e <DIO_setPortDirection+0x10c>
			break;
		}
    }
    else
    {
    	enu_ErrorState = DIO_E_PARAM_INVALID_PORT_DIR;	/* Invalid port direction */
     e3a:	84 e0       	ldi	r24, 0x04	; 4
     e3c:	89 83       	std	Y+1, r24	; 0x01
    }
    return enu_ErrorState;
     e3e:	89 81       	ldd	r24, Y+1	; 0x01
}
     e40:	27 96       	adiw	r28, 0x07	; 7
     e42:	0f b6       	in	r0, 0x3f	; 63
     e44:	f8 94       	cli
     e46:	de bf       	out	0x3e, r29	; 62
     e48:	0f be       	out	0x3f, r0	; 63
     e4a:	cd bf       	out	0x3d, r28	; 61
     e4c:	cf 91       	pop	r28
     e4e:	df 91       	pop	r29
     e50:	08 95       	ret

00000e52 <DIO_setPinDirection>:
 *
 * [Returns]:       Error State
 ******************************************************************************/
enuDIO_E_STATE_t DIO_setPinDirection(enuDIO_PortId_t enu_portID , enuDIO_PinId_t enu_pinID,
								     enuDIO_DirectionType_t enu_pinDirection)
{
     e52:	df 93       	push	r29
     e54:	cf 93       	push	r28
     e56:	cd b7       	in	r28, 0x3d	; 61
     e58:	de b7       	in	r29, 0x3e	; 62
     e5a:	28 97       	sbiw	r28, 0x08	; 8
     e5c:	0f b6       	in	r0, 0x3f	; 63
     e5e:	f8 94       	cli
     e60:	de bf       	out	0x3e, r29	; 62
     e62:	0f be       	out	0x3f, r0	; 63
     e64:	cd bf       	out	0x3d, r28	; 61
     e66:	8a 83       	std	Y+2, r24	; 0x02
     e68:	6b 83       	std	Y+3, r22	; 0x03
     e6a:	4c 83       	std	Y+4, r20	; 0x04
	enuDIO_E_STATE_t enu_ErrorState = E_NOT_OK;
     e6c:	81 e0       	ldi	r24, 0x01	; 1
     e6e:	89 83       	std	Y+1, r24	; 0x01

	/* Check if the pin id is one of the existed pin or not */
	if ((enu_pinID >= PIN_0) && (enu_pinID <= PIN_7))
     e70:	8b 81       	ldd	r24, Y+3	; 0x03
     e72:	88 30       	cpi	r24, 0x08	; 8
     e74:	08 f0       	brcs	.+2      	; 0xe78 <DIO_setPinDirection+0x26>
     e76:	fd c0       	rjmp	.+506    	; 0x1072 <DIO_setPinDirection+0x220>
	{
		if (enu_pinDirection == OUTPUT)
     e78:	8c 81       	ldd	r24, Y+4	; 0x04
     e7a:	81 30       	cpi	r24, 0x01	; 1
     e7c:	09 f0       	breq	.+2      	; 0xe80 <DIO_setPinDirection+0x2e>
     e7e:	77 c0       	rjmp	.+238    	; 0xf6e <DIO_setPinDirection+0x11c>
		{
			switch (enu_portID)
     e80:	8a 81       	ldd	r24, Y+2	; 0x02
     e82:	28 2f       	mov	r18, r24
     e84:	30 e0       	ldi	r19, 0x00	; 0
     e86:	38 87       	std	Y+8, r19	; 0x08
     e88:	2f 83       	std	Y+7, r18	; 0x07
     e8a:	8f 81       	ldd	r24, Y+7	; 0x07
     e8c:	98 85       	ldd	r25, Y+8	; 0x08
     e8e:	81 30       	cpi	r24, 0x01	; 1
     e90:	91 05       	cpc	r25, r1
     e92:	59 f1       	breq	.+86     	; 0xeea <DIO_setPinDirection+0x98>
     e94:	2f 81       	ldd	r18, Y+7	; 0x07
     e96:	38 85       	ldd	r19, Y+8	; 0x08
     e98:	22 30       	cpi	r18, 0x02	; 2
     e9a:	31 05       	cpc	r19, r1
     e9c:	2c f4       	brge	.+10     	; 0xea8 <DIO_setPinDirection+0x56>
     e9e:	8f 81       	ldd	r24, Y+7	; 0x07
     ea0:	98 85       	ldd	r25, Y+8	; 0x08
     ea2:	00 97       	sbiw	r24, 0x00	; 0
     ea4:	69 f0       	breq	.+26     	; 0xec0 <DIO_setPinDirection+0x6e>
     ea6:	60 c0       	rjmp	.+192    	; 0xf68 <DIO_setPinDirection+0x116>
     ea8:	2f 81       	ldd	r18, Y+7	; 0x07
     eaa:	38 85       	ldd	r19, Y+8	; 0x08
     eac:	22 30       	cpi	r18, 0x02	; 2
     eae:	31 05       	cpc	r19, r1
     eb0:	89 f1       	breq	.+98     	; 0xf14 <DIO_setPinDirection+0xc2>
     eb2:	8f 81       	ldd	r24, Y+7	; 0x07
     eb4:	98 85       	ldd	r25, Y+8	; 0x08
     eb6:	83 30       	cpi	r24, 0x03	; 3
     eb8:	91 05       	cpc	r25, r1
     eba:	09 f4       	brne	.+2      	; 0xebe <DIO_setPinDirection+0x6c>
     ebc:	40 c0       	rjmp	.+128    	; 0xf3e <DIO_setPinDirection+0xec>
     ebe:	54 c0       	rjmp	.+168    	; 0xf68 <DIO_setPinDirection+0x116>
			{
			case DIO_PORTA:
				SET_BIT(DDRA_DIR_R, enu_pinID);
     ec0:	aa e3       	ldi	r26, 0x3A	; 58
     ec2:	b0 e0       	ldi	r27, 0x00	; 0
     ec4:	ea e3       	ldi	r30, 0x3A	; 58
     ec6:	f0 e0       	ldi	r31, 0x00	; 0
     ec8:	80 81       	ld	r24, Z
     eca:	48 2f       	mov	r20, r24
     ecc:	8b 81       	ldd	r24, Y+3	; 0x03
     ece:	28 2f       	mov	r18, r24
     ed0:	30 e0       	ldi	r19, 0x00	; 0
     ed2:	81 e0       	ldi	r24, 0x01	; 1
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	02 2e       	mov	r0, r18
     ed8:	02 c0       	rjmp	.+4      	; 0xede <DIO_setPinDirection+0x8c>
     eda:	88 0f       	add	r24, r24
     edc:	99 1f       	adc	r25, r25
     ede:	0a 94       	dec	r0
     ee0:	e2 f7       	brpl	.-8      	; 0xeda <DIO_setPinDirection+0x88>
     ee2:	84 2b       	or	r24, r20
     ee4:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
     ee6:	19 82       	std	Y+1, r1	; 0x01
     ee8:	c6 c0       	rjmp	.+396    	; 0x1076 <DIO_setPinDirection+0x224>
				break;
			case DIO_PORTB:
				SET_BIT(DDRB_DIR_R, enu_pinID);
     eea:	a7 e3       	ldi	r26, 0x37	; 55
     eec:	b0 e0       	ldi	r27, 0x00	; 0
     eee:	e7 e3       	ldi	r30, 0x37	; 55
     ef0:	f0 e0       	ldi	r31, 0x00	; 0
     ef2:	80 81       	ld	r24, Z
     ef4:	48 2f       	mov	r20, r24
     ef6:	8b 81       	ldd	r24, Y+3	; 0x03
     ef8:	28 2f       	mov	r18, r24
     efa:	30 e0       	ldi	r19, 0x00	; 0
     efc:	81 e0       	ldi	r24, 0x01	; 1
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	02 2e       	mov	r0, r18
     f02:	02 c0       	rjmp	.+4      	; 0xf08 <DIO_setPinDirection+0xb6>
     f04:	88 0f       	add	r24, r24
     f06:	99 1f       	adc	r25, r25
     f08:	0a 94       	dec	r0
     f0a:	e2 f7       	brpl	.-8      	; 0xf04 <DIO_setPinDirection+0xb2>
     f0c:	84 2b       	or	r24, r20
     f0e:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
     f10:	19 82       	std	Y+1, r1	; 0x01
     f12:	b1 c0       	rjmp	.+354    	; 0x1076 <DIO_setPinDirection+0x224>
				break;
			case DIO_PORTC:
				SET_BIT(DDRC_DIR_R, enu_pinID);
     f14:	a4 e3       	ldi	r26, 0x34	; 52
     f16:	b0 e0       	ldi	r27, 0x00	; 0
     f18:	e4 e3       	ldi	r30, 0x34	; 52
     f1a:	f0 e0       	ldi	r31, 0x00	; 0
     f1c:	80 81       	ld	r24, Z
     f1e:	48 2f       	mov	r20, r24
     f20:	8b 81       	ldd	r24, Y+3	; 0x03
     f22:	28 2f       	mov	r18, r24
     f24:	30 e0       	ldi	r19, 0x00	; 0
     f26:	81 e0       	ldi	r24, 0x01	; 1
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	02 2e       	mov	r0, r18
     f2c:	02 c0       	rjmp	.+4      	; 0xf32 <DIO_setPinDirection+0xe0>
     f2e:	88 0f       	add	r24, r24
     f30:	99 1f       	adc	r25, r25
     f32:	0a 94       	dec	r0
     f34:	e2 f7       	brpl	.-8      	; 0xf2e <DIO_setPinDirection+0xdc>
     f36:	84 2b       	or	r24, r20
     f38:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
     f3a:	19 82       	std	Y+1, r1	; 0x01
     f3c:	9c c0       	rjmp	.+312    	; 0x1076 <DIO_setPinDirection+0x224>
				break;
			case DIO_PORTD:
				SET_BIT(DDRD_DIR_R, enu_pinID);
     f3e:	a1 e3       	ldi	r26, 0x31	; 49
     f40:	b0 e0       	ldi	r27, 0x00	; 0
     f42:	e1 e3       	ldi	r30, 0x31	; 49
     f44:	f0 e0       	ldi	r31, 0x00	; 0
     f46:	80 81       	ld	r24, Z
     f48:	48 2f       	mov	r20, r24
     f4a:	8b 81       	ldd	r24, Y+3	; 0x03
     f4c:	28 2f       	mov	r18, r24
     f4e:	30 e0       	ldi	r19, 0x00	; 0
     f50:	81 e0       	ldi	r24, 0x01	; 1
     f52:	90 e0       	ldi	r25, 0x00	; 0
     f54:	02 2e       	mov	r0, r18
     f56:	02 c0       	rjmp	.+4      	; 0xf5c <DIO_setPinDirection+0x10a>
     f58:	88 0f       	add	r24, r24
     f5a:	99 1f       	adc	r25, r25
     f5c:	0a 94       	dec	r0
     f5e:	e2 f7       	brpl	.-8      	; 0xf58 <DIO_setPinDirection+0x106>
     f60:	84 2b       	or	r24, r20
     f62:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
     f64:	19 82       	std	Y+1, r1	; 0x01
     f66:	87 c0       	rjmp	.+270    	; 0x1076 <DIO_setPinDirection+0x224>
				break;
            default:
            	enu_ErrorState = DIO_E_PARAM_INVALID_PORT_ID;	/* Invalid port id */
     f68:	81 e0       	ldi	r24, 0x01	; 1
     f6a:	89 83       	std	Y+1, r24	; 0x01
     f6c:	84 c0       	rjmp	.+264    	; 0x1076 <DIO_setPinDirection+0x224>
                break;
			}
		}
		else if (enu_pinDirection == INPUT)
     f6e:	8c 81       	ldd	r24, Y+4	; 0x04
     f70:	88 23       	and	r24, r24
     f72:	09 f0       	breq	.+2      	; 0xf76 <DIO_setPinDirection+0x124>
     f74:	7b c0       	rjmp	.+246    	; 0x106c <DIO_setPinDirection+0x21a>
		{
			switch (enu_portID)
     f76:	8a 81       	ldd	r24, Y+2	; 0x02
     f78:	28 2f       	mov	r18, r24
     f7a:	30 e0       	ldi	r19, 0x00	; 0
     f7c:	3e 83       	std	Y+6, r19	; 0x06
     f7e:	2d 83       	std	Y+5, r18	; 0x05
     f80:	8d 81       	ldd	r24, Y+5	; 0x05
     f82:	9e 81       	ldd	r25, Y+6	; 0x06
     f84:	81 30       	cpi	r24, 0x01	; 1
     f86:	91 05       	cpc	r25, r1
     f88:	61 f1       	breq	.+88     	; 0xfe2 <DIO_setPinDirection+0x190>
     f8a:	2d 81       	ldd	r18, Y+5	; 0x05
     f8c:	3e 81       	ldd	r19, Y+6	; 0x06
     f8e:	22 30       	cpi	r18, 0x02	; 2
     f90:	31 05       	cpc	r19, r1
     f92:	2c f4       	brge	.+10     	; 0xf9e <DIO_setPinDirection+0x14c>
     f94:	8d 81       	ldd	r24, Y+5	; 0x05
     f96:	9e 81       	ldd	r25, Y+6	; 0x06
     f98:	00 97       	sbiw	r24, 0x00	; 0
     f9a:	69 f0       	breq	.+26     	; 0xfb6 <DIO_setPinDirection+0x164>
     f9c:	64 c0       	rjmp	.+200    	; 0x1066 <DIO_setPinDirection+0x214>
     f9e:	2d 81       	ldd	r18, Y+5	; 0x05
     fa0:	3e 81       	ldd	r19, Y+6	; 0x06
     fa2:	22 30       	cpi	r18, 0x02	; 2
     fa4:	31 05       	cpc	r19, r1
     fa6:	99 f1       	breq	.+102    	; 0x100e <DIO_setPinDirection+0x1bc>
     fa8:	8d 81       	ldd	r24, Y+5	; 0x05
     faa:	9e 81       	ldd	r25, Y+6	; 0x06
     fac:	83 30       	cpi	r24, 0x03	; 3
     fae:	91 05       	cpc	r25, r1
     fb0:	09 f4       	brne	.+2      	; 0xfb4 <DIO_setPinDirection+0x162>
     fb2:	43 c0       	rjmp	.+134    	; 0x103a <DIO_setPinDirection+0x1e8>
     fb4:	58 c0       	rjmp	.+176    	; 0x1066 <DIO_setPinDirection+0x214>
			{
			case DIO_PORTA:
				CLEAR_BIT(DDRA_DIR_R, enu_pinID);
     fb6:	aa e3       	ldi	r26, 0x3A	; 58
     fb8:	b0 e0       	ldi	r27, 0x00	; 0
     fba:	ea e3       	ldi	r30, 0x3A	; 58
     fbc:	f0 e0       	ldi	r31, 0x00	; 0
     fbe:	80 81       	ld	r24, Z
     fc0:	48 2f       	mov	r20, r24
     fc2:	8b 81       	ldd	r24, Y+3	; 0x03
     fc4:	28 2f       	mov	r18, r24
     fc6:	30 e0       	ldi	r19, 0x00	; 0
     fc8:	81 e0       	ldi	r24, 0x01	; 1
     fca:	90 e0       	ldi	r25, 0x00	; 0
     fcc:	02 2e       	mov	r0, r18
     fce:	02 c0       	rjmp	.+4      	; 0xfd4 <DIO_setPinDirection+0x182>
     fd0:	88 0f       	add	r24, r24
     fd2:	99 1f       	adc	r25, r25
     fd4:	0a 94       	dec	r0
     fd6:	e2 f7       	brpl	.-8      	; 0xfd0 <DIO_setPinDirection+0x17e>
     fd8:	80 95       	com	r24
     fda:	84 23       	and	r24, r20
     fdc:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
     fde:	19 82       	std	Y+1, r1	; 0x01
     fe0:	4a c0       	rjmp	.+148    	; 0x1076 <DIO_setPinDirection+0x224>
				break;
			case DIO_PORTB:
				CLEAR_BIT(DDRB_DIR_R, enu_pinID);
     fe2:	a7 e3       	ldi	r26, 0x37	; 55
     fe4:	b0 e0       	ldi	r27, 0x00	; 0
     fe6:	e7 e3       	ldi	r30, 0x37	; 55
     fe8:	f0 e0       	ldi	r31, 0x00	; 0
     fea:	80 81       	ld	r24, Z
     fec:	48 2f       	mov	r20, r24
     fee:	8b 81       	ldd	r24, Y+3	; 0x03
     ff0:	28 2f       	mov	r18, r24
     ff2:	30 e0       	ldi	r19, 0x00	; 0
     ff4:	81 e0       	ldi	r24, 0x01	; 1
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	02 2e       	mov	r0, r18
     ffa:	02 c0       	rjmp	.+4      	; 0x1000 <DIO_setPinDirection+0x1ae>
     ffc:	88 0f       	add	r24, r24
     ffe:	99 1f       	adc	r25, r25
    1000:	0a 94       	dec	r0
    1002:	e2 f7       	brpl	.-8      	; 0xffc <DIO_setPinDirection+0x1aa>
    1004:	80 95       	com	r24
    1006:	84 23       	and	r24, r20
    1008:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
    100a:	19 82       	std	Y+1, r1	; 0x01
    100c:	34 c0       	rjmp	.+104    	; 0x1076 <DIO_setPinDirection+0x224>
				break;
			case DIO_PORTC:
				CLEAR_BIT(DDRC_DIR_R, enu_pinID);
    100e:	a4 e3       	ldi	r26, 0x34	; 52
    1010:	b0 e0       	ldi	r27, 0x00	; 0
    1012:	e4 e3       	ldi	r30, 0x34	; 52
    1014:	f0 e0       	ldi	r31, 0x00	; 0
    1016:	80 81       	ld	r24, Z
    1018:	48 2f       	mov	r20, r24
    101a:	8b 81       	ldd	r24, Y+3	; 0x03
    101c:	28 2f       	mov	r18, r24
    101e:	30 e0       	ldi	r19, 0x00	; 0
    1020:	81 e0       	ldi	r24, 0x01	; 1
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	02 2e       	mov	r0, r18
    1026:	02 c0       	rjmp	.+4      	; 0x102c <DIO_setPinDirection+0x1da>
    1028:	88 0f       	add	r24, r24
    102a:	99 1f       	adc	r25, r25
    102c:	0a 94       	dec	r0
    102e:	e2 f7       	brpl	.-8      	; 0x1028 <DIO_setPinDirection+0x1d6>
    1030:	80 95       	com	r24
    1032:	84 23       	and	r24, r20
    1034:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
    1036:	19 82       	std	Y+1, r1	; 0x01
    1038:	1e c0       	rjmp	.+60     	; 0x1076 <DIO_setPinDirection+0x224>
				break;
			case DIO_PORTD:
				CLEAR_BIT(DDRD_DIR_R, enu_pinID);
    103a:	a1 e3       	ldi	r26, 0x31	; 49
    103c:	b0 e0       	ldi	r27, 0x00	; 0
    103e:	e1 e3       	ldi	r30, 0x31	; 49
    1040:	f0 e0       	ldi	r31, 0x00	; 0
    1042:	80 81       	ld	r24, Z
    1044:	48 2f       	mov	r20, r24
    1046:	8b 81       	ldd	r24, Y+3	; 0x03
    1048:	28 2f       	mov	r18, r24
    104a:	30 e0       	ldi	r19, 0x00	; 0
    104c:	81 e0       	ldi	r24, 0x01	; 1
    104e:	90 e0       	ldi	r25, 0x00	; 0
    1050:	02 2e       	mov	r0, r18
    1052:	02 c0       	rjmp	.+4      	; 0x1058 <DIO_setPinDirection+0x206>
    1054:	88 0f       	add	r24, r24
    1056:	99 1f       	adc	r25, r25
    1058:	0a 94       	dec	r0
    105a:	e2 f7       	brpl	.-8      	; 0x1054 <DIO_setPinDirection+0x202>
    105c:	80 95       	com	r24
    105e:	84 23       	and	r24, r20
    1060:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
    1062:	19 82       	std	Y+1, r1	; 0x01
    1064:	08 c0       	rjmp	.+16     	; 0x1076 <DIO_setPinDirection+0x224>
				break;
            default:
            	enu_ErrorState = DIO_E_PARAM_INVALID_PORT_ID;	/* Invalid port id */
    1066:	81 e0       	ldi	r24, 0x01	; 1
    1068:	89 83       	std	Y+1, r24	; 0x01
    106a:	05 c0       	rjmp	.+10     	; 0x1076 <DIO_setPinDirection+0x224>
                break;
			}
		}
		else
		{
			enu_ErrorState = DIO_E_PARAM_INVALID_PORT_DIR;	/* Invalid port direction */
    106c:	84 e0       	ldi	r24, 0x04	; 4
    106e:	89 83       	std	Y+1, r24	; 0x01
    1070:	02 c0       	rjmp	.+4      	; 0x1076 <DIO_setPinDirection+0x224>
		}
	}
	else
	{
		enu_ErrorState = DIO_E_PARAM_INVALID_PIN_ID;	/* Invalid pin id */
    1072:	82 e0       	ldi	r24, 0x02	; 2
    1074:	89 83       	std	Y+1, r24	; 0x01
	}
	return enu_ErrorState;
    1076:	89 81       	ldd	r24, Y+1	; 0x01
}
    1078:	28 96       	adiw	r28, 0x08	; 8
    107a:	0f b6       	in	r0, 0x3f	; 63
    107c:	f8 94       	cli
    107e:	de bf       	out	0x3e, r29	; 62
    1080:	0f be       	out	0x3f, r0	; 63
    1082:	cd bf       	out	0x3d, r28	; 61
    1084:	cf 91       	pop	r28
    1086:	df 91       	pop	r29
    1088:	08 95       	ret

0000108a <DIO_writePort>:
 * [in/out]		 	None
 *
 * [Returns]:       Error State
 ******************************************************************************/
enuDIO_E_STATE_t DIO_writePort(enuDIO_PortId_t enu_portID, uint8_t au8_portValue)
{
    108a:	df 93       	push	r29
    108c:	cf 93       	push	r28
    108e:	00 d0       	rcall	.+0      	; 0x1090 <DIO_writePort+0x6>
    1090:	00 d0       	rcall	.+0      	; 0x1092 <DIO_writePort+0x8>
    1092:	0f 92       	push	r0
    1094:	cd b7       	in	r28, 0x3d	; 61
    1096:	de b7       	in	r29, 0x3e	; 62
    1098:	8a 83       	std	Y+2, r24	; 0x02
    109a:	6b 83       	std	Y+3, r22	; 0x03
	enuDIO_E_STATE_t enu_ErrorState = E_NOT_OK;
    109c:	81 e0       	ldi	r24, 0x01	; 1
    109e:	89 83       	std	Y+1, r24	; 0x01

    switch (enu_portID)
    10a0:	8a 81       	ldd	r24, Y+2	; 0x02
    10a2:	28 2f       	mov	r18, r24
    10a4:	30 e0       	ldi	r19, 0x00	; 0
    10a6:	3d 83       	std	Y+5, r19	; 0x05
    10a8:	2c 83       	std	Y+4, r18	; 0x04
    10aa:	8c 81       	ldd	r24, Y+4	; 0x04
    10ac:	9d 81       	ldd	r25, Y+5	; 0x05
    10ae:	81 30       	cpi	r24, 0x01	; 1
    10b0:	91 05       	cpc	r25, r1
    10b2:	d9 f0       	breq	.+54     	; 0x10ea <DIO_writePort+0x60>
    10b4:	2c 81       	ldd	r18, Y+4	; 0x04
    10b6:	3d 81       	ldd	r19, Y+5	; 0x05
    10b8:	22 30       	cpi	r18, 0x02	; 2
    10ba:	31 05       	cpc	r19, r1
    10bc:	2c f4       	brge	.+10     	; 0x10c8 <DIO_writePort+0x3e>
    10be:	8c 81       	ldd	r24, Y+4	; 0x04
    10c0:	9d 81       	ldd	r25, Y+5	; 0x05
    10c2:	00 97       	sbiw	r24, 0x00	; 0
    10c4:	61 f0       	breq	.+24     	; 0x10de <DIO_writePort+0x54>
    10c6:	23 c0       	rjmp	.+70     	; 0x110e <DIO_writePort+0x84>
    10c8:	2c 81       	ldd	r18, Y+4	; 0x04
    10ca:	3d 81       	ldd	r19, Y+5	; 0x05
    10cc:	22 30       	cpi	r18, 0x02	; 2
    10ce:	31 05       	cpc	r19, r1
    10d0:	91 f0       	breq	.+36     	; 0x10f6 <DIO_writePort+0x6c>
    10d2:	8c 81       	ldd	r24, Y+4	; 0x04
    10d4:	9d 81       	ldd	r25, Y+5	; 0x05
    10d6:	83 30       	cpi	r24, 0x03	; 3
    10d8:	91 05       	cpc	r25, r1
    10da:	99 f0       	breq	.+38     	; 0x1102 <DIO_writePort+0x78>
    10dc:	18 c0       	rjmp	.+48     	; 0x110e <DIO_writePort+0x84>
    {
    case DIO_PORTA:
        PORTA_DATA_R = au8_portValue;
    10de:	eb e3       	ldi	r30, 0x3B	; 59
    10e0:	f0 e0       	ldi	r31, 0x00	; 0
    10e2:	8b 81       	ldd	r24, Y+3	; 0x03
    10e4:	80 83       	st	Z, r24
        enu_ErrorState = DIO_E_PARAM_VALID;
    10e6:	19 82       	std	Y+1, r1	; 0x01
    10e8:	14 c0       	rjmp	.+40     	; 0x1112 <DIO_writePort+0x88>
        break;
    case DIO_PORTB:
        PORTB_DATA_R = au8_portValue;
    10ea:	e8 e3       	ldi	r30, 0x38	; 56
    10ec:	f0 e0       	ldi	r31, 0x00	; 0
    10ee:	8b 81       	ldd	r24, Y+3	; 0x03
    10f0:	80 83       	st	Z, r24
        enu_ErrorState = DIO_E_PARAM_VALID;
    10f2:	19 82       	std	Y+1, r1	; 0x01
    10f4:	0e c0       	rjmp	.+28     	; 0x1112 <DIO_writePort+0x88>
        break;
    case DIO_PORTC:
        PORTC_DATA_R = au8_portValue;
    10f6:	e5 e3       	ldi	r30, 0x35	; 53
    10f8:	f0 e0       	ldi	r31, 0x00	; 0
    10fa:	8b 81       	ldd	r24, Y+3	; 0x03
    10fc:	80 83       	st	Z, r24
        enu_ErrorState = DIO_E_PARAM_VALID;
    10fe:	19 82       	std	Y+1, r1	; 0x01
    1100:	08 c0       	rjmp	.+16     	; 0x1112 <DIO_writePort+0x88>
        break;
    case DIO_PORTD:
        PORTD_DATA_R = au8_portValue;
    1102:	e2 e3       	ldi	r30, 0x32	; 50
    1104:	f0 e0       	ldi	r31, 0x00	; 0
    1106:	8b 81       	ldd	r24, Y+3	; 0x03
    1108:	80 83       	st	Z, r24
        enu_ErrorState = DIO_E_PARAM_VALID;
    110a:	19 82       	std	Y+1, r1	; 0x01
    110c:	02 c0       	rjmp	.+4      	; 0x1112 <DIO_writePort+0x88>
        break;
    default:
    	enu_ErrorState = DIO_E_PARAM_INVALID_PORT_ID;	/* Invalid port id */
    110e:	81 e0       	ldi	r24, 0x01	; 1
    1110:	89 83       	std	Y+1, r24	; 0x01
        break;
    }
    return enu_ErrorState;
    1112:	89 81       	ldd	r24, Y+1	; 0x01
}
    1114:	0f 90       	pop	r0
    1116:	0f 90       	pop	r0
    1118:	0f 90       	pop	r0
    111a:	0f 90       	pop	r0
    111c:	0f 90       	pop	r0
    111e:	cf 91       	pop	r28
    1120:	df 91       	pop	r29
    1122:	08 95       	ret

00001124 <DIO_writePin>:
 * [in/out]		 	None
 *
 * [Returns]:       Error State
 ******************************************************************************/
enuDIO_E_STATE_t DIO_writePin(enuDIO_PortId_t enu_portID, enuDIO_PinId_t enu_pinID, uint8_t au8_pinValue)
{
    1124:	df 93       	push	r29
    1126:	cf 93       	push	r28
    1128:	cd b7       	in	r28, 0x3d	; 61
    112a:	de b7       	in	r29, 0x3e	; 62
    112c:	28 97       	sbiw	r28, 0x08	; 8
    112e:	0f b6       	in	r0, 0x3f	; 63
    1130:	f8 94       	cli
    1132:	de bf       	out	0x3e, r29	; 62
    1134:	0f be       	out	0x3f, r0	; 63
    1136:	cd bf       	out	0x3d, r28	; 61
    1138:	8a 83       	std	Y+2, r24	; 0x02
    113a:	6b 83       	std	Y+3, r22	; 0x03
    113c:	4c 83       	std	Y+4, r20	; 0x04
	enuDIO_E_STATE_t enu_ErrorState = E_NOT_OK;
    113e:	81 e0       	ldi	r24, 0x01	; 1
    1140:	89 83       	std	Y+1, r24	; 0x01

	/* Check if the pin id is one of the existed pin or not */
	if ((enu_pinID >= PIN_0) && (enu_pinID <= PIN_7))
    1142:	8b 81       	ldd	r24, Y+3	; 0x03
    1144:	88 30       	cpi	r24, 0x08	; 8
    1146:	08 f0       	brcs	.+2      	; 0x114a <DIO_writePin+0x26>
    1148:	fd c0       	rjmp	.+506    	; 0x1344 <DIO_writePin+0x220>
	{
		if (au8_pinValue == HIGH)
    114a:	8c 81       	ldd	r24, Y+4	; 0x04
    114c:	81 30       	cpi	r24, 0x01	; 1
    114e:	09 f0       	breq	.+2      	; 0x1152 <DIO_writePin+0x2e>
    1150:	77 c0       	rjmp	.+238    	; 0x1240 <DIO_writePin+0x11c>
		{
			switch (enu_portID)
    1152:	8a 81       	ldd	r24, Y+2	; 0x02
    1154:	28 2f       	mov	r18, r24
    1156:	30 e0       	ldi	r19, 0x00	; 0
    1158:	38 87       	std	Y+8, r19	; 0x08
    115a:	2f 83       	std	Y+7, r18	; 0x07
    115c:	8f 81       	ldd	r24, Y+7	; 0x07
    115e:	98 85       	ldd	r25, Y+8	; 0x08
    1160:	81 30       	cpi	r24, 0x01	; 1
    1162:	91 05       	cpc	r25, r1
    1164:	59 f1       	breq	.+86     	; 0x11bc <DIO_writePin+0x98>
    1166:	2f 81       	ldd	r18, Y+7	; 0x07
    1168:	38 85       	ldd	r19, Y+8	; 0x08
    116a:	22 30       	cpi	r18, 0x02	; 2
    116c:	31 05       	cpc	r19, r1
    116e:	2c f4       	brge	.+10     	; 0x117a <DIO_writePin+0x56>
    1170:	8f 81       	ldd	r24, Y+7	; 0x07
    1172:	98 85       	ldd	r25, Y+8	; 0x08
    1174:	00 97       	sbiw	r24, 0x00	; 0
    1176:	69 f0       	breq	.+26     	; 0x1192 <DIO_writePin+0x6e>
    1178:	60 c0       	rjmp	.+192    	; 0x123a <DIO_writePin+0x116>
    117a:	2f 81       	ldd	r18, Y+7	; 0x07
    117c:	38 85       	ldd	r19, Y+8	; 0x08
    117e:	22 30       	cpi	r18, 0x02	; 2
    1180:	31 05       	cpc	r19, r1
    1182:	89 f1       	breq	.+98     	; 0x11e6 <DIO_writePin+0xc2>
    1184:	8f 81       	ldd	r24, Y+7	; 0x07
    1186:	98 85       	ldd	r25, Y+8	; 0x08
    1188:	83 30       	cpi	r24, 0x03	; 3
    118a:	91 05       	cpc	r25, r1
    118c:	09 f4       	brne	.+2      	; 0x1190 <DIO_writePin+0x6c>
    118e:	40 c0       	rjmp	.+128    	; 0x1210 <DIO_writePin+0xec>
    1190:	54 c0       	rjmp	.+168    	; 0x123a <DIO_writePin+0x116>
			{
			case DIO_PORTA:
				SET_BIT(PORTA_DATA_R, enu_pinID);
    1192:	ab e3       	ldi	r26, 0x3B	; 59
    1194:	b0 e0       	ldi	r27, 0x00	; 0
    1196:	eb e3       	ldi	r30, 0x3B	; 59
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	80 81       	ld	r24, Z
    119c:	48 2f       	mov	r20, r24
    119e:	8b 81       	ldd	r24, Y+3	; 0x03
    11a0:	28 2f       	mov	r18, r24
    11a2:	30 e0       	ldi	r19, 0x00	; 0
    11a4:	81 e0       	ldi	r24, 0x01	; 1
    11a6:	90 e0       	ldi	r25, 0x00	; 0
    11a8:	02 2e       	mov	r0, r18
    11aa:	02 c0       	rjmp	.+4      	; 0x11b0 <DIO_writePin+0x8c>
    11ac:	88 0f       	add	r24, r24
    11ae:	99 1f       	adc	r25, r25
    11b0:	0a 94       	dec	r0
    11b2:	e2 f7       	brpl	.-8      	; 0x11ac <DIO_writePin+0x88>
    11b4:	84 2b       	or	r24, r20
    11b6:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
    11b8:	19 82       	std	Y+1, r1	; 0x01
    11ba:	c6 c0       	rjmp	.+396    	; 0x1348 <DIO_writePin+0x224>
				break;
			case DIO_PORTB:
				SET_BIT(PORTB_DATA_R, enu_pinID);
    11bc:	a8 e3       	ldi	r26, 0x38	; 56
    11be:	b0 e0       	ldi	r27, 0x00	; 0
    11c0:	e8 e3       	ldi	r30, 0x38	; 56
    11c2:	f0 e0       	ldi	r31, 0x00	; 0
    11c4:	80 81       	ld	r24, Z
    11c6:	48 2f       	mov	r20, r24
    11c8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ca:	28 2f       	mov	r18, r24
    11cc:	30 e0       	ldi	r19, 0x00	; 0
    11ce:	81 e0       	ldi	r24, 0x01	; 1
    11d0:	90 e0       	ldi	r25, 0x00	; 0
    11d2:	02 2e       	mov	r0, r18
    11d4:	02 c0       	rjmp	.+4      	; 0x11da <DIO_writePin+0xb6>
    11d6:	88 0f       	add	r24, r24
    11d8:	99 1f       	adc	r25, r25
    11da:	0a 94       	dec	r0
    11dc:	e2 f7       	brpl	.-8      	; 0x11d6 <DIO_writePin+0xb2>
    11de:	84 2b       	or	r24, r20
    11e0:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
    11e2:	19 82       	std	Y+1, r1	; 0x01
    11e4:	b1 c0       	rjmp	.+354    	; 0x1348 <DIO_writePin+0x224>
				break;
			case DIO_PORTC:
				SET_BIT(PORTC_DATA_R, enu_pinID);
    11e6:	a5 e3       	ldi	r26, 0x35	; 53
    11e8:	b0 e0       	ldi	r27, 0x00	; 0
    11ea:	e5 e3       	ldi	r30, 0x35	; 53
    11ec:	f0 e0       	ldi	r31, 0x00	; 0
    11ee:	80 81       	ld	r24, Z
    11f0:	48 2f       	mov	r20, r24
    11f2:	8b 81       	ldd	r24, Y+3	; 0x03
    11f4:	28 2f       	mov	r18, r24
    11f6:	30 e0       	ldi	r19, 0x00	; 0
    11f8:	81 e0       	ldi	r24, 0x01	; 1
    11fa:	90 e0       	ldi	r25, 0x00	; 0
    11fc:	02 2e       	mov	r0, r18
    11fe:	02 c0       	rjmp	.+4      	; 0x1204 <DIO_writePin+0xe0>
    1200:	88 0f       	add	r24, r24
    1202:	99 1f       	adc	r25, r25
    1204:	0a 94       	dec	r0
    1206:	e2 f7       	brpl	.-8      	; 0x1200 <DIO_writePin+0xdc>
    1208:	84 2b       	or	r24, r20
    120a:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
    120c:	19 82       	std	Y+1, r1	; 0x01
    120e:	9c c0       	rjmp	.+312    	; 0x1348 <DIO_writePin+0x224>
				break;
			case DIO_PORTD:
				SET_BIT(PORTD_DATA_R, enu_pinID);
    1210:	a2 e3       	ldi	r26, 0x32	; 50
    1212:	b0 e0       	ldi	r27, 0x00	; 0
    1214:	e2 e3       	ldi	r30, 0x32	; 50
    1216:	f0 e0       	ldi	r31, 0x00	; 0
    1218:	80 81       	ld	r24, Z
    121a:	48 2f       	mov	r20, r24
    121c:	8b 81       	ldd	r24, Y+3	; 0x03
    121e:	28 2f       	mov	r18, r24
    1220:	30 e0       	ldi	r19, 0x00	; 0
    1222:	81 e0       	ldi	r24, 0x01	; 1
    1224:	90 e0       	ldi	r25, 0x00	; 0
    1226:	02 2e       	mov	r0, r18
    1228:	02 c0       	rjmp	.+4      	; 0x122e <DIO_writePin+0x10a>
    122a:	88 0f       	add	r24, r24
    122c:	99 1f       	adc	r25, r25
    122e:	0a 94       	dec	r0
    1230:	e2 f7       	brpl	.-8      	; 0x122a <DIO_writePin+0x106>
    1232:	84 2b       	or	r24, r20
    1234:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
    1236:	19 82       	std	Y+1, r1	; 0x01
    1238:	87 c0       	rjmp	.+270    	; 0x1348 <DIO_writePin+0x224>
				break;
            default:
            	enu_ErrorState = DIO_E_PARAM_INVALID_PORT_ID;	/* Invalid port id */
    123a:	81 e0       	ldi	r24, 0x01	; 1
    123c:	89 83       	std	Y+1, r24	; 0x01
    123e:	84 c0       	rjmp	.+264    	; 0x1348 <DIO_writePin+0x224>
                break;
			}
		}
		else if (au8_pinValue == LOW)
    1240:	8c 81       	ldd	r24, Y+4	; 0x04
    1242:	88 23       	and	r24, r24
    1244:	09 f0       	breq	.+2      	; 0x1248 <DIO_writePin+0x124>
    1246:	7b c0       	rjmp	.+246    	; 0x133e <DIO_writePin+0x21a>
		{
			switch (enu_portID)
    1248:	8a 81       	ldd	r24, Y+2	; 0x02
    124a:	28 2f       	mov	r18, r24
    124c:	30 e0       	ldi	r19, 0x00	; 0
    124e:	3e 83       	std	Y+6, r19	; 0x06
    1250:	2d 83       	std	Y+5, r18	; 0x05
    1252:	8d 81       	ldd	r24, Y+5	; 0x05
    1254:	9e 81       	ldd	r25, Y+6	; 0x06
    1256:	81 30       	cpi	r24, 0x01	; 1
    1258:	91 05       	cpc	r25, r1
    125a:	61 f1       	breq	.+88     	; 0x12b4 <DIO_writePin+0x190>
    125c:	2d 81       	ldd	r18, Y+5	; 0x05
    125e:	3e 81       	ldd	r19, Y+6	; 0x06
    1260:	22 30       	cpi	r18, 0x02	; 2
    1262:	31 05       	cpc	r19, r1
    1264:	2c f4       	brge	.+10     	; 0x1270 <DIO_writePin+0x14c>
    1266:	8d 81       	ldd	r24, Y+5	; 0x05
    1268:	9e 81       	ldd	r25, Y+6	; 0x06
    126a:	00 97       	sbiw	r24, 0x00	; 0
    126c:	69 f0       	breq	.+26     	; 0x1288 <DIO_writePin+0x164>
    126e:	64 c0       	rjmp	.+200    	; 0x1338 <DIO_writePin+0x214>
    1270:	2d 81       	ldd	r18, Y+5	; 0x05
    1272:	3e 81       	ldd	r19, Y+6	; 0x06
    1274:	22 30       	cpi	r18, 0x02	; 2
    1276:	31 05       	cpc	r19, r1
    1278:	99 f1       	breq	.+102    	; 0x12e0 <DIO_writePin+0x1bc>
    127a:	8d 81       	ldd	r24, Y+5	; 0x05
    127c:	9e 81       	ldd	r25, Y+6	; 0x06
    127e:	83 30       	cpi	r24, 0x03	; 3
    1280:	91 05       	cpc	r25, r1
    1282:	09 f4       	brne	.+2      	; 0x1286 <DIO_writePin+0x162>
    1284:	43 c0       	rjmp	.+134    	; 0x130c <DIO_writePin+0x1e8>
    1286:	58 c0       	rjmp	.+176    	; 0x1338 <DIO_writePin+0x214>
			{
			case DIO_PORTA:
				CLEAR_BIT(PORTA_DATA_R, enu_pinID);
    1288:	ab e3       	ldi	r26, 0x3B	; 59
    128a:	b0 e0       	ldi	r27, 0x00	; 0
    128c:	eb e3       	ldi	r30, 0x3B	; 59
    128e:	f0 e0       	ldi	r31, 0x00	; 0
    1290:	80 81       	ld	r24, Z
    1292:	48 2f       	mov	r20, r24
    1294:	8b 81       	ldd	r24, Y+3	; 0x03
    1296:	28 2f       	mov	r18, r24
    1298:	30 e0       	ldi	r19, 0x00	; 0
    129a:	81 e0       	ldi	r24, 0x01	; 1
    129c:	90 e0       	ldi	r25, 0x00	; 0
    129e:	02 2e       	mov	r0, r18
    12a0:	02 c0       	rjmp	.+4      	; 0x12a6 <DIO_writePin+0x182>
    12a2:	88 0f       	add	r24, r24
    12a4:	99 1f       	adc	r25, r25
    12a6:	0a 94       	dec	r0
    12a8:	e2 f7       	brpl	.-8      	; 0x12a2 <DIO_writePin+0x17e>
    12aa:	80 95       	com	r24
    12ac:	84 23       	and	r24, r20
    12ae:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
    12b0:	19 82       	std	Y+1, r1	; 0x01
    12b2:	4a c0       	rjmp	.+148    	; 0x1348 <DIO_writePin+0x224>
				break;
			case DIO_PORTB:
				CLEAR_BIT(PORTB_DATA_R, enu_pinID);
    12b4:	a8 e3       	ldi	r26, 0x38	; 56
    12b6:	b0 e0       	ldi	r27, 0x00	; 0
    12b8:	e8 e3       	ldi	r30, 0x38	; 56
    12ba:	f0 e0       	ldi	r31, 0x00	; 0
    12bc:	80 81       	ld	r24, Z
    12be:	48 2f       	mov	r20, r24
    12c0:	8b 81       	ldd	r24, Y+3	; 0x03
    12c2:	28 2f       	mov	r18, r24
    12c4:	30 e0       	ldi	r19, 0x00	; 0
    12c6:	81 e0       	ldi	r24, 0x01	; 1
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	02 2e       	mov	r0, r18
    12cc:	02 c0       	rjmp	.+4      	; 0x12d2 <DIO_writePin+0x1ae>
    12ce:	88 0f       	add	r24, r24
    12d0:	99 1f       	adc	r25, r25
    12d2:	0a 94       	dec	r0
    12d4:	e2 f7       	brpl	.-8      	; 0x12ce <DIO_writePin+0x1aa>
    12d6:	80 95       	com	r24
    12d8:	84 23       	and	r24, r20
    12da:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
    12dc:	19 82       	std	Y+1, r1	; 0x01
    12de:	34 c0       	rjmp	.+104    	; 0x1348 <DIO_writePin+0x224>
				break;
			case DIO_PORTC:
				CLEAR_BIT(PORTC_DATA_R, enu_pinID);
    12e0:	a5 e3       	ldi	r26, 0x35	; 53
    12e2:	b0 e0       	ldi	r27, 0x00	; 0
    12e4:	e5 e3       	ldi	r30, 0x35	; 53
    12e6:	f0 e0       	ldi	r31, 0x00	; 0
    12e8:	80 81       	ld	r24, Z
    12ea:	48 2f       	mov	r20, r24
    12ec:	8b 81       	ldd	r24, Y+3	; 0x03
    12ee:	28 2f       	mov	r18, r24
    12f0:	30 e0       	ldi	r19, 0x00	; 0
    12f2:	81 e0       	ldi	r24, 0x01	; 1
    12f4:	90 e0       	ldi	r25, 0x00	; 0
    12f6:	02 2e       	mov	r0, r18
    12f8:	02 c0       	rjmp	.+4      	; 0x12fe <DIO_writePin+0x1da>
    12fa:	88 0f       	add	r24, r24
    12fc:	99 1f       	adc	r25, r25
    12fe:	0a 94       	dec	r0
    1300:	e2 f7       	brpl	.-8      	; 0x12fa <DIO_writePin+0x1d6>
    1302:	80 95       	com	r24
    1304:	84 23       	and	r24, r20
    1306:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
    1308:	19 82       	std	Y+1, r1	; 0x01
    130a:	1e c0       	rjmp	.+60     	; 0x1348 <DIO_writePin+0x224>
				break;
			case DIO_PORTD:
				CLEAR_BIT(PORTD_DATA_R, enu_pinID);
    130c:	a2 e3       	ldi	r26, 0x32	; 50
    130e:	b0 e0       	ldi	r27, 0x00	; 0
    1310:	e2 e3       	ldi	r30, 0x32	; 50
    1312:	f0 e0       	ldi	r31, 0x00	; 0
    1314:	80 81       	ld	r24, Z
    1316:	48 2f       	mov	r20, r24
    1318:	8b 81       	ldd	r24, Y+3	; 0x03
    131a:	28 2f       	mov	r18, r24
    131c:	30 e0       	ldi	r19, 0x00	; 0
    131e:	81 e0       	ldi	r24, 0x01	; 1
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	02 2e       	mov	r0, r18
    1324:	02 c0       	rjmp	.+4      	; 0x132a <DIO_writePin+0x206>
    1326:	88 0f       	add	r24, r24
    1328:	99 1f       	adc	r25, r25
    132a:	0a 94       	dec	r0
    132c:	e2 f7       	brpl	.-8      	; 0x1326 <DIO_writePin+0x202>
    132e:	80 95       	com	r24
    1330:	84 23       	and	r24, r20
    1332:	8c 93       	st	X, r24
				enu_ErrorState = DIO_E_PARAM_VALID;
    1334:	19 82       	std	Y+1, r1	; 0x01
    1336:	08 c0       	rjmp	.+16     	; 0x1348 <DIO_writePin+0x224>
				break;
            default:
            	enu_ErrorState = DIO_E_PARAM_INVALID_PORT_ID;	/* Invalid port id */
    1338:	81 e0       	ldi	r24, 0x01	; 1
    133a:	89 83       	std	Y+1, r24	; 0x01
    133c:	05 c0       	rjmp	.+10     	; 0x1348 <DIO_writePin+0x224>
                break;
			}
		}
		else
        {
			enu_ErrorState = DIO_E_PARAM_INVALID_PORT_DIR;	/* Invalid port direction */
    133e:	84 e0       	ldi	r24, 0x04	; 4
    1340:	89 83       	std	Y+1, r24	; 0x01
    1342:	02 c0       	rjmp	.+4      	; 0x1348 <DIO_writePin+0x224>
		}
	}
	else
	{
		enu_ErrorState = DIO_E_PARAM_INVALID_PIN_ID;	/* Invalid pin id */
    1344:	82 e0       	ldi	r24, 0x02	; 2
    1346:	89 83       	std	Y+1, r24	; 0x01
	}
	return enu_ErrorState;
    1348:	89 81       	ldd	r24, Y+1	; 0x01
}
    134a:	28 96       	adiw	r28, 0x08	; 8
    134c:	0f b6       	in	r0, 0x3f	; 63
    134e:	f8 94       	cli
    1350:	de bf       	out	0x3e, r29	; 62
    1352:	0f be       	out	0x3f, r0	; 63
    1354:	cd bf       	out	0x3d, r28	; 61
    1356:	cf 91       	pop	r28
    1358:	df 91       	pop	r29
    135a:	08 95       	ret

0000135c <DIO_readPort>:
 * [in/out]		 	None
 *
 * [Returns]:       Error State
 ******************************************************************************/
enuDIO_E_STATE_t DIO_readPort(enuDIO_PortId_t enu_portID, uint8_t * ptr_portState)
{
    135c:	df 93       	push	r29
    135e:	cf 93       	push	r28
    1360:	00 d0       	rcall	.+0      	; 0x1362 <DIO_readPort+0x6>
    1362:	00 d0       	rcall	.+0      	; 0x1364 <DIO_readPort+0x8>
    1364:	00 d0       	rcall	.+0      	; 0x1366 <DIO_readPort+0xa>
    1366:	cd b7       	in	r28, 0x3d	; 61
    1368:	de b7       	in	r29, 0x3e	; 62
    136a:	8a 83       	std	Y+2, r24	; 0x02
    136c:	7c 83       	std	Y+4, r23	; 0x04
    136e:	6b 83       	std	Y+3, r22	; 0x03
	enuDIO_E_STATE_t enu_ErrorState = E_NOT_OK;
    1370:	81 e0       	ldi	r24, 0x01	; 1
    1372:	89 83       	std	Y+1, r24	; 0x01

	/* Check if the pointer is NULL pointer or not */
	if(ptr_portState == NULL_PTR)
    1374:	8b 81       	ldd	r24, Y+3	; 0x03
    1376:	9c 81       	ldd	r25, Y+4	; 0x04
    1378:	00 97       	sbiw	r24, 0x00	; 0
    137a:	19 f4       	brne	.+6      	; 0x1382 <DIO_readPort+0x26>
    {
		enu_ErrorState = DIO_E_PARAM_POINTER;	/* Invalid pointer */
    137c:	85 e0       	ldi	r24, 0x05	; 5
    137e:	89 83       	std	Y+1, r24	; 0x01
    1380:	41 c0       	rjmp	.+130    	; 0x1404 <DIO_readPort+0xa8>
	}
	else
	{
		switch (enu_portID)
    1382:	8a 81       	ldd	r24, Y+2	; 0x02
    1384:	28 2f       	mov	r18, r24
    1386:	30 e0       	ldi	r19, 0x00	; 0
    1388:	3e 83       	std	Y+6, r19	; 0x06
    138a:	2d 83       	std	Y+5, r18	; 0x05
    138c:	8d 81       	ldd	r24, Y+5	; 0x05
    138e:	9e 81       	ldd	r25, Y+6	; 0x06
    1390:	81 30       	cpi	r24, 0x01	; 1
    1392:	91 05       	cpc	r25, r1
    1394:	e9 f0       	breq	.+58     	; 0x13d0 <DIO_readPort+0x74>
    1396:	2d 81       	ldd	r18, Y+5	; 0x05
    1398:	3e 81       	ldd	r19, Y+6	; 0x06
    139a:	22 30       	cpi	r18, 0x02	; 2
    139c:	31 05       	cpc	r19, r1
    139e:	2c f4       	brge	.+10     	; 0x13aa <DIO_readPort+0x4e>
    13a0:	8d 81       	ldd	r24, Y+5	; 0x05
    13a2:	9e 81       	ldd	r25, Y+6	; 0x06
    13a4:	00 97       	sbiw	r24, 0x00	; 0
    13a6:	61 f0       	breq	.+24     	; 0x13c0 <DIO_readPort+0x64>
    13a8:	2b c0       	rjmp	.+86     	; 0x1400 <DIO_readPort+0xa4>
    13aa:	2d 81       	ldd	r18, Y+5	; 0x05
    13ac:	3e 81       	ldd	r19, Y+6	; 0x06
    13ae:	22 30       	cpi	r18, 0x02	; 2
    13b0:	31 05       	cpc	r19, r1
    13b2:	b1 f0       	breq	.+44     	; 0x13e0 <DIO_readPort+0x84>
    13b4:	8d 81       	ldd	r24, Y+5	; 0x05
    13b6:	9e 81       	ldd	r25, Y+6	; 0x06
    13b8:	83 30       	cpi	r24, 0x03	; 3
    13ba:	91 05       	cpc	r25, r1
    13bc:	c9 f0       	breq	.+50     	; 0x13f0 <DIO_readPort+0x94>
    13be:	20 c0       	rjmp	.+64     	; 0x1400 <DIO_readPort+0xa4>
		{
		case DIO_PORTA:
			*ptr_portState = PINA_INPUT_R;
    13c0:	e9 e3       	ldi	r30, 0x39	; 57
    13c2:	f0 e0       	ldi	r31, 0x00	; 0
    13c4:	80 81       	ld	r24, Z
    13c6:	eb 81       	ldd	r30, Y+3	; 0x03
    13c8:	fc 81       	ldd	r31, Y+4	; 0x04
    13ca:	80 83       	st	Z, r24
			enu_ErrorState = DIO_E_PARAM_VALID;
    13cc:	19 82       	std	Y+1, r1	; 0x01
    13ce:	1a c0       	rjmp	.+52     	; 0x1404 <DIO_readPort+0xa8>
			break;
		case DIO_PORTB:
			*ptr_portState = PINB_INPUT_R;
    13d0:	e6 e3       	ldi	r30, 0x36	; 54
    13d2:	f0 e0       	ldi	r31, 0x00	; 0
    13d4:	80 81       	ld	r24, Z
    13d6:	eb 81       	ldd	r30, Y+3	; 0x03
    13d8:	fc 81       	ldd	r31, Y+4	; 0x04
    13da:	80 83       	st	Z, r24
			enu_ErrorState = DIO_E_PARAM_VALID;;
    13dc:	19 82       	std	Y+1, r1	; 0x01
    13de:	12 c0       	rjmp	.+36     	; 0x1404 <DIO_readPort+0xa8>
			break;
		case DIO_PORTC:
			*ptr_portState = PINC_INPUT_R;
    13e0:	e3 e3       	ldi	r30, 0x33	; 51
    13e2:	f0 e0       	ldi	r31, 0x00	; 0
    13e4:	80 81       	ld	r24, Z
    13e6:	eb 81       	ldd	r30, Y+3	; 0x03
    13e8:	fc 81       	ldd	r31, Y+4	; 0x04
    13ea:	80 83       	st	Z, r24
			enu_ErrorState = DIO_E_PARAM_VALID;
    13ec:	19 82       	std	Y+1, r1	; 0x01
    13ee:	0a c0       	rjmp	.+20     	; 0x1404 <DIO_readPort+0xa8>
			break;
		case DIO_PORTD:
			*ptr_portState = PIND_INPUT_R;
    13f0:	e0 e3       	ldi	r30, 0x30	; 48
    13f2:	f0 e0       	ldi	r31, 0x00	; 0
    13f4:	80 81       	ld	r24, Z
    13f6:	eb 81       	ldd	r30, Y+3	; 0x03
    13f8:	fc 81       	ldd	r31, Y+4	; 0x04
    13fa:	80 83       	st	Z, r24
			enu_ErrorState = DIO_E_PARAM_VALID;
    13fc:	19 82       	std	Y+1, r1	; 0x01
    13fe:	02 c0       	rjmp	.+4      	; 0x1404 <DIO_readPort+0xa8>
			break;
		default:
			enu_ErrorState = DIO_E_PARAM_INVALID_PORT_ID;	/* Invalid port id */
    1400:	81 e0       	ldi	r24, 0x01	; 1
    1402:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return enu_ErrorState;
    1404:	89 81       	ldd	r24, Y+1	; 0x01
}
    1406:	26 96       	adiw	r28, 0x06	; 6
    1408:	0f b6       	in	r0, 0x3f	; 63
    140a:	f8 94       	cli
    140c:	de bf       	out	0x3e, r29	; 62
    140e:	0f be       	out	0x3f, r0	; 63
    1410:	cd bf       	out	0x3d, r28	; 61
    1412:	cf 91       	pop	r28
    1414:	df 91       	pop	r29
    1416:	08 95       	ret

00001418 <DIO_readPin>:
 * [in/out]		 	None
 *
 * [Returns]:       Error State
 ******************************************************************************/
enuDIO_E_STATE_t DIO_readPin(enuDIO_PortId_t enu_portID, enuDIO_PinId_t enu_pinID, uint8_t * ptr_pinState)
{
    1418:	df 93       	push	r29
    141a:	cf 93       	push	r28
    141c:	cd b7       	in	r28, 0x3d	; 61
    141e:	de b7       	in	r29, 0x3e	; 62
    1420:	27 97       	sbiw	r28, 0x07	; 7
    1422:	0f b6       	in	r0, 0x3f	; 63
    1424:	f8 94       	cli
    1426:	de bf       	out	0x3e, r29	; 62
    1428:	0f be       	out	0x3f, r0	; 63
    142a:	cd bf       	out	0x3d, r28	; 61
    142c:	8a 83       	std	Y+2, r24	; 0x02
    142e:	6b 83       	std	Y+3, r22	; 0x03
    1430:	5d 83       	std	Y+5, r21	; 0x05
    1432:	4c 83       	std	Y+4, r20	; 0x04
	enuDIO_E_STATE_t enu_ErrorState = E_NOT_OK;
    1434:	81 e0       	ldi	r24, 0x01	; 1
    1436:	89 83       	std	Y+1, r24	; 0x01

	/* Check if the pointer is NULL pointer or not */
	if(ptr_pinState == NULL_PTR)
    1438:	8c 81       	ldd	r24, Y+4	; 0x04
    143a:	9d 81       	ldd	r25, Y+5	; 0x05
    143c:	00 97       	sbiw	r24, 0x00	; 0
    143e:	19 f4       	brne	.+6      	; 0x1446 <DIO_readPin+0x2e>
    {
		enu_ErrorState = DIO_E_PARAM_POINTER;
    1440:	85 e0       	ldi	r24, 0x05	; 5
    1442:	89 83       	std	Y+1, r24	; 0x01
    1444:	af c0       	rjmp	.+350    	; 0x15a4 <DIO_readPin+0x18c>
	}
	else
	{
        if((enu_pinID >= PIN_0) && (enu_pinID <= PIN_7))
    1446:	8b 81       	ldd	r24, Y+3	; 0x03
    1448:	88 30       	cpi	r24, 0x08	; 8
    144a:	08 f0       	brcs	.+2      	; 0x144e <DIO_readPin+0x36>
    144c:	a9 c0       	rjmp	.+338    	; 0x15a0 <DIO_readPin+0x188>
        {
            switch (enu_portID)
    144e:	8a 81       	ldd	r24, Y+2	; 0x02
    1450:	28 2f       	mov	r18, r24
    1452:	30 e0       	ldi	r19, 0x00	; 0
    1454:	3f 83       	std	Y+7, r19	; 0x07
    1456:	2e 83       	std	Y+6, r18	; 0x06
    1458:	4e 81       	ldd	r20, Y+6	; 0x06
    145a:	5f 81       	ldd	r21, Y+7	; 0x07
    145c:	41 30       	cpi	r20, 0x01	; 1
    145e:	51 05       	cpc	r21, r1
    1460:	c9 f1       	breq	.+114    	; 0x14d4 <DIO_readPin+0xbc>
    1462:	8e 81       	ldd	r24, Y+6	; 0x06
    1464:	9f 81       	ldd	r25, Y+7	; 0x07
    1466:	82 30       	cpi	r24, 0x02	; 2
    1468:	91 05       	cpc	r25, r1
    146a:	34 f4       	brge	.+12     	; 0x1478 <DIO_readPin+0x60>
    146c:	2e 81       	ldd	r18, Y+6	; 0x06
    146e:	3f 81       	ldd	r19, Y+7	; 0x07
    1470:	21 15       	cp	r18, r1
    1472:	31 05       	cpc	r19, r1
    1474:	71 f0       	breq	.+28     	; 0x1492 <DIO_readPin+0x7a>
    1476:	91 c0       	rjmp	.+290    	; 0x159a <DIO_readPin+0x182>
    1478:	4e 81       	ldd	r20, Y+6	; 0x06
    147a:	5f 81       	ldd	r21, Y+7	; 0x07
    147c:	42 30       	cpi	r20, 0x02	; 2
    147e:	51 05       	cpc	r21, r1
    1480:	09 f4       	brne	.+2      	; 0x1484 <DIO_readPin+0x6c>
    1482:	49 c0       	rjmp	.+146    	; 0x1516 <DIO_readPin+0xfe>
    1484:	8e 81       	ldd	r24, Y+6	; 0x06
    1486:	9f 81       	ldd	r25, Y+7	; 0x07
    1488:	83 30       	cpi	r24, 0x03	; 3
    148a:	91 05       	cpc	r25, r1
    148c:	09 f4       	brne	.+2      	; 0x1490 <DIO_readPin+0x78>
    148e:	64 c0       	rjmp	.+200    	; 0x1558 <DIO_readPin+0x140>
    1490:	84 c0       	rjmp	.+264    	; 0x159a <DIO_readPin+0x182>
            {
            case DIO_PORTA:
                *ptr_pinState = READ_BIT(PINA_INPUT_R, enu_pinID);
    1492:	e9 e3       	ldi	r30, 0x39	; 57
    1494:	f0 e0       	ldi	r31, 0x00	; 0
    1496:	80 81       	ld	r24, Z
    1498:	48 2f       	mov	r20, r24
    149a:	50 e0       	ldi	r21, 0x00	; 0
    149c:	8b 81       	ldd	r24, Y+3	; 0x03
    149e:	28 2f       	mov	r18, r24
    14a0:	30 e0       	ldi	r19, 0x00	; 0
    14a2:	81 e0       	ldi	r24, 0x01	; 1
    14a4:	90 e0       	ldi	r25, 0x00	; 0
    14a6:	02 c0       	rjmp	.+4      	; 0x14ac <DIO_readPin+0x94>
    14a8:	88 0f       	add	r24, r24
    14aa:	99 1f       	adc	r25, r25
    14ac:	2a 95       	dec	r18
    14ae:	e2 f7       	brpl	.-8      	; 0x14a8 <DIO_readPin+0x90>
    14b0:	9a 01       	movw	r18, r20
    14b2:	28 23       	and	r18, r24
    14b4:	39 23       	and	r19, r25
    14b6:	8b 81       	ldd	r24, Y+3	; 0x03
    14b8:	88 2f       	mov	r24, r24
    14ba:	90 e0       	ldi	r25, 0x00	; 0
    14bc:	a9 01       	movw	r20, r18
    14be:	02 c0       	rjmp	.+4      	; 0x14c4 <DIO_readPin+0xac>
    14c0:	55 95       	asr	r21
    14c2:	47 95       	ror	r20
    14c4:	8a 95       	dec	r24
    14c6:	e2 f7       	brpl	.-8      	; 0x14c0 <DIO_readPin+0xa8>
    14c8:	ca 01       	movw	r24, r20
    14ca:	ec 81       	ldd	r30, Y+4	; 0x04
    14cc:	fd 81       	ldd	r31, Y+5	; 0x05
    14ce:	80 83       	st	Z, r24
                enu_ErrorState = DIO_E_PARAM_VALID;
    14d0:	19 82       	std	Y+1, r1	; 0x01
    14d2:	68 c0       	rjmp	.+208    	; 0x15a4 <DIO_readPin+0x18c>
                break;
            case DIO_PORTB:
                *ptr_pinState = READ_BIT(PINB_INPUT_R, enu_pinID);
    14d4:	e6 e3       	ldi	r30, 0x36	; 54
    14d6:	f0 e0       	ldi	r31, 0x00	; 0
    14d8:	80 81       	ld	r24, Z
    14da:	48 2f       	mov	r20, r24
    14dc:	50 e0       	ldi	r21, 0x00	; 0
    14de:	8b 81       	ldd	r24, Y+3	; 0x03
    14e0:	28 2f       	mov	r18, r24
    14e2:	30 e0       	ldi	r19, 0x00	; 0
    14e4:	81 e0       	ldi	r24, 0x01	; 1
    14e6:	90 e0       	ldi	r25, 0x00	; 0
    14e8:	02 c0       	rjmp	.+4      	; 0x14ee <DIO_readPin+0xd6>
    14ea:	88 0f       	add	r24, r24
    14ec:	99 1f       	adc	r25, r25
    14ee:	2a 95       	dec	r18
    14f0:	e2 f7       	brpl	.-8      	; 0x14ea <DIO_readPin+0xd2>
    14f2:	9a 01       	movw	r18, r20
    14f4:	28 23       	and	r18, r24
    14f6:	39 23       	and	r19, r25
    14f8:	8b 81       	ldd	r24, Y+3	; 0x03
    14fa:	88 2f       	mov	r24, r24
    14fc:	90 e0       	ldi	r25, 0x00	; 0
    14fe:	a9 01       	movw	r20, r18
    1500:	02 c0       	rjmp	.+4      	; 0x1506 <DIO_readPin+0xee>
    1502:	55 95       	asr	r21
    1504:	47 95       	ror	r20
    1506:	8a 95       	dec	r24
    1508:	e2 f7       	brpl	.-8      	; 0x1502 <DIO_readPin+0xea>
    150a:	ca 01       	movw	r24, r20
    150c:	ec 81       	ldd	r30, Y+4	; 0x04
    150e:	fd 81       	ldd	r31, Y+5	; 0x05
    1510:	80 83       	st	Z, r24
                enu_ErrorState = DIO_E_PARAM_VALID;
    1512:	19 82       	std	Y+1, r1	; 0x01
    1514:	47 c0       	rjmp	.+142    	; 0x15a4 <DIO_readPin+0x18c>
                break;
            case DIO_PORTC:
                *ptr_pinState = READ_BIT(PINC_INPUT_R, enu_pinID);
    1516:	e3 e3       	ldi	r30, 0x33	; 51
    1518:	f0 e0       	ldi	r31, 0x00	; 0
    151a:	80 81       	ld	r24, Z
    151c:	48 2f       	mov	r20, r24
    151e:	50 e0       	ldi	r21, 0x00	; 0
    1520:	8b 81       	ldd	r24, Y+3	; 0x03
    1522:	28 2f       	mov	r18, r24
    1524:	30 e0       	ldi	r19, 0x00	; 0
    1526:	81 e0       	ldi	r24, 0x01	; 1
    1528:	90 e0       	ldi	r25, 0x00	; 0
    152a:	02 c0       	rjmp	.+4      	; 0x1530 <DIO_readPin+0x118>
    152c:	88 0f       	add	r24, r24
    152e:	99 1f       	adc	r25, r25
    1530:	2a 95       	dec	r18
    1532:	e2 f7       	brpl	.-8      	; 0x152c <DIO_readPin+0x114>
    1534:	9a 01       	movw	r18, r20
    1536:	28 23       	and	r18, r24
    1538:	39 23       	and	r19, r25
    153a:	8b 81       	ldd	r24, Y+3	; 0x03
    153c:	88 2f       	mov	r24, r24
    153e:	90 e0       	ldi	r25, 0x00	; 0
    1540:	a9 01       	movw	r20, r18
    1542:	02 c0       	rjmp	.+4      	; 0x1548 <DIO_readPin+0x130>
    1544:	55 95       	asr	r21
    1546:	47 95       	ror	r20
    1548:	8a 95       	dec	r24
    154a:	e2 f7       	brpl	.-8      	; 0x1544 <DIO_readPin+0x12c>
    154c:	ca 01       	movw	r24, r20
    154e:	ec 81       	ldd	r30, Y+4	; 0x04
    1550:	fd 81       	ldd	r31, Y+5	; 0x05
    1552:	80 83       	st	Z, r24
                enu_ErrorState = DIO_E_PARAM_VALID;
    1554:	19 82       	std	Y+1, r1	; 0x01
    1556:	26 c0       	rjmp	.+76     	; 0x15a4 <DIO_readPin+0x18c>
                break;
            case DIO_PORTD:
                *ptr_pinState = READ_BIT(PIND_INPUT_R, enu_pinID);
    1558:	e0 e3       	ldi	r30, 0x30	; 48
    155a:	f0 e0       	ldi	r31, 0x00	; 0
    155c:	80 81       	ld	r24, Z
    155e:	48 2f       	mov	r20, r24
    1560:	50 e0       	ldi	r21, 0x00	; 0
    1562:	8b 81       	ldd	r24, Y+3	; 0x03
    1564:	28 2f       	mov	r18, r24
    1566:	30 e0       	ldi	r19, 0x00	; 0
    1568:	81 e0       	ldi	r24, 0x01	; 1
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	02 c0       	rjmp	.+4      	; 0x1572 <DIO_readPin+0x15a>
    156e:	88 0f       	add	r24, r24
    1570:	99 1f       	adc	r25, r25
    1572:	2a 95       	dec	r18
    1574:	e2 f7       	brpl	.-8      	; 0x156e <DIO_readPin+0x156>
    1576:	9a 01       	movw	r18, r20
    1578:	28 23       	and	r18, r24
    157a:	39 23       	and	r19, r25
    157c:	8b 81       	ldd	r24, Y+3	; 0x03
    157e:	88 2f       	mov	r24, r24
    1580:	90 e0       	ldi	r25, 0x00	; 0
    1582:	a9 01       	movw	r20, r18
    1584:	02 c0       	rjmp	.+4      	; 0x158a <DIO_readPin+0x172>
    1586:	55 95       	asr	r21
    1588:	47 95       	ror	r20
    158a:	8a 95       	dec	r24
    158c:	e2 f7       	brpl	.-8      	; 0x1586 <DIO_readPin+0x16e>
    158e:	ca 01       	movw	r24, r20
    1590:	ec 81       	ldd	r30, Y+4	; 0x04
    1592:	fd 81       	ldd	r31, Y+5	; 0x05
    1594:	80 83       	st	Z, r24
                enu_ErrorState = DIO_E_PARAM_VALID;
    1596:	19 82       	std	Y+1, r1	; 0x01
    1598:	05 c0       	rjmp	.+10     	; 0x15a4 <DIO_readPin+0x18c>
                break;
            default:
            	enu_ErrorState = DIO_E_PARAM_INVALID_PORT_ID;	/* Invalid port id */
    159a:	81 e0       	ldi	r24, 0x01	; 1
    159c:	89 83       	std	Y+1, r24	; 0x01
    159e:	02 c0       	rjmp	.+4      	; 0x15a4 <DIO_readPin+0x18c>
                break;
            }
        }
        else
        {
        	enu_ErrorState = DIO_E_PARAM_INVALID_PIN_ID;	/* Invalid pin id */
    15a0:	82 e0       	ldi	r24, 0x02	; 2
    15a2:	89 83       	std	Y+1, r24	; 0x01
        }
	}
    return enu_ErrorState;
    15a4:	89 81       	ldd	r24, Y+1	; 0x01
}
    15a6:	27 96       	adiw	r28, 0x07	; 7
    15a8:	0f b6       	in	r0, 0x3f	; 63
    15aa:	f8 94       	cli
    15ac:	de bf       	out	0x3e, r29	; 62
    15ae:	0f be       	out	0x3f, r0	; 63
    15b0:	cd bf       	out	0x3d, r28	; 61
    15b2:	cf 91       	pop	r28
    15b4:	df 91       	pop	r29
    15b6:	08 95       	ret

000015b8 <DIO_TogglePin>:
 * [in/out]		 	None
 *
 * [Returns]:       Error State
 ******************************************************************************/
enuDIO_E_STATE_t DIO_TogglePin(enuDIO_PortId_t enu_portID, enuDIO_PinId_t enu_pinID)
{
    15b8:	df 93       	push	r29
    15ba:	cf 93       	push	r28
    15bc:	00 d0       	rcall	.+0      	; 0x15be <DIO_TogglePin+0x6>
    15be:	00 d0       	rcall	.+0      	; 0x15c0 <DIO_TogglePin+0x8>
    15c0:	0f 92       	push	r0
    15c2:	cd b7       	in	r28, 0x3d	; 61
    15c4:	de b7       	in	r29, 0x3e	; 62
    15c6:	8a 83       	std	Y+2, r24	; 0x02
    15c8:	6b 83       	std	Y+3, r22	; 0x03
	enuDIO_E_STATE_t enu_ErrorState = E_NOT_OK;
    15ca:	81 e0       	ldi	r24, 0x01	; 1
    15cc:	89 83       	std	Y+1, r24	; 0x01

	/* Check if the pointer is NULL pointer or not */
    if ((enu_pinID >= PIN_0) && (enu_pinID <= PIN_7))
    15ce:	8b 81       	ldd	r24, Y+3	; 0x03
    15d0:	88 30       	cpi	r24, 0x08	; 8
    15d2:	08 f0       	brcs	.+2      	; 0x15d6 <DIO_TogglePin+0x1e>
    15d4:	77 c0       	rjmp	.+238    	; 0x16c4 <DIO_TogglePin+0x10c>
    {
        switch (enu_portID)
    15d6:	8a 81       	ldd	r24, Y+2	; 0x02
    15d8:	28 2f       	mov	r18, r24
    15da:	30 e0       	ldi	r19, 0x00	; 0
    15dc:	3d 83       	std	Y+5, r19	; 0x05
    15de:	2c 83       	std	Y+4, r18	; 0x04
    15e0:	8c 81       	ldd	r24, Y+4	; 0x04
    15e2:	9d 81       	ldd	r25, Y+5	; 0x05
    15e4:	81 30       	cpi	r24, 0x01	; 1
    15e6:	91 05       	cpc	r25, r1
    15e8:	59 f1       	breq	.+86     	; 0x1640 <DIO_TogglePin+0x88>
    15ea:	2c 81       	ldd	r18, Y+4	; 0x04
    15ec:	3d 81       	ldd	r19, Y+5	; 0x05
    15ee:	22 30       	cpi	r18, 0x02	; 2
    15f0:	31 05       	cpc	r19, r1
    15f2:	2c f4       	brge	.+10     	; 0x15fe <DIO_TogglePin+0x46>
    15f4:	8c 81       	ldd	r24, Y+4	; 0x04
    15f6:	9d 81       	ldd	r25, Y+5	; 0x05
    15f8:	00 97       	sbiw	r24, 0x00	; 0
    15fa:	69 f0       	breq	.+26     	; 0x1616 <DIO_TogglePin+0x5e>
    15fc:	60 c0       	rjmp	.+192    	; 0x16be <DIO_TogglePin+0x106>
    15fe:	2c 81       	ldd	r18, Y+4	; 0x04
    1600:	3d 81       	ldd	r19, Y+5	; 0x05
    1602:	22 30       	cpi	r18, 0x02	; 2
    1604:	31 05       	cpc	r19, r1
    1606:	89 f1       	breq	.+98     	; 0x166a <DIO_TogglePin+0xb2>
    1608:	8c 81       	ldd	r24, Y+4	; 0x04
    160a:	9d 81       	ldd	r25, Y+5	; 0x05
    160c:	83 30       	cpi	r24, 0x03	; 3
    160e:	91 05       	cpc	r25, r1
    1610:	09 f4       	brne	.+2      	; 0x1614 <DIO_TogglePin+0x5c>
    1612:	40 c0       	rjmp	.+128    	; 0x1694 <DIO_TogglePin+0xdc>
    1614:	54 c0       	rjmp	.+168    	; 0x16be <DIO_TogglePin+0x106>
        {
        case DIO_PORTA:
            TOGGLE_BIT(PORTA_DATA_R, enu_pinID);
    1616:	ab e3       	ldi	r26, 0x3B	; 59
    1618:	b0 e0       	ldi	r27, 0x00	; 0
    161a:	eb e3       	ldi	r30, 0x3B	; 59
    161c:	f0 e0       	ldi	r31, 0x00	; 0
    161e:	80 81       	ld	r24, Z
    1620:	48 2f       	mov	r20, r24
    1622:	8b 81       	ldd	r24, Y+3	; 0x03
    1624:	28 2f       	mov	r18, r24
    1626:	30 e0       	ldi	r19, 0x00	; 0
    1628:	81 e0       	ldi	r24, 0x01	; 1
    162a:	90 e0       	ldi	r25, 0x00	; 0
    162c:	02 2e       	mov	r0, r18
    162e:	02 c0       	rjmp	.+4      	; 0x1634 <DIO_TogglePin+0x7c>
    1630:	88 0f       	add	r24, r24
    1632:	99 1f       	adc	r25, r25
    1634:	0a 94       	dec	r0
    1636:	e2 f7       	brpl	.-8      	; 0x1630 <DIO_TogglePin+0x78>
    1638:	84 27       	eor	r24, r20
    163a:	8c 93       	st	X, r24
            enu_ErrorState = DIO_E_PARAM_VALID;
    163c:	19 82       	std	Y+1, r1	; 0x01
    163e:	44 c0       	rjmp	.+136    	; 0x16c8 <DIO_TogglePin+0x110>
            break;
        case DIO_PORTB:
        	TOGGLE_BIT(PORTB_DATA_R, enu_pinID);
    1640:	a8 e3       	ldi	r26, 0x38	; 56
    1642:	b0 e0       	ldi	r27, 0x00	; 0
    1644:	e8 e3       	ldi	r30, 0x38	; 56
    1646:	f0 e0       	ldi	r31, 0x00	; 0
    1648:	80 81       	ld	r24, Z
    164a:	48 2f       	mov	r20, r24
    164c:	8b 81       	ldd	r24, Y+3	; 0x03
    164e:	28 2f       	mov	r18, r24
    1650:	30 e0       	ldi	r19, 0x00	; 0
    1652:	81 e0       	ldi	r24, 0x01	; 1
    1654:	90 e0       	ldi	r25, 0x00	; 0
    1656:	02 2e       	mov	r0, r18
    1658:	02 c0       	rjmp	.+4      	; 0x165e <DIO_TogglePin+0xa6>
    165a:	88 0f       	add	r24, r24
    165c:	99 1f       	adc	r25, r25
    165e:	0a 94       	dec	r0
    1660:	e2 f7       	brpl	.-8      	; 0x165a <DIO_TogglePin+0xa2>
    1662:	84 27       	eor	r24, r20
    1664:	8c 93       	st	X, r24
            enu_ErrorState = DIO_E_PARAM_VALID;
    1666:	19 82       	std	Y+1, r1	; 0x01
    1668:	2f c0       	rjmp	.+94     	; 0x16c8 <DIO_TogglePin+0x110>
            break;
        case DIO_PORTC:
        	TOGGLE_BIT(PORTC_DATA_R, enu_pinID);
    166a:	a5 e3       	ldi	r26, 0x35	; 53
    166c:	b0 e0       	ldi	r27, 0x00	; 0
    166e:	e5 e3       	ldi	r30, 0x35	; 53
    1670:	f0 e0       	ldi	r31, 0x00	; 0
    1672:	80 81       	ld	r24, Z
    1674:	48 2f       	mov	r20, r24
    1676:	8b 81       	ldd	r24, Y+3	; 0x03
    1678:	28 2f       	mov	r18, r24
    167a:	30 e0       	ldi	r19, 0x00	; 0
    167c:	81 e0       	ldi	r24, 0x01	; 1
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	02 2e       	mov	r0, r18
    1682:	02 c0       	rjmp	.+4      	; 0x1688 <DIO_TogglePin+0xd0>
    1684:	88 0f       	add	r24, r24
    1686:	99 1f       	adc	r25, r25
    1688:	0a 94       	dec	r0
    168a:	e2 f7       	brpl	.-8      	; 0x1684 <DIO_TogglePin+0xcc>
    168c:	84 27       	eor	r24, r20
    168e:	8c 93       	st	X, r24
            enu_ErrorState = DIO_E_PARAM_VALID;
    1690:	19 82       	std	Y+1, r1	; 0x01
    1692:	1a c0       	rjmp	.+52     	; 0x16c8 <DIO_TogglePin+0x110>
            break;
        case DIO_PORTD:
        	TOGGLE_BIT(PORTD_DATA_R, enu_pinID);
    1694:	a2 e3       	ldi	r26, 0x32	; 50
    1696:	b0 e0       	ldi	r27, 0x00	; 0
    1698:	e2 e3       	ldi	r30, 0x32	; 50
    169a:	f0 e0       	ldi	r31, 0x00	; 0
    169c:	80 81       	ld	r24, Z
    169e:	48 2f       	mov	r20, r24
    16a0:	8b 81       	ldd	r24, Y+3	; 0x03
    16a2:	28 2f       	mov	r18, r24
    16a4:	30 e0       	ldi	r19, 0x00	; 0
    16a6:	81 e0       	ldi	r24, 0x01	; 1
    16a8:	90 e0       	ldi	r25, 0x00	; 0
    16aa:	02 2e       	mov	r0, r18
    16ac:	02 c0       	rjmp	.+4      	; 0x16b2 <DIO_TogglePin+0xfa>
    16ae:	88 0f       	add	r24, r24
    16b0:	99 1f       	adc	r25, r25
    16b2:	0a 94       	dec	r0
    16b4:	e2 f7       	brpl	.-8      	; 0x16ae <DIO_TogglePin+0xf6>
    16b6:	84 27       	eor	r24, r20
    16b8:	8c 93       	st	X, r24
            enu_ErrorState = DIO_E_PARAM_VALID;
    16ba:	19 82       	std	Y+1, r1	; 0x01
    16bc:	05 c0       	rjmp	.+10     	; 0x16c8 <DIO_TogglePin+0x110>
            break;
        default:
        	enu_ErrorState = E_NOT_OK;	/* Invalid port id */
    16be:	81 e0       	ldi	r24, 0x01	; 1
    16c0:	89 83       	std	Y+1, r24	; 0x01
    16c2:	02 c0       	rjmp	.+4      	; 0x16c8 <DIO_TogglePin+0x110>
            break;
        }
    }
    else
    {
    	enu_ErrorState = DIO_E_PARAM_INVALID_PIN_ID;	/* Invalid pin id */
    16c4:	82 e0       	ldi	r24, 0x02	; 2
    16c6:	89 83       	std	Y+1, r24	; 0x01
    }
    return enu_ErrorState;
    16c8:	89 81       	ldd	r24, Y+1	; 0x01
}
    16ca:	0f 90       	pop	r0
    16cc:	0f 90       	pop	r0
    16ce:	0f 90       	pop	r0
    16d0:	0f 90       	pop	r0
    16d2:	0f 90       	pop	r0
    16d4:	cf 91       	pop	r28
    16d6:	df 91       	pop	r29
    16d8:	08 95       	ret

000016da <LCD_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void LCD_init(void)
{
    16da:	df 93       	push	r29
    16dc:	cf 93       	push	r28
    16de:	cd b7       	in	r28, 0x3d	; 61
    16e0:	de b7       	in	r29, 0x3e	; 62
	LCD_CTRL_PORT_DIR |= (1<<E) | (1<<RS) | (1<<RW); /* Configure the control pins(E,RS,RW) as output pins */
    16e2:	aa e3       	ldi	r26, 0x3A	; 58
    16e4:	b0 e0       	ldi	r27, 0x00	; 0
    16e6:	ea e3       	ldi	r30, 0x3A	; 58
    16e8:	f0 e0       	ldi	r31, 0x00	; 0
    16ea:	80 81       	ld	r24, Z
    16ec:	8e 60       	ori	r24, 0x0E	; 14
    16ee:	8c 93       	st	X, r24
	
	#if (DATA_BITS_MODE == 4)
		#ifdef UPPER_PORT_PINS
			LCD_DATA_PORT_DIR |= 0xF0; /* Configure the highest 4 bits of the data port as output pins */
    16f0:	aa e3       	ldi	r26, 0x3A	; 58
    16f2:	b0 e0       	ldi	r27, 0x00	; 0
    16f4:	ea e3       	ldi	r30, 0x3A	; 58
    16f6:	f0 e0       	ldi	r31, 0x00	; 0
    16f8:	80 81       	ld	r24, Z
    16fa:	80 6f       	ori	r24, 0xF0	; 240
    16fc:	8c 93       	st	X, r24
		#else
			LCD_DATA_PORT_DIR |= 0x0F; /* Configure the lowest 4 bits of the data port as output pins */
		#endif		 
		LCD_sendCommand(FOUR_BITS_DATA_MODE); /* Initialize LCD in 4-bit mode */
    16fe:	82 e0       	ldi	r24, 0x02	; 2
    1700:	0e 94 8e 0b 	call	0x171c	; 0x171c <LCD_sendCommand>
		LCD_sendCommand(TWO_LINE_LCD_Four_BIT_MODE); /* Use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */
    1704:	88 e2       	ldi	r24, 0x28	; 40
    1706:	0e 94 8e 0b 	call	0x171c	; 0x171c <LCD_sendCommand>
	#elif (DATA_BITS_MODE == 8)
		LCD_DATA_PORT_DIR = 0xFF; /* Configure the data port as output port */ 
		LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE); /* Use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
	#endif
	
	LCD_sendCommand(CURSOR_OFF); /* Cursor off */
    170a:	8c e0       	ldi	r24, 0x0C	; 12
    170c:	0e 94 8e 0b 	call	0x171c	; 0x171c <LCD_sendCommand>
	LCD_sendCommand(CLEAR_COMMAND); /* Clear LCD at the beginning */
    1710:	81 e0       	ldi	r24, 0x01	; 1
    1712:	0e 94 8e 0b 	call	0x171c	; 0x171c <LCD_sendCommand>
}
    1716:	cf 91       	pop	r28
    1718:	df 91       	pop	r29
    171a:	08 95       	ret

0000171c <LCD_sendCommand>:

void LCD_sendCommand(uint8_t command)
{
    171c:	0f 93       	push	r16
    171e:	1f 93       	push	r17
    1720:	df 93       	push	r29
    1722:	cf 93       	push	r28
    1724:	cd b7       	in	r28, 0x3d	; 61
    1726:	de b7       	in	r29, 0x3e	; 62
    1728:	c3 56       	subi	r28, 0x63	; 99
    172a:	d0 40       	sbci	r29, 0x00	; 0
    172c:	0f b6       	in	r0, 0x3f	; 63
    172e:	f8 94       	cli
    1730:	de bf       	out	0x3e, r29	; 62
    1732:	0f be       	out	0x3f, r0	; 63
    1734:	cd bf       	out	0x3d, r28	; 61
    1736:	fe 01       	movw	r30, r28
    1738:	ed 59       	subi	r30, 0x9D	; 157
    173a:	ff 4f       	sbci	r31, 0xFF	; 255
    173c:	80 83       	st	Z, r24
	CLEAR_BIT(LCD_CTRL_PORT,RS); /* Instruction Mode RS = 0 */
    173e:	ab e3       	ldi	r26, 0x3B	; 59
    1740:	b0 e0       	ldi	r27, 0x00	; 0
    1742:	eb e3       	ldi	r30, 0x3B	; 59
    1744:	f0 e0       	ldi	r31, 0x00	; 0
    1746:	80 81       	ld	r24, Z
    1748:	8d 7f       	andi	r24, 0xFD	; 253
    174a:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* Write data to LCD so RW = 0 */
    174c:	ab e3       	ldi	r26, 0x3B	; 59
    174e:	b0 e0       	ldi	r27, 0x00	; 0
    1750:	eb e3       	ldi	r30, 0x3B	; 59
    1752:	f0 e0       	ldi	r31, 0x00	; 0
    1754:	80 81       	ld	r24, Z
    1756:	8b 7f       	andi	r24, 0xFB	; 251
    1758:	8c 93       	st	X, r24
    175a:	fe 01       	movw	r30, r28
    175c:	e1 5a       	subi	r30, 0xA1	; 161
    175e:	ff 4f       	sbci	r31, 0xFF	; 255
    1760:	80 e0       	ldi	r24, 0x00	; 0
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	a0 e8       	ldi	r26, 0x80	; 128
    1766:	bf e3       	ldi	r27, 0x3F	; 63
    1768:	80 83       	st	Z, r24
    176a:	91 83       	std	Z+1, r25	; 0x01
    176c:	a2 83       	std	Z+2, r26	; 0x02
    176e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1770:	8e 01       	movw	r16, r28
    1772:	05 5a       	subi	r16, 0xA5	; 165
    1774:	1f 4f       	sbci	r17, 0xFF	; 255
    1776:	fe 01       	movw	r30, r28
    1778:	e1 5a       	subi	r30, 0xA1	; 161
    177a:	ff 4f       	sbci	r31, 0xFF	; 255
    177c:	60 81       	ld	r22, Z
    177e:	71 81       	ldd	r23, Z+1	; 0x01
    1780:	82 81       	ldd	r24, Z+2	; 0x02
    1782:	93 81       	ldd	r25, Z+3	; 0x03
    1784:	20 e0       	ldi	r18, 0x00	; 0
    1786:	30 e0       	ldi	r19, 0x00	; 0
    1788:	4a ef       	ldi	r20, 0xFA	; 250
    178a:	54 e4       	ldi	r21, 0x44	; 68
    178c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1790:	dc 01       	movw	r26, r24
    1792:	cb 01       	movw	r24, r22
    1794:	f8 01       	movw	r30, r16
    1796:	80 83       	st	Z, r24
    1798:	91 83       	std	Z+1, r25	; 0x01
    179a:	a2 83       	std	Z+2, r26	; 0x02
    179c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    179e:	fe 01       	movw	r30, r28
    17a0:	e5 5a       	subi	r30, 0xA5	; 165
    17a2:	ff 4f       	sbci	r31, 0xFF	; 255
    17a4:	60 81       	ld	r22, Z
    17a6:	71 81       	ldd	r23, Z+1	; 0x01
    17a8:	82 81       	ldd	r24, Z+2	; 0x02
    17aa:	93 81       	ldd	r25, Z+3	; 0x03
    17ac:	20 e0       	ldi	r18, 0x00	; 0
    17ae:	30 e0       	ldi	r19, 0x00	; 0
    17b0:	40 e8       	ldi	r20, 0x80	; 128
    17b2:	5f e3       	ldi	r21, 0x3F	; 63
    17b4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17b8:	88 23       	and	r24, r24
    17ba:	44 f4       	brge	.+16     	; 0x17cc <LCD_sendCommand+0xb0>
		__ticks = 1;
    17bc:	fe 01       	movw	r30, r28
    17be:	e7 5a       	subi	r30, 0xA7	; 167
    17c0:	ff 4f       	sbci	r31, 0xFF	; 255
    17c2:	81 e0       	ldi	r24, 0x01	; 1
    17c4:	90 e0       	ldi	r25, 0x00	; 0
    17c6:	91 83       	std	Z+1, r25	; 0x01
    17c8:	80 83       	st	Z, r24
    17ca:	64 c0       	rjmp	.+200    	; 0x1894 <LCD_sendCommand+0x178>
	else if (__tmp > 65535)
    17cc:	fe 01       	movw	r30, r28
    17ce:	e5 5a       	subi	r30, 0xA5	; 165
    17d0:	ff 4f       	sbci	r31, 0xFF	; 255
    17d2:	60 81       	ld	r22, Z
    17d4:	71 81       	ldd	r23, Z+1	; 0x01
    17d6:	82 81       	ldd	r24, Z+2	; 0x02
    17d8:	93 81       	ldd	r25, Z+3	; 0x03
    17da:	20 e0       	ldi	r18, 0x00	; 0
    17dc:	3f ef       	ldi	r19, 0xFF	; 255
    17de:	4f e7       	ldi	r20, 0x7F	; 127
    17e0:	57 e4       	ldi	r21, 0x47	; 71
    17e2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17e6:	18 16       	cp	r1, r24
    17e8:	0c f0       	brlt	.+2      	; 0x17ec <LCD_sendCommand+0xd0>
    17ea:	43 c0       	rjmp	.+134    	; 0x1872 <LCD_sendCommand+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17ec:	fe 01       	movw	r30, r28
    17ee:	e1 5a       	subi	r30, 0xA1	; 161
    17f0:	ff 4f       	sbci	r31, 0xFF	; 255
    17f2:	60 81       	ld	r22, Z
    17f4:	71 81       	ldd	r23, Z+1	; 0x01
    17f6:	82 81       	ldd	r24, Z+2	; 0x02
    17f8:	93 81       	ldd	r25, Z+3	; 0x03
    17fa:	20 e0       	ldi	r18, 0x00	; 0
    17fc:	30 e0       	ldi	r19, 0x00	; 0
    17fe:	40 e2       	ldi	r20, 0x20	; 32
    1800:	51 e4       	ldi	r21, 0x41	; 65
    1802:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1806:	dc 01       	movw	r26, r24
    1808:	cb 01       	movw	r24, r22
    180a:	8e 01       	movw	r16, r28
    180c:	07 5a       	subi	r16, 0xA7	; 167
    180e:	1f 4f       	sbci	r17, 0xFF	; 255
    1810:	bc 01       	movw	r22, r24
    1812:	cd 01       	movw	r24, r26
    1814:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1818:	dc 01       	movw	r26, r24
    181a:	cb 01       	movw	r24, r22
    181c:	f8 01       	movw	r30, r16
    181e:	91 83       	std	Z+1, r25	; 0x01
    1820:	80 83       	st	Z, r24
    1822:	1f c0       	rjmp	.+62     	; 0x1862 <LCD_sendCommand+0x146>
    1824:	fe 01       	movw	r30, r28
    1826:	e9 5a       	subi	r30, 0xA9	; 169
    1828:	ff 4f       	sbci	r31, 0xFF	; 255
    182a:	88 ec       	ldi	r24, 0xC8	; 200
    182c:	90 e0       	ldi	r25, 0x00	; 0
    182e:	91 83       	std	Z+1, r25	; 0x01
    1830:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1832:	fe 01       	movw	r30, r28
    1834:	e9 5a       	subi	r30, 0xA9	; 169
    1836:	ff 4f       	sbci	r31, 0xFF	; 255
    1838:	80 81       	ld	r24, Z
    183a:	91 81       	ldd	r25, Z+1	; 0x01
    183c:	01 97       	sbiw	r24, 0x01	; 1
    183e:	f1 f7       	brne	.-4      	; 0x183c <LCD_sendCommand+0x120>
    1840:	fe 01       	movw	r30, r28
    1842:	e9 5a       	subi	r30, 0xA9	; 169
    1844:	ff 4f       	sbci	r31, 0xFF	; 255
    1846:	91 83       	std	Z+1, r25	; 0x01
    1848:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    184a:	de 01       	movw	r26, r28
    184c:	a7 5a       	subi	r26, 0xA7	; 167
    184e:	bf 4f       	sbci	r27, 0xFF	; 255
    1850:	fe 01       	movw	r30, r28
    1852:	e7 5a       	subi	r30, 0xA7	; 167
    1854:	ff 4f       	sbci	r31, 0xFF	; 255
    1856:	80 81       	ld	r24, Z
    1858:	91 81       	ldd	r25, Z+1	; 0x01
    185a:	01 97       	sbiw	r24, 0x01	; 1
    185c:	11 96       	adiw	r26, 0x01	; 1
    185e:	9c 93       	st	X, r25
    1860:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1862:	fe 01       	movw	r30, r28
    1864:	e7 5a       	subi	r30, 0xA7	; 167
    1866:	ff 4f       	sbci	r31, 0xFF	; 255
    1868:	80 81       	ld	r24, Z
    186a:	91 81       	ldd	r25, Z+1	; 0x01
    186c:	00 97       	sbiw	r24, 0x00	; 0
    186e:	d1 f6       	brne	.-76     	; 0x1824 <LCD_sendCommand+0x108>
    1870:	27 c0       	rjmp	.+78     	; 0x18c0 <LCD_sendCommand+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1872:	8e 01       	movw	r16, r28
    1874:	07 5a       	subi	r16, 0xA7	; 167
    1876:	1f 4f       	sbci	r17, 0xFF	; 255
    1878:	fe 01       	movw	r30, r28
    187a:	e5 5a       	subi	r30, 0xA5	; 165
    187c:	ff 4f       	sbci	r31, 0xFF	; 255
    187e:	60 81       	ld	r22, Z
    1880:	71 81       	ldd	r23, Z+1	; 0x01
    1882:	82 81       	ldd	r24, Z+2	; 0x02
    1884:	93 81       	ldd	r25, Z+3	; 0x03
    1886:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    188a:	dc 01       	movw	r26, r24
    188c:	cb 01       	movw	r24, r22
    188e:	f8 01       	movw	r30, r16
    1890:	91 83       	std	Z+1, r25	; 0x01
    1892:	80 83       	st	Z, r24
    1894:	de 01       	movw	r26, r28
    1896:	ab 5a       	subi	r26, 0xAB	; 171
    1898:	bf 4f       	sbci	r27, 0xFF	; 255
    189a:	fe 01       	movw	r30, r28
    189c:	e7 5a       	subi	r30, 0xA7	; 167
    189e:	ff 4f       	sbci	r31, 0xFF	; 255
    18a0:	80 81       	ld	r24, Z
    18a2:	91 81       	ldd	r25, Z+1	; 0x01
    18a4:	8d 93       	st	X+, r24
    18a6:	9c 93       	st	X, r25
    18a8:	fe 01       	movw	r30, r28
    18aa:	eb 5a       	subi	r30, 0xAB	; 171
    18ac:	ff 4f       	sbci	r31, 0xFF	; 255
    18ae:	80 81       	ld	r24, Z
    18b0:	91 81       	ldd	r25, Z+1	; 0x01
    18b2:	01 97       	sbiw	r24, 0x01	; 1
    18b4:	f1 f7       	brne	.-4      	; 0x18b2 <LCD_sendCommand+0x196>
    18b6:	fe 01       	movw	r30, r28
    18b8:	eb 5a       	subi	r30, 0xAB	; 171
    18ba:	ff 4f       	sbci	r31, 0xFF	; 255
    18bc:	91 83       	std	Z+1, r25	; 0x01
    18be:	80 83       	st	Z, r24
	_delay_ms(1); /* Delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E = 1 */
    18c0:	ab e3       	ldi	r26, 0x3B	; 59
    18c2:	b0 e0       	ldi	r27, 0x00	; 0
    18c4:	eb e3       	ldi	r30, 0x3B	; 59
    18c6:	f0 e0       	ldi	r31, 0x00	; 0
    18c8:	80 81       	ld	r24, Z
    18ca:	88 60       	ori	r24, 0x08	; 8
    18cc:	8c 93       	st	X, r24
    18ce:	fe 01       	movw	r30, r28
    18d0:	ef 5a       	subi	r30, 0xAF	; 175
    18d2:	ff 4f       	sbci	r31, 0xFF	; 255
    18d4:	80 e0       	ldi	r24, 0x00	; 0
    18d6:	90 e0       	ldi	r25, 0x00	; 0
    18d8:	a0 e8       	ldi	r26, 0x80	; 128
    18da:	bf e3       	ldi	r27, 0x3F	; 63
    18dc:	80 83       	st	Z, r24
    18de:	91 83       	std	Z+1, r25	; 0x01
    18e0:	a2 83       	std	Z+2, r26	; 0x02
    18e2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18e4:	8e 01       	movw	r16, r28
    18e6:	03 5b       	subi	r16, 0xB3	; 179
    18e8:	1f 4f       	sbci	r17, 0xFF	; 255
    18ea:	fe 01       	movw	r30, r28
    18ec:	ef 5a       	subi	r30, 0xAF	; 175
    18ee:	ff 4f       	sbci	r31, 0xFF	; 255
    18f0:	60 81       	ld	r22, Z
    18f2:	71 81       	ldd	r23, Z+1	; 0x01
    18f4:	82 81       	ldd	r24, Z+2	; 0x02
    18f6:	93 81       	ldd	r25, Z+3	; 0x03
    18f8:	20 e0       	ldi	r18, 0x00	; 0
    18fa:	30 e0       	ldi	r19, 0x00	; 0
    18fc:	4a ef       	ldi	r20, 0xFA	; 250
    18fe:	54 e4       	ldi	r21, 0x44	; 68
    1900:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1904:	dc 01       	movw	r26, r24
    1906:	cb 01       	movw	r24, r22
    1908:	f8 01       	movw	r30, r16
    190a:	80 83       	st	Z, r24
    190c:	91 83       	std	Z+1, r25	; 0x01
    190e:	a2 83       	std	Z+2, r26	; 0x02
    1910:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1912:	fe 01       	movw	r30, r28
    1914:	e3 5b       	subi	r30, 0xB3	; 179
    1916:	ff 4f       	sbci	r31, 0xFF	; 255
    1918:	60 81       	ld	r22, Z
    191a:	71 81       	ldd	r23, Z+1	; 0x01
    191c:	82 81       	ldd	r24, Z+2	; 0x02
    191e:	93 81       	ldd	r25, Z+3	; 0x03
    1920:	20 e0       	ldi	r18, 0x00	; 0
    1922:	30 e0       	ldi	r19, 0x00	; 0
    1924:	40 e8       	ldi	r20, 0x80	; 128
    1926:	5f e3       	ldi	r21, 0x3F	; 63
    1928:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    192c:	88 23       	and	r24, r24
    192e:	44 f4       	brge	.+16     	; 0x1940 <LCD_sendCommand+0x224>
		__ticks = 1;
    1930:	fe 01       	movw	r30, r28
    1932:	e5 5b       	subi	r30, 0xB5	; 181
    1934:	ff 4f       	sbci	r31, 0xFF	; 255
    1936:	81 e0       	ldi	r24, 0x01	; 1
    1938:	90 e0       	ldi	r25, 0x00	; 0
    193a:	91 83       	std	Z+1, r25	; 0x01
    193c:	80 83       	st	Z, r24
    193e:	64 c0       	rjmp	.+200    	; 0x1a08 <LCD_sendCommand+0x2ec>
	else if (__tmp > 65535)
    1940:	fe 01       	movw	r30, r28
    1942:	e3 5b       	subi	r30, 0xB3	; 179
    1944:	ff 4f       	sbci	r31, 0xFF	; 255
    1946:	60 81       	ld	r22, Z
    1948:	71 81       	ldd	r23, Z+1	; 0x01
    194a:	82 81       	ldd	r24, Z+2	; 0x02
    194c:	93 81       	ldd	r25, Z+3	; 0x03
    194e:	20 e0       	ldi	r18, 0x00	; 0
    1950:	3f ef       	ldi	r19, 0xFF	; 255
    1952:	4f e7       	ldi	r20, 0x7F	; 127
    1954:	57 e4       	ldi	r21, 0x47	; 71
    1956:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    195a:	18 16       	cp	r1, r24
    195c:	0c f0       	brlt	.+2      	; 0x1960 <LCD_sendCommand+0x244>
    195e:	43 c0       	rjmp	.+134    	; 0x19e6 <LCD_sendCommand+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1960:	fe 01       	movw	r30, r28
    1962:	ef 5a       	subi	r30, 0xAF	; 175
    1964:	ff 4f       	sbci	r31, 0xFF	; 255
    1966:	60 81       	ld	r22, Z
    1968:	71 81       	ldd	r23, Z+1	; 0x01
    196a:	82 81       	ldd	r24, Z+2	; 0x02
    196c:	93 81       	ldd	r25, Z+3	; 0x03
    196e:	20 e0       	ldi	r18, 0x00	; 0
    1970:	30 e0       	ldi	r19, 0x00	; 0
    1972:	40 e2       	ldi	r20, 0x20	; 32
    1974:	51 e4       	ldi	r21, 0x41	; 65
    1976:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    197a:	dc 01       	movw	r26, r24
    197c:	cb 01       	movw	r24, r22
    197e:	8e 01       	movw	r16, r28
    1980:	05 5b       	subi	r16, 0xB5	; 181
    1982:	1f 4f       	sbci	r17, 0xFF	; 255
    1984:	bc 01       	movw	r22, r24
    1986:	cd 01       	movw	r24, r26
    1988:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    198c:	dc 01       	movw	r26, r24
    198e:	cb 01       	movw	r24, r22
    1990:	f8 01       	movw	r30, r16
    1992:	91 83       	std	Z+1, r25	; 0x01
    1994:	80 83       	st	Z, r24
    1996:	1f c0       	rjmp	.+62     	; 0x19d6 <LCD_sendCommand+0x2ba>
    1998:	fe 01       	movw	r30, r28
    199a:	e7 5b       	subi	r30, 0xB7	; 183
    199c:	ff 4f       	sbci	r31, 0xFF	; 255
    199e:	88 ec       	ldi	r24, 0xC8	; 200
    19a0:	90 e0       	ldi	r25, 0x00	; 0
    19a2:	91 83       	std	Z+1, r25	; 0x01
    19a4:	80 83       	st	Z, r24
    19a6:	fe 01       	movw	r30, r28
    19a8:	e7 5b       	subi	r30, 0xB7	; 183
    19aa:	ff 4f       	sbci	r31, 0xFF	; 255
    19ac:	80 81       	ld	r24, Z
    19ae:	91 81       	ldd	r25, Z+1	; 0x01
    19b0:	01 97       	sbiw	r24, 0x01	; 1
    19b2:	f1 f7       	brne	.-4      	; 0x19b0 <LCD_sendCommand+0x294>
    19b4:	fe 01       	movw	r30, r28
    19b6:	e7 5b       	subi	r30, 0xB7	; 183
    19b8:	ff 4f       	sbci	r31, 0xFF	; 255
    19ba:	91 83       	std	Z+1, r25	; 0x01
    19bc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19be:	de 01       	movw	r26, r28
    19c0:	a5 5b       	subi	r26, 0xB5	; 181
    19c2:	bf 4f       	sbci	r27, 0xFF	; 255
    19c4:	fe 01       	movw	r30, r28
    19c6:	e5 5b       	subi	r30, 0xB5	; 181
    19c8:	ff 4f       	sbci	r31, 0xFF	; 255
    19ca:	80 81       	ld	r24, Z
    19cc:	91 81       	ldd	r25, Z+1	; 0x01
    19ce:	01 97       	sbiw	r24, 0x01	; 1
    19d0:	11 96       	adiw	r26, 0x01	; 1
    19d2:	9c 93       	st	X, r25
    19d4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19d6:	fe 01       	movw	r30, r28
    19d8:	e5 5b       	subi	r30, 0xB5	; 181
    19da:	ff 4f       	sbci	r31, 0xFF	; 255
    19dc:	80 81       	ld	r24, Z
    19de:	91 81       	ldd	r25, Z+1	; 0x01
    19e0:	00 97       	sbiw	r24, 0x00	; 0
    19e2:	d1 f6       	brne	.-76     	; 0x1998 <LCD_sendCommand+0x27c>
    19e4:	27 c0       	rjmp	.+78     	; 0x1a34 <LCD_sendCommand+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19e6:	8e 01       	movw	r16, r28
    19e8:	05 5b       	subi	r16, 0xB5	; 181
    19ea:	1f 4f       	sbci	r17, 0xFF	; 255
    19ec:	fe 01       	movw	r30, r28
    19ee:	e3 5b       	subi	r30, 0xB3	; 179
    19f0:	ff 4f       	sbci	r31, 0xFF	; 255
    19f2:	60 81       	ld	r22, Z
    19f4:	71 81       	ldd	r23, Z+1	; 0x01
    19f6:	82 81       	ldd	r24, Z+2	; 0x02
    19f8:	93 81       	ldd	r25, Z+3	; 0x03
    19fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19fe:	dc 01       	movw	r26, r24
    1a00:	cb 01       	movw	r24, r22
    1a02:	f8 01       	movw	r30, r16
    1a04:	91 83       	std	Z+1, r25	; 0x01
    1a06:	80 83       	st	Z, r24
    1a08:	de 01       	movw	r26, r28
    1a0a:	a9 5b       	subi	r26, 0xB9	; 185
    1a0c:	bf 4f       	sbci	r27, 0xFF	; 255
    1a0e:	fe 01       	movw	r30, r28
    1a10:	e5 5b       	subi	r30, 0xB5	; 181
    1a12:	ff 4f       	sbci	r31, 0xFF	; 255
    1a14:	80 81       	ld	r24, Z
    1a16:	91 81       	ldd	r25, Z+1	; 0x01
    1a18:	8d 93       	st	X+, r24
    1a1a:	9c 93       	st	X, r25
    1a1c:	fe 01       	movw	r30, r28
    1a1e:	e9 5b       	subi	r30, 0xB9	; 185
    1a20:	ff 4f       	sbci	r31, 0xFF	; 255
    1a22:	80 81       	ld	r24, Z
    1a24:	91 81       	ldd	r25, Z+1	; 0x01
    1a26:	01 97       	sbiw	r24, 0x01	; 1
    1a28:	f1 f7       	brne	.-4      	; 0x1a26 <LCD_sendCommand+0x30a>
    1a2a:	fe 01       	movw	r30, r28
    1a2c:	e9 5b       	subi	r30, 0xB9	; 185
    1a2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a30:	91 83       	std	Z+1, r25	; 0x01
    1a32:	80 83       	st	Z, r24
	_delay_ms(1); /* Delay for processing Tpw - Tdws = 190ns */
#if (DATA_BITS_MODE == 4)
	/* Out the highest 4 bits of the required command to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (command & 0xF0);
    1a34:	ab e3       	ldi	r26, 0x3B	; 59
    1a36:	b0 e0       	ldi	r27, 0x00	; 0
    1a38:	eb e3       	ldi	r30, 0x3B	; 59
    1a3a:	f0 e0       	ldi	r31, 0x00	; 0
    1a3c:	80 81       	ld	r24, Z
    1a3e:	98 2f       	mov	r25, r24
    1a40:	9f 70       	andi	r25, 0x0F	; 15
    1a42:	fe 01       	movw	r30, r28
    1a44:	ed 59       	subi	r30, 0x9D	; 157
    1a46:	ff 4f       	sbci	r31, 0xFF	; 255
    1a48:	80 81       	ld	r24, Z
    1a4a:	80 7f       	andi	r24, 0xF0	; 240
    1a4c:	89 2b       	or	r24, r25
    1a4e:	8c 93       	st	X, r24
    1a50:	fe 01       	movw	r30, r28
    1a52:	ed 5b       	subi	r30, 0xBD	; 189
    1a54:	ff 4f       	sbci	r31, 0xFF	; 255
    1a56:	80 e0       	ldi	r24, 0x00	; 0
    1a58:	90 e0       	ldi	r25, 0x00	; 0
    1a5a:	a0 e8       	ldi	r26, 0x80	; 128
    1a5c:	bf e3       	ldi	r27, 0x3F	; 63
    1a5e:	80 83       	st	Z, r24
    1a60:	91 83       	std	Z+1, r25	; 0x01
    1a62:	a2 83       	std	Z+2, r26	; 0x02
    1a64:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a66:	8e 01       	movw	r16, r28
    1a68:	01 5c       	subi	r16, 0xC1	; 193
    1a6a:	1f 4f       	sbci	r17, 0xFF	; 255
    1a6c:	fe 01       	movw	r30, r28
    1a6e:	ed 5b       	subi	r30, 0xBD	; 189
    1a70:	ff 4f       	sbci	r31, 0xFF	; 255
    1a72:	60 81       	ld	r22, Z
    1a74:	71 81       	ldd	r23, Z+1	; 0x01
    1a76:	82 81       	ldd	r24, Z+2	; 0x02
    1a78:	93 81       	ldd	r25, Z+3	; 0x03
    1a7a:	20 e0       	ldi	r18, 0x00	; 0
    1a7c:	30 e0       	ldi	r19, 0x00	; 0
    1a7e:	4a ef       	ldi	r20, 0xFA	; 250
    1a80:	54 e4       	ldi	r21, 0x44	; 68
    1a82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a86:	dc 01       	movw	r26, r24
    1a88:	cb 01       	movw	r24, r22
    1a8a:	f8 01       	movw	r30, r16
    1a8c:	80 83       	st	Z, r24
    1a8e:	91 83       	std	Z+1, r25	; 0x01
    1a90:	a2 83       	std	Z+2, r26	; 0x02
    1a92:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a94:	fe 01       	movw	r30, r28
    1a96:	ff 96       	adiw	r30, 0x3f	; 63
    1a98:	60 81       	ld	r22, Z
    1a9a:	71 81       	ldd	r23, Z+1	; 0x01
    1a9c:	82 81       	ldd	r24, Z+2	; 0x02
    1a9e:	93 81       	ldd	r25, Z+3	; 0x03
    1aa0:	20 e0       	ldi	r18, 0x00	; 0
    1aa2:	30 e0       	ldi	r19, 0x00	; 0
    1aa4:	40 e8       	ldi	r20, 0x80	; 128
    1aa6:	5f e3       	ldi	r21, 0x3F	; 63
    1aa8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1aac:	88 23       	and	r24, r24
    1aae:	2c f4       	brge	.+10     	; 0x1aba <LCD_sendCommand+0x39e>
		__ticks = 1;
    1ab0:	81 e0       	ldi	r24, 0x01	; 1
    1ab2:	90 e0       	ldi	r25, 0x00	; 0
    1ab4:	9e af       	std	Y+62, r25	; 0x3e
    1ab6:	8d af       	std	Y+61, r24	; 0x3d
    1ab8:	46 c0       	rjmp	.+140    	; 0x1b46 <LCD_sendCommand+0x42a>
	else if (__tmp > 65535)
    1aba:	fe 01       	movw	r30, r28
    1abc:	ff 96       	adiw	r30, 0x3f	; 63
    1abe:	60 81       	ld	r22, Z
    1ac0:	71 81       	ldd	r23, Z+1	; 0x01
    1ac2:	82 81       	ldd	r24, Z+2	; 0x02
    1ac4:	93 81       	ldd	r25, Z+3	; 0x03
    1ac6:	20 e0       	ldi	r18, 0x00	; 0
    1ac8:	3f ef       	ldi	r19, 0xFF	; 255
    1aca:	4f e7       	ldi	r20, 0x7F	; 127
    1acc:	57 e4       	ldi	r21, 0x47	; 71
    1ace:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ad2:	18 16       	cp	r1, r24
    1ad4:	64 f5       	brge	.+88     	; 0x1b2e <LCD_sendCommand+0x412>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ad6:	fe 01       	movw	r30, r28
    1ad8:	ed 5b       	subi	r30, 0xBD	; 189
    1ada:	ff 4f       	sbci	r31, 0xFF	; 255
    1adc:	60 81       	ld	r22, Z
    1ade:	71 81       	ldd	r23, Z+1	; 0x01
    1ae0:	82 81       	ldd	r24, Z+2	; 0x02
    1ae2:	93 81       	ldd	r25, Z+3	; 0x03
    1ae4:	20 e0       	ldi	r18, 0x00	; 0
    1ae6:	30 e0       	ldi	r19, 0x00	; 0
    1ae8:	40 e2       	ldi	r20, 0x20	; 32
    1aea:	51 e4       	ldi	r21, 0x41	; 65
    1aec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1af0:	dc 01       	movw	r26, r24
    1af2:	cb 01       	movw	r24, r22
    1af4:	bc 01       	movw	r22, r24
    1af6:	cd 01       	movw	r24, r26
    1af8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1afc:	dc 01       	movw	r26, r24
    1afe:	cb 01       	movw	r24, r22
    1b00:	9e af       	std	Y+62, r25	; 0x3e
    1b02:	8d af       	std	Y+61, r24	; 0x3d
    1b04:	0f c0       	rjmp	.+30     	; 0x1b24 <LCD_sendCommand+0x408>
    1b06:	88 ec       	ldi	r24, 0xC8	; 200
    1b08:	90 e0       	ldi	r25, 0x00	; 0
    1b0a:	9c af       	std	Y+60, r25	; 0x3c
    1b0c:	8b af       	std	Y+59, r24	; 0x3b
    1b0e:	8b ad       	ldd	r24, Y+59	; 0x3b
    1b10:	9c ad       	ldd	r25, Y+60	; 0x3c
    1b12:	01 97       	sbiw	r24, 0x01	; 1
    1b14:	f1 f7       	brne	.-4      	; 0x1b12 <LCD_sendCommand+0x3f6>
    1b16:	9c af       	std	Y+60, r25	; 0x3c
    1b18:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b1a:	8d ad       	ldd	r24, Y+61	; 0x3d
    1b1c:	9e ad       	ldd	r25, Y+62	; 0x3e
    1b1e:	01 97       	sbiw	r24, 0x01	; 1
    1b20:	9e af       	std	Y+62, r25	; 0x3e
    1b22:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b24:	8d ad       	ldd	r24, Y+61	; 0x3d
    1b26:	9e ad       	ldd	r25, Y+62	; 0x3e
    1b28:	00 97       	sbiw	r24, 0x00	; 0
    1b2a:	69 f7       	brne	.-38     	; 0x1b06 <LCD_sendCommand+0x3ea>
    1b2c:	16 c0       	rjmp	.+44     	; 0x1b5a <LCD_sendCommand+0x43e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b2e:	fe 01       	movw	r30, r28
    1b30:	ff 96       	adiw	r30, 0x3f	; 63
    1b32:	60 81       	ld	r22, Z
    1b34:	71 81       	ldd	r23, Z+1	; 0x01
    1b36:	82 81       	ldd	r24, Z+2	; 0x02
    1b38:	93 81       	ldd	r25, Z+3	; 0x03
    1b3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b3e:	dc 01       	movw	r26, r24
    1b40:	cb 01       	movw	r24, r22
    1b42:	9e af       	std	Y+62, r25	; 0x3e
    1b44:	8d af       	std	Y+61, r24	; 0x3d
    1b46:	8d ad       	ldd	r24, Y+61	; 0x3d
    1b48:	9e ad       	ldd	r25, Y+62	; 0x3e
    1b4a:	9a af       	std	Y+58, r25	; 0x3a
    1b4c:	89 af       	std	Y+57, r24	; 0x39
    1b4e:	89 ad       	ldd	r24, Y+57	; 0x39
    1b50:	9a ad       	ldd	r25, Y+58	; 0x3a
    1b52:	01 97       	sbiw	r24, 0x01	; 1
    1b54:	f1 f7       	brne	.-4      	; 0x1b52 <LCD_sendCommand+0x436>
    1b56:	9a af       	std	Y+58, r25	; 0x3a
    1b58:	89 af       	std	Y+57, r24	; 0x39
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | ((command & 0xF0) >> 4);
#endif

	_delay_ms(1); /* Delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E = 0 */
    1b5a:	ab e3       	ldi	r26, 0x3B	; 59
    1b5c:	b0 e0       	ldi	r27, 0x00	; 0
    1b5e:	eb e3       	ldi	r30, 0x3B	; 59
    1b60:	f0 e0       	ldi	r31, 0x00	; 0
    1b62:	80 81       	ld	r24, Z
    1b64:	87 7f       	andi	r24, 0xF7	; 247
    1b66:	8c 93       	st	X, r24
    1b68:	80 e0       	ldi	r24, 0x00	; 0
    1b6a:	90 e0       	ldi	r25, 0x00	; 0
    1b6c:	a0 e8       	ldi	r26, 0x80	; 128
    1b6e:	bf e3       	ldi	r27, 0x3F	; 63
    1b70:	8d ab       	std	Y+53, r24	; 0x35
    1b72:	9e ab       	std	Y+54, r25	; 0x36
    1b74:	af ab       	std	Y+55, r26	; 0x37
    1b76:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b78:	6d a9       	ldd	r22, Y+53	; 0x35
    1b7a:	7e a9       	ldd	r23, Y+54	; 0x36
    1b7c:	8f a9       	ldd	r24, Y+55	; 0x37
    1b7e:	98 ad       	ldd	r25, Y+56	; 0x38
    1b80:	20 e0       	ldi	r18, 0x00	; 0
    1b82:	30 e0       	ldi	r19, 0x00	; 0
    1b84:	4a ef       	ldi	r20, 0xFA	; 250
    1b86:	54 e4       	ldi	r21, 0x44	; 68
    1b88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b8c:	dc 01       	movw	r26, r24
    1b8e:	cb 01       	movw	r24, r22
    1b90:	89 ab       	std	Y+49, r24	; 0x31
    1b92:	9a ab       	std	Y+50, r25	; 0x32
    1b94:	ab ab       	std	Y+51, r26	; 0x33
    1b96:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1b98:	69 a9       	ldd	r22, Y+49	; 0x31
    1b9a:	7a a9       	ldd	r23, Y+50	; 0x32
    1b9c:	8b a9       	ldd	r24, Y+51	; 0x33
    1b9e:	9c a9       	ldd	r25, Y+52	; 0x34
    1ba0:	20 e0       	ldi	r18, 0x00	; 0
    1ba2:	30 e0       	ldi	r19, 0x00	; 0
    1ba4:	40 e8       	ldi	r20, 0x80	; 128
    1ba6:	5f e3       	ldi	r21, 0x3F	; 63
    1ba8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bac:	88 23       	and	r24, r24
    1bae:	2c f4       	brge	.+10     	; 0x1bba <LCD_sendCommand+0x49e>
		__ticks = 1;
    1bb0:	81 e0       	ldi	r24, 0x01	; 1
    1bb2:	90 e0       	ldi	r25, 0x00	; 0
    1bb4:	98 ab       	std	Y+48, r25	; 0x30
    1bb6:	8f a7       	std	Y+47, r24	; 0x2f
    1bb8:	3f c0       	rjmp	.+126    	; 0x1c38 <LCD_sendCommand+0x51c>
	else if (__tmp > 65535)
    1bba:	69 a9       	ldd	r22, Y+49	; 0x31
    1bbc:	7a a9       	ldd	r23, Y+50	; 0x32
    1bbe:	8b a9       	ldd	r24, Y+51	; 0x33
    1bc0:	9c a9       	ldd	r25, Y+52	; 0x34
    1bc2:	20 e0       	ldi	r18, 0x00	; 0
    1bc4:	3f ef       	ldi	r19, 0xFF	; 255
    1bc6:	4f e7       	ldi	r20, 0x7F	; 127
    1bc8:	57 e4       	ldi	r21, 0x47	; 71
    1bca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bce:	18 16       	cp	r1, r24
    1bd0:	4c f5       	brge	.+82     	; 0x1c24 <LCD_sendCommand+0x508>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bd2:	6d a9       	ldd	r22, Y+53	; 0x35
    1bd4:	7e a9       	ldd	r23, Y+54	; 0x36
    1bd6:	8f a9       	ldd	r24, Y+55	; 0x37
    1bd8:	98 ad       	ldd	r25, Y+56	; 0x38
    1bda:	20 e0       	ldi	r18, 0x00	; 0
    1bdc:	30 e0       	ldi	r19, 0x00	; 0
    1bde:	40 e2       	ldi	r20, 0x20	; 32
    1be0:	51 e4       	ldi	r21, 0x41	; 65
    1be2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1be6:	dc 01       	movw	r26, r24
    1be8:	cb 01       	movw	r24, r22
    1bea:	bc 01       	movw	r22, r24
    1bec:	cd 01       	movw	r24, r26
    1bee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bf2:	dc 01       	movw	r26, r24
    1bf4:	cb 01       	movw	r24, r22
    1bf6:	98 ab       	std	Y+48, r25	; 0x30
    1bf8:	8f a7       	std	Y+47, r24	; 0x2f
    1bfa:	0f c0       	rjmp	.+30     	; 0x1c1a <LCD_sendCommand+0x4fe>
    1bfc:	88 ec       	ldi	r24, 0xC8	; 200
    1bfe:	90 e0       	ldi	r25, 0x00	; 0
    1c00:	9e a7       	std	Y+46, r25	; 0x2e
    1c02:	8d a7       	std	Y+45, r24	; 0x2d
    1c04:	8d a5       	ldd	r24, Y+45	; 0x2d
    1c06:	9e a5       	ldd	r25, Y+46	; 0x2e
    1c08:	01 97       	sbiw	r24, 0x01	; 1
    1c0a:	f1 f7       	brne	.-4      	; 0x1c08 <LCD_sendCommand+0x4ec>
    1c0c:	9e a7       	std	Y+46, r25	; 0x2e
    1c0e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c10:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c12:	98 a9       	ldd	r25, Y+48	; 0x30
    1c14:	01 97       	sbiw	r24, 0x01	; 1
    1c16:	98 ab       	std	Y+48, r25	; 0x30
    1c18:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c1a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c1c:	98 a9       	ldd	r25, Y+48	; 0x30
    1c1e:	00 97       	sbiw	r24, 0x00	; 0
    1c20:	69 f7       	brne	.-38     	; 0x1bfc <LCD_sendCommand+0x4e0>
    1c22:	14 c0       	rjmp	.+40     	; 0x1c4c <LCD_sendCommand+0x530>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c24:	69 a9       	ldd	r22, Y+49	; 0x31
    1c26:	7a a9       	ldd	r23, Y+50	; 0x32
    1c28:	8b a9       	ldd	r24, Y+51	; 0x33
    1c2a:	9c a9       	ldd	r25, Y+52	; 0x34
    1c2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c30:	dc 01       	movw	r26, r24
    1c32:	cb 01       	movw	r24, r22
    1c34:	98 ab       	std	Y+48, r25	; 0x30
    1c36:	8f a7       	std	Y+47, r24	; 0x2f
    1c38:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c3a:	98 a9       	ldd	r25, Y+48	; 0x30
    1c3c:	9c a7       	std	Y+44, r25	; 0x2c
    1c3e:	8b a7       	std	Y+43, r24	; 0x2b
    1c40:	8b a5       	ldd	r24, Y+43	; 0x2b
    1c42:	9c a5       	ldd	r25, Y+44	; 0x2c
    1c44:	01 97       	sbiw	r24, 0x01	; 1
    1c46:	f1 f7       	brne	.-4      	; 0x1c44 <LCD_sendCommand+0x528>
    1c48:	9c a7       	std	Y+44, r25	; 0x2c
    1c4a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* Delay for processing Th = 13ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E = 1 */
    1c4c:	ab e3       	ldi	r26, 0x3B	; 59
    1c4e:	b0 e0       	ldi	r27, 0x00	; 0
    1c50:	eb e3       	ldi	r30, 0x3B	; 59
    1c52:	f0 e0       	ldi	r31, 0x00	; 0
    1c54:	80 81       	ld	r24, Z
    1c56:	88 60       	ori	r24, 0x08	; 8
    1c58:	8c 93       	st	X, r24
    1c5a:	80 e0       	ldi	r24, 0x00	; 0
    1c5c:	90 e0       	ldi	r25, 0x00	; 0
    1c5e:	a0 e8       	ldi	r26, 0x80	; 128
    1c60:	bf e3       	ldi	r27, 0x3F	; 63
    1c62:	8f a3       	std	Y+39, r24	; 0x27
    1c64:	98 a7       	std	Y+40, r25	; 0x28
    1c66:	a9 a7       	std	Y+41, r26	; 0x29
    1c68:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c6a:	6f a1       	ldd	r22, Y+39	; 0x27
    1c6c:	78 a5       	ldd	r23, Y+40	; 0x28
    1c6e:	89 a5       	ldd	r24, Y+41	; 0x29
    1c70:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c72:	20 e0       	ldi	r18, 0x00	; 0
    1c74:	30 e0       	ldi	r19, 0x00	; 0
    1c76:	4a ef       	ldi	r20, 0xFA	; 250
    1c78:	54 e4       	ldi	r21, 0x44	; 68
    1c7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c7e:	dc 01       	movw	r26, r24
    1c80:	cb 01       	movw	r24, r22
    1c82:	8b a3       	std	Y+35, r24	; 0x23
    1c84:	9c a3       	std	Y+36, r25	; 0x24
    1c86:	ad a3       	std	Y+37, r26	; 0x25
    1c88:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1c8a:	6b a1       	ldd	r22, Y+35	; 0x23
    1c8c:	7c a1       	ldd	r23, Y+36	; 0x24
    1c8e:	8d a1       	ldd	r24, Y+37	; 0x25
    1c90:	9e a1       	ldd	r25, Y+38	; 0x26
    1c92:	20 e0       	ldi	r18, 0x00	; 0
    1c94:	30 e0       	ldi	r19, 0x00	; 0
    1c96:	40 e8       	ldi	r20, 0x80	; 128
    1c98:	5f e3       	ldi	r21, 0x3F	; 63
    1c9a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c9e:	88 23       	and	r24, r24
    1ca0:	2c f4       	brge	.+10     	; 0x1cac <LCD_sendCommand+0x590>
		__ticks = 1;
    1ca2:	81 e0       	ldi	r24, 0x01	; 1
    1ca4:	90 e0       	ldi	r25, 0x00	; 0
    1ca6:	9a a3       	std	Y+34, r25	; 0x22
    1ca8:	89 a3       	std	Y+33, r24	; 0x21
    1caa:	3f c0       	rjmp	.+126    	; 0x1d2a <LCD_sendCommand+0x60e>
	else if (__tmp > 65535)
    1cac:	6b a1       	ldd	r22, Y+35	; 0x23
    1cae:	7c a1       	ldd	r23, Y+36	; 0x24
    1cb0:	8d a1       	ldd	r24, Y+37	; 0x25
    1cb2:	9e a1       	ldd	r25, Y+38	; 0x26
    1cb4:	20 e0       	ldi	r18, 0x00	; 0
    1cb6:	3f ef       	ldi	r19, 0xFF	; 255
    1cb8:	4f e7       	ldi	r20, 0x7F	; 127
    1cba:	57 e4       	ldi	r21, 0x47	; 71
    1cbc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1cc0:	18 16       	cp	r1, r24
    1cc2:	4c f5       	brge	.+82     	; 0x1d16 <LCD_sendCommand+0x5fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cc4:	6f a1       	ldd	r22, Y+39	; 0x27
    1cc6:	78 a5       	ldd	r23, Y+40	; 0x28
    1cc8:	89 a5       	ldd	r24, Y+41	; 0x29
    1cca:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ccc:	20 e0       	ldi	r18, 0x00	; 0
    1cce:	30 e0       	ldi	r19, 0x00	; 0
    1cd0:	40 e2       	ldi	r20, 0x20	; 32
    1cd2:	51 e4       	ldi	r21, 0x41	; 65
    1cd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cd8:	dc 01       	movw	r26, r24
    1cda:	cb 01       	movw	r24, r22
    1cdc:	bc 01       	movw	r22, r24
    1cde:	cd 01       	movw	r24, r26
    1ce0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ce4:	dc 01       	movw	r26, r24
    1ce6:	cb 01       	movw	r24, r22
    1ce8:	9a a3       	std	Y+34, r25	; 0x22
    1cea:	89 a3       	std	Y+33, r24	; 0x21
    1cec:	0f c0       	rjmp	.+30     	; 0x1d0c <LCD_sendCommand+0x5f0>
    1cee:	88 ec       	ldi	r24, 0xC8	; 200
    1cf0:	90 e0       	ldi	r25, 0x00	; 0
    1cf2:	98 a3       	std	Y+32, r25	; 0x20
    1cf4:	8f 8f       	std	Y+31, r24	; 0x1f
    1cf6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1cf8:	98 a1       	ldd	r25, Y+32	; 0x20
    1cfa:	01 97       	sbiw	r24, 0x01	; 1
    1cfc:	f1 f7       	brne	.-4      	; 0x1cfa <LCD_sendCommand+0x5de>
    1cfe:	98 a3       	std	Y+32, r25	; 0x20
    1d00:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d02:	89 a1       	ldd	r24, Y+33	; 0x21
    1d04:	9a a1       	ldd	r25, Y+34	; 0x22
    1d06:	01 97       	sbiw	r24, 0x01	; 1
    1d08:	9a a3       	std	Y+34, r25	; 0x22
    1d0a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d0c:	89 a1       	ldd	r24, Y+33	; 0x21
    1d0e:	9a a1       	ldd	r25, Y+34	; 0x22
    1d10:	00 97       	sbiw	r24, 0x00	; 0
    1d12:	69 f7       	brne	.-38     	; 0x1cee <LCD_sendCommand+0x5d2>
    1d14:	14 c0       	rjmp	.+40     	; 0x1d3e <LCD_sendCommand+0x622>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d16:	6b a1       	ldd	r22, Y+35	; 0x23
    1d18:	7c a1       	ldd	r23, Y+36	; 0x24
    1d1a:	8d a1       	ldd	r24, Y+37	; 0x25
    1d1c:	9e a1       	ldd	r25, Y+38	; 0x26
    1d1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d22:	dc 01       	movw	r26, r24
    1d24:	cb 01       	movw	r24, r22
    1d26:	9a a3       	std	Y+34, r25	; 0x22
    1d28:	89 a3       	std	Y+33, r24	; 0x21
    1d2a:	89 a1       	ldd	r24, Y+33	; 0x21
    1d2c:	9a a1       	ldd	r25, Y+34	; 0x22
    1d2e:	9e 8f       	std	Y+30, r25	; 0x1e
    1d30:	8d 8f       	std	Y+29, r24	; 0x1d
    1d32:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d34:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1d36:	01 97       	sbiw	r24, 0x01	; 1
    1d38:	f1 f7       	brne	.-4      	; 0x1d36 <LCD_sendCommand+0x61a>
    1d3a:	9e 8f       	std	Y+30, r25	; 0x1e
    1d3c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* Delay for processing Tpw - Tdws = 190ns */

	/* Out the lowest 4 bits of the required command to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | ((command & 0x0F) << 4);
    1d3e:	ab e3       	ldi	r26, 0x3B	; 59
    1d40:	b0 e0       	ldi	r27, 0x00	; 0
    1d42:	eb e3       	ldi	r30, 0x3B	; 59
    1d44:	f0 e0       	ldi	r31, 0x00	; 0
    1d46:	80 81       	ld	r24, Z
    1d48:	28 2f       	mov	r18, r24
    1d4a:	2f 70       	andi	r18, 0x0F	; 15
    1d4c:	fe 01       	movw	r30, r28
    1d4e:	ed 59       	subi	r30, 0x9D	; 157
    1d50:	ff 4f       	sbci	r31, 0xFF	; 255
    1d52:	80 81       	ld	r24, Z
    1d54:	88 2f       	mov	r24, r24
    1d56:	90 e0       	ldi	r25, 0x00	; 0
    1d58:	82 95       	swap	r24
    1d5a:	92 95       	swap	r25
    1d5c:	90 7f       	andi	r25, 0xF0	; 240
    1d5e:	98 27       	eor	r25, r24
    1d60:	80 7f       	andi	r24, 0xF0	; 240
    1d62:	98 27       	eor	r25, r24
    1d64:	82 2b       	or	r24, r18
    1d66:	8c 93       	st	X, r24
    1d68:	80 e0       	ldi	r24, 0x00	; 0
    1d6a:	90 e0       	ldi	r25, 0x00	; 0
    1d6c:	a0 e8       	ldi	r26, 0x80	; 128
    1d6e:	bf e3       	ldi	r27, 0x3F	; 63
    1d70:	89 8f       	std	Y+25, r24	; 0x19
    1d72:	9a 8f       	std	Y+26, r25	; 0x1a
    1d74:	ab 8f       	std	Y+27, r26	; 0x1b
    1d76:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d78:	69 8d       	ldd	r22, Y+25	; 0x19
    1d7a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d7c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d7e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d80:	20 e0       	ldi	r18, 0x00	; 0
    1d82:	30 e0       	ldi	r19, 0x00	; 0
    1d84:	4a ef       	ldi	r20, 0xFA	; 250
    1d86:	54 e4       	ldi	r21, 0x44	; 68
    1d88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d8c:	dc 01       	movw	r26, r24
    1d8e:	cb 01       	movw	r24, r22
    1d90:	8d 8b       	std	Y+21, r24	; 0x15
    1d92:	9e 8b       	std	Y+22, r25	; 0x16
    1d94:	af 8b       	std	Y+23, r26	; 0x17
    1d96:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1d98:	6d 89       	ldd	r22, Y+21	; 0x15
    1d9a:	7e 89       	ldd	r23, Y+22	; 0x16
    1d9c:	8f 89       	ldd	r24, Y+23	; 0x17
    1d9e:	98 8d       	ldd	r25, Y+24	; 0x18
    1da0:	20 e0       	ldi	r18, 0x00	; 0
    1da2:	30 e0       	ldi	r19, 0x00	; 0
    1da4:	40 e8       	ldi	r20, 0x80	; 128
    1da6:	5f e3       	ldi	r21, 0x3F	; 63
    1da8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1dac:	88 23       	and	r24, r24
    1dae:	2c f4       	brge	.+10     	; 0x1dba <LCD_sendCommand+0x69e>
		__ticks = 1;
    1db0:	81 e0       	ldi	r24, 0x01	; 1
    1db2:	90 e0       	ldi	r25, 0x00	; 0
    1db4:	9c 8b       	std	Y+20, r25	; 0x14
    1db6:	8b 8b       	std	Y+19, r24	; 0x13
    1db8:	3f c0       	rjmp	.+126    	; 0x1e38 <LCD_sendCommand+0x71c>
	else if (__tmp > 65535)
    1dba:	6d 89       	ldd	r22, Y+21	; 0x15
    1dbc:	7e 89       	ldd	r23, Y+22	; 0x16
    1dbe:	8f 89       	ldd	r24, Y+23	; 0x17
    1dc0:	98 8d       	ldd	r25, Y+24	; 0x18
    1dc2:	20 e0       	ldi	r18, 0x00	; 0
    1dc4:	3f ef       	ldi	r19, 0xFF	; 255
    1dc6:	4f e7       	ldi	r20, 0x7F	; 127
    1dc8:	57 e4       	ldi	r21, 0x47	; 71
    1dca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1dce:	18 16       	cp	r1, r24
    1dd0:	4c f5       	brge	.+82     	; 0x1e24 <LCD_sendCommand+0x708>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dd2:	69 8d       	ldd	r22, Y+25	; 0x19
    1dd4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1dd6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1dd8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1dda:	20 e0       	ldi	r18, 0x00	; 0
    1ddc:	30 e0       	ldi	r19, 0x00	; 0
    1dde:	40 e2       	ldi	r20, 0x20	; 32
    1de0:	51 e4       	ldi	r21, 0x41	; 65
    1de2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1de6:	dc 01       	movw	r26, r24
    1de8:	cb 01       	movw	r24, r22
    1dea:	bc 01       	movw	r22, r24
    1dec:	cd 01       	movw	r24, r26
    1dee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1df2:	dc 01       	movw	r26, r24
    1df4:	cb 01       	movw	r24, r22
    1df6:	9c 8b       	std	Y+20, r25	; 0x14
    1df8:	8b 8b       	std	Y+19, r24	; 0x13
    1dfa:	0f c0       	rjmp	.+30     	; 0x1e1a <LCD_sendCommand+0x6fe>
    1dfc:	88 ec       	ldi	r24, 0xC8	; 200
    1dfe:	90 e0       	ldi	r25, 0x00	; 0
    1e00:	9a 8b       	std	Y+18, r25	; 0x12
    1e02:	89 8b       	std	Y+17, r24	; 0x11
    1e04:	89 89       	ldd	r24, Y+17	; 0x11
    1e06:	9a 89       	ldd	r25, Y+18	; 0x12
    1e08:	01 97       	sbiw	r24, 0x01	; 1
    1e0a:	f1 f7       	brne	.-4      	; 0x1e08 <LCD_sendCommand+0x6ec>
    1e0c:	9a 8b       	std	Y+18, r25	; 0x12
    1e0e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e10:	8b 89       	ldd	r24, Y+19	; 0x13
    1e12:	9c 89       	ldd	r25, Y+20	; 0x14
    1e14:	01 97       	sbiw	r24, 0x01	; 1
    1e16:	9c 8b       	std	Y+20, r25	; 0x14
    1e18:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e1a:	8b 89       	ldd	r24, Y+19	; 0x13
    1e1c:	9c 89       	ldd	r25, Y+20	; 0x14
    1e1e:	00 97       	sbiw	r24, 0x00	; 0
    1e20:	69 f7       	brne	.-38     	; 0x1dfc <LCD_sendCommand+0x6e0>
    1e22:	14 c0       	rjmp	.+40     	; 0x1e4c <LCD_sendCommand+0x730>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e24:	6d 89       	ldd	r22, Y+21	; 0x15
    1e26:	7e 89       	ldd	r23, Y+22	; 0x16
    1e28:	8f 89       	ldd	r24, Y+23	; 0x17
    1e2a:	98 8d       	ldd	r25, Y+24	; 0x18
    1e2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e30:	dc 01       	movw	r26, r24
    1e32:	cb 01       	movw	r24, r22
    1e34:	9c 8b       	std	Y+20, r25	; 0x14
    1e36:	8b 8b       	std	Y+19, r24	; 0x13
    1e38:	8b 89       	ldd	r24, Y+19	; 0x13
    1e3a:	9c 89       	ldd	r25, Y+20	; 0x14
    1e3c:	98 8b       	std	Y+16, r25	; 0x10
    1e3e:	8f 87       	std	Y+15, r24	; 0x0f
    1e40:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e42:	98 89       	ldd	r25, Y+16	; 0x10
    1e44:	01 97       	sbiw	r24, 0x01	; 1
    1e46:	f1 f7       	brne	.-4      	; 0x1e44 <LCD_sendCommand+0x728>
    1e48:	98 8b       	std	Y+16, r25	; 0x10
    1e4a:	8f 87       	std	Y+15, r24	; 0x0f
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | (command & 0x0F);
#endif

	_delay_ms(1); /* Delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* Disable LCD E = 0 */
    1e4c:	ab e3       	ldi	r26, 0x3B	; 59
    1e4e:	b0 e0       	ldi	r27, 0x00	; 0
    1e50:	eb e3       	ldi	r30, 0x3B	; 59
    1e52:	f0 e0       	ldi	r31, 0x00	; 0
    1e54:	80 81       	ld	r24, Z
    1e56:	87 7f       	andi	r24, 0xF7	; 247
    1e58:	8c 93       	st	X, r24
    1e5a:	80 e0       	ldi	r24, 0x00	; 0
    1e5c:	90 e0       	ldi	r25, 0x00	; 0
    1e5e:	a0 e8       	ldi	r26, 0x80	; 128
    1e60:	bf e3       	ldi	r27, 0x3F	; 63
    1e62:	8b 87       	std	Y+11, r24	; 0x0b
    1e64:	9c 87       	std	Y+12, r25	; 0x0c
    1e66:	ad 87       	std	Y+13, r26	; 0x0d
    1e68:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e6a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e6c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e6e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e70:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e72:	20 e0       	ldi	r18, 0x00	; 0
    1e74:	30 e0       	ldi	r19, 0x00	; 0
    1e76:	4a ef       	ldi	r20, 0xFA	; 250
    1e78:	54 e4       	ldi	r21, 0x44	; 68
    1e7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e7e:	dc 01       	movw	r26, r24
    1e80:	cb 01       	movw	r24, r22
    1e82:	8f 83       	std	Y+7, r24	; 0x07
    1e84:	98 87       	std	Y+8, r25	; 0x08
    1e86:	a9 87       	std	Y+9, r26	; 0x09
    1e88:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e8a:	6f 81       	ldd	r22, Y+7	; 0x07
    1e8c:	78 85       	ldd	r23, Y+8	; 0x08
    1e8e:	89 85       	ldd	r24, Y+9	; 0x09
    1e90:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e92:	20 e0       	ldi	r18, 0x00	; 0
    1e94:	30 e0       	ldi	r19, 0x00	; 0
    1e96:	40 e8       	ldi	r20, 0x80	; 128
    1e98:	5f e3       	ldi	r21, 0x3F	; 63
    1e9a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e9e:	88 23       	and	r24, r24
    1ea0:	2c f4       	brge	.+10     	; 0x1eac <LCD_sendCommand+0x790>
		__ticks = 1;
    1ea2:	81 e0       	ldi	r24, 0x01	; 1
    1ea4:	90 e0       	ldi	r25, 0x00	; 0
    1ea6:	9e 83       	std	Y+6, r25	; 0x06
    1ea8:	8d 83       	std	Y+5, r24	; 0x05
    1eaa:	3f c0       	rjmp	.+126    	; 0x1f2a <LCD_sendCommand+0x80e>
	else if (__tmp > 65535)
    1eac:	6f 81       	ldd	r22, Y+7	; 0x07
    1eae:	78 85       	ldd	r23, Y+8	; 0x08
    1eb0:	89 85       	ldd	r24, Y+9	; 0x09
    1eb2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eb4:	20 e0       	ldi	r18, 0x00	; 0
    1eb6:	3f ef       	ldi	r19, 0xFF	; 255
    1eb8:	4f e7       	ldi	r20, 0x7F	; 127
    1eba:	57 e4       	ldi	r21, 0x47	; 71
    1ebc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ec0:	18 16       	cp	r1, r24
    1ec2:	4c f5       	brge	.+82     	; 0x1f16 <LCD_sendCommand+0x7fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ec4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ec6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ec8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1eca:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ecc:	20 e0       	ldi	r18, 0x00	; 0
    1ece:	30 e0       	ldi	r19, 0x00	; 0
    1ed0:	40 e2       	ldi	r20, 0x20	; 32
    1ed2:	51 e4       	ldi	r21, 0x41	; 65
    1ed4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ed8:	dc 01       	movw	r26, r24
    1eda:	cb 01       	movw	r24, r22
    1edc:	bc 01       	movw	r22, r24
    1ede:	cd 01       	movw	r24, r26
    1ee0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ee4:	dc 01       	movw	r26, r24
    1ee6:	cb 01       	movw	r24, r22
    1ee8:	9e 83       	std	Y+6, r25	; 0x06
    1eea:	8d 83       	std	Y+5, r24	; 0x05
    1eec:	0f c0       	rjmp	.+30     	; 0x1f0c <LCD_sendCommand+0x7f0>
    1eee:	88 ec       	ldi	r24, 0xC8	; 200
    1ef0:	90 e0       	ldi	r25, 0x00	; 0
    1ef2:	9c 83       	std	Y+4, r25	; 0x04
    1ef4:	8b 83       	std	Y+3, r24	; 0x03
    1ef6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ef8:	9c 81       	ldd	r25, Y+4	; 0x04
    1efa:	01 97       	sbiw	r24, 0x01	; 1
    1efc:	f1 f7       	brne	.-4      	; 0x1efa <LCD_sendCommand+0x7de>
    1efe:	9c 83       	std	Y+4, r25	; 0x04
    1f00:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f02:	8d 81       	ldd	r24, Y+5	; 0x05
    1f04:	9e 81       	ldd	r25, Y+6	; 0x06
    1f06:	01 97       	sbiw	r24, 0x01	; 1
    1f08:	9e 83       	std	Y+6, r25	; 0x06
    1f0a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f0c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f0e:	9e 81       	ldd	r25, Y+6	; 0x06
    1f10:	00 97       	sbiw	r24, 0x00	; 0
    1f12:	69 f7       	brne	.-38     	; 0x1eee <LCD_sendCommand+0x7d2>
    1f14:	14 c0       	rjmp	.+40     	; 0x1f3e <LCD_sendCommand+0x822>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f16:	6f 81       	ldd	r22, Y+7	; 0x07
    1f18:	78 85       	ldd	r23, Y+8	; 0x08
    1f1a:	89 85       	ldd	r24, Y+9	; 0x09
    1f1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f22:	dc 01       	movw	r26, r24
    1f24:	cb 01       	movw	r24, r22
    1f26:	9e 83       	std	Y+6, r25	; 0x06
    1f28:	8d 83       	std	Y+5, r24	; 0x05
    1f2a:	8d 81       	ldd	r24, Y+5	; 0x05
    1f2c:	9e 81       	ldd	r25, Y+6	; 0x06
    1f2e:	9a 83       	std	Y+2, r25	; 0x02
    1f30:	89 83       	std	Y+1, r24	; 0x01
    1f32:	89 81       	ldd	r24, Y+1	; 0x01
    1f34:	9a 81       	ldd	r25, Y+2	; 0x02
    1f36:	01 97       	sbiw	r24, 0x01	; 1
    1f38:	f1 f7       	brne	.-4      	; 0x1f36 <LCD_sendCommand+0x81a>
    1f3a:	9a 83       	std	Y+2, r25	; 0x02
    1f3c:	89 83       	std	Y+1, r24	; 0x01
	LCD_DATA_PORT = command; /* Out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* Delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E = 0 */
	_delay_ms(1); /* Delay for processing Th = 13ns */
#endif
}
    1f3e:	cd 59       	subi	r28, 0x9D	; 157
    1f40:	df 4f       	sbci	r29, 0xFF	; 255
    1f42:	0f b6       	in	r0, 0x3f	; 63
    1f44:	f8 94       	cli
    1f46:	de bf       	out	0x3e, r29	; 62
    1f48:	0f be       	out	0x3f, r0	; 63
    1f4a:	cd bf       	out	0x3d, r28	; 61
    1f4c:	cf 91       	pop	r28
    1f4e:	df 91       	pop	r29
    1f50:	1f 91       	pop	r17
    1f52:	0f 91       	pop	r16
    1f54:	08 95       	ret

00001f56 <LCD_displayCharacter>:

void LCD_displayCharacter(uint8_t data)
{
    1f56:	0f 93       	push	r16
    1f58:	1f 93       	push	r17
    1f5a:	df 93       	push	r29
    1f5c:	cf 93       	push	r28
    1f5e:	cd b7       	in	r28, 0x3d	; 61
    1f60:	de b7       	in	r29, 0x3e	; 62
    1f62:	c3 56       	subi	r28, 0x63	; 99
    1f64:	d0 40       	sbci	r29, 0x00	; 0
    1f66:	0f b6       	in	r0, 0x3f	; 63
    1f68:	f8 94       	cli
    1f6a:	de bf       	out	0x3e, r29	; 62
    1f6c:	0f be       	out	0x3f, r0	; 63
    1f6e:	cd bf       	out	0x3d, r28	; 61
    1f70:	fe 01       	movw	r30, r28
    1f72:	ed 59       	subi	r30, 0x9D	; 157
    1f74:	ff 4f       	sbci	r31, 0xFF	; 255
    1f76:	80 83       	st	Z, r24
	SET_BIT(LCD_CTRL_PORT,RS); /* Data Mode RS = 1 */
    1f78:	ab e3       	ldi	r26, 0x3B	; 59
    1f7a:	b0 e0       	ldi	r27, 0x00	; 0
    1f7c:	eb e3       	ldi	r30, 0x3B	; 59
    1f7e:	f0 e0       	ldi	r31, 0x00	; 0
    1f80:	80 81       	ld	r24, Z
    1f82:	82 60       	ori	r24, 0x02	; 2
    1f84:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* Write data to LCD so RW = 0 */
    1f86:	ab e3       	ldi	r26, 0x3B	; 59
    1f88:	b0 e0       	ldi	r27, 0x00	; 0
    1f8a:	eb e3       	ldi	r30, 0x3B	; 59
    1f8c:	f0 e0       	ldi	r31, 0x00	; 0
    1f8e:	80 81       	ld	r24, Z
    1f90:	8b 7f       	andi	r24, 0xFB	; 251
    1f92:	8c 93       	st	X, r24
    1f94:	fe 01       	movw	r30, r28
    1f96:	e1 5a       	subi	r30, 0xA1	; 161
    1f98:	ff 4f       	sbci	r31, 0xFF	; 255
    1f9a:	80 e0       	ldi	r24, 0x00	; 0
    1f9c:	90 e0       	ldi	r25, 0x00	; 0
    1f9e:	a0 e8       	ldi	r26, 0x80	; 128
    1fa0:	bf e3       	ldi	r27, 0x3F	; 63
    1fa2:	80 83       	st	Z, r24
    1fa4:	91 83       	std	Z+1, r25	; 0x01
    1fa6:	a2 83       	std	Z+2, r26	; 0x02
    1fa8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1faa:	8e 01       	movw	r16, r28
    1fac:	05 5a       	subi	r16, 0xA5	; 165
    1fae:	1f 4f       	sbci	r17, 0xFF	; 255
    1fb0:	fe 01       	movw	r30, r28
    1fb2:	e1 5a       	subi	r30, 0xA1	; 161
    1fb4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb6:	60 81       	ld	r22, Z
    1fb8:	71 81       	ldd	r23, Z+1	; 0x01
    1fba:	82 81       	ldd	r24, Z+2	; 0x02
    1fbc:	93 81       	ldd	r25, Z+3	; 0x03
    1fbe:	20 e0       	ldi	r18, 0x00	; 0
    1fc0:	30 e0       	ldi	r19, 0x00	; 0
    1fc2:	4a ef       	ldi	r20, 0xFA	; 250
    1fc4:	54 e4       	ldi	r21, 0x44	; 68
    1fc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fca:	dc 01       	movw	r26, r24
    1fcc:	cb 01       	movw	r24, r22
    1fce:	f8 01       	movw	r30, r16
    1fd0:	80 83       	st	Z, r24
    1fd2:	91 83       	std	Z+1, r25	; 0x01
    1fd4:	a2 83       	std	Z+2, r26	; 0x02
    1fd6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1fd8:	fe 01       	movw	r30, r28
    1fda:	e5 5a       	subi	r30, 0xA5	; 165
    1fdc:	ff 4f       	sbci	r31, 0xFF	; 255
    1fde:	60 81       	ld	r22, Z
    1fe0:	71 81       	ldd	r23, Z+1	; 0x01
    1fe2:	82 81       	ldd	r24, Z+2	; 0x02
    1fe4:	93 81       	ldd	r25, Z+3	; 0x03
    1fe6:	20 e0       	ldi	r18, 0x00	; 0
    1fe8:	30 e0       	ldi	r19, 0x00	; 0
    1fea:	40 e8       	ldi	r20, 0x80	; 128
    1fec:	5f e3       	ldi	r21, 0x3F	; 63
    1fee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ff2:	88 23       	and	r24, r24
    1ff4:	44 f4       	brge	.+16     	; 0x2006 <LCD_displayCharacter+0xb0>
		__ticks = 1;
    1ff6:	fe 01       	movw	r30, r28
    1ff8:	e7 5a       	subi	r30, 0xA7	; 167
    1ffa:	ff 4f       	sbci	r31, 0xFF	; 255
    1ffc:	81 e0       	ldi	r24, 0x01	; 1
    1ffe:	90 e0       	ldi	r25, 0x00	; 0
    2000:	91 83       	std	Z+1, r25	; 0x01
    2002:	80 83       	st	Z, r24
    2004:	64 c0       	rjmp	.+200    	; 0x20ce <LCD_displayCharacter+0x178>
	else if (__tmp > 65535)
    2006:	fe 01       	movw	r30, r28
    2008:	e5 5a       	subi	r30, 0xA5	; 165
    200a:	ff 4f       	sbci	r31, 0xFF	; 255
    200c:	60 81       	ld	r22, Z
    200e:	71 81       	ldd	r23, Z+1	; 0x01
    2010:	82 81       	ldd	r24, Z+2	; 0x02
    2012:	93 81       	ldd	r25, Z+3	; 0x03
    2014:	20 e0       	ldi	r18, 0x00	; 0
    2016:	3f ef       	ldi	r19, 0xFF	; 255
    2018:	4f e7       	ldi	r20, 0x7F	; 127
    201a:	57 e4       	ldi	r21, 0x47	; 71
    201c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2020:	18 16       	cp	r1, r24
    2022:	0c f0       	brlt	.+2      	; 0x2026 <LCD_displayCharacter+0xd0>
    2024:	43 c0       	rjmp	.+134    	; 0x20ac <LCD_displayCharacter+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2026:	fe 01       	movw	r30, r28
    2028:	e1 5a       	subi	r30, 0xA1	; 161
    202a:	ff 4f       	sbci	r31, 0xFF	; 255
    202c:	60 81       	ld	r22, Z
    202e:	71 81       	ldd	r23, Z+1	; 0x01
    2030:	82 81       	ldd	r24, Z+2	; 0x02
    2032:	93 81       	ldd	r25, Z+3	; 0x03
    2034:	20 e0       	ldi	r18, 0x00	; 0
    2036:	30 e0       	ldi	r19, 0x00	; 0
    2038:	40 e2       	ldi	r20, 0x20	; 32
    203a:	51 e4       	ldi	r21, 0x41	; 65
    203c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2040:	dc 01       	movw	r26, r24
    2042:	cb 01       	movw	r24, r22
    2044:	8e 01       	movw	r16, r28
    2046:	07 5a       	subi	r16, 0xA7	; 167
    2048:	1f 4f       	sbci	r17, 0xFF	; 255
    204a:	bc 01       	movw	r22, r24
    204c:	cd 01       	movw	r24, r26
    204e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2052:	dc 01       	movw	r26, r24
    2054:	cb 01       	movw	r24, r22
    2056:	f8 01       	movw	r30, r16
    2058:	91 83       	std	Z+1, r25	; 0x01
    205a:	80 83       	st	Z, r24
    205c:	1f c0       	rjmp	.+62     	; 0x209c <LCD_displayCharacter+0x146>
    205e:	fe 01       	movw	r30, r28
    2060:	e9 5a       	subi	r30, 0xA9	; 169
    2062:	ff 4f       	sbci	r31, 0xFF	; 255
    2064:	88 ec       	ldi	r24, 0xC8	; 200
    2066:	90 e0       	ldi	r25, 0x00	; 0
    2068:	91 83       	std	Z+1, r25	; 0x01
    206a:	80 83       	st	Z, r24
    206c:	fe 01       	movw	r30, r28
    206e:	e9 5a       	subi	r30, 0xA9	; 169
    2070:	ff 4f       	sbci	r31, 0xFF	; 255
    2072:	80 81       	ld	r24, Z
    2074:	91 81       	ldd	r25, Z+1	; 0x01
    2076:	01 97       	sbiw	r24, 0x01	; 1
    2078:	f1 f7       	brne	.-4      	; 0x2076 <LCD_displayCharacter+0x120>
    207a:	fe 01       	movw	r30, r28
    207c:	e9 5a       	subi	r30, 0xA9	; 169
    207e:	ff 4f       	sbci	r31, 0xFF	; 255
    2080:	91 83       	std	Z+1, r25	; 0x01
    2082:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2084:	de 01       	movw	r26, r28
    2086:	a7 5a       	subi	r26, 0xA7	; 167
    2088:	bf 4f       	sbci	r27, 0xFF	; 255
    208a:	fe 01       	movw	r30, r28
    208c:	e7 5a       	subi	r30, 0xA7	; 167
    208e:	ff 4f       	sbci	r31, 0xFF	; 255
    2090:	80 81       	ld	r24, Z
    2092:	91 81       	ldd	r25, Z+1	; 0x01
    2094:	01 97       	sbiw	r24, 0x01	; 1
    2096:	11 96       	adiw	r26, 0x01	; 1
    2098:	9c 93       	st	X, r25
    209a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    209c:	fe 01       	movw	r30, r28
    209e:	e7 5a       	subi	r30, 0xA7	; 167
    20a0:	ff 4f       	sbci	r31, 0xFF	; 255
    20a2:	80 81       	ld	r24, Z
    20a4:	91 81       	ldd	r25, Z+1	; 0x01
    20a6:	00 97       	sbiw	r24, 0x00	; 0
    20a8:	d1 f6       	brne	.-76     	; 0x205e <LCD_displayCharacter+0x108>
    20aa:	27 c0       	rjmp	.+78     	; 0x20fa <LCD_displayCharacter+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20ac:	8e 01       	movw	r16, r28
    20ae:	07 5a       	subi	r16, 0xA7	; 167
    20b0:	1f 4f       	sbci	r17, 0xFF	; 255
    20b2:	fe 01       	movw	r30, r28
    20b4:	e5 5a       	subi	r30, 0xA5	; 165
    20b6:	ff 4f       	sbci	r31, 0xFF	; 255
    20b8:	60 81       	ld	r22, Z
    20ba:	71 81       	ldd	r23, Z+1	; 0x01
    20bc:	82 81       	ldd	r24, Z+2	; 0x02
    20be:	93 81       	ldd	r25, Z+3	; 0x03
    20c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20c4:	dc 01       	movw	r26, r24
    20c6:	cb 01       	movw	r24, r22
    20c8:	f8 01       	movw	r30, r16
    20ca:	91 83       	std	Z+1, r25	; 0x01
    20cc:	80 83       	st	Z, r24
    20ce:	de 01       	movw	r26, r28
    20d0:	ab 5a       	subi	r26, 0xAB	; 171
    20d2:	bf 4f       	sbci	r27, 0xFF	; 255
    20d4:	fe 01       	movw	r30, r28
    20d6:	e7 5a       	subi	r30, 0xA7	; 167
    20d8:	ff 4f       	sbci	r31, 0xFF	; 255
    20da:	80 81       	ld	r24, Z
    20dc:	91 81       	ldd	r25, Z+1	; 0x01
    20de:	8d 93       	st	X+, r24
    20e0:	9c 93       	st	X, r25
    20e2:	fe 01       	movw	r30, r28
    20e4:	eb 5a       	subi	r30, 0xAB	; 171
    20e6:	ff 4f       	sbci	r31, 0xFF	; 255
    20e8:	80 81       	ld	r24, Z
    20ea:	91 81       	ldd	r25, Z+1	; 0x01
    20ec:	01 97       	sbiw	r24, 0x01	; 1
    20ee:	f1 f7       	brne	.-4      	; 0x20ec <LCD_displayCharacter+0x196>
    20f0:	fe 01       	movw	r30, r28
    20f2:	eb 5a       	subi	r30, 0xAB	; 171
    20f4:	ff 4f       	sbci	r31, 0xFF	; 255
    20f6:	91 83       	std	Z+1, r25	; 0x01
    20f8:	80 83       	st	Z, r24
	_delay_ms(1); /* Delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E = 1 */
    20fa:	ab e3       	ldi	r26, 0x3B	; 59
    20fc:	b0 e0       	ldi	r27, 0x00	; 0
    20fe:	eb e3       	ldi	r30, 0x3B	; 59
    2100:	f0 e0       	ldi	r31, 0x00	; 0
    2102:	80 81       	ld	r24, Z
    2104:	88 60       	ori	r24, 0x08	; 8
    2106:	8c 93       	st	X, r24
    2108:	fe 01       	movw	r30, r28
    210a:	ef 5a       	subi	r30, 0xAF	; 175
    210c:	ff 4f       	sbci	r31, 0xFF	; 255
    210e:	80 e0       	ldi	r24, 0x00	; 0
    2110:	90 e0       	ldi	r25, 0x00	; 0
    2112:	a0 e8       	ldi	r26, 0x80	; 128
    2114:	bf e3       	ldi	r27, 0x3F	; 63
    2116:	80 83       	st	Z, r24
    2118:	91 83       	std	Z+1, r25	; 0x01
    211a:	a2 83       	std	Z+2, r26	; 0x02
    211c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    211e:	8e 01       	movw	r16, r28
    2120:	03 5b       	subi	r16, 0xB3	; 179
    2122:	1f 4f       	sbci	r17, 0xFF	; 255
    2124:	fe 01       	movw	r30, r28
    2126:	ef 5a       	subi	r30, 0xAF	; 175
    2128:	ff 4f       	sbci	r31, 0xFF	; 255
    212a:	60 81       	ld	r22, Z
    212c:	71 81       	ldd	r23, Z+1	; 0x01
    212e:	82 81       	ldd	r24, Z+2	; 0x02
    2130:	93 81       	ldd	r25, Z+3	; 0x03
    2132:	20 e0       	ldi	r18, 0x00	; 0
    2134:	30 e0       	ldi	r19, 0x00	; 0
    2136:	4a ef       	ldi	r20, 0xFA	; 250
    2138:	54 e4       	ldi	r21, 0x44	; 68
    213a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    213e:	dc 01       	movw	r26, r24
    2140:	cb 01       	movw	r24, r22
    2142:	f8 01       	movw	r30, r16
    2144:	80 83       	st	Z, r24
    2146:	91 83       	std	Z+1, r25	; 0x01
    2148:	a2 83       	std	Z+2, r26	; 0x02
    214a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    214c:	fe 01       	movw	r30, r28
    214e:	e3 5b       	subi	r30, 0xB3	; 179
    2150:	ff 4f       	sbci	r31, 0xFF	; 255
    2152:	60 81       	ld	r22, Z
    2154:	71 81       	ldd	r23, Z+1	; 0x01
    2156:	82 81       	ldd	r24, Z+2	; 0x02
    2158:	93 81       	ldd	r25, Z+3	; 0x03
    215a:	20 e0       	ldi	r18, 0x00	; 0
    215c:	30 e0       	ldi	r19, 0x00	; 0
    215e:	40 e8       	ldi	r20, 0x80	; 128
    2160:	5f e3       	ldi	r21, 0x3F	; 63
    2162:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2166:	88 23       	and	r24, r24
    2168:	44 f4       	brge	.+16     	; 0x217a <LCD_displayCharacter+0x224>
		__ticks = 1;
    216a:	fe 01       	movw	r30, r28
    216c:	e5 5b       	subi	r30, 0xB5	; 181
    216e:	ff 4f       	sbci	r31, 0xFF	; 255
    2170:	81 e0       	ldi	r24, 0x01	; 1
    2172:	90 e0       	ldi	r25, 0x00	; 0
    2174:	91 83       	std	Z+1, r25	; 0x01
    2176:	80 83       	st	Z, r24
    2178:	64 c0       	rjmp	.+200    	; 0x2242 <LCD_displayCharacter+0x2ec>
	else if (__tmp > 65535)
    217a:	fe 01       	movw	r30, r28
    217c:	e3 5b       	subi	r30, 0xB3	; 179
    217e:	ff 4f       	sbci	r31, 0xFF	; 255
    2180:	60 81       	ld	r22, Z
    2182:	71 81       	ldd	r23, Z+1	; 0x01
    2184:	82 81       	ldd	r24, Z+2	; 0x02
    2186:	93 81       	ldd	r25, Z+3	; 0x03
    2188:	20 e0       	ldi	r18, 0x00	; 0
    218a:	3f ef       	ldi	r19, 0xFF	; 255
    218c:	4f e7       	ldi	r20, 0x7F	; 127
    218e:	57 e4       	ldi	r21, 0x47	; 71
    2190:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2194:	18 16       	cp	r1, r24
    2196:	0c f0       	brlt	.+2      	; 0x219a <LCD_displayCharacter+0x244>
    2198:	43 c0       	rjmp	.+134    	; 0x2220 <LCD_displayCharacter+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    219a:	fe 01       	movw	r30, r28
    219c:	ef 5a       	subi	r30, 0xAF	; 175
    219e:	ff 4f       	sbci	r31, 0xFF	; 255
    21a0:	60 81       	ld	r22, Z
    21a2:	71 81       	ldd	r23, Z+1	; 0x01
    21a4:	82 81       	ldd	r24, Z+2	; 0x02
    21a6:	93 81       	ldd	r25, Z+3	; 0x03
    21a8:	20 e0       	ldi	r18, 0x00	; 0
    21aa:	30 e0       	ldi	r19, 0x00	; 0
    21ac:	40 e2       	ldi	r20, 0x20	; 32
    21ae:	51 e4       	ldi	r21, 0x41	; 65
    21b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21b4:	dc 01       	movw	r26, r24
    21b6:	cb 01       	movw	r24, r22
    21b8:	8e 01       	movw	r16, r28
    21ba:	05 5b       	subi	r16, 0xB5	; 181
    21bc:	1f 4f       	sbci	r17, 0xFF	; 255
    21be:	bc 01       	movw	r22, r24
    21c0:	cd 01       	movw	r24, r26
    21c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21c6:	dc 01       	movw	r26, r24
    21c8:	cb 01       	movw	r24, r22
    21ca:	f8 01       	movw	r30, r16
    21cc:	91 83       	std	Z+1, r25	; 0x01
    21ce:	80 83       	st	Z, r24
    21d0:	1f c0       	rjmp	.+62     	; 0x2210 <LCD_displayCharacter+0x2ba>
    21d2:	fe 01       	movw	r30, r28
    21d4:	e7 5b       	subi	r30, 0xB7	; 183
    21d6:	ff 4f       	sbci	r31, 0xFF	; 255
    21d8:	88 ec       	ldi	r24, 0xC8	; 200
    21da:	90 e0       	ldi	r25, 0x00	; 0
    21dc:	91 83       	std	Z+1, r25	; 0x01
    21de:	80 83       	st	Z, r24
    21e0:	fe 01       	movw	r30, r28
    21e2:	e7 5b       	subi	r30, 0xB7	; 183
    21e4:	ff 4f       	sbci	r31, 0xFF	; 255
    21e6:	80 81       	ld	r24, Z
    21e8:	91 81       	ldd	r25, Z+1	; 0x01
    21ea:	01 97       	sbiw	r24, 0x01	; 1
    21ec:	f1 f7       	brne	.-4      	; 0x21ea <LCD_displayCharacter+0x294>
    21ee:	fe 01       	movw	r30, r28
    21f0:	e7 5b       	subi	r30, 0xB7	; 183
    21f2:	ff 4f       	sbci	r31, 0xFF	; 255
    21f4:	91 83       	std	Z+1, r25	; 0x01
    21f6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21f8:	de 01       	movw	r26, r28
    21fa:	a5 5b       	subi	r26, 0xB5	; 181
    21fc:	bf 4f       	sbci	r27, 0xFF	; 255
    21fe:	fe 01       	movw	r30, r28
    2200:	e5 5b       	subi	r30, 0xB5	; 181
    2202:	ff 4f       	sbci	r31, 0xFF	; 255
    2204:	80 81       	ld	r24, Z
    2206:	91 81       	ldd	r25, Z+1	; 0x01
    2208:	01 97       	sbiw	r24, 0x01	; 1
    220a:	11 96       	adiw	r26, 0x01	; 1
    220c:	9c 93       	st	X, r25
    220e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2210:	fe 01       	movw	r30, r28
    2212:	e5 5b       	subi	r30, 0xB5	; 181
    2214:	ff 4f       	sbci	r31, 0xFF	; 255
    2216:	80 81       	ld	r24, Z
    2218:	91 81       	ldd	r25, Z+1	; 0x01
    221a:	00 97       	sbiw	r24, 0x00	; 0
    221c:	d1 f6       	brne	.-76     	; 0x21d2 <LCD_displayCharacter+0x27c>
    221e:	27 c0       	rjmp	.+78     	; 0x226e <LCD_displayCharacter+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2220:	8e 01       	movw	r16, r28
    2222:	05 5b       	subi	r16, 0xB5	; 181
    2224:	1f 4f       	sbci	r17, 0xFF	; 255
    2226:	fe 01       	movw	r30, r28
    2228:	e3 5b       	subi	r30, 0xB3	; 179
    222a:	ff 4f       	sbci	r31, 0xFF	; 255
    222c:	60 81       	ld	r22, Z
    222e:	71 81       	ldd	r23, Z+1	; 0x01
    2230:	82 81       	ldd	r24, Z+2	; 0x02
    2232:	93 81       	ldd	r25, Z+3	; 0x03
    2234:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2238:	dc 01       	movw	r26, r24
    223a:	cb 01       	movw	r24, r22
    223c:	f8 01       	movw	r30, r16
    223e:	91 83       	std	Z+1, r25	; 0x01
    2240:	80 83       	st	Z, r24
    2242:	de 01       	movw	r26, r28
    2244:	a9 5b       	subi	r26, 0xB9	; 185
    2246:	bf 4f       	sbci	r27, 0xFF	; 255
    2248:	fe 01       	movw	r30, r28
    224a:	e5 5b       	subi	r30, 0xB5	; 181
    224c:	ff 4f       	sbci	r31, 0xFF	; 255
    224e:	80 81       	ld	r24, Z
    2250:	91 81       	ldd	r25, Z+1	; 0x01
    2252:	8d 93       	st	X+, r24
    2254:	9c 93       	st	X, r25
    2256:	fe 01       	movw	r30, r28
    2258:	e9 5b       	subi	r30, 0xB9	; 185
    225a:	ff 4f       	sbci	r31, 0xFF	; 255
    225c:	80 81       	ld	r24, Z
    225e:	91 81       	ldd	r25, Z+1	; 0x01
    2260:	01 97       	sbiw	r24, 0x01	; 1
    2262:	f1 f7       	brne	.-4      	; 0x2260 <LCD_displayCharacter+0x30a>
    2264:	fe 01       	movw	r30, r28
    2266:	e9 5b       	subi	r30, 0xB9	; 185
    2268:	ff 4f       	sbci	r31, 0xFF	; 255
    226a:	91 83       	std	Z+1, r25	; 0x01
    226c:	80 83       	st	Z, r24
	_delay_ms(1); /* Delay for processing Tpw - Tdws = 190ns */
#if (DATA_BITS_MODE == 4)
	/* Out the highest 4 bits of the required data to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (data & 0xF0);
    226e:	ab e3       	ldi	r26, 0x3B	; 59
    2270:	b0 e0       	ldi	r27, 0x00	; 0
    2272:	eb e3       	ldi	r30, 0x3B	; 59
    2274:	f0 e0       	ldi	r31, 0x00	; 0
    2276:	80 81       	ld	r24, Z
    2278:	98 2f       	mov	r25, r24
    227a:	9f 70       	andi	r25, 0x0F	; 15
    227c:	fe 01       	movw	r30, r28
    227e:	ed 59       	subi	r30, 0x9D	; 157
    2280:	ff 4f       	sbci	r31, 0xFF	; 255
    2282:	80 81       	ld	r24, Z
    2284:	80 7f       	andi	r24, 0xF0	; 240
    2286:	89 2b       	or	r24, r25
    2288:	8c 93       	st	X, r24
    228a:	fe 01       	movw	r30, r28
    228c:	ed 5b       	subi	r30, 0xBD	; 189
    228e:	ff 4f       	sbci	r31, 0xFF	; 255
    2290:	80 e0       	ldi	r24, 0x00	; 0
    2292:	90 e0       	ldi	r25, 0x00	; 0
    2294:	a0 e8       	ldi	r26, 0x80	; 128
    2296:	bf e3       	ldi	r27, 0x3F	; 63
    2298:	80 83       	st	Z, r24
    229a:	91 83       	std	Z+1, r25	; 0x01
    229c:	a2 83       	std	Z+2, r26	; 0x02
    229e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22a0:	8e 01       	movw	r16, r28
    22a2:	01 5c       	subi	r16, 0xC1	; 193
    22a4:	1f 4f       	sbci	r17, 0xFF	; 255
    22a6:	fe 01       	movw	r30, r28
    22a8:	ed 5b       	subi	r30, 0xBD	; 189
    22aa:	ff 4f       	sbci	r31, 0xFF	; 255
    22ac:	60 81       	ld	r22, Z
    22ae:	71 81       	ldd	r23, Z+1	; 0x01
    22b0:	82 81       	ldd	r24, Z+2	; 0x02
    22b2:	93 81       	ldd	r25, Z+3	; 0x03
    22b4:	20 e0       	ldi	r18, 0x00	; 0
    22b6:	30 e0       	ldi	r19, 0x00	; 0
    22b8:	4a ef       	ldi	r20, 0xFA	; 250
    22ba:	54 e4       	ldi	r21, 0x44	; 68
    22bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22c0:	dc 01       	movw	r26, r24
    22c2:	cb 01       	movw	r24, r22
    22c4:	f8 01       	movw	r30, r16
    22c6:	80 83       	st	Z, r24
    22c8:	91 83       	std	Z+1, r25	; 0x01
    22ca:	a2 83       	std	Z+2, r26	; 0x02
    22cc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    22ce:	fe 01       	movw	r30, r28
    22d0:	ff 96       	adiw	r30, 0x3f	; 63
    22d2:	60 81       	ld	r22, Z
    22d4:	71 81       	ldd	r23, Z+1	; 0x01
    22d6:	82 81       	ldd	r24, Z+2	; 0x02
    22d8:	93 81       	ldd	r25, Z+3	; 0x03
    22da:	20 e0       	ldi	r18, 0x00	; 0
    22dc:	30 e0       	ldi	r19, 0x00	; 0
    22de:	40 e8       	ldi	r20, 0x80	; 128
    22e0:	5f e3       	ldi	r21, 0x3F	; 63
    22e2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22e6:	88 23       	and	r24, r24
    22e8:	2c f4       	brge	.+10     	; 0x22f4 <LCD_displayCharacter+0x39e>
		__ticks = 1;
    22ea:	81 e0       	ldi	r24, 0x01	; 1
    22ec:	90 e0       	ldi	r25, 0x00	; 0
    22ee:	9e af       	std	Y+62, r25	; 0x3e
    22f0:	8d af       	std	Y+61, r24	; 0x3d
    22f2:	46 c0       	rjmp	.+140    	; 0x2380 <LCD_displayCharacter+0x42a>
	else if (__tmp > 65535)
    22f4:	fe 01       	movw	r30, r28
    22f6:	ff 96       	adiw	r30, 0x3f	; 63
    22f8:	60 81       	ld	r22, Z
    22fa:	71 81       	ldd	r23, Z+1	; 0x01
    22fc:	82 81       	ldd	r24, Z+2	; 0x02
    22fe:	93 81       	ldd	r25, Z+3	; 0x03
    2300:	20 e0       	ldi	r18, 0x00	; 0
    2302:	3f ef       	ldi	r19, 0xFF	; 255
    2304:	4f e7       	ldi	r20, 0x7F	; 127
    2306:	57 e4       	ldi	r21, 0x47	; 71
    2308:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    230c:	18 16       	cp	r1, r24
    230e:	64 f5       	brge	.+88     	; 0x2368 <LCD_displayCharacter+0x412>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2310:	fe 01       	movw	r30, r28
    2312:	ed 5b       	subi	r30, 0xBD	; 189
    2314:	ff 4f       	sbci	r31, 0xFF	; 255
    2316:	60 81       	ld	r22, Z
    2318:	71 81       	ldd	r23, Z+1	; 0x01
    231a:	82 81       	ldd	r24, Z+2	; 0x02
    231c:	93 81       	ldd	r25, Z+3	; 0x03
    231e:	20 e0       	ldi	r18, 0x00	; 0
    2320:	30 e0       	ldi	r19, 0x00	; 0
    2322:	40 e2       	ldi	r20, 0x20	; 32
    2324:	51 e4       	ldi	r21, 0x41	; 65
    2326:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    232a:	dc 01       	movw	r26, r24
    232c:	cb 01       	movw	r24, r22
    232e:	bc 01       	movw	r22, r24
    2330:	cd 01       	movw	r24, r26
    2332:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2336:	dc 01       	movw	r26, r24
    2338:	cb 01       	movw	r24, r22
    233a:	9e af       	std	Y+62, r25	; 0x3e
    233c:	8d af       	std	Y+61, r24	; 0x3d
    233e:	0f c0       	rjmp	.+30     	; 0x235e <LCD_displayCharacter+0x408>
    2340:	88 ec       	ldi	r24, 0xC8	; 200
    2342:	90 e0       	ldi	r25, 0x00	; 0
    2344:	9c af       	std	Y+60, r25	; 0x3c
    2346:	8b af       	std	Y+59, r24	; 0x3b
    2348:	8b ad       	ldd	r24, Y+59	; 0x3b
    234a:	9c ad       	ldd	r25, Y+60	; 0x3c
    234c:	01 97       	sbiw	r24, 0x01	; 1
    234e:	f1 f7       	brne	.-4      	; 0x234c <LCD_displayCharacter+0x3f6>
    2350:	9c af       	std	Y+60, r25	; 0x3c
    2352:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2354:	8d ad       	ldd	r24, Y+61	; 0x3d
    2356:	9e ad       	ldd	r25, Y+62	; 0x3e
    2358:	01 97       	sbiw	r24, 0x01	; 1
    235a:	9e af       	std	Y+62, r25	; 0x3e
    235c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    235e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2360:	9e ad       	ldd	r25, Y+62	; 0x3e
    2362:	00 97       	sbiw	r24, 0x00	; 0
    2364:	69 f7       	brne	.-38     	; 0x2340 <LCD_displayCharacter+0x3ea>
    2366:	16 c0       	rjmp	.+44     	; 0x2394 <LCD_displayCharacter+0x43e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2368:	fe 01       	movw	r30, r28
    236a:	ff 96       	adiw	r30, 0x3f	; 63
    236c:	60 81       	ld	r22, Z
    236e:	71 81       	ldd	r23, Z+1	; 0x01
    2370:	82 81       	ldd	r24, Z+2	; 0x02
    2372:	93 81       	ldd	r25, Z+3	; 0x03
    2374:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2378:	dc 01       	movw	r26, r24
    237a:	cb 01       	movw	r24, r22
    237c:	9e af       	std	Y+62, r25	; 0x3e
    237e:	8d af       	std	Y+61, r24	; 0x3d
    2380:	8d ad       	ldd	r24, Y+61	; 0x3d
    2382:	9e ad       	ldd	r25, Y+62	; 0x3e
    2384:	9a af       	std	Y+58, r25	; 0x3a
    2386:	89 af       	std	Y+57, r24	; 0x39
    2388:	89 ad       	ldd	r24, Y+57	; 0x39
    238a:	9a ad       	ldd	r25, Y+58	; 0x3a
    238c:	01 97       	sbiw	r24, 0x01	; 1
    238e:	f1 f7       	brne	.-4      	; 0x238c <LCD_displayCharacter+0x436>
    2390:	9a af       	std	Y+58, r25	; 0x3a
    2392:	89 af       	std	Y+57, r24	; 0x39
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | ((data & 0xF0) >> 4);
#endif

	_delay_ms(1); /* Delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* Disable LCD E = 0 */
    2394:	ab e3       	ldi	r26, 0x3B	; 59
    2396:	b0 e0       	ldi	r27, 0x00	; 0
    2398:	eb e3       	ldi	r30, 0x3B	; 59
    239a:	f0 e0       	ldi	r31, 0x00	; 0
    239c:	80 81       	ld	r24, Z
    239e:	87 7f       	andi	r24, 0xF7	; 247
    23a0:	8c 93       	st	X, r24
    23a2:	80 e0       	ldi	r24, 0x00	; 0
    23a4:	90 e0       	ldi	r25, 0x00	; 0
    23a6:	a0 e8       	ldi	r26, 0x80	; 128
    23a8:	bf e3       	ldi	r27, 0x3F	; 63
    23aa:	8d ab       	std	Y+53, r24	; 0x35
    23ac:	9e ab       	std	Y+54, r25	; 0x36
    23ae:	af ab       	std	Y+55, r26	; 0x37
    23b0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23b2:	6d a9       	ldd	r22, Y+53	; 0x35
    23b4:	7e a9       	ldd	r23, Y+54	; 0x36
    23b6:	8f a9       	ldd	r24, Y+55	; 0x37
    23b8:	98 ad       	ldd	r25, Y+56	; 0x38
    23ba:	20 e0       	ldi	r18, 0x00	; 0
    23bc:	30 e0       	ldi	r19, 0x00	; 0
    23be:	4a ef       	ldi	r20, 0xFA	; 250
    23c0:	54 e4       	ldi	r21, 0x44	; 68
    23c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23c6:	dc 01       	movw	r26, r24
    23c8:	cb 01       	movw	r24, r22
    23ca:	89 ab       	std	Y+49, r24	; 0x31
    23cc:	9a ab       	std	Y+50, r25	; 0x32
    23ce:	ab ab       	std	Y+51, r26	; 0x33
    23d0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    23d2:	69 a9       	ldd	r22, Y+49	; 0x31
    23d4:	7a a9       	ldd	r23, Y+50	; 0x32
    23d6:	8b a9       	ldd	r24, Y+51	; 0x33
    23d8:	9c a9       	ldd	r25, Y+52	; 0x34
    23da:	20 e0       	ldi	r18, 0x00	; 0
    23dc:	30 e0       	ldi	r19, 0x00	; 0
    23de:	40 e8       	ldi	r20, 0x80	; 128
    23e0:	5f e3       	ldi	r21, 0x3F	; 63
    23e2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23e6:	88 23       	and	r24, r24
    23e8:	2c f4       	brge	.+10     	; 0x23f4 <LCD_displayCharacter+0x49e>
		__ticks = 1;
    23ea:	81 e0       	ldi	r24, 0x01	; 1
    23ec:	90 e0       	ldi	r25, 0x00	; 0
    23ee:	98 ab       	std	Y+48, r25	; 0x30
    23f0:	8f a7       	std	Y+47, r24	; 0x2f
    23f2:	3f c0       	rjmp	.+126    	; 0x2472 <LCD_displayCharacter+0x51c>
	else if (__tmp > 65535)
    23f4:	69 a9       	ldd	r22, Y+49	; 0x31
    23f6:	7a a9       	ldd	r23, Y+50	; 0x32
    23f8:	8b a9       	ldd	r24, Y+51	; 0x33
    23fa:	9c a9       	ldd	r25, Y+52	; 0x34
    23fc:	20 e0       	ldi	r18, 0x00	; 0
    23fe:	3f ef       	ldi	r19, 0xFF	; 255
    2400:	4f e7       	ldi	r20, 0x7F	; 127
    2402:	57 e4       	ldi	r21, 0x47	; 71
    2404:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2408:	18 16       	cp	r1, r24
    240a:	4c f5       	brge	.+82     	; 0x245e <LCD_displayCharacter+0x508>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    240c:	6d a9       	ldd	r22, Y+53	; 0x35
    240e:	7e a9       	ldd	r23, Y+54	; 0x36
    2410:	8f a9       	ldd	r24, Y+55	; 0x37
    2412:	98 ad       	ldd	r25, Y+56	; 0x38
    2414:	20 e0       	ldi	r18, 0x00	; 0
    2416:	30 e0       	ldi	r19, 0x00	; 0
    2418:	40 e2       	ldi	r20, 0x20	; 32
    241a:	51 e4       	ldi	r21, 0x41	; 65
    241c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2420:	dc 01       	movw	r26, r24
    2422:	cb 01       	movw	r24, r22
    2424:	bc 01       	movw	r22, r24
    2426:	cd 01       	movw	r24, r26
    2428:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    242c:	dc 01       	movw	r26, r24
    242e:	cb 01       	movw	r24, r22
    2430:	98 ab       	std	Y+48, r25	; 0x30
    2432:	8f a7       	std	Y+47, r24	; 0x2f
    2434:	0f c0       	rjmp	.+30     	; 0x2454 <LCD_displayCharacter+0x4fe>
    2436:	88 ec       	ldi	r24, 0xC8	; 200
    2438:	90 e0       	ldi	r25, 0x00	; 0
    243a:	9e a7       	std	Y+46, r25	; 0x2e
    243c:	8d a7       	std	Y+45, r24	; 0x2d
    243e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2440:	9e a5       	ldd	r25, Y+46	; 0x2e
    2442:	01 97       	sbiw	r24, 0x01	; 1
    2444:	f1 f7       	brne	.-4      	; 0x2442 <LCD_displayCharacter+0x4ec>
    2446:	9e a7       	std	Y+46, r25	; 0x2e
    2448:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    244a:	8f a5       	ldd	r24, Y+47	; 0x2f
    244c:	98 a9       	ldd	r25, Y+48	; 0x30
    244e:	01 97       	sbiw	r24, 0x01	; 1
    2450:	98 ab       	std	Y+48, r25	; 0x30
    2452:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2454:	8f a5       	ldd	r24, Y+47	; 0x2f
    2456:	98 a9       	ldd	r25, Y+48	; 0x30
    2458:	00 97       	sbiw	r24, 0x00	; 0
    245a:	69 f7       	brne	.-38     	; 0x2436 <LCD_displayCharacter+0x4e0>
    245c:	14 c0       	rjmp	.+40     	; 0x2486 <LCD_displayCharacter+0x530>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    245e:	69 a9       	ldd	r22, Y+49	; 0x31
    2460:	7a a9       	ldd	r23, Y+50	; 0x32
    2462:	8b a9       	ldd	r24, Y+51	; 0x33
    2464:	9c a9       	ldd	r25, Y+52	; 0x34
    2466:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    246a:	dc 01       	movw	r26, r24
    246c:	cb 01       	movw	r24, r22
    246e:	98 ab       	std	Y+48, r25	; 0x30
    2470:	8f a7       	std	Y+47, r24	; 0x2f
    2472:	8f a5       	ldd	r24, Y+47	; 0x2f
    2474:	98 a9       	ldd	r25, Y+48	; 0x30
    2476:	9c a7       	std	Y+44, r25	; 0x2c
    2478:	8b a7       	std	Y+43, r24	; 0x2b
    247a:	8b a5       	ldd	r24, Y+43	; 0x2b
    247c:	9c a5       	ldd	r25, Y+44	; 0x2c
    247e:	01 97       	sbiw	r24, 0x01	; 1
    2480:	f1 f7       	brne	.-4      	; 0x247e <LCD_displayCharacter+0x528>
    2482:	9c a7       	std	Y+44, r25	; 0x2c
    2484:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* Delay for processing Th = 13ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    2486:	ab e3       	ldi	r26, 0x3B	; 59
    2488:	b0 e0       	ldi	r27, 0x00	; 0
    248a:	eb e3       	ldi	r30, 0x3B	; 59
    248c:	f0 e0       	ldi	r31, 0x00	; 0
    248e:	80 81       	ld	r24, Z
    2490:	88 60       	ori	r24, 0x08	; 8
    2492:	8c 93       	st	X, r24
    2494:	80 e0       	ldi	r24, 0x00	; 0
    2496:	90 e0       	ldi	r25, 0x00	; 0
    2498:	a0 e8       	ldi	r26, 0x80	; 128
    249a:	bf e3       	ldi	r27, 0x3F	; 63
    249c:	8f a3       	std	Y+39, r24	; 0x27
    249e:	98 a7       	std	Y+40, r25	; 0x28
    24a0:	a9 a7       	std	Y+41, r26	; 0x29
    24a2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24a4:	6f a1       	ldd	r22, Y+39	; 0x27
    24a6:	78 a5       	ldd	r23, Y+40	; 0x28
    24a8:	89 a5       	ldd	r24, Y+41	; 0x29
    24aa:	9a a5       	ldd	r25, Y+42	; 0x2a
    24ac:	20 e0       	ldi	r18, 0x00	; 0
    24ae:	30 e0       	ldi	r19, 0x00	; 0
    24b0:	4a ef       	ldi	r20, 0xFA	; 250
    24b2:	54 e4       	ldi	r21, 0x44	; 68
    24b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24b8:	dc 01       	movw	r26, r24
    24ba:	cb 01       	movw	r24, r22
    24bc:	8b a3       	std	Y+35, r24	; 0x23
    24be:	9c a3       	std	Y+36, r25	; 0x24
    24c0:	ad a3       	std	Y+37, r26	; 0x25
    24c2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    24c4:	6b a1       	ldd	r22, Y+35	; 0x23
    24c6:	7c a1       	ldd	r23, Y+36	; 0x24
    24c8:	8d a1       	ldd	r24, Y+37	; 0x25
    24ca:	9e a1       	ldd	r25, Y+38	; 0x26
    24cc:	20 e0       	ldi	r18, 0x00	; 0
    24ce:	30 e0       	ldi	r19, 0x00	; 0
    24d0:	40 e8       	ldi	r20, 0x80	; 128
    24d2:	5f e3       	ldi	r21, 0x3F	; 63
    24d4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24d8:	88 23       	and	r24, r24
    24da:	2c f4       	brge	.+10     	; 0x24e6 <LCD_displayCharacter+0x590>
		__ticks = 1;
    24dc:	81 e0       	ldi	r24, 0x01	; 1
    24de:	90 e0       	ldi	r25, 0x00	; 0
    24e0:	9a a3       	std	Y+34, r25	; 0x22
    24e2:	89 a3       	std	Y+33, r24	; 0x21
    24e4:	3f c0       	rjmp	.+126    	; 0x2564 <LCD_displayCharacter+0x60e>
	else if (__tmp > 65535)
    24e6:	6b a1       	ldd	r22, Y+35	; 0x23
    24e8:	7c a1       	ldd	r23, Y+36	; 0x24
    24ea:	8d a1       	ldd	r24, Y+37	; 0x25
    24ec:	9e a1       	ldd	r25, Y+38	; 0x26
    24ee:	20 e0       	ldi	r18, 0x00	; 0
    24f0:	3f ef       	ldi	r19, 0xFF	; 255
    24f2:	4f e7       	ldi	r20, 0x7F	; 127
    24f4:	57 e4       	ldi	r21, 0x47	; 71
    24f6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24fa:	18 16       	cp	r1, r24
    24fc:	4c f5       	brge	.+82     	; 0x2550 <LCD_displayCharacter+0x5fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24fe:	6f a1       	ldd	r22, Y+39	; 0x27
    2500:	78 a5       	ldd	r23, Y+40	; 0x28
    2502:	89 a5       	ldd	r24, Y+41	; 0x29
    2504:	9a a5       	ldd	r25, Y+42	; 0x2a
    2506:	20 e0       	ldi	r18, 0x00	; 0
    2508:	30 e0       	ldi	r19, 0x00	; 0
    250a:	40 e2       	ldi	r20, 0x20	; 32
    250c:	51 e4       	ldi	r21, 0x41	; 65
    250e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2512:	dc 01       	movw	r26, r24
    2514:	cb 01       	movw	r24, r22
    2516:	bc 01       	movw	r22, r24
    2518:	cd 01       	movw	r24, r26
    251a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    251e:	dc 01       	movw	r26, r24
    2520:	cb 01       	movw	r24, r22
    2522:	9a a3       	std	Y+34, r25	; 0x22
    2524:	89 a3       	std	Y+33, r24	; 0x21
    2526:	0f c0       	rjmp	.+30     	; 0x2546 <LCD_displayCharacter+0x5f0>
    2528:	88 ec       	ldi	r24, 0xC8	; 200
    252a:	90 e0       	ldi	r25, 0x00	; 0
    252c:	98 a3       	std	Y+32, r25	; 0x20
    252e:	8f 8f       	std	Y+31, r24	; 0x1f
    2530:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2532:	98 a1       	ldd	r25, Y+32	; 0x20
    2534:	01 97       	sbiw	r24, 0x01	; 1
    2536:	f1 f7       	brne	.-4      	; 0x2534 <LCD_displayCharacter+0x5de>
    2538:	98 a3       	std	Y+32, r25	; 0x20
    253a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    253c:	89 a1       	ldd	r24, Y+33	; 0x21
    253e:	9a a1       	ldd	r25, Y+34	; 0x22
    2540:	01 97       	sbiw	r24, 0x01	; 1
    2542:	9a a3       	std	Y+34, r25	; 0x22
    2544:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2546:	89 a1       	ldd	r24, Y+33	; 0x21
    2548:	9a a1       	ldd	r25, Y+34	; 0x22
    254a:	00 97       	sbiw	r24, 0x00	; 0
    254c:	69 f7       	brne	.-38     	; 0x2528 <LCD_displayCharacter+0x5d2>
    254e:	14 c0       	rjmp	.+40     	; 0x2578 <LCD_displayCharacter+0x622>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2550:	6b a1       	ldd	r22, Y+35	; 0x23
    2552:	7c a1       	ldd	r23, Y+36	; 0x24
    2554:	8d a1       	ldd	r24, Y+37	; 0x25
    2556:	9e a1       	ldd	r25, Y+38	; 0x26
    2558:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    255c:	dc 01       	movw	r26, r24
    255e:	cb 01       	movw	r24, r22
    2560:	9a a3       	std	Y+34, r25	; 0x22
    2562:	89 a3       	std	Y+33, r24	; 0x21
    2564:	89 a1       	ldd	r24, Y+33	; 0x21
    2566:	9a a1       	ldd	r25, Y+34	; 0x22
    2568:	9e 8f       	std	Y+30, r25	; 0x1e
    256a:	8d 8f       	std	Y+29, r24	; 0x1d
    256c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    256e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2570:	01 97       	sbiw	r24, 0x01	; 1
    2572:	f1 f7       	brne	.-4      	; 0x2570 <LCD_displayCharacter+0x61a>
    2574:	9e 8f       	std	Y+30, r25	; 0x1e
    2576:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* Delay for processing Tpw - Tdws = 190ns */

	/* Out the lowest 4 bits of the required data to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | ((data & 0x0F) << 4);
    2578:	ab e3       	ldi	r26, 0x3B	; 59
    257a:	b0 e0       	ldi	r27, 0x00	; 0
    257c:	eb e3       	ldi	r30, 0x3B	; 59
    257e:	f0 e0       	ldi	r31, 0x00	; 0
    2580:	80 81       	ld	r24, Z
    2582:	28 2f       	mov	r18, r24
    2584:	2f 70       	andi	r18, 0x0F	; 15
    2586:	fe 01       	movw	r30, r28
    2588:	ed 59       	subi	r30, 0x9D	; 157
    258a:	ff 4f       	sbci	r31, 0xFF	; 255
    258c:	80 81       	ld	r24, Z
    258e:	88 2f       	mov	r24, r24
    2590:	90 e0       	ldi	r25, 0x00	; 0
    2592:	82 95       	swap	r24
    2594:	92 95       	swap	r25
    2596:	90 7f       	andi	r25, 0xF0	; 240
    2598:	98 27       	eor	r25, r24
    259a:	80 7f       	andi	r24, 0xF0	; 240
    259c:	98 27       	eor	r25, r24
    259e:	82 2b       	or	r24, r18
    25a0:	8c 93       	st	X, r24
    25a2:	80 e0       	ldi	r24, 0x00	; 0
    25a4:	90 e0       	ldi	r25, 0x00	; 0
    25a6:	a0 e8       	ldi	r26, 0x80	; 128
    25a8:	bf e3       	ldi	r27, 0x3F	; 63
    25aa:	89 8f       	std	Y+25, r24	; 0x19
    25ac:	9a 8f       	std	Y+26, r25	; 0x1a
    25ae:	ab 8f       	std	Y+27, r26	; 0x1b
    25b0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25b2:	69 8d       	ldd	r22, Y+25	; 0x19
    25b4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    25b6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25b8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25ba:	20 e0       	ldi	r18, 0x00	; 0
    25bc:	30 e0       	ldi	r19, 0x00	; 0
    25be:	4a ef       	ldi	r20, 0xFA	; 250
    25c0:	54 e4       	ldi	r21, 0x44	; 68
    25c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25c6:	dc 01       	movw	r26, r24
    25c8:	cb 01       	movw	r24, r22
    25ca:	8d 8b       	std	Y+21, r24	; 0x15
    25cc:	9e 8b       	std	Y+22, r25	; 0x16
    25ce:	af 8b       	std	Y+23, r26	; 0x17
    25d0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    25d2:	6d 89       	ldd	r22, Y+21	; 0x15
    25d4:	7e 89       	ldd	r23, Y+22	; 0x16
    25d6:	8f 89       	ldd	r24, Y+23	; 0x17
    25d8:	98 8d       	ldd	r25, Y+24	; 0x18
    25da:	20 e0       	ldi	r18, 0x00	; 0
    25dc:	30 e0       	ldi	r19, 0x00	; 0
    25de:	40 e8       	ldi	r20, 0x80	; 128
    25e0:	5f e3       	ldi	r21, 0x3F	; 63
    25e2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25e6:	88 23       	and	r24, r24
    25e8:	2c f4       	brge	.+10     	; 0x25f4 <LCD_displayCharacter+0x69e>
		__ticks = 1;
    25ea:	81 e0       	ldi	r24, 0x01	; 1
    25ec:	90 e0       	ldi	r25, 0x00	; 0
    25ee:	9c 8b       	std	Y+20, r25	; 0x14
    25f0:	8b 8b       	std	Y+19, r24	; 0x13
    25f2:	3f c0       	rjmp	.+126    	; 0x2672 <LCD_displayCharacter+0x71c>
	else if (__tmp > 65535)
    25f4:	6d 89       	ldd	r22, Y+21	; 0x15
    25f6:	7e 89       	ldd	r23, Y+22	; 0x16
    25f8:	8f 89       	ldd	r24, Y+23	; 0x17
    25fa:	98 8d       	ldd	r25, Y+24	; 0x18
    25fc:	20 e0       	ldi	r18, 0x00	; 0
    25fe:	3f ef       	ldi	r19, 0xFF	; 255
    2600:	4f e7       	ldi	r20, 0x7F	; 127
    2602:	57 e4       	ldi	r21, 0x47	; 71
    2604:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2608:	18 16       	cp	r1, r24
    260a:	4c f5       	brge	.+82     	; 0x265e <LCD_displayCharacter+0x708>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    260c:	69 8d       	ldd	r22, Y+25	; 0x19
    260e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2610:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2612:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2614:	20 e0       	ldi	r18, 0x00	; 0
    2616:	30 e0       	ldi	r19, 0x00	; 0
    2618:	40 e2       	ldi	r20, 0x20	; 32
    261a:	51 e4       	ldi	r21, 0x41	; 65
    261c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2620:	dc 01       	movw	r26, r24
    2622:	cb 01       	movw	r24, r22
    2624:	bc 01       	movw	r22, r24
    2626:	cd 01       	movw	r24, r26
    2628:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    262c:	dc 01       	movw	r26, r24
    262e:	cb 01       	movw	r24, r22
    2630:	9c 8b       	std	Y+20, r25	; 0x14
    2632:	8b 8b       	std	Y+19, r24	; 0x13
    2634:	0f c0       	rjmp	.+30     	; 0x2654 <LCD_displayCharacter+0x6fe>
    2636:	88 ec       	ldi	r24, 0xC8	; 200
    2638:	90 e0       	ldi	r25, 0x00	; 0
    263a:	9a 8b       	std	Y+18, r25	; 0x12
    263c:	89 8b       	std	Y+17, r24	; 0x11
    263e:	89 89       	ldd	r24, Y+17	; 0x11
    2640:	9a 89       	ldd	r25, Y+18	; 0x12
    2642:	01 97       	sbiw	r24, 0x01	; 1
    2644:	f1 f7       	brne	.-4      	; 0x2642 <LCD_displayCharacter+0x6ec>
    2646:	9a 8b       	std	Y+18, r25	; 0x12
    2648:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    264a:	8b 89       	ldd	r24, Y+19	; 0x13
    264c:	9c 89       	ldd	r25, Y+20	; 0x14
    264e:	01 97       	sbiw	r24, 0x01	; 1
    2650:	9c 8b       	std	Y+20, r25	; 0x14
    2652:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2654:	8b 89       	ldd	r24, Y+19	; 0x13
    2656:	9c 89       	ldd	r25, Y+20	; 0x14
    2658:	00 97       	sbiw	r24, 0x00	; 0
    265a:	69 f7       	brne	.-38     	; 0x2636 <LCD_displayCharacter+0x6e0>
    265c:	14 c0       	rjmp	.+40     	; 0x2686 <LCD_displayCharacter+0x730>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    265e:	6d 89       	ldd	r22, Y+21	; 0x15
    2660:	7e 89       	ldd	r23, Y+22	; 0x16
    2662:	8f 89       	ldd	r24, Y+23	; 0x17
    2664:	98 8d       	ldd	r25, Y+24	; 0x18
    2666:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    266a:	dc 01       	movw	r26, r24
    266c:	cb 01       	movw	r24, r22
    266e:	9c 8b       	std	Y+20, r25	; 0x14
    2670:	8b 8b       	std	Y+19, r24	; 0x13
    2672:	8b 89       	ldd	r24, Y+19	; 0x13
    2674:	9c 89       	ldd	r25, Y+20	; 0x14
    2676:	98 8b       	std	Y+16, r25	; 0x10
    2678:	8f 87       	std	Y+15, r24	; 0x0f
    267a:	8f 85       	ldd	r24, Y+15	; 0x0f
    267c:	98 89       	ldd	r25, Y+16	; 0x10
    267e:	01 97       	sbiw	r24, 0x01	; 1
    2680:	f1 f7       	brne	.-4      	; 0x267e <LCD_displayCharacter+0x728>
    2682:	98 8b       	std	Y+16, r25	; 0x10
    2684:	8f 87       	std	Y+15, r24	; 0x0f
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | (data & 0x0F);
#endif

	_delay_ms(1); /* Delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E = 0 */
    2686:	ab e3       	ldi	r26, 0x3B	; 59
    2688:	b0 e0       	ldi	r27, 0x00	; 0
    268a:	eb e3       	ldi	r30, 0x3B	; 59
    268c:	f0 e0       	ldi	r31, 0x00	; 0
    268e:	80 81       	ld	r24, Z
    2690:	87 7f       	andi	r24, 0xF7	; 247
    2692:	8c 93       	st	X, r24
    2694:	80 e0       	ldi	r24, 0x00	; 0
    2696:	90 e0       	ldi	r25, 0x00	; 0
    2698:	a0 e8       	ldi	r26, 0x80	; 128
    269a:	bf e3       	ldi	r27, 0x3F	; 63
    269c:	8b 87       	std	Y+11, r24	; 0x0b
    269e:	9c 87       	std	Y+12, r25	; 0x0c
    26a0:	ad 87       	std	Y+13, r26	; 0x0d
    26a2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26a4:	6b 85       	ldd	r22, Y+11	; 0x0b
    26a6:	7c 85       	ldd	r23, Y+12	; 0x0c
    26a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    26aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    26ac:	20 e0       	ldi	r18, 0x00	; 0
    26ae:	30 e0       	ldi	r19, 0x00	; 0
    26b0:	4a ef       	ldi	r20, 0xFA	; 250
    26b2:	54 e4       	ldi	r21, 0x44	; 68
    26b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26b8:	dc 01       	movw	r26, r24
    26ba:	cb 01       	movw	r24, r22
    26bc:	8f 83       	std	Y+7, r24	; 0x07
    26be:	98 87       	std	Y+8, r25	; 0x08
    26c0:	a9 87       	std	Y+9, r26	; 0x09
    26c2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    26c4:	6f 81       	ldd	r22, Y+7	; 0x07
    26c6:	78 85       	ldd	r23, Y+8	; 0x08
    26c8:	89 85       	ldd	r24, Y+9	; 0x09
    26ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    26cc:	20 e0       	ldi	r18, 0x00	; 0
    26ce:	30 e0       	ldi	r19, 0x00	; 0
    26d0:	40 e8       	ldi	r20, 0x80	; 128
    26d2:	5f e3       	ldi	r21, 0x3F	; 63
    26d4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26d8:	88 23       	and	r24, r24
    26da:	2c f4       	brge	.+10     	; 0x26e6 <LCD_displayCharacter+0x790>
		__ticks = 1;
    26dc:	81 e0       	ldi	r24, 0x01	; 1
    26de:	90 e0       	ldi	r25, 0x00	; 0
    26e0:	9e 83       	std	Y+6, r25	; 0x06
    26e2:	8d 83       	std	Y+5, r24	; 0x05
    26e4:	3f c0       	rjmp	.+126    	; 0x2764 <LCD_displayCharacter+0x80e>
	else if (__tmp > 65535)
    26e6:	6f 81       	ldd	r22, Y+7	; 0x07
    26e8:	78 85       	ldd	r23, Y+8	; 0x08
    26ea:	89 85       	ldd	r24, Y+9	; 0x09
    26ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    26ee:	20 e0       	ldi	r18, 0x00	; 0
    26f0:	3f ef       	ldi	r19, 0xFF	; 255
    26f2:	4f e7       	ldi	r20, 0x7F	; 127
    26f4:	57 e4       	ldi	r21, 0x47	; 71
    26f6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26fa:	18 16       	cp	r1, r24
    26fc:	4c f5       	brge	.+82     	; 0x2750 <LCD_displayCharacter+0x7fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    2700:	7c 85       	ldd	r23, Y+12	; 0x0c
    2702:	8d 85       	ldd	r24, Y+13	; 0x0d
    2704:	9e 85       	ldd	r25, Y+14	; 0x0e
    2706:	20 e0       	ldi	r18, 0x00	; 0
    2708:	30 e0       	ldi	r19, 0x00	; 0
    270a:	40 e2       	ldi	r20, 0x20	; 32
    270c:	51 e4       	ldi	r21, 0x41	; 65
    270e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2712:	dc 01       	movw	r26, r24
    2714:	cb 01       	movw	r24, r22
    2716:	bc 01       	movw	r22, r24
    2718:	cd 01       	movw	r24, r26
    271a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    271e:	dc 01       	movw	r26, r24
    2720:	cb 01       	movw	r24, r22
    2722:	9e 83       	std	Y+6, r25	; 0x06
    2724:	8d 83       	std	Y+5, r24	; 0x05
    2726:	0f c0       	rjmp	.+30     	; 0x2746 <LCD_displayCharacter+0x7f0>
    2728:	88 ec       	ldi	r24, 0xC8	; 200
    272a:	90 e0       	ldi	r25, 0x00	; 0
    272c:	9c 83       	std	Y+4, r25	; 0x04
    272e:	8b 83       	std	Y+3, r24	; 0x03
    2730:	8b 81       	ldd	r24, Y+3	; 0x03
    2732:	9c 81       	ldd	r25, Y+4	; 0x04
    2734:	01 97       	sbiw	r24, 0x01	; 1
    2736:	f1 f7       	brne	.-4      	; 0x2734 <LCD_displayCharacter+0x7de>
    2738:	9c 83       	std	Y+4, r25	; 0x04
    273a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    273c:	8d 81       	ldd	r24, Y+5	; 0x05
    273e:	9e 81       	ldd	r25, Y+6	; 0x06
    2740:	01 97       	sbiw	r24, 0x01	; 1
    2742:	9e 83       	std	Y+6, r25	; 0x06
    2744:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2746:	8d 81       	ldd	r24, Y+5	; 0x05
    2748:	9e 81       	ldd	r25, Y+6	; 0x06
    274a:	00 97       	sbiw	r24, 0x00	; 0
    274c:	69 f7       	brne	.-38     	; 0x2728 <LCD_displayCharacter+0x7d2>
    274e:	14 c0       	rjmp	.+40     	; 0x2778 <LCD_displayCharacter+0x822>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2750:	6f 81       	ldd	r22, Y+7	; 0x07
    2752:	78 85       	ldd	r23, Y+8	; 0x08
    2754:	89 85       	ldd	r24, Y+9	; 0x09
    2756:	9a 85       	ldd	r25, Y+10	; 0x0a
    2758:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    275c:	dc 01       	movw	r26, r24
    275e:	cb 01       	movw	r24, r22
    2760:	9e 83       	std	Y+6, r25	; 0x06
    2762:	8d 83       	std	Y+5, r24	; 0x05
    2764:	8d 81       	ldd	r24, Y+5	; 0x05
    2766:	9e 81       	ldd	r25, Y+6	; 0x06
    2768:	9a 83       	std	Y+2, r25	; 0x02
    276a:	89 83       	std	Y+1, r24	; 0x01
    276c:	89 81       	ldd	r24, Y+1	; 0x01
    276e:	9a 81       	ldd	r25, Y+2	; 0x02
    2770:	01 97       	sbiw	r24, 0x01	; 1
    2772:	f1 f7       	brne	.-4      	; 0x2770 <LCD_displayCharacter+0x81a>
    2774:	9a 83       	std	Y+2, r25	; 0x02
    2776:	89 83       	std	Y+1, r24	; 0x01
	LCD_DATA_PORT = data; /* Out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* Delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* Disable LCD E = 0 */
	_delay_ms(1); /* Delay for processing Th = 13ns */
#endif
}
    2778:	cd 59       	subi	r28, 0x9D	; 157
    277a:	df 4f       	sbci	r29, 0xFF	; 255
    277c:	0f b6       	in	r0, 0x3f	; 63
    277e:	f8 94       	cli
    2780:	de bf       	out	0x3e, r29	; 62
    2782:	0f be       	out	0x3f, r0	; 63
    2784:	cd bf       	out	0x3d, r28	; 61
    2786:	cf 91       	pop	r28
    2788:	df 91       	pop	r29
    278a:	1f 91       	pop	r17
    278c:	0f 91       	pop	r16
    278e:	08 95       	ret

00002790 <LCD_displayString>:

void LCD_displayString(const uint8_t * Str)
{
    2790:	df 93       	push	r29
    2792:	cf 93       	push	r28
    2794:	00 d0       	rcall	.+0      	; 0x2796 <LCD_displayString+0x6>
    2796:	0f 92       	push	r0
    2798:	cd b7       	in	r28, 0x3d	; 61
    279a:	de b7       	in	r29, 0x3e	; 62
    279c:	9b 83       	std	Y+3, r25	; 0x03
    279e:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t i = 0;
    27a0:	19 82       	std	Y+1, r1	; 0x01
    27a2:	0e c0       	rjmp	.+28     	; 0x27c0 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    27a4:	89 81       	ldd	r24, Y+1	; 0x01
    27a6:	28 2f       	mov	r18, r24
    27a8:	30 e0       	ldi	r19, 0x00	; 0
    27aa:	8a 81       	ldd	r24, Y+2	; 0x02
    27ac:	9b 81       	ldd	r25, Y+3	; 0x03
    27ae:	fc 01       	movw	r30, r24
    27b0:	e2 0f       	add	r30, r18
    27b2:	f3 1f       	adc	r31, r19
    27b4:	80 81       	ld	r24, Z
    27b6:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <LCD_displayCharacter>
		i++;
    27ba:	89 81       	ldd	r24, Y+1	; 0x01
    27bc:	8f 5f       	subi	r24, 0xFF	; 255
    27be:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const uint8_t * Str)
{
	uint8_t i = 0;
	while(Str[i] != '\0')
    27c0:	89 81       	ldd	r24, Y+1	; 0x01
    27c2:	28 2f       	mov	r18, r24
    27c4:	30 e0       	ldi	r19, 0x00	; 0
    27c6:	8a 81       	ldd	r24, Y+2	; 0x02
    27c8:	9b 81       	ldd	r25, Y+3	; 0x03
    27ca:	fc 01       	movw	r30, r24
    27cc:	e2 0f       	add	r30, r18
    27ce:	f3 1f       	adc	r31, r19
    27d0:	80 81       	ld	r24, Z
    27d2:	88 23       	and	r24, r24
    27d4:	39 f7       	brne	.-50     	; 0x27a4 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(Str[i]);
		i++;
	}
}
    27d6:	0f 90       	pop	r0
    27d8:	0f 90       	pop	r0
    27da:	0f 90       	pop	r0
    27dc:	cf 91       	pop	r28
    27de:	df 91       	pop	r29
    27e0:	08 95       	ret

000027e2 <LCD_goToRowColumn>:

void LCD_goToRowColumn(uint8_t row, uint8_t col)
{
    27e2:	df 93       	push	r29
    27e4:	cf 93       	push	r28
    27e6:	00 d0       	rcall	.+0      	; 0x27e8 <LCD_goToRowColumn+0x6>
    27e8:	00 d0       	rcall	.+0      	; 0x27ea <LCD_goToRowColumn+0x8>
    27ea:	0f 92       	push	r0
    27ec:	cd b7       	in	r28, 0x3d	; 61
    27ee:	de b7       	in	r29, 0x3e	; 62
    27f0:	8a 83       	std	Y+2, r24	; 0x02
    27f2:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t Address;
	
	/* First of all calculate the required address */
	switch(row)
    27f4:	8a 81       	ldd	r24, Y+2	; 0x02
    27f6:	28 2f       	mov	r18, r24
    27f8:	30 e0       	ldi	r19, 0x00	; 0
    27fa:	3d 83       	std	Y+5, r19	; 0x05
    27fc:	2c 83       	std	Y+4, r18	; 0x04
    27fe:	8c 81       	ldd	r24, Y+4	; 0x04
    2800:	9d 81       	ldd	r25, Y+5	; 0x05
    2802:	81 30       	cpi	r24, 0x01	; 1
    2804:	91 05       	cpc	r25, r1
    2806:	c1 f0       	breq	.+48     	; 0x2838 <LCD_goToRowColumn+0x56>
    2808:	2c 81       	ldd	r18, Y+4	; 0x04
    280a:	3d 81       	ldd	r19, Y+5	; 0x05
    280c:	22 30       	cpi	r18, 0x02	; 2
    280e:	31 05       	cpc	r19, r1
    2810:	2c f4       	brge	.+10     	; 0x281c <LCD_goToRowColumn+0x3a>
    2812:	8c 81       	ldd	r24, Y+4	; 0x04
    2814:	9d 81       	ldd	r25, Y+5	; 0x05
    2816:	00 97       	sbiw	r24, 0x00	; 0
    2818:	61 f0       	breq	.+24     	; 0x2832 <LCD_goToRowColumn+0x50>
    281a:	19 c0       	rjmp	.+50     	; 0x284e <LCD_goToRowColumn+0x6c>
    281c:	2c 81       	ldd	r18, Y+4	; 0x04
    281e:	3d 81       	ldd	r19, Y+5	; 0x05
    2820:	22 30       	cpi	r18, 0x02	; 2
    2822:	31 05       	cpc	r19, r1
    2824:	69 f0       	breq	.+26     	; 0x2840 <LCD_goToRowColumn+0x5e>
    2826:	8c 81       	ldd	r24, Y+4	; 0x04
    2828:	9d 81       	ldd	r25, Y+5	; 0x05
    282a:	83 30       	cpi	r24, 0x03	; 3
    282c:	91 05       	cpc	r25, r1
    282e:	61 f0       	breq	.+24     	; 0x2848 <LCD_goToRowColumn+0x66>
    2830:	0e c0       	rjmp	.+28     	; 0x284e <LCD_goToRowColumn+0x6c>
	{
		case 0:
				Address=col;
    2832:	8b 81       	ldd	r24, Y+3	; 0x03
    2834:	89 83       	std	Y+1, r24	; 0x01
    2836:	0b c0       	rjmp	.+22     	; 0x284e <LCD_goToRowColumn+0x6c>
				break;
		case 1:
				Address=col+0x40;
    2838:	8b 81       	ldd	r24, Y+3	; 0x03
    283a:	80 5c       	subi	r24, 0xC0	; 192
    283c:	89 83       	std	Y+1, r24	; 0x01
    283e:	07 c0       	rjmp	.+14     	; 0x284e <LCD_goToRowColumn+0x6c>
				break;
		case 2:
				Address=col+0x10;
    2840:	8b 81       	ldd	r24, Y+3	; 0x03
    2842:	80 5f       	subi	r24, 0xF0	; 240
    2844:	89 83       	std	Y+1, r24	; 0x01
    2846:	03 c0       	rjmp	.+6      	; 0x284e <LCD_goToRowColumn+0x6c>
				break;
		case 3:
				Address=col+0x50;
    2848:	8b 81       	ldd	r24, Y+3	; 0x03
    284a:	80 5b       	subi	r24, 0xB0	; 176
    284c:	89 83       	std	Y+1, r24	; 0x01
	}					
	/* 
	 * To write to a specific address in the LCD 
	 * we need to apply the corresponding command 0b10000000+Address 
	 */
	LCD_sendCommand(Address | SET_CURSOR_LOCATION); 
    284e:	89 81       	ldd	r24, Y+1	; 0x01
    2850:	80 68       	ori	r24, 0x80	; 128
    2852:	0e 94 8e 0b 	call	0x171c	; 0x171c <LCD_sendCommand>
}
    2856:	0f 90       	pop	r0
    2858:	0f 90       	pop	r0
    285a:	0f 90       	pop	r0
    285c:	0f 90       	pop	r0
    285e:	0f 90       	pop	r0
    2860:	cf 91       	pop	r28
    2862:	df 91       	pop	r29
    2864:	08 95       	ret

00002866 <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8_t row, uint8_t col, const char * Str)
{
    2866:	df 93       	push	r29
    2868:	cf 93       	push	r28
    286a:	00 d0       	rcall	.+0      	; 0x286c <LCD_displayStringRowColumn+0x6>
    286c:	00 d0       	rcall	.+0      	; 0x286e <LCD_displayStringRowColumn+0x8>
    286e:	cd b7       	in	r28, 0x3d	; 61
    2870:	de b7       	in	r29, 0x3e	; 62
    2872:	89 83       	std	Y+1, r24	; 0x01
    2874:	6a 83       	std	Y+2, r22	; 0x02
    2876:	5c 83       	std	Y+4, r21	; 0x04
    2878:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(row, col); /* Go to to the required LCD position */
    287a:	89 81       	ldd	r24, Y+1	; 0x01
    287c:	6a 81       	ldd	r22, Y+2	; 0x02
    287e:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <LCD_goToRowColumn>
	LCD_displayString(Str); /* Display the string */
    2882:	8b 81       	ldd	r24, Y+3	; 0x03
    2884:	9c 81       	ldd	r25, Y+4	; 0x04
    2886:	0e 94 c8 13 	call	0x2790	; 0x2790 <LCD_displayString>
}
    288a:	0f 90       	pop	r0
    288c:	0f 90       	pop	r0
    288e:	0f 90       	pop	r0
    2890:	0f 90       	pop	r0
    2892:	cf 91       	pop	r28
    2894:	df 91       	pop	r29
    2896:	08 95       	ret

00002898 <LCD_intgerToString>:

void LCD_intgerToString(uint32_t data)
{
    2898:	df 93       	push	r29
    289a:	cf 93       	push	r28
    289c:	cd b7       	in	r28, 0x3d	; 61
    289e:	de b7       	in	r29, 0x3e	; 62
    28a0:	64 97       	sbiw	r28, 0x14	; 20
    28a2:	0f b6       	in	r0, 0x3f	; 63
    28a4:	f8 94       	cli
    28a6:	de bf       	out	0x3e, r29	; 62
    28a8:	0f be       	out	0x3f, r0	; 63
    28aa:	cd bf       	out	0x3d, r28	; 61
    28ac:	69 8b       	std	Y+17, r22	; 0x11
    28ae:	7a 8b       	std	Y+18, r23	; 0x12
    28b0:	8b 8b       	std	Y+19, r24	; 0x13
    28b2:	9c 8b       	std	Y+20, r25	; 0x14
   char buff[16]; /* String to hold the ASCII result */
   itoa(data, buff, 10); /* 10 for decimal */
    28b4:	89 89       	ldd	r24, Y+17	; 0x11
    28b6:	9a 89       	ldd	r25, Y+18	; 0x12
    28b8:	9e 01       	movw	r18, r28
    28ba:	2f 5f       	subi	r18, 0xFF	; 255
    28bc:	3f 4f       	sbci	r19, 0xFF	; 255
    28be:	b9 01       	movw	r22, r18
    28c0:	4a e0       	ldi	r20, 0x0A	; 10
    28c2:	50 e0       	ldi	r21, 0x00	; 0
    28c4:	0e 94 2c 15 	call	0x2a58	; 0x2a58 <itoa>
   LCD_displayString(buff);
    28c8:	ce 01       	movw	r24, r28
    28ca:	01 96       	adiw	r24, 0x01	; 1
    28cc:	0e 94 c8 13 	call	0x2790	; 0x2790 <LCD_displayString>
}
    28d0:	64 96       	adiw	r28, 0x14	; 20
    28d2:	0f b6       	in	r0, 0x3f	; 63
    28d4:	f8 94       	cli
    28d6:	de bf       	out	0x3e, r29	; 62
    28d8:	0f be       	out	0x3f, r0	; 63
    28da:	cd bf       	out	0x3d, r28	; 61
    28dc:	cf 91       	pop	r28
    28de:	df 91       	pop	r29
    28e0:	08 95       	ret

000028e2 <LCD_clearScreen>:

void LCD_clearScreen(void)
{
    28e2:	df 93       	push	r29
    28e4:	cf 93       	push	r28
    28e6:	cd b7       	in	r28, 0x3d	; 61
    28e8:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND); /* Clear display */
    28ea:	81 e0       	ldi	r24, 0x01	; 1
    28ec:	0e 94 8e 0b 	call	0x171c	; 0x171c <LCD_sendCommand>
}
    28f0:	cf 91       	pop	r28
    28f2:	df 91       	pop	r29
    28f4:	08 95       	ret

000028f6 <App_init>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 *******************************************************************************/
void App_init(void)
{
    28f6:	df 93       	push	r29
    28f8:	cf 93       	push	r28
    28fa:	cd b7       	in	r28, 0x3d	; 61
    28fc:	de b7       	in	r29, 0x3e	; 62
    28fe:	2b 97       	sbiw	r28, 0x0b	; 11
    2900:	0f b6       	in	r0, 0x3f	; 63
    2902:	f8 94       	cli
    2904:	de bf       	out	0x3e, r29	; 62
    2906:	0f be       	out	0x3f, r0	; 63
    2908:	cd bf       	out	0x3d, r28	; 61
	LCD_init();	/* Initialize LCD Driver */
    290a:	0e 94 6d 0b 	call	0x16da	; 0x16da <LCD_init>

	TWI_ConfigType twi_config = {SLAVE_ADDRESS, SCL_FREQ_400KBPS, PRESCALER_1};
    290e:	ce 01       	movw	r24, r28
    2910:	01 96       	adiw	r24, 0x01	; 1
    2912:	98 87       	std	Y+8, r25	; 0x08
    2914:	8f 83       	std	Y+7, r24	; 0x07
    2916:	e8 e6       	ldi	r30, 0x68	; 104
    2918:	f0 e0       	ldi	r31, 0x00	; 0
    291a:	fa 87       	std	Y+10, r31	; 0x0a
    291c:	e9 87       	std	Y+9, r30	; 0x09
    291e:	f6 e0       	ldi	r31, 0x06	; 6
    2920:	fb 87       	std	Y+11, r31	; 0x0b
    2922:	e9 85       	ldd	r30, Y+9	; 0x09
    2924:	fa 85       	ldd	r31, Y+10	; 0x0a
    2926:	00 80       	ld	r0, Z
    2928:	89 85       	ldd	r24, Y+9	; 0x09
    292a:	9a 85       	ldd	r25, Y+10	; 0x0a
    292c:	01 96       	adiw	r24, 0x01	; 1
    292e:	9a 87       	std	Y+10, r25	; 0x0a
    2930:	89 87       	std	Y+9, r24	; 0x09
    2932:	ef 81       	ldd	r30, Y+7	; 0x07
    2934:	f8 85       	ldd	r31, Y+8	; 0x08
    2936:	00 82       	st	Z, r0
    2938:	8f 81       	ldd	r24, Y+7	; 0x07
    293a:	98 85       	ldd	r25, Y+8	; 0x08
    293c:	01 96       	adiw	r24, 0x01	; 1
    293e:	98 87       	std	Y+8, r25	; 0x08
    2940:	8f 83       	std	Y+7, r24	; 0x07
    2942:	9b 85       	ldd	r25, Y+11	; 0x0b
    2944:	91 50       	subi	r25, 0x01	; 1
    2946:	9b 87       	std	Y+11, r25	; 0x0b
    2948:	eb 85       	ldd	r30, Y+11	; 0x0b
    294a:	ee 23       	and	r30, r30
    294c:	51 f7       	brne	.-44     	; 0x2922 <App_init+0x2c>
	TWI_init(&twi_config);	/* Initialize Master I2C */
    294e:	ce 01       	movw	r24, r28
    2950:	01 96       	adiw	r24, 0x01	; 1
    2952:	0e 94 a3 05 	call	0xb46	; 0xb46 <TWI_init>
}
    2956:	2b 96       	adiw	r28, 0x0b	; 11
    2958:	0f b6       	in	r0, 0x3f	; 63
    295a:	f8 94       	cli
    295c:	de bf       	out	0x3e, r29	; 62
    295e:	0f be       	out	0x3f, r0	; 63
    2960:	cd bf       	out	0x3d, r28	; 61
    2962:	cf 91       	pop	r28
    2964:	df 91       	pop	r29
    2966:	08 95       	ret

00002968 <App_Update>:
 * [in/out]		 	None
 *
 * [Returns]:       None
 *******************************************************************************/
void App_Update(void)
{
    2968:	df 93       	push	r29
    296a:	cf 93       	push	r28
    296c:	cd b7       	in	r28, 0x3d	; 61
    296e:	de b7       	in	r29, 0x3e	; 62
    2970:	02 c0       	rjmp	.+4      	; 0x2976 <App_Update+0xe>
	while(TWI_getStatus() != TW_SLA_DATA_ACK)
	{
		TWI_start();
    2972:	0e 94 11 06 	call	0xc22	; 0xc22 <TWI_start>
 *
 * [Returns]:       None
 *******************************************************************************/
void App_Update(void)
{
	while(TWI_getStatus() != TW_SLA_DATA_ACK)
    2976:	0e 94 71 06 	call	0xce2	; 0xce2 <TWI_getStatus>
    297a:	80 36       	cpi	r24, 0x60	; 96
    297c:	d1 f7       	brne	.-12     	; 0x2972 <App_Update+0xa>
	{
		TWI_start();
	}

	gStr_message = TWI_readWithACK();	/* Read the data sent by the Master MCU */
    297e:	0e 94 43 06 	call	0xc86	; 0xc86 <TWI_readWithACK>
    2982:	80 93 6e 00 	sts	0x006E, r24

	LCD_displayCharacter(gStr_message);	/* Display the character on the LCD */
    2986:	80 91 6e 00 	lds	r24, 0x006E
    298a:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <LCD_displayCharacter>
}
    298e:	cf 91       	pop	r28
    2990:	df 91       	pop	r29
    2992:	08 95       	ret

00002994 <main>:
/*****************************************************************************************
 *                                MAIN FUNCTION                                          *
 *****************************************************************************************/

int main(void)
{
    2994:	df 93       	push	r29
    2996:	cf 93       	push	r28
    2998:	cd b7       	in	r28, 0x3d	; 61
    299a:	de b7       	in	r29, 0x3e	; 62
	/********************************************************************************
	 *                           SYSTEM INITIALIZATION                              *
	 ********************************************************************************/

	App_init();	/* Initialize the application */
    299c:	0e 94 7b 14 	call	0x28f6	; 0x28f6 <App_init>
	 *                        APPLICATION	(SUPER LOOP)						    *
	 ********************************************************************************/

	while(1)
	{
		App_Update();
    29a0:	0e 94 b4 14 	call	0x2968	; 0x2968 <App_Update>
    29a4:	fd cf       	rjmp	.-6      	; 0x29a0 <main+0xc>

000029a6 <__udivmodsi4>:
    29a6:	a1 e2       	ldi	r26, 0x21	; 33
    29a8:	1a 2e       	mov	r1, r26
    29aa:	aa 1b       	sub	r26, r26
    29ac:	bb 1b       	sub	r27, r27
    29ae:	fd 01       	movw	r30, r26
    29b0:	0d c0       	rjmp	.+26     	; 0x29cc <__udivmodsi4_ep>

000029b2 <__udivmodsi4_loop>:
    29b2:	aa 1f       	adc	r26, r26
    29b4:	bb 1f       	adc	r27, r27
    29b6:	ee 1f       	adc	r30, r30
    29b8:	ff 1f       	adc	r31, r31
    29ba:	a2 17       	cp	r26, r18
    29bc:	b3 07       	cpc	r27, r19
    29be:	e4 07       	cpc	r30, r20
    29c0:	f5 07       	cpc	r31, r21
    29c2:	20 f0       	brcs	.+8      	; 0x29cc <__udivmodsi4_ep>
    29c4:	a2 1b       	sub	r26, r18
    29c6:	b3 0b       	sbc	r27, r19
    29c8:	e4 0b       	sbc	r30, r20
    29ca:	f5 0b       	sbc	r31, r21

000029cc <__udivmodsi4_ep>:
    29cc:	66 1f       	adc	r22, r22
    29ce:	77 1f       	adc	r23, r23
    29d0:	88 1f       	adc	r24, r24
    29d2:	99 1f       	adc	r25, r25
    29d4:	1a 94       	dec	r1
    29d6:	69 f7       	brne	.-38     	; 0x29b2 <__udivmodsi4_loop>
    29d8:	60 95       	com	r22
    29da:	70 95       	com	r23
    29dc:	80 95       	com	r24
    29de:	90 95       	com	r25
    29e0:	9b 01       	movw	r18, r22
    29e2:	ac 01       	movw	r20, r24
    29e4:	bd 01       	movw	r22, r26
    29e6:	cf 01       	movw	r24, r30
    29e8:	08 95       	ret

000029ea <__prologue_saves__>:
    29ea:	2f 92       	push	r2
    29ec:	3f 92       	push	r3
    29ee:	4f 92       	push	r4
    29f0:	5f 92       	push	r5
    29f2:	6f 92       	push	r6
    29f4:	7f 92       	push	r7
    29f6:	8f 92       	push	r8
    29f8:	9f 92       	push	r9
    29fa:	af 92       	push	r10
    29fc:	bf 92       	push	r11
    29fe:	cf 92       	push	r12
    2a00:	df 92       	push	r13
    2a02:	ef 92       	push	r14
    2a04:	ff 92       	push	r15
    2a06:	0f 93       	push	r16
    2a08:	1f 93       	push	r17
    2a0a:	cf 93       	push	r28
    2a0c:	df 93       	push	r29
    2a0e:	cd b7       	in	r28, 0x3d	; 61
    2a10:	de b7       	in	r29, 0x3e	; 62
    2a12:	ca 1b       	sub	r28, r26
    2a14:	db 0b       	sbc	r29, r27
    2a16:	0f b6       	in	r0, 0x3f	; 63
    2a18:	f8 94       	cli
    2a1a:	de bf       	out	0x3e, r29	; 62
    2a1c:	0f be       	out	0x3f, r0	; 63
    2a1e:	cd bf       	out	0x3d, r28	; 61
    2a20:	09 94       	ijmp

00002a22 <__epilogue_restores__>:
    2a22:	2a 88       	ldd	r2, Y+18	; 0x12
    2a24:	39 88       	ldd	r3, Y+17	; 0x11
    2a26:	48 88       	ldd	r4, Y+16	; 0x10
    2a28:	5f 84       	ldd	r5, Y+15	; 0x0f
    2a2a:	6e 84       	ldd	r6, Y+14	; 0x0e
    2a2c:	7d 84       	ldd	r7, Y+13	; 0x0d
    2a2e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2a30:	9b 84       	ldd	r9, Y+11	; 0x0b
    2a32:	aa 84       	ldd	r10, Y+10	; 0x0a
    2a34:	b9 84       	ldd	r11, Y+9	; 0x09
    2a36:	c8 84       	ldd	r12, Y+8	; 0x08
    2a38:	df 80       	ldd	r13, Y+7	; 0x07
    2a3a:	ee 80       	ldd	r14, Y+6	; 0x06
    2a3c:	fd 80       	ldd	r15, Y+5	; 0x05
    2a3e:	0c 81       	ldd	r16, Y+4	; 0x04
    2a40:	1b 81       	ldd	r17, Y+3	; 0x03
    2a42:	aa 81       	ldd	r26, Y+2	; 0x02
    2a44:	b9 81       	ldd	r27, Y+1	; 0x01
    2a46:	ce 0f       	add	r28, r30
    2a48:	d1 1d       	adc	r29, r1
    2a4a:	0f b6       	in	r0, 0x3f	; 63
    2a4c:	f8 94       	cli
    2a4e:	de bf       	out	0x3e, r29	; 62
    2a50:	0f be       	out	0x3f, r0	; 63
    2a52:	cd bf       	out	0x3d, r28	; 61
    2a54:	ed 01       	movw	r28, r26
    2a56:	08 95       	ret

00002a58 <itoa>:
    2a58:	fb 01       	movw	r30, r22
    2a5a:	9f 01       	movw	r18, r30
    2a5c:	e8 94       	clt
    2a5e:	42 30       	cpi	r20, 0x02	; 2
    2a60:	c4 f0       	brlt	.+48     	; 0x2a92 <itoa+0x3a>
    2a62:	45 32       	cpi	r20, 0x25	; 37
    2a64:	b4 f4       	brge	.+44     	; 0x2a92 <itoa+0x3a>
    2a66:	4a 30       	cpi	r20, 0x0A	; 10
    2a68:	29 f4       	brne	.+10     	; 0x2a74 <itoa+0x1c>
    2a6a:	97 fb       	bst	r25, 7
    2a6c:	1e f4       	brtc	.+6      	; 0x2a74 <itoa+0x1c>
    2a6e:	90 95       	com	r25
    2a70:	81 95       	neg	r24
    2a72:	9f 4f       	sbci	r25, 0xFF	; 255
    2a74:	64 2f       	mov	r22, r20
    2a76:	77 27       	eor	r23, r23
    2a78:	0e 94 5d 15 	call	0x2aba	; 0x2aba <__udivmodhi4>
    2a7c:	80 5d       	subi	r24, 0xD0	; 208
    2a7e:	8a 33       	cpi	r24, 0x3A	; 58
    2a80:	0c f0       	brlt	.+2      	; 0x2a84 <itoa+0x2c>
    2a82:	89 5d       	subi	r24, 0xD9	; 217
    2a84:	81 93       	st	Z+, r24
    2a86:	cb 01       	movw	r24, r22
    2a88:	00 97       	sbiw	r24, 0x00	; 0
    2a8a:	a1 f7       	brne	.-24     	; 0x2a74 <itoa+0x1c>
    2a8c:	16 f4       	brtc	.+4      	; 0x2a92 <itoa+0x3a>
    2a8e:	5d e2       	ldi	r21, 0x2D	; 45
    2a90:	51 93       	st	Z+, r21
    2a92:	10 82       	st	Z, r1
    2a94:	c9 01       	movw	r24, r18
    2a96:	0c 94 4d 15 	jmp	0x2a9a	; 0x2a9a <strrev>

00002a9a <strrev>:
    2a9a:	dc 01       	movw	r26, r24
    2a9c:	fc 01       	movw	r30, r24
    2a9e:	67 2f       	mov	r22, r23
    2aa0:	71 91       	ld	r23, Z+
    2aa2:	77 23       	and	r23, r23
    2aa4:	e1 f7       	brne	.-8      	; 0x2a9e <strrev+0x4>
    2aa6:	32 97       	sbiw	r30, 0x02	; 2
    2aa8:	04 c0       	rjmp	.+8      	; 0x2ab2 <strrev+0x18>
    2aaa:	7c 91       	ld	r23, X
    2aac:	6d 93       	st	X+, r22
    2aae:	70 83       	st	Z, r23
    2ab0:	62 91       	ld	r22, -Z
    2ab2:	ae 17       	cp	r26, r30
    2ab4:	bf 07       	cpc	r27, r31
    2ab6:	c8 f3       	brcs	.-14     	; 0x2aaa <strrev+0x10>
    2ab8:	08 95       	ret

00002aba <__udivmodhi4>:
    2aba:	aa 1b       	sub	r26, r26
    2abc:	bb 1b       	sub	r27, r27
    2abe:	51 e1       	ldi	r21, 0x11	; 17
    2ac0:	07 c0       	rjmp	.+14     	; 0x2ad0 <__udivmodhi4_ep>

00002ac2 <__udivmodhi4_loop>:
    2ac2:	aa 1f       	adc	r26, r26
    2ac4:	bb 1f       	adc	r27, r27
    2ac6:	a6 17       	cp	r26, r22
    2ac8:	b7 07       	cpc	r27, r23
    2aca:	10 f0       	brcs	.+4      	; 0x2ad0 <__udivmodhi4_ep>
    2acc:	a6 1b       	sub	r26, r22
    2ace:	b7 0b       	sbc	r27, r23

00002ad0 <__udivmodhi4_ep>:
    2ad0:	88 1f       	adc	r24, r24
    2ad2:	99 1f       	adc	r25, r25
    2ad4:	5a 95       	dec	r21
    2ad6:	a9 f7       	brne	.-22     	; 0x2ac2 <__udivmodhi4_loop>
    2ad8:	80 95       	com	r24
    2ada:	90 95       	com	r25
    2adc:	bc 01       	movw	r22, r24
    2ade:	cd 01       	movw	r24, r26
    2ae0:	08 95       	ret

00002ae2 <_exit>:
    2ae2:	f8 94       	cli

00002ae4 <__stop_program>:
    2ae4:	ff cf       	rjmp	.-2      	; 0x2ae4 <__stop_program>
